
Temp_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000652  00800200  0000522e  000052c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000522e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000011c7  00800852  00800852  00005914  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005914  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  000059e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d832  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038d5  00000000  00000000  00013cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069bc  00000000  00000000  000175c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000218c  00000000  00000000  0001df84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000408f  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b554  00000000  00000000  0002419f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  0002f6f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c2       	rjmp	.+1038   	; 0x410 <__ctors_end>
       2:	00 00       	nop
       4:	25 c2       	rjmp	.+1098   	; 0x450 <__bad_interrupt>
       6:	00 00       	nop
       8:	23 c2       	rjmp	.+1094   	; 0x450 <__bad_interrupt>
       a:	00 00       	nop
       c:	21 c2       	rjmp	.+1090   	; 0x450 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c2       	rjmp	.+1086   	; 0x450 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c2       	rjmp	.+1082   	; 0x450 <__bad_interrupt>
      16:	00 00       	nop
      18:	1b c2       	rjmp	.+1078   	; 0x450 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	19 c2       	rjmp	.+1074   	; 0x450 <__bad_interrupt>
      1e:	00 00       	nop
      20:	17 c2       	rjmp	.+1070   	; 0x450 <__bad_interrupt>
      22:	00 00       	nop
      24:	15 c2       	rjmp	.+1066   	; 0x450 <__bad_interrupt>
      26:	00 00       	nop
      28:	13 c2       	rjmp	.+1062   	; 0x450 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c2       	rjmp	.+1058   	; 0x450 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bf c7       	rjmp	.+3966   	; 0xfb0 <__vector_12>
      32:	00 00       	nop
      34:	0d c2       	rjmp	.+1050   	; 0x450 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c2       	rjmp	.+1046   	; 0x450 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c2       	rjmp	.+1042   	; 0x450 <__bad_interrupt>
      3e:	00 00       	nop
      40:	07 c2       	rjmp	.+1038   	; 0x450 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c2       	rjmp	.+1034   	; 0x450 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c2       	rjmp	.+1030   	; 0x450 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c2       	rjmp	.+1026   	; 0x450 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c1       	rjmp	.+1022   	; 0x450 <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c1       	rjmp	.+1018   	; 0x450 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c1       	rjmp	.+1014   	; 0x450 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f9 c1       	rjmp	.+1010   	; 0x450 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f7 c1       	rjmp	.+1006   	; 0x450 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__vector_25>
      68:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__vector_26>
      6c:	f1 c1       	rjmp	.+994    	; 0x450 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ef c1       	rjmp	.+990    	; 0x450 <__bad_interrupt>
      72:	00 00       	nop
      74:	ed c1       	rjmp	.+986    	; 0x450 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c1       	rjmp	.+982    	; 0x450 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c1       	rjmp	.+978    	; 0x450 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e7 c1       	rjmp	.+974    	; 0x450 <__bad_interrupt>
      82:	00 00       	nop
      84:	e5 c1       	rjmp	.+970    	; 0x450 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c1       	rjmp	.+966    	; 0x450 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 c1       	rjmp	.+962    	; 0x450 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__vector_36>
      94:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__vector_37>
      98:	db c1       	rjmp	.+950    	; 0x450 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__vector_39>
      a0:	d7 c1       	rjmp	.+942    	; 0x450 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c1       	rjmp	.+938    	; 0x450 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d3 c1       	rjmp	.+934    	; 0x450 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d1 c1       	rjmp	.+930    	; 0x450 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cf c1       	rjmp	.+926    	; 0x450 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cd c1       	rjmp	.+922    	; 0x450 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cb c1       	rjmp	.+918    	; 0x450 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c9 c1       	rjmp	.+914    	; 0x450 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c7 c1       	rjmp	.+910    	; 0x450 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c5 c1       	rjmp	.+906    	; 0x450 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c3 c1       	rjmp	.+902    	; 0x450 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__vector_51>
      d0:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__vector_52>
      d4:	bd c1       	rjmp	.+890    	; 0x450 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <__vector_54>
      dc:	0c 94 20 20 	jmp	0x4040	; 0x4040 <__vector_55>
      e0:	b7 c1       	rjmp	.+878    	; 0x450 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	ae 21       	and	r26, r14
      fa:	1e 22       	and	r1, r30
      fc:	1e 22       	and	r1, r30
      fe:	1e 22       	and	r1, r30
     100:	1e 22       	and	r1, r30
     102:	1e 22       	and	r1, r30
     104:	1e 22       	and	r1, r30
     106:	1e 22       	and	r1, r30
     108:	ae 21       	and	r26, r14
     10a:	1e 22       	and	r1, r30
     10c:	1e 22       	and	r1, r30
     10e:	1e 22       	and	r1, r30
     110:	1e 22       	and	r1, r30
     112:	1e 22       	and	r1, r30
     114:	1e 22       	and	r1, r30
     116:	1e 22       	and	r1, r30
     118:	b0 21       	and	r27, r0
     11a:	1e 22       	and	r1, r30
     11c:	1e 22       	and	r1, r30
     11e:	1e 22       	and	r1, r30
     120:	1e 22       	and	r1, r30
     122:	1e 22       	and	r1, r30
     124:	1e 22       	and	r1, r30
     126:	1e 22       	and	r1, r30
     128:	1e 22       	and	r1, r30
     12a:	1e 22       	and	r1, r30
     12c:	1e 22       	and	r1, r30
     12e:	1e 22       	and	r1, r30
     130:	1e 22       	and	r1, r30
     132:	1e 22       	and	r1, r30
     134:	1e 22       	and	r1, r30
     136:	1e 22       	and	r1, r30
     138:	b0 21       	and	r27, r0
     13a:	1e 22       	and	r1, r30
     13c:	1e 22       	and	r1, r30
     13e:	1e 22       	and	r1, r30
     140:	1e 22       	and	r1, r30
     142:	1e 22       	and	r1, r30
     144:	1e 22       	and	r1, r30
     146:	1e 22       	and	r1, r30
     148:	1e 22       	and	r1, r30
     14a:	1e 22       	and	r1, r30
     14c:	1e 22       	and	r1, r30
     14e:	1e 22       	and	r1, r30
     150:	1e 22       	and	r1, r30
     152:	1e 22       	and	r1, r30
     154:	1e 22       	and	r1, r30
     156:	1e 22       	and	r1, r30
     158:	1a 22       	and	r1, r26
     15a:	1e 22       	and	r1, r30
     15c:	1e 22       	and	r1, r30
     15e:	1e 22       	and	r1, r30
     160:	1e 22       	and	r1, r30
     162:	1e 22       	and	r1, r30
     164:	1e 22       	and	r1, r30
     166:	1e 22       	and	r1, r30
     168:	e5 21       	and	r30, r5
     16a:	1e 22       	and	r1, r30
     16c:	1e 22       	and	r1, r30
     16e:	1e 22       	and	r1, r30
     170:	1e 22       	and	r1, r30
     172:	1e 22       	and	r1, r30
     174:	1e 22       	and	r1, r30
     176:	1e 22       	and	r1, r30
     178:	1e 22       	and	r1, r30
     17a:	1e 22       	and	r1, r30
     17c:	1e 22       	and	r1, r30
     17e:	1e 22       	and	r1, r30
     180:	1e 22       	and	r1, r30
     182:	1e 22       	and	r1, r30
     184:	1e 22       	and	r1, r30
     186:	1e 22       	and	r1, r30
     188:	d9 21       	and	r29, r9
     18a:	1e 22       	and	r1, r30
     18c:	1e 22       	and	r1, r30
     18e:	1e 22       	and	r1, r30
     190:	1e 22       	and	r1, r30
     192:	1e 22       	and	r1, r30
     194:	1e 22       	and	r1, r30
     196:	1e 22       	and	r1, r30
     198:	fd 21       	and	r31, r13

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	07 e2       	ldi	r16, 0x27	; 39
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	ff e4       	ldi	r31, 0x4F	; 79
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	58 d5       	rcall	.+2736   	; 0xc7c <uxListRemove>
     1cc:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <uxCurrentNumberOfTasks>
     1d6:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	b4 d4       	rcall	.+2408   	; 0xb52 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	b2 d4       	rcall	.+2404   	; 0xb52 <vPortFree>
     1ee:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	13 d6       	rcall	.+3110   	; 0xe26 <vPortYield>
     200:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <pxCurrentTimerList>
     22a:	f0 91 7e 18 	lds	r31, 0x187E	; 0x80187e <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d9 c0       	rjmp	.+434    	; 0x3e8 <prvTimerTask+0x1e2>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
     25c:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <pxCurrentTimerList>
     260:	f0 91 7e 18 	lds	r31, 0x187E	; 0x80187e <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	04 d5       	rcall	.+2568   	; 0xc7c <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 bd 14 	call	0x297a	; 0x297a <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
     2d0:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
     2d4:	0e 94 46 0b 	call	0x168c	; 0x168c <vQueueWaitForMessageRestricted>
     2d8:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	a2 d5       	rcall	.+2884   	; 0xe26 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	bb d4       	rcall	.+2422   	; 0xc7c <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 76 24 	jmp	0x48ec	; 0x48ec <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 bd 14 	call	0x297a	; 0x297a <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 bd 14 	call	0x297a	; 0x297a <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	c6 d3       	rcall	.+1932   	; 0xb52 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
     3da:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
     3de:	0e 94 01 0a 	call	0x1402	; 0x1402 <xQueueReceive>
     3e2:	81 11       	cpse	r24, r1
     3e4:	82 cf       	rjmp	.-252    	; 0x2ea <prvTimerTask+0xe4>
     3e6:	1f cf       	rjmp	.-450    	; 0x226 <prvTimerTask+0x20>
     3e8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
     3ec:	c4 01       	movw	r24, r8
     3ee:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <prvSampleTimeNow>
     3f2:	8c 01       	movw	r16, r24
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	81 11       	cpse	r24, r1
     3f8:	75 cf       	rjmp	.-278    	; 0x2e4 <prvTimerTask+0xde>
     3fa:	e0 91 7b 18 	lds	r30, 0x187B	; 0x80187b <pxOverflowTimerList>
     3fe:	f0 91 7c 18 	lds	r31, 0x187C	; 0x80187c <pxOverflowTimerList+0x1>
     402:	80 81       	ld	r24, Z
     404:	44 2d       	mov	r20, r4
     406:	81 11       	cpse	r24, r1
     408:	45 2d       	mov	r20, r5
     40a:	ae 2c       	mov	r10, r14
     40c:	bf 2c       	mov	r11, r15
     40e:	5b cf       	rjmp	.-330    	; 0x2c6 <prvTimerTask+0xc0>

00000410 <__ctors_end>:
     410:	11 24       	eor	r1, r1
     412:	1f be       	out	0x3f, r1	; 63
     414:	cf ef       	ldi	r28, 0xFF	; 255
     416:	d1 e2       	ldi	r29, 0x21	; 33
     418:	de bf       	out	0x3e, r29	; 62
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	00 e0       	ldi	r16, 0x00	; 0
     41e:	0c bf       	out	0x3c, r16	; 60

00000420 <__do_copy_data>:
     420:	18 e0       	ldi	r17, 0x08	; 8
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b2 e0       	ldi	r27, 0x02	; 2
     426:	ee e2       	ldi	r30, 0x2E	; 46
     428:	f2 e5       	ldi	r31, 0x52	; 82
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	0b bf       	out	0x3b, r16	; 59
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__do_copy_data+0x14>
     430:	07 90       	elpm	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	a2 35       	cpi	r26, 0x52	; 82
     436:	b1 07       	cpc	r27, r17
     438:	d9 f7       	brne	.-10     	; 0x430 <__do_copy_data+0x10>

0000043a <__do_clear_bss>:
     43a:	2a e1       	ldi	r18, 0x1A	; 26
     43c:	a2 e5       	ldi	r26, 0x52	; 82
     43e:	b8 e0       	ldi	r27, 0x08	; 8
     440:	01 c0       	rjmp	.+2      	; 0x444 <.do_clear_bss_start>

00000442 <.do_clear_bss_loop>:
     442:	1d 92       	st	X+, r1

00000444 <.do_clear_bss_start>:
     444:	a9 31       	cpi	r26, 0x19	; 25
     446:	b2 07       	cpc	r27, r18
     448:	e1 f7       	brne	.-8      	; 0x442 <.do_clear_bss_loop>
     44a:	07 d2       	rcall	.+1038   	; 0x85a <main>
     44c:	0c 94 15 29 	jmp	0x522a	; 0x522a <_exit>

00000450 <__bad_interrupt>:
     450:	d7 cd       	rjmp	.-1106   	; 0x0 <__vectors>

00000452 <getTemperature_Task>:
	

}

void getTemperature_Task(void *pvParameters)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	1f 92       	push	r1
     458:	1f 92       	push	r1
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
	uint16_t temperature = 0;
     45e:	1a 82       	std	Y+2, r1	; 0x02
     460:	19 82       	std	Y+1, r1	; 0x01
	{
		if (xSemaphoreTake(temperatureSemaphore,1000 / portTICK_PERIOD_MS))
		{
			temperatureHumidity_measure();
			temperature = temperatureGetValue();
			printf("temperature = %d \n", temperature);
     462:	0e e6       	ldi	r16, 0x6E	; 110
     464:	12 e0       	ldi	r17, 0x02	; 2
{
	uint16_t temperature = 0;
    
	for( ;; )
	{
		if (xSemaphoreTake(temperatureSemaphore,1000 / portTICK_PERIOD_MS))
     466:	6e e3       	ldi	r22, 0x3E	; 62
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <temperatureSemaphore>
     46e:	90 91 ec 19 	lds	r25, 0x19EC	; 0x8019ec <temperatureSemaphore+0x1>
     472:	0e 94 8a 0a 	call	0x1514	; 0x1514 <xQueueSemaphoreTake>
     476:	88 23       	and	r24, r24
     478:	21 f1       	breq	.+72     	; 0x4c2 <getTemperature_Task+0x70>
		{
			temperatureHumidity_measure();
     47a:	26 d2       	rcall	.+1100   	; 0x8c8 <temperatureHumidity_measure>
			temperature = temperatureGetValue();
     47c:	48 d2       	rcall	.+1168   	; 0x90e <temperatureGetValue>
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	9f 93       	push	r25
			printf("temperature = %d \n", temperature);
     484:	8f 93       	push	r24
     486:	1f 93       	push	r17
     488:	0f 93       	push	r16
     48a:	0e 94 f7 25 	call	0x4bee	; 0x4bee <printf>
     48e:	20 e0       	ldi	r18, 0x00	; 0
			
			xSemaphoreGive(temperatureSemaphore);
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <temperatureSemaphore>
     49c:	90 91 ec 19 	lds	r25, 0x19EC	; 0x8019ec <temperatureSemaphore+0x1>
     4a0:	cb d6       	rcall	.+3478   	; 0x1238 <xQueueGenericSend>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
			
			xQueueSend(
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5f       	subi	r22, 0xFF	; 255
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     4b2:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     4b6:	c0 d6       	rcall	.+3456   	; 0x1238 <xQueueGenericSend>
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <getTemperature_Task+0x78>
     4c2:	81 e8       	ldi	r24, 0x81	; 129
			
		}
		
		else
		{
			printf("temperature_task failed to get temperature\n");
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     4ca:	86 ea       	ldi	r24, 0xA6	; 166
		}
		vTaskDelay(60000 / portTICK_PERIOD_MS); // 5 second
     4cc:	9e e0       	ldi	r25, 0x0E	; 14
     4ce:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
     4d2:	c9 cf       	rjmp	.-110    	; 0x466 <getTemperature_Task+0x14>

000004d4 <getCo2_Task>:
		
	}
     4d4:	cf 93       	push	r28
}

void getCo2_Task(void *pvParameters)
{
     4d6:	df 93       	push	r29
     4d8:	1f 92       	push	r1
     4da:	1f 92       	push	r1
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
    uint16_t co2 = 0;
     4e0:	1a 82       	std	Y+2, r1	; 0x02
     4e2:	19 82       	std	Y+1, r1	; 0x01
	for( ;; )
	{
		if (xSemaphoreTake(co2Semaphore,1000 / portTICK_PERIOD_MS))
		{
			co2Sensor_measure();
			printf("co2 = %d \n", co2Sensor_getValue());
     4e4:	0c ea       	ldi	r16, 0xAC	; 172
     4e6:	12 e0       	ldi	r17, 0x02	; 2
{
    uint16_t co2 = 0;
	
	for( ;; )
	{
		if (xSemaphoreTake(co2Semaphore,1000 / portTICK_PERIOD_MS))
     4e8:	6e e3       	ldi	r22, 0x3E	; 62
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <co2Semaphore>
     4f0:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <co2Semaphore+0x1>
     4f4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <xQueueSemaphoreTake>
     4f8:	88 23       	and	r24, r24
     4fa:	11 f1       	breq	.+68     	; 0x540 <getCo2_Task+0x6c>
		{
			co2Sensor_measure();
     4fc:	cb d0       	rcall	.+406    	; 0x694 <co2Sensor_measure>
			printf("co2 = %d \n", co2Sensor_getValue());
     4fe:	d7 d0       	rcall	.+430    	; 0x6ae <co2Sensor_getValue>
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	1f 93       	push	r17
     506:	0f 93       	push	r16
     508:	0e 94 f7 25 	call	0x4bee	; 0x4bee <printf>
     50c:	20 e0       	ldi	r18, 0x00	; 0
			xSemaphoreGive(co2Semaphore);
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <co2Semaphore>
     51a:	90 91 f4 19 	lds	r25, 0x19F4	; 0x8019f4 <co2Semaphore+0x1>
     51e:	8c d6       	rcall	.+3352   	; 0x1238 <xQueueGenericSend>
     520:	20 e0       	ldi	r18, 0x00	; 0
			
			xQueueSend(
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	be 01       	movw	r22, r28
     528:	6f 5f       	subi	r22, 0xFF	; 255
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     530:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     534:	81 d6       	rcall	.+3330   	; 0x1238 <xQueueGenericSend>
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	04 c0       	rjmp	.+8      	; 0x548 <getCo2_Task+0x74>
     540:	87 eb       	ldi	r24, 0xB7	; 183
			0);
		}
		
		else
		{
			printf("co2_task failed to get co2Value\n");
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     548:	86 ea       	ldi	r24, 0xA6	; 166
		}
		vTaskDelay(60000 / portTICK_PERIOD_MS); // 5 seconds
     54a:	9e e0       	ldi	r25, 0x0E	; 14
     54c:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
     550:	cb cf       	rjmp	.-106    	; 0x4e8 <getCo2_Task+0x14>

00000552 <getHumidity_Task>:
	}
     552:	cf 93       	push	r28
}

void getHumidity_Task(void *pvParameters)
{
     554:	df 93       	push	r29
     556:	1f 92       	push	r1
     558:	1f 92       	push	r1
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
	
	uint16_t humidity = 0;
     55e:	1a 82       	std	Y+2, r1	; 0x02
     560:	19 82       	std	Y+1, r1	; 0x01
	for( ;; )
	{
		if (xSemaphoreTake(humiditySemaphore,1000 / portTICK_PERIOD_MS))
		{
			temperatureHumidity_measure();
			printf("humidity = %d \n", humidityGetValue());
     562:	07 ed       	ldi	r16, 0xD7	; 215
     564:	12 e0       	ldi	r17, 0x02	; 2
	
	uint16_t humidity = 0;

	for( ;; )
	{
		if (xSemaphoreTake(humiditySemaphore,1000 / portTICK_PERIOD_MS))
     566:	6e e3       	ldi	r22, 0x3E	; 62
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <humiditySemaphore>
     56e:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <humiditySemaphore+0x1>
     572:	d0 d7       	rcall	.+4000   	; 0x1514 <xQueueSemaphoreTake>
     574:	88 23       	and	r24, r24
     576:	11 f1       	breq	.+68     	; 0x5bc <getHumidity_Task+0x6a>
		{
			temperatureHumidity_measure();
     578:	a7 d1       	rcall	.+846    	; 0x8c8 <temperatureHumidity_measure>
			printf("humidity = %d \n", humidityGetValue());
     57a:	cc d1       	rcall	.+920    	; 0x914 <humidityGetValue>
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	1f 93       	push	r17
     582:	0f 93       	push	r16
     584:	0e 94 f7 25 	call	0x4bee	; 0x4bee <printf>
     588:	20 e0       	ldi	r18, 0x00	; 0
			xSemaphoreGive(humiditySemaphore);
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <humiditySemaphore>
     596:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <humiditySemaphore+0x1>
     59a:	4e d6       	rcall	.+3228   	; 0x1238 <xQueueGenericSend>
     59c:	20 e0       	ldi	r18, 0x00	; 0
			
			xQueueSend(
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     5ac:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     5b0:	43 d6       	rcall	.+3206   	; 0x1238 <xQueueGenericSend>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <getHumidity_Task+0x72>
     5bc:	87 ee       	ldi	r24, 0xE7	; 231
			0);
		}
		
		else
		{
			printf("getHumidity_task failed to get temperature\n");
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     5c4:	86 ea       	ldi	r24, 0xA6	; 166
		}
		vTaskDelay(60000 / portTICK_PERIOD_MS); // 5 second
     5c6:	9e e0       	ldi	r25, 0x0E	; 14
     5c8:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
     5cc:	cc cf       	rjmp	.-104    	; 0x566 <getHumidity_Task+0x14>

000005ce <lorawanSend_Task>:
	}
     5ce:	85 d0       	rcall	.+266    	; 0x6da <lorawanDevStart>
{
	lorawanDevStart();
	
	for( ;; )
	{
		if (xSemaphoreTake(lorawanSemaphore,1000 / portTICK_PERIOD_MS))
     5d0:	6e e3       	ldi	r22, 0x3E	; 62
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 91 f1 19 	lds	r24, 0x19F1	; 0x8019f1 <lorawanSemaphore>
     5d8:	90 91 f2 19 	lds	r25, 0x19F2	; 0x8019f2 <lorawanSemaphore+0x1>
     5dc:	9b d7       	rcall	.+3894   	; 0x1514 <xQueueSemaphoreTake>
     5de:	88 23       	and	r24, r24
		{
			lorawanDevSend_data();
     5e0:	81 f0       	breq	.+32     	; 0x602 <lorawanSend_Task+0x34>
     5e2:	d9 d0       	rcall	.+434    	; 0x796 <lorawanDevSend_data>
			printf("Data sent to Loriot!\n");
     5e4:	82 e1       	ldi	r24, 0x12	; 18
     5e6:	93 e0       	ldi	r25, 0x03	; 3
     5e8:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
			xSemaphoreGive(lorawanSemaphore);
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 91 f1 19 	lds	r24, 0x19F1	; 0x8019f1 <lorawanSemaphore>
     5fa:	90 91 f2 19 	lds	r25, 0x19F2	; 0x8019f2 <lorawanSemaphore+0x1>
     5fe:	1c d6       	rcall	.+3128   	; 0x1238 <xQueueGenericSend>
     600:	04 c0       	rjmp	.+8      	; 0x60a <lorawanSend_Task+0x3c>
		}
		
		else
		{
			printf("lorawanSend_task failed to send data\n");
     602:	87 e2       	ldi	r24, 0x27	; 39
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
		}
		vTaskDelay(60000 / portTICK_PERIOD_MS); // 60 second
     60a:	86 ea       	ldi	r24, 0xA6	; 166
     60c:	9e e0       	ldi	r25, 0x0E	; 14
     60e:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
	}
     612:	de cf       	rjmp	.-68     	; 0x5d0 <lorawanSend_Task+0x2>

00000614 <tasks_init>:
#include "Header/myQueues.h"



void tasks_init()
{
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
	
	
	
	xTaskCreate(
     61a:	e1 2c       	mov	r14, r1
     61c:	f1 2c       	mov	r15, r1
     61e:	02 e0       	ldi	r16, 0x02	; 2
     620:	21 e0       	ldi	r18, 0x01	; 1
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 ec       	ldi	r20, 0xC0	; 192
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	6c e4       	ldi	r22, 0x4C	; 76
     62a:	73 e0       	ldi	r23, 0x03	; 3
     62c:	89 e2       	ldi	r24, 0x29	; 41
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 2,
	NULL);
	
	xTaskCreate(
     634:	01 e0       	ldi	r16, 0x01	; 1
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 ec       	ldi	r20, 0xC0	; 192
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6c e6       	ldi	r22, 0x6C	; 108
     640:	73 e0       	ldi	r23, 0x03	; 3
     642:	8a e6       	ldi	r24, 0x6A	; 106
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 3,
	NULL);
	
	xTaskCreate(
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 ec       	ldi	r20, 0xC0	; 192
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	64 e8       	ldi	r22, 0x84	; 132
     656:	73 e0       	ldi	r23, 0x03	; 3
     658:	89 ea       	ldi	r24, 0xA9	; 169
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 4,
	NULL);
	
	xTaskCreate(
     660:	03 e0       	ldi	r16, 0x03	; 3
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 ec       	ldi	r20, 0xC0	; 192
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	61 ea       	ldi	r22, 0xA1	; 161
     66c:	73 e0       	ldi	r23, 0x03	; 3
     66e:	87 ee       	ldi	r24, 0xE7	; 231
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskCreate>
	configMAX_PRIORITIES - 1,
	NULL);

	

}
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	08 95       	ret

0000067e <co2Sensor_callback>:
	
}

void co2Sensor_callback(uint16_t ppm)
{
	co2PPM = ppm;
     67e:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <co2PPM+0x1>
     682:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <co2PPM>
     686:	08 95       	ret

00000688 <co2Sensor_init>:

uint16_t co2PPM;

void co2Sensor_init()
{
	mh_z19_create(ser_USART3, co2Sensor_callback);
     688:	6f e3       	ldi	r22, 0x3F	; 63
     68a:	73 e0       	ldi	r23, 0x03	; 3
     68c:	83 e0       	ldi	r24, 0x03	; 3
     68e:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <mh_z19_create>
     692:	08 95       	ret

00000694 <co2Sensor_measure>:
void co2Sensor_measure()
{
	
	mh_z19_return_code_t rc;
	uint16_t ppm;
	rc = mh_z19_take_meassuring();
     694:	0e 94 b6 1c 	call	0x396c	; 0x396c <mh_z19_take_meassuring>
	if (rc != MHZ19_OK)
     698:	88 23       	and	r24, r24
     69a:	41 f0       	breq	.+16     	; 0x6ac <co2Sensor_measure+0x18>
	{
		printf("Something Wrong");
     69c:	8e eb       	ldi	r24, 0xBE	; 190
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 f7 25 	call	0x4bee	; 0x4bee <printf>
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	08 95       	ret

000006ae <co2Sensor_getValue>:
}

uint16_t co2Sensor_getValue()
{
	return co2PPM;
     6ae:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <co2PPM>
     6b2:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <co2PPM+0x1>
     6b6:	08 95       	ret

000006b8 <lorawanDev_init>:


#define LORA_INIT_TASK_PRIORITY 7
void lorawanDev_init()
{
	hal_create(LORA_INIT_TASK_PRIORITY+1);
     6b8:	88 e0       	ldi	r24, 0x08	; 8
     6ba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <hal_create>
	lora_driver_create(ser_USART1);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 ef 18 	call	0x31de	; 0x31de <lora_driver_create>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c4:	2a ea       	ldi	r18, 0xAA	; 170
     6c6:	36 ee       	ldi	r19, 0xE6	; 230
     6c8:	86 e9       	ldi	r24, 0x96	; 150
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	30 40       	sbci	r19, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	d9 f7       	brne	.-10     	; 0x6cc <lorawanDev_init+0x14>
     6d6:	00 00       	nop
     6d8:	08 95       	ret

000006da <lorawanDevStart>:
}

void lorawanDevStart()
{
	
	queue_create();
     6da:	cb d0       	rcall	.+406    	; 0x872 <queue_create>
     6dc:	2a ea       	ldi	r18, 0xAA	; 170
     6de:	36 ee       	ldi	r19, 0xE6	; 230
     6e0:	86 e9       	ldi	r24, 0x96	; 150
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	21 50       	subi	r18, 0x01	; 1
     6e6:	30 40       	sbci	r19, 0x00	; 0
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	d9 f7       	brne	.-10     	; 0x6e4 <lorawanDevStart+0xa>
     6ee:	00 00       	nop
	_delay_ms(10000);
	lora_driver_reset_rn2483(1);
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 2b 19 	call	0x3256	; 0x3256 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
	lora_driver_reset_rn2483(0);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 2b 19 	call	0x3256	; 0x3256 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     704:	86 e9       	ldi	r24, 0x96	; 150
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskDelay>
	lora_driver_flush_buffers();
     70c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <lora_driver_flush_buffers>
	
	if (lora_driver_rn2483_factory_reset() != LoRA_OK)
     710:	0e 94 3f 19 	call	0x327e	; 0x327e <lora_driver_rn2483_factory_reset>
     714:	88 23       	and	r24, r24
     716:	21 f0       	breq	.+8      	; 0x720 <lorawanDevStart+0x46>
	{
		printf("FACTORY RESET ERROR\n");
     718:	8e ec       	ldi	r24, 0xCE	; 206
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
	}
	
	if (lora_driver_configure_to_eu868() != LoRA_OK)
     720:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <lora_driver_configure_to_eu868>
     724:	88 23       	and	r24, r24
     726:	21 f0       	breq	.+8      	; 0x730 <lorawanDevStart+0x56>
	{
		printf("lora_Configure error\n");
     728:	82 ee       	ldi	r24, 0xE2	; 226
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
	}
	
	static char dev_eui[17];
	if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
     730:	82 e5       	ldi	r24, 0x52	; 82
     732:	98 e0       	ldi	r25, 0x08	; 8
     734:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lora_driver_get_rn2483_hweui>
     738:	88 23       	and	r24, r24
     73a:	41 f0       	breq	.+16     	; 0x74c <lorawanDevStart+0x72>
	{
		printf("lora_driver_get_rn2483_hweui error");
     73c:	87 ef       	ldi	r24, 0xF7	; 247
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	0e 94 f7 25 	call	0x4bee	; 0x4bee <printf>
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
	}
	
	if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
     74c:	42 e5       	ldi	r20, 0x52	; 82
     74e:	58 e0       	ldi	r21, 0x08	; 8
     750:	6a e1       	ldi	r22, 0x1A	; 26
     752:	74 e0       	ldi	r23, 0x04	; 4
     754:	8b e3       	ldi	r24, 0x3B	; 59
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 4a 1b 	call	0x3694	; 0x3694 <lora_driver_set_otaa_identity>
     75c:	88 23       	and	r24, r24
     75e:	21 f0       	breq	.+8      	; 0x768 <lorawanDevStart+0x8e>
	{
		printf("lora_driver_set_otaa_identity error\n");
     760:	8c e4       	ldi	r24, 0x4C	; 76
     762:	94 e0       	ldi	r25, 0x04	; 4
     764:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
	
	e_LoRa_return_code_t rc;
	
	while(rc != LoRa_ACCEPTED)
	{
		printf("LORAWAN device is not connected\n");
     768:	80 e7       	ldi	r24, 0x70	; 112
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
		rc = lora_driver_join(LoRa_OTAA);
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 a6 19 	call	0x334c	; 0x334c <lora_driver_join>
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	33 ed       	ldi	r19, 0xD3	; 211
     77a:	90 e3       	ldi	r25, 0x30	; 48
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	30 40       	sbci	r19, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <lorawanDevStart+0xa2>
     784:	00 c0       	rjmp	.+0      	; 0x786 <lorawanDevStart+0xac>
     786:	00 00       	nop
	}
	
	
	e_LoRa_return_code_t rc;
	
	while(rc != LoRa_ACCEPTED)
     788:	88 30       	cpi	r24, 0x08	; 8
     78a:	71 f7       	brne	.-36     	; 0x768 <lorawanDevStart+0x8e>
		printf("LORAWAN device is not connected\n");
		rc = lora_driver_join(LoRa_OTAA);
		_delay_ms(1000);
	}
	
	printf("LORAWAN device is connected \n");
     78c:	80 e9       	ldi	r24, 0x90	; 144
     78e:	94 e0       	ldi	r25, 0x04	; 4
     790:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <puts>
     794:	08 95       	ret

00000796 <lorawanDevSend_data>:
	
	
}

void lorawanDevSend_data()
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	6c 97       	sbiw	r28, 0x1c	; 28
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
	
	uint16_t tTemperature = xQueueReceive(payloadQueue, // queue handle
     7aa:	4f ef       	ldi	r20, 0xFF	; 255
     7ac:	5f ef       	ldi	r21, 0xFF	; 255
     7ae:	be 01       	movw	r22, r28
     7b0:	6f 5f       	subi	r22, 0xFF	; 255
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     7b8:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     7bc:	22 d6       	rcall	.+3140   	; 0x1402 <xQueueReceive>
     7be:	08 2e       	mov	r0, r24
     7c0:	00 0c       	add	r0, r0
     7c2:	99 0b       	sbc	r25, r25
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	89 83       	std	Y+1, r24	; 0x01
									  &tTemperature, // address of temperature placeholder
									  portMAX_DELAY);
	uint16_t tCO2 = xQueueReceive(payloadQueue, // queue handle
     7c8:	4f ef       	ldi	r20, 0xFF	; 255
     7ca:	5f ef       	ldi	r21, 0xFF	; 255
     7cc:	be 01       	movw	r22, r28
     7ce:	6d 5f       	subi	r22, 0xFD	; 253
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     7d6:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     7da:	13 d6       	rcall	.+3110   	; 0x1402 <xQueueReceive>
     7dc:	08 2e       	mov	r0, r24
     7de:	00 0c       	add	r0, r0
     7e0:	99 0b       	sbc	r25, r25
     7e2:	9c 83       	std	Y+4, r25	; 0x04
     7e4:	8b 83       	std	Y+3, r24	; 0x03
									  &tCO2, // address of temperature placeholder
									  portMAX_DELAY);
    uint16_t tHumidity = xQueueReceive(payloadQueue, // queue handle
     7e6:	4f ef       	ldi	r20, 0xFF	; 255
     7e8:	5f ef       	ldi	r21, 0xFF	; 255
     7ea:	be 01       	movw	r22, r28
     7ec:	6b 5f       	subi	r22, 0xFB	; 251
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <payloadQueue>
     7f4:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <payloadQueue+0x1>
     7f8:	04 d6       	rcall	.+3080   	; 0x1402 <xQueueReceive>
     7fa:	28 2f       	mov	r18, r24
     7fc:	08 2e       	mov	r0, r24
     7fe:	00 0c       	add	r0, r0
     800:	33 0b       	sbc	r19, r19
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	2d 83       	std	Y+5, r18	; 0x05
									  &tHumidity, // address of temperature placeholder
								      portMAX_DELAY);
	
	lora_payload_t uplink_payload;
	
	uplink_payload.len = 6; // Length of the actual payload
     806:	96 e0       	ldi	r25, 0x06	; 6
     808:	98 87       	std	Y+8, r25	; 0x08
	uplink_payload.port_no = 1; // The LoRaWAN port no to sent the message to
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	9f 83       	std	Y+7, r25	; 0x07
	uplink_payload.bytes[0] = tHumidity >> 8;
     80e:	39 87       	std	Y+9, r19	; 0x09
	uplink_payload.bytes[1] = tHumidity & 0xFF;
     810:	8a 87       	std	Y+10, r24	; 0x0a
	uplink_payload.bytes[2] = tTemperature >> 8;
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	9b 87       	std	Y+11, r25	; 0x0b
	uplink_payload.bytes[3] = tTemperature & 0xFF;
     818:	8c 87       	std	Y+12, r24	; 0x0c
	uplink_payload.bytes[4] = tCO2 >> 8;
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	9d 87       	std	Y+13, r25	; 0x0d
	uplink_payload.bytes[5] = tCO2 & 0xFF;
     820:	8e 87       	std	Y+14, r24	; 0x0e
	
	e_LoRa_return_code_t rc;
	if ((rc = lora_driver_sent_upload_message(false, &uplink_payload)) == LoRa_MAC_TX_OK )
     822:	be 01       	movw	r22, r28
     824:	69 5f       	subi	r22, 0xF9	; 249
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 c9 19 	call	0x3392	; 0x3392 <lora_driver_sent_upload_message>
     82e:	8d 30       	cpi	r24, 0x0D	; 13
     830:	29 f4       	brne	.+10     	; 0x83c <lorawanDevSend_data+0xa6>
	{
		// The uplink message is sent and there is no downlink message received
		printf("The uplink message is sent and there is no downlink message received\n");
     832:	8d ea       	ldi	r24, 0xAD	; 173
     834:	94 e0       	ldi	r25, 0x04	; 4
     836:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     83a:	06 c0       	rjmp	.+12     	; 0x848 <lorawanDevSend_data+0xb2>
	}
	else if (rc == LoRa_MAC_RX_OK)
     83c:	8e 30       	cpi	r24, 0x0E	; 14
     83e:	21 f4       	brne	.+8      	; 0x848 <lorawanDevSend_data+0xb2>
	{
		// The uplink message is sent and a downlink message is received
		printf("The uplink message is sent and a downlink message is received\n");
     840:	82 ef       	ldi	r24, 0xF2	; 242
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
	}
	
	 
     848:	6c 96       	adiw	r28, 0x1c	; 28
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <main>:
#include "task.h"


int main(void)
{
	trace_init();
     85a:	5f d0       	rcall	.+190    	; 0x91a <trace_init>
	stdioCreate(0);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 82 20 	call	0x4104	; 0x4104 <stdioCreate>

	semaphore_init();
	
	temperatureHumiditySensor_init();
     862:	10 d0       	rcall	.+32     	; 0x884 <semaphore_init>
    co2Sensor_init();
     864:	28 d0       	rcall	.+80     	; 0x8b6 <temperatureHumiditySensor_init>
     866:	10 df       	rcall	.-480    	; 0x688 <co2Sensor_init>
	lorawanDev_init();
     868:	27 df       	rcall	.-434    	; 0x6b8 <lorawanDev_init>
     86a:	d4 de       	rcall	.-600    	; 0x614 <tasks_init>
    

	//printf("Program starts");
	
	tasks_init();
     86c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <vTaskStartScheduler>
	
	vTaskStartScheduler();
     870:	ff cf       	rjmp	.-2      	; 0x870 <main+0x16>

00000872 <queue_create>:
#include "Header/myQueues.h"


 void queue_create()
 {
	 payloadQueue = xQueueCreate(3, sizeof(uint16_t));
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	62 e0       	ldi	r22, 0x02	; 2
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	b1 d4       	rcall	.+2402   	; 0x11dc <xQueueGenericCreate>
     87a:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <payloadQueue+0x1>
     87e:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <payloadQueue>
     882:	08 95       	ret

00000884 <semaphore_init>:

#include "Header/semaphores.h"

void semaphore_init() 
{
	temperatureSemaphore = xSemaphoreCreateMutex();
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	6d d5       	rcall	.+2778   	; 0x1362 <xQueueCreateMutex>
     888:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <temperatureSemaphore+0x1>
     88c:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <temperatureSemaphore>
	co2Semaphore = xSemaphoreCreateMutex();
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	67 d5       	rcall	.+2766   	; 0x1362 <xQueueCreateMutex>
     894:	90 93 f4 19 	sts	0x19F4, r25	; 0x8019f4 <co2Semaphore+0x1>
     898:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <co2Semaphore>
	humiditySemaphore = xSemaphoreCreateMutex();
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	61 d5       	rcall	.+2754   	; 0x1362 <xQueueCreateMutex>
     8a0:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <humiditySemaphore+0x1>
     8a4:	80 93 ef 19 	sts	0x19EF, r24	; 0x8019ef <humiditySemaphore>
	lorawanSemaphore = xSemaphoreCreateMutex();
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	5b d5       	rcall	.+2742   	; 0x1362 <xQueueCreateMutex>
     8ac:	90 93 f2 19 	sts	0x19F2, r25	; 0x8019f2 <lorawanSemaphore+0x1>
     8b0:	80 93 f1 19 	sts	0x19F1, r24	; 0x8019f1 <lorawanSemaphore>
     8b4:	08 95       	ret

000008b6 <temperatureHumiditySensor_init>:
 
 
 //initialise the driver:
 void temperatureHumiditySensor_init()
 {
	 if ( HIH8120_OK == hih8120Create())
     8b6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <hih8120Create>
     8ba:	81 11       	cpse	r24, r1
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <temperatureHumiditySensor_init+0x10>
	 {
		 printf("Initialization of hum temp sensors\n");
     8be:	80 e3       	ldi	r24, 0x30	; 48
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <puts>
     8c6:	08 95       	ret

000008c8 <temperatureHumidity_measure>:
 //float temperature = 0.0;
 
 
 void temperatureHumidity_measure()
 {
	 if (HIH8120_OK != hih8120Wakeup())
     8c8:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <hih8120Wakeup>
     8cc:	88 23       	and	r24, r24
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <temperatureHumidity_measure+0x10>
	 {
		printf("ERROR Wakeup\n"); 
     8d0:	83 e5       	ldi	r24, 0x53	; 83
     8d2:	95 e0       	ldi	r25, 0x05	; 5
     8d4:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	80 e7       	ldi	r24, 0x70	; 112
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	80 40       	sbci	r24, 0x00	; 0
     8e2:	90 40       	sbci	r25, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <temperatureHumidity_measure+0x16>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <temperatureHumidity_measure+0x20>
     8e8:	00 00       	nop
	 }
	 _delay_ms(50);
	 
	 if (HIH8120_OK != hih8120Meassure())
     8ea:	0e 94 91 16 	call	0x2d22	; 0x2d22 <hih8120Meassure>
     8ee:	88 23       	and	r24, r24
     8f0:	21 f0       	breq	.+8      	; 0x8fa <temperatureHumidity_measure+0x32>
	 {
		 printf("ERROR meassure\n");
     8f2:	80 e6       	ldi	r24, 0x60	; 96
     8f4:	95 e0       	ldi	r25, 0x05	; 5
     8f6:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	80 e7       	ldi	r24, 0x70	; 112
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	21 50       	subi	r18, 0x01	; 1
     902:	80 40       	sbci	r24, 0x00	; 0
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <temperatureHumidity_measure+0x38>
     908:	00 c0       	rjmp	.+0      	; 0x90a <temperatureHumidity_measure+0x42>
     90a:	00 00       	nop
     90c:	08 95       	ret

0000090e <temperatureGetValue>:
	 _delay_ms(50);
 }
 
uint16_t temperatureGetValue()
 {
	return hih8120GetTemperature_x10();
     90e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <hih8120GetTemperature_x10>
 }
     912:	08 95       	ret

00000914 <humidityGetValue>:
 
uint16_t humidityGetValue()
 {
	 return hih8120GetHumidityPercent_x10();
     914:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <hih8120GetHumidityPercent_x10>
 }
     918:	08 95       	ret

0000091a <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     91a:	e7 e0       	ldi	r30, 0x07	; 7
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	80 81       	ld	r24, Z
     920:	8f 60       	ori	r24, 0x0F	; 15
     922:	80 83       	st	Z, r24
     924:	08 95       	ret

00000926 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     926:	e8 e0       	ldi	r30, 0x08	; 8
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	90 81       	ld	r25, Z
     92c:	90 7f       	andi	r25, 0xF0	; 240
     92e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     930:	90 81       	ld	r25, Z
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	98 2b       	or	r25, r24
     936:	90 83       	st	Z, r25
     938:	08 95       	ret

0000093a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     93a:	e8 e0       	ldi	r30, 0x08	; 8
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	80 81       	ld	r24, Z
     940:	80 7f       	andi	r24, 0xF0	; 240
     942:	80 83       	st	Z, r24
     944:	08 95       	ret

00000946 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     94c:	eb e6       	ldi	r30, 0x6B	; 107
     94e:	f8 e0       	ldi	r31, 0x08	; 8
     950:	01 c0       	rjmp	.+2      	; 0x954 <prvInsertBlockIntoFreeList+0xe>
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	31 81       	ldd	r19, Z+1	; 0x01
     958:	2a 17       	cp	r18, r26
     95a:	3b 07       	cpc	r19, r27
     95c:	d0 f3       	brcs	.-12     	; 0x952 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	93 81       	ldd	r25, Z+3	; 0x03
     962:	af 01       	movw	r20, r30
     964:	48 0f       	add	r20, r24
     966:	59 1f       	adc	r21, r25
     968:	a4 17       	cp	r26, r20
     96a:	b5 07       	cpc	r27, r21
     96c:	49 f4       	brne	.+18     	; 0x980 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	4d 91       	ld	r20, X+
     972:	5c 91       	ld	r21, X
     974:	13 97       	sbiw	r26, 0x03	; 3
     976:	84 0f       	add	r24, r20
     978:	95 1f       	adc	r25, r21
     97a:	93 83       	std	Z+3, r25	; 0x03
     97c:	82 83       	std	Z+2, r24	; 0x02
     97e:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     980:	12 96       	adiw	r26, 0x02	; 2
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	13 97       	sbiw	r26, 0x03	; 3
     988:	ed 01       	movw	r28, r26
     98a:	c8 0f       	add	r28, r24
     98c:	d9 1f       	adc	r29, r25
     98e:	2c 17       	cp	r18, r28
     990:	3d 07       	cpc	r19, r29
     992:	d9 f4       	brne	.+54     	; 0x9ca <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     994:	20 91 69 08 	lds	r18, 0x0869	; 0x800869 <pxEnd>
     998:	30 91 6a 08 	lds	r19, 0x086A	; 0x80086a <pxEnd+0x1>
     99c:	c2 17       	cp	r28, r18
     99e:	d3 07       	cpc	r29, r19
     9a0:	81 f0       	breq	.+32     	; 0x9c2 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9a2:	2a 81       	ldd	r18, Y+2	; 0x02
     9a4:	3b 81       	ldd	r19, Y+3	; 0x03
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	13 96       	adiw	r26, 0x03	; 3
     9ac:	9c 93       	st	X, r25
     9ae:	8e 93       	st	-X, r24
     9b0:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9b2:	c0 81       	ld	r28, Z
     9b4:	d1 81       	ldd	r29, Z+1	; 0x01
     9b6:	88 81       	ld	r24, Y
     9b8:	99 81       	ldd	r25, Y+1	; 0x01
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	9c 93       	st	X, r25
     9be:	8e 93       	st	-X, r24
     9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	dc 93       	st	X, r29
     9c6:	ce 93       	st	-X, r28
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9ca:	11 96       	adiw	r26, 0x01	; 1
     9cc:	3c 93       	st	X, r19
     9ce:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     9d0:	ae 17       	cp	r26, r30
     9d2:	bf 07       	cpc	r27, r31
     9d4:	11 f0       	breq	.+4      	; 0x9da <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9d6:	b1 83       	std	Z+1, r27	; 0x01
     9d8:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     9f2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     9f6:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <pxEnd>
     9fa:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <pxEnd+0x1>
     9fe:	89 2b       	or	r24, r25
     a00:	41 f5       	brne	.+80     	; 0xa52 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     a02:	eb e6       	ldi	r30, 0x6B	; 107
     a04:	f8 e0       	ldi	r31, 0x08	; 8
     a06:	af e6       	ldi	r26, 0x6F	; 111
     a08:	b8 e0       	ldi	r27, 0x08	; 8
     a0a:	b1 83       	std	Z+1, r27	; 0x01
     a0c:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     a0e:	13 82       	std	Z+3, r1	; 0x03
     a10:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     a12:	eb e0       	ldi	r30, 0x0B	; 11
     a14:	f8 e1       	ldi	r31, 0x18	; 24
     a16:	f0 93 6a 08 	sts	0x086A, r31	; 0x80086a <pxEnd+0x1>
     a1a:	e0 93 69 08 	sts	0x0869, r30	; 0x800869 <pxEnd>
	pxEnd->xBlockSize = 0;
     a1e:	13 82       	std	Z+3, r1	; 0x03
     a20:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     a22:	11 82       	std	Z+1, r1	; 0x01
     a24:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     a26:	8c e9       	ldi	r24, 0x9C	; 156
     a28:	9f e0       	ldi	r25, 0x0F	; 15
     a2a:	13 96       	adiw	r26, 0x03	; 3
     a2c:	9c 93       	st	X, r25
     a2e:	8e 93       	st	-X, r24
     a30:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a32:	ed 93       	st	X+, r30
     a34:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a36:	90 93 66 08 	sts	0x0866, r25	; 0x800866 <xMinimumEverFreeBytesRemaining+0x1>
     a3a:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a3e:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <xFreeBytesRemaining+0x1>
     a42:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e8       	ldi	r25, 0x80	; 128
     a4a:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <xBlockAllocatedBit+0x1>
     a4e:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a52:	e0 90 63 08 	lds	r14, 0x0863	; 0x800863 <xBlockAllocatedBit>
     a56:	f0 90 64 08 	lds	r15, 0x0864	; 0x800864 <xBlockAllocatedBit+0x1>
     a5a:	c7 01       	movw	r24, r14
     a5c:	8c 23       	and	r24, r28
     a5e:	9d 23       	and	r25, r29
     a60:	89 2b       	or	r24, r25
     a62:	09 f0       	breq	.+2      	; 0xa66 <pvPortMalloc+0x86>
     a64:	66 c0       	rjmp	.+204    	; 0xb32 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     a66:	20 97       	sbiw	r28, 0x00	; 0
     a68:	09 f4       	brne	.+2      	; 0xa6c <pvPortMalloc+0x8c>
     a6a:	66 c0       	rjmp	.+204    	; 0xb38 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     a6c:	ae 01       	movw	r20, r28
     a6e:	4c 5f       	subi	r20, 0xFC	; 252
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a72:	09 f4       	brne	.+2      	; 0xa76 <pvPortMalloc+0x96>
     a74:	5e c0       	rjmp	.+188    	; 0xb32 <pvPortMalloc+0x152>
     a76:	00 91 67 08 	lds	r16, 0x0867	; 0x800867 <xFreeBytesRemaining>
     a7a:	10 91 68 08 	lds	r17, 0x0868	; 0x800868 <xFreeBytesRemaining+0x1>
     a7e:	04 17       	cp	r16, r20
     a80:	15 07       	cpc	r17, r21
     a82:	08 f4       	brcc	.+2      	; 0xa86 <pvPortMalloc+0xa6>
     a84:	56 c0       	rjmp	.+172    	; 0xb32 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     a86:	c0 91 6b 08 	lds	r28, 0x086B	; 0x80086b <xStart>
     a8a:	d0 91 6c 08 	lds	r29, 0x086C	; 0x80086c <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     a8e:	eb e6       	ldi	r30, 0x6B	; 107
     a90:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <pvPortMalloc+0xb8>
     a94:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     a96:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a98:	2a 81       	ldd	r18, Y+2	; 0x02
     a9a:	3b 81       	ldd	r19, Y+3	; 0x03
     a9c:	24 17       	cp	r18, r20
     a9e:	35 07       	cpc	r19, r21
     aa0:	28 f4       	brcc	.+10     	; 0xaac <pvPortMalloc+0xcc>
     aa2:	28 81       	ld	r18, Y
     aa4:	39 81       	ldd	r19, Y+1	; 0x01
     aa6:	21 15       	cp	r18, r1
     aa8:	31 05       	cpc	r19, r1
     aaa:	a1 f7       	brne	.-24     	; 0xa94 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     aac:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <pxEnd>
     ab0:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <pxEnd+0x1>
     ab4:	c8 17       	cp	r28, r24
     ab6:	d9 07       	cpc	r29, r25
     ab8:	e1 f1       	breq	.+120    	; 0xb32 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     aba:	c0 80       	ld	r12, Z
     abc:	d1 80       	ldd	r13, Z+1	; 0x01
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	c8 0e       	add	r12, r24
     ac2:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     acc:	2a 81       	ldd	r18, Y+2	; 0x02
     ace:	3b 81       	ldd	r19, Y+3	; 0x03
     ad0:	24 1b       	sub	r18, r20
     ad2:	35 0b       	sbc	r19, r21
     ad4:	29 30       	cpi	r18, 0x09	; 9
     ad6:	31 05       	cpc	r19, r1
     ad8:	48 f0       	brcs	.+18     	; 0xaec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     ada:	ce 01       	movw	r24, r28
     adc:	84 0f       	add	r24, r20
     ade:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     ae0:	fc 01       	movw	r30, r24
     ae2:	33 83       	std	Z+3, r19	; 0x03
     ae4:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     ae6:	5b 83       	std	Y+3, r21	; 0x03
     ae8:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     aea:	2d df       	rcall	.-422    	; 0x946 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	08 1b       	sub	r16, r24
     af2:	19 0b       	sbc	r17, r25
     af4:	10 93 68 08 	sts	0x0868, r17	; 0x800868 <xFreeBytesRemaining+0x1>
     af8:	00 93 67 08 	sts	0x0867, r16	; 0x800867 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     afc:	20 91 65 08 	lds	r18, 0x0865	; 0x800865 <xMinimumEverFreeBytesRemaining>
     b00:	30 91 66 08 	lds	r19, 0x0866	; 0x800866 <xMinimumEverFreeBytesRemaining+0x1>
     b04:	02 17       	cp	r16, r18
     b06:	13 07       	cpc	r17, r19
     b08:	20 f4       	brcc	.+8      	; 0xb12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b0a:	10 93 66 08 	sts	0x0866, r17	; 0x800866 <xMinimumEverFreeBytesRemaining+0x1>
     b0e:	00 93 65 08 	sts	0x0865, r16	; 0x800865 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     b12:	e8 2a       	or	r14, r24
     b14:	f9 2a       	or	r15, r25
     b16:	fb 82       	std	Y+3, r15	; 0x03
     b18:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     b1a:	19 82       	std	Y+1, r1	; 0x01
     b1c:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b1e:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b22:	c1 14       	cp	r12, r1
     b24:	d1 04       	cpc	r13, r1
     b26:	59 f4       	brne	.+22     	; 0xb3e <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     b28:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <vApplicationMallocFailedHook>
     b2c:	c1 2c       	mov	r12, r1
     b2e:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b32:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
     b36:	f8 cf       	rjmp	.-16     	; 0xb28 <pvPortMalloc+0x148>
     b38:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
     b3c:	f5 cf       	rjmp	.-22     	; 0xb28 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     b3e:	c6 01       	movw	r24, r12
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	08 95       	ret

00000b52 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	51 f1       	breq	.+84     	; 0xbae <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b5a:	fc 01       	movw	r30, r24
     b5c:	34 97       	sbiw	r30, 0x04	; 4
     b5e:	22 81       	ldd	r18, Z+2	; 0x02
     b60:	33 81       	ldd	r19, Z+3	; 0x03
     b62:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <xBlockAllocatedBit>
     b66:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <xBlockAllocatedBit+0x1>
     b6a:	b9 01       	movw	r22, r18
     b6c:	64 23       	and	r22, r20
     b6e:	75 23       	and	r23, r21
     b70:	67 2b       	or	r22, r23
     b72:	e9 f0       	breq	.+58     	; 0xbae <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     b74:	60 81       	ld	r22, Z
     b76:	71 81       	ldd	r23, Z+1	; 0x01
     b78:	67 2b       	or	r22, r23
     b7a:	c9 f4       	brne	.+50     	; 0xbae <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b7c:	ef 01       	movw	r28, r30
     b7e:	40 95       	com	r20
     b80:	50 95       	com	r21
     b82:	24 23       	and	r18, r20
     b84:	35 23       	and	r19, r21
     b86:	33 83       	std	Z+3, r19	; 0x03
     b88:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     b8a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     b8e:	20 91 67 08 	lds	r18, 0x0867	; 0x800867 <xFreeBytesRemaining>
     b92:	30 91 68 08 	lds	r19, 0x0868	; 0x800868 <xFreeBytesRemaining+0x1>
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <xFreeBytesRemaining+0x1>
     ba2:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     ba6:	ce 01       	movw	r24, r28
     ba8:	ce de       	rcall	.-612    	; 0x946 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     baa:	0e 94 20 10 	call	0x2040	; 0x2040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bb4:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bb6:	03 96       	adiw	r24, 0x03	; 3
     bb8:	92 83       	std	Z+2, r25	; 0x02
     bba:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	3f ef       	ldi	r19, 0xFF	; 255
     bc0:	34 83       	std	Z+4, r19	; 0x04
     bc2:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bc4:	96 83       	std	Z+6, r25	; 0x06
     bc6:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bc8:	90 87       	std	Z+8, r25	; 0x08
     bca:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     bcc:	10 82       	st	Z, r1
     bce:	08 95       	ret

00000bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     bd0:	fc 01       	movw	r30, r24
     bd2:	11 86       	std	Z+9, r1	; 0x09
     bd4:	10 86       	std	Z+8, r1	; 0x08
     bd6:	08 95       	ret

00000bd8 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	9c 01       	movw	r18, r24
     bde:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     be0:	dc 01       	movw	r26, r24
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	cd 91       	ld	r28, X+
     be6:	dc 91       	ld	r29, X
     be8:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     bea:	d3 83       	std	Z+3, r29	; 0x03
     bec:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	9d 81       	ldd	r25, Y+5	; 0x05
     bf2:	95 83       	std	Z+5, r25	; 0x05
     bf4:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	dc 01       	movw	r26, r24
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	7c 93       	st	X, r23
     c00:	6e 93       	st	-X, r22
     c02:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     c04:	7d 83       	std	Y+5, r23	; 0x05
     c06:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     c08:	31 87       	std	Z+9, r19	; 0x09
     c0a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     c0c:	f9 01       	movw	r30, r18
     c0e:	80 81       	ld	r24, Z
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 83       	st	Z, r24
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c20:	48 81       	ld	r20, Y
     c22:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c24:	4f 3f       	cpi	r20, 0xFF	; 255
     c26:	2f ef       	ldi	r18, 0xFF	; 255
     c28:	52 07       	cpc	r21, r18
     c2a:	21 f4       	brne	.+8      	; 0xc34 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c2c:	fc 01       	movw	r30, r24
     c2e:	a7 81       	ldd	r26, Z+7	; 0x07
     c30:	b0 85       	ldd	r27, Z+8	; 0x08
     c32:	0d c0       	rjmp	.+26     	; 0xc4e <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c34:	dc 01       	movw	r26, r24
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <vListInsert+0x22>
     c3a:	df 01       	movw	r26, r30
     c3c:	12 96       	adiw	r26, 0x02	; 2
     c3e:	ed 91       	ld	r30, X+
     c40:	fc 91       	ld	r31, X
     c42:	13 97       	sbiw	r26, 0x03	; 3
     c44:	20 81       	ld	r18, Z
     c46:	31 81       	ldd	r19, Z+1	; 0x01
     c48:	42 17       	cp	r20, r18
     c4a:	53 07       	cpc	r21, r19
     c4c:	b0 f7       	brcc	.-20     	; 0xc3a <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	13 97       	sbiw	r26, 0x03	; 3
     c56:	fb 83       	std	Y+3, r31	; 0x03
     c58:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c5a:	d5 83       	std	Z+5, r29	; 0x05
     c5c:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     c5e:	bd 83       	std	Y+5, r27	; 0x05
     c60:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     c62:	13 96       	adiw	r26, 0x03	; 3
     c64:	dc 93       	st	X, r29
     c66:	ce 93       	st	-X, r28
     c68:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     c6a:	99 87       	std	Y+9, r25	; 0x09
     c6c:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     c6e:	fc 01       	movw	r30, r24
     c70:	20 81       	ld	r18, Z
     c72:	2f 5f       	subi	r18, 0xFF	; 255
     c74:	20 83       	st	Z, r18
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     c82:	a0 85       	ldd	r26, Z+8	; 0x08
     c84:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c86:	c2 81       	ldd	r28, Z+2	; 0x02
     c88:	d3 81       	ldd	r29, Z+3	; 0x03
     c8a:	84 81       	ldd	r24, Z+4	; 0x04
     c8c:	95 81       	ldd	r25, Z+5	; 0x05
     c8e:	9d 83       	std	Y+5, r25	; 0x05
     c90:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c92:	c4 81       	ldd	r28, Z+4	; 0x04
     c94:	d5 81       	ldd	r29, Z+5	; 0x05
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	9b 83       	std	Y+3, r25	; 0x03
     c9c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	8d 91       	ld	r24, X+
     ca2:	9c 91       	ld	r25, X
     ca4:	12 97       	sbiw	r26, 0x02	; 2
     ca6:	e8 17       	cp	r30, r24
     ca8:	f9 07       	cpc	r31, r25
     caa:	31 f4       	brne	.+12     	; 0xcb8 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cac:	84 81       	ldd	r24, Z+4	; 0x04
     cae:	95 81       	ldd	r25, Z+5	; 0x05
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	9c 93       	st	X, r25
     cb4:	8e 93       	st	-X, r24
     cb6:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cb8:	11 86       	std	Z+9, r1	; 0x09
     cba:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     cbc:	8c 91       	ld	r24, X
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cc2:	8c 91       	ld	r24, X
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     cca:	31 e1       	ldi	r19, 0x11	; 17
     ccc:	fc 01       	movw	r30, r24
     cce:	30 83       	st	Z, r19
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	22 e2       	ldi	r18, 0x22	; 34
     cd4:	20 83       	st	Z, r18
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	a3 e3       	ldi	r26, 0x33	; 51
     cda:	a0 83       	st	Z, r26
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	60 83       	st	Z, r22
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	70 83       	st	Z, r23
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	10 82       	st	Z, r1
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	10 82       	st	Z, r1
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	60 e8       	ldi	r22, 0x80	; 128
     cf0:	60 83       	st	Z, r22
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	10 82       	st	Z, r1
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	10 82       	st	Z, r1
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	10 82       	st	Z, r1
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	62 e0       	ldi	r22, 0x02	; 2
     d02:	60 83       	st	Z, r22
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	60 83       	st	Z, r22
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	64 e0       	ldi	r22, 0x04	; 4
     d0e:	60 83       	st	Z, r22
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	65 e0       	ldi	r22, 0x05	; 5
     d14:	60 83       	st	Z, r22
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	66 e0       	ldi	r22, 0x06	; 6
     d1a:	60 83       	st	Z, r22
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	67 e0       	ldi	r22, 0x07	; 7
     d20:	60 83       	st	Z, r22
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	68 e0       	ldi	r22, 0x08	; 8
     d26:	60 83       	st	Z, r22
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	69 e0       	ldi	r22, 0x09	; 9
     d2c:	60 83       	st	Z, r22
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	60 e1       	ldi	r22, 0x10	; 16
     d32:	60 83       	st	Z, r22
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	30 83       	st	Z, r19
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	32 e1       	ldi	r19, 0x12	; 18
     d3c:	30 83       	st	Z, r19
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	33 e1       	ldi	r19, 0x13	; 19
     d42:	30 83       	st	Z, r19
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	34 e1       	ldi	r19, 0x14	; 20
     d48:	30 83       	st	Z, r19
     d4a:	31 97       	sbiw	r30, 0x01	; 1
     d4c:	35 e1       	ldi	r19, 0x15	; 21
     d4e:	30 83       	st	Z, r19
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	36 e1       	ldi	r19, 0x16	; 22
     d54:	30 83       	st	Z, r19
     d56:	31 97       	sbiw	r30, 0x01	; 1
     d58:	37 e1       	ldi	r19, 0x17	; 23
     d5a:	30 83       	st	Z, r19
     d5c:	31 97       	sbiw	r30, 0x01	; 1
     d5e:	38 e1       	ldi	r19, 0x18	; 24
     d60:	30 83       	st	Z, r19
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	39 e1       	ldi	r19, 0x19	; 25
     d66:	30 83       	st	Z, r19
     d68:	31 97       	sbiw	r30, 0x01	; 1
     d6a:	30 e2       	ldi	r19, 0x20	; 32
     d6c:	30 83       	st	Z, r19
     d6e:	31 97       	sbiw	r30, 0x01	; 1
     d70:	31 e2       	ldi	r19, 0x21	; 33
     d72:	30 83       	st	Z, r19
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	20 83       	st	Z, r18
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	23 e2       	ldi	r18, 0x23	; 35
     d7c:	20 83       	st	Z, r18
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	40 83       	st	Z, r20
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	50 83       	st	Z, r21
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	26 e2       	ldi	r18, 0x26	; 38
     d8a:	20 83       	st	Z, r18
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	27 e2       	ldi	r18, 0x27	; 39
     d90:	20 83       	st	Z, r18
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	28 e2       	ldi	r18, 0x28	; 40
     d96:	20 83       	st	Z, r18
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	29 e2       	ldi	r18, 0x29	; 41
     d9c:	20 83       	st	Z, r18
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	20 e3       	ldi	r18, 0x30	; 48
     da2:	20 83       	st	Z, r18
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	21 e3       	ldi	r18, 0x31	; 49
     da8:	20 83       	st	Z, r18
     daa:	89 97       	sbiw	r24, 0x29	; 41
     dac:	08 95       	ret

00000dae <xPortStartScheduler>:
     dae:	a8 95       	wdr
     db0:	90 ec       	ldi	r25, 0xC0	; 192
     db2:	88 e1       	ldi	r24, 0x18	; 24
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	a8 95       	wdr
     dba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     dc4:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
     dc8:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
     dcc:	cd 91       	ld	r28, X+
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	dd 91       	ld	r29, X+
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	8f 90       	pop	r8
     e04:	7f 90       	pop	r7
     e06:	6f 90       	pop	r6
     e08:	5f 90       	pop	r5
     e0a:	4f 90       	pop	r4
     e0c:	3f 90       	pop	r3
     e0e:	2f 90       	pop	r2
     e10:	1f 90       	pop	r1
     e12:	0f 90       	pop	r0
     e14:	0c be       	out	0x3c, r0	; 60
     e16:	0f 90       	pop	r0
     e18:	0b be       	out	0x3b, r0	; 59
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	08 95       	ret
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	08 95       	ret

00000e26 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
     e2e:	0b b6       	in	r0, 0x3b	; 59
     e30:	0f 92       	push	r0
     e32:	0c b6       	in	r0, 0x3c	; 60
     e34:	0f 92       	push	r0
     e36:	1f 92       	push	r1
     e38:	11 24       	eor	r1, r1
     e3a:	2f 92       	push	r2
     e3c:	3f 92       	push	r3
     e3e:	4f 92       	push	r4
     e40:	5f 92       	push	r5
     e42:	6f 92       	push	r6
     e44:	7f 92       	push	r7
     e46:	8f 92       	push	r8
     e48:	9f 92       	push	r9
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
     e7a:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
     e7e:	0d b6       	in	r0, 0x3d	; 61
     e80:	0d 92       	st	X+, r0
     e82:	0e b6       	in	r0, 0x3e	; 62
     e84:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     e86:	0e 94 ae 10 	call	0x215c	; 0x215c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     e8a:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
     e8e:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
     e92:	cd 91       	ld	r28, X+
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	dd 91       	ld	r29, X+
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	bf 90       	pop	r11
     ec4:	af 90       	pop	r10
     ec6:	9f 90       	pop	r9
     ec8:	8f 90       	pop	r8
     eca:	7f 90       	pop	r7
     ecc:	6f 90       	pop	r6
     ece:	5f 90       	pop	r5
     ed0:	4f 90       	pop	r4
     ed2:	3f 90       	pop	r3
     ed4:	2f 90       	pop	r2
     ed6:	1f 90       	pop	r1
     ed8:	0f 90       	pop	r0
     eda:	0c be       	out	0x3c, r0	; 60
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ee6:	08 95       	ret

00000ee8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	0b b6       	in	r0, 0x3b	; 59
     ef2:	0f 92       	push	r0
     ef4:	0c b6       	in	r0, 0x3c	; 60
     ef6:	0f 92       	push	r0
     ef8:	1f 92       	push	r1
     efa:	11 24       	eor	r1, r1
     efc:	2f 92       	push	r2
     efe:	3f 92       	push	r3
     f00:	4f 92       	push	r4
     f02:	5f 92       	push	r5
     f04:	6f 92       	push	r6
     f06:	7f 92       	push	r7
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
     f3c:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
     f40:	0d b6       	in	r0, 0x3d	; 61
     f42:	0d 92       	st	X+, r0
     f44:	0e b6       	in	r0, 0x3e	; 62
     f46:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     f48:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     f4a:	c0 d7       	rcall	.+3968   	; 0x1ecc <xTaskIncrementTick>
     f4c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f4e:	0e 94 ae 10 	call	0x215c	; 0x215c <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     f52:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
     f56:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
     f5a:	cd 91       	ld	r28, X+
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	dd 91       	ld	r29, X+
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	bf 91       	pop	r27
     f6c:	af 91       	pop	r26
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	7f 91       	pop	r23
     f74:	6f 91       	pop	r22
     f76:	5f 91       	pop	r21
     f78:	4f 91       	pop	r20
     f7a:	3f 91       	pop	r19
     f7c:	2f 91       	pop	r18
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	7f 90       	pop	r7
     f94:	6f 90       	pop	r6
     f96:	5f 90       	pop	r5
     f98:	4f 90       	pop	r4
     f9a:	3f 90       	pop	r3
     f9c:	2f 90       	pop	r2
     f9e:	1f 90       	pop	r1
     fa0:	0f 90       	pop	r0
     fa2:	0c be       	out	0x3c, r0	; 60
     fa4:	0f 90       	pop	r0
     fa6:	0b be       	out	0x3b, r0	; 59
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     fae:	08 95       	ret

00000fb0 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     fb0:	9b df       	rcall	.-202    	; 0xee8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     fb2:	18 95       	reti

00000fb4 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	0f 92       	push	r0
     fba:	fc 01       	movw	r30, r24
     fbc:	92 8d       	ldd	r25, Z+26	; 0x1a
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	91 11       	cpse	r25, r1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret

00000fca <prvCopyDataToQueue>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
     fd4:	04 2f       	mov	r16, r20
     fd6:	1a 8d       	ldd	r17, Y+26	; 0x1a
     fd8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     fda:	41 11       	cpse	r20, r1
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <prvCopyDataToQueue+0x2c>
     fde:	88 81       	ld	r24, Y
     fe0:	99 81       	ldd	r25, Y+1	; 0x01
     fe2:	89 2b       	or	r24, r25
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <prvCopyDataToQueue+0x1e>
     fe6:	42 c0       	rjmp	.+132    	; 0x106c <prvCopyDataToQueue+0xa2>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	0e 94 76 12 	call	0x24ec	; 0x24ec <xTaskPriorityDisinherit>
     ff0:	1d 82       	std	Y+5, r1	; 0x05
     ff2:	1c 82       	std	Y+4, r1	; 0x04
     ff4:	42 c0       	rjmp	.+132    	; 0x107a <prvCopyDataToQueue+0xb0>
     ff6:	01 11       	cpse	r16, r1
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <prvCopyDataToQueue+0x5e>
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    1004:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	82 0f       	add	r24, r18
    100c:	91 1d       	adc	r25, r1
    100e:	9b 83       	std	Y+3, r25	; 0x03
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	82 17       	cp	r24, r18
    1018:	93 07       	cpc	r25, r19
    101a:	50 f1       	brcs	.+84     	; 0x1070 <prvCopyDataToQueue+0xa6>
    101c:	88 81       	ld	r24, Y
    101e:	99 81       	ldd	r25, Y+1	; 0x01
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	29 c0       	rjmp	.+82     	; 0x107a <prvCopyDataToQueue+0xb0>
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    1032:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	91 95       	neg	r25
    1038:	81 95       	neg	r24
    103a:	91 09       	sbc	r25, r1
    103c:	2e 81       	ldd	r18, Y+6	; 0x06
    103e:	3f 81       	ldd	r19, Y+7	; 0x07
    1040:	28 0f       	add	r18, r24
    1042:	39 1f       	adc	r19, r25
    1044:	3f 83       	std	Y+7, r19	; 0x07
    1046:	2e 83       	std	Y+6, r18	; 0x06
    1048:	48 81       	ld	r20, Y
    104a:	59 81       	ldd	r21, Y+1	; 0x01
    104c:	24 17       	cp	r18, r20
    104e:	35 07       	cpc	r19, r21
    1050:	30 f4       	brcc	.+12     	; 0x105e <prvCopyDataToQueue+0x94>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	9f 83       	std	Y+7, r25	; 0x07
    105c:	8e 83       	std	Y+6, r24	; 0x06
    105e:	02 30       	cpi	r16, 0x02	; 2
    1060:	49 f4       	brne	.+18     	; 0x1074 <prvCopyDataToQueue+0xaa>
    1062:	11 23       	and	r17, r17
    1064:	49 f0       	breq	.+18     	; 0x1078 <prvCopyDataToQueue+0xae>
    1066:	11 50       	subi	r17, 0x01	; 1
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	07 c0       	rjmp	.+14     	; 0x107a <prvCopyDataToQueue+0xb0>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	05 c0       	rjmp	.+10     	; 0x107a <prvCopyDataToQueue+0xb0>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	03 c0       	rjmp	.+6      	; 0x107a <prvCopyDataToQueue+0xb0>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	01 c0       	rjmp	.+2      	; 0x107a <prvCopyDataToQueue+0xb0>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	1f 5f       	subi	r17, 0xFF	; 255
    107c:	1a 8f       	std	Y+26, r17	; 0x1a
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <prvCopyDataFromQueue>:
    1088:	fc 01       	movw	r30, r24
    108a:	44 8d       	ldd	r20, Z+28	; 0x1c
    108c:	44 23       	and	r20, r20
    108e:	a9 f0       	breq	.+42     	; 0x10ba <prvCopyDataFromQueue+0x32>
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	26 81       	ldd	r18, Z+6	; 0x06
    1094:	37 81       	ldd	r19, Z+7	; 0x07
    1096:	24 0f       	add	r18, r20
    1098:	35 1f       	adc	r19, r21
    109a:	37 83       	std	Z+7, r19	; 0x07
    109c:	26 83       	std	Z+6, r18	; 0x06
    109e:	84 81       	ldd	r24, Z+4	; 0x04
    10a0:	95 81       	ldd	r25, Z+5	; 0x05
    10a2:	28 17       	cp	r18, r24
    10a4:	39 07       	cpc	r19, r25
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <prvCopyDataFromQueue+0x28>
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	97 83       	std	Z+7, r25	; 0x07
    10ae:	86 83       	std	Z+6, r24	; 0x06
    10b0:	cb 01       	movw	r24, r22
    10b2:	66 81       	ldd	r22, Z+6	; 0x06
    10b4:	77 81       	ldd	r23, Z+7	; 0x07
    10b6:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <memcpy>
    10ba:	08 95       	ret

000010bc <prvUnlockQueue>:
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	8c 01       	movw	r16, r24
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	0f 92       	push	r0
    10ce:	fc 01       	movw	r30, r24
    10d0:	c6 8d       	ldd	r28, Z+30	; 0x1e
    10d2:	1c 16       	cp	r1, r28
    10d4:	ac f4       	brge	.+42     	; 0x1100 <prvUnlockQueue+0x44>
    10d6:	81 89       	ldd	r24, Z+17	; 0x11
    10d8:	81 11       	cpse	r24, r1
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <prvUnlockQueue+0x2c>
    10dc:	11 c0       	rjmp	.+34     	; 0x1100 <prvUnlockQueue+0x44>
    10de:	f8 01       	movw	r30, r16
    10e0:	81 89       	ldd	r24, Z+17	; 0x11
    10e2:	81 11       	cpse	r24, r1
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <prvUnlockQueue+0x34>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <prvUnlockQueue+0x44>
    10e8:	78 01       	movw	r14, r16
    10ea:	f1 e1       	ldi	r31, 0x11	; 17
    10ec:	ef 0e       	add	r14, r31
    10ee:	f1 1c       	adc	r15, r1
    10f0:	c7 01       	movw	r24, r14
    10f2:	0e 94 65 11 	call	0x22ca	; 0x22ca <xTaskRemoveFromEventList>
    10f6:	81 11       	cpse	r24, r1
    10f8:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskMissedYield>
    10fc:	c1 50       	subi	r28, 0x01	; 1
    10fe:	79 f7       	brne	.-34     	; 0x10de <prvUnlockQueue+0x22>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	f8 01       	movw	r30, r16
    1104:	86 8f       	std	Z+30, r24	; 0x1e
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	0f 92       	push	r0
    1110:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1112:	1c 16       	cp	r1, r28
    1114:	ac f4       	brge	.+42     	; 0x1140 <prvUnlockQueue+0x84>
    1116:	80 85       	ldd	r24, Z+8	; 0x08
    1118:	81 11       	cpse	r24, r1
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <prvUnlockQueue+0x6c>
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <prvUnlockQueue+0x84>
    111e:	f8 01       	movw	r30, r16
    1120:	80 85       	ldd	r24, Z+8	; 0x08
    1122:	81 11       	cpse	r24, r1
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <prvUnlockQueue+0x74>
    1126:	0c c0       	rjmp	.+24     	; 0x1140 <prvUnlockQueue+0x84>
    1128:	78 01       	movw	r14, r16
    112a:	f8 e0       	ldi	r31, 0x08	; 8
    112c:	ef 0e       	add	r14, r31
    112e:	f1 1c       	adc	r15, r1
    1130:	c7 01       	movw	r24, r14
    1132:	0e 94 65 11 	call	0x22ca	; 0x22ca <xTaskRemoveFromEventList>
    1136:	81 11       	cpse	r24, r1
    1138:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskMissedYield>
    113c:	c1 50       	subi	r28, 0x01	; 1
    113e:	79 f7       	brne	.-34     	; 0x111e <prvUnlockQueue+0x62>
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	f8 01       	movw	r30, r16
    1144:	85 8f       	std	Z+29, r24	; 0x1d
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret

00001156 <xQueueGenericReset>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	0f 92       	push	r0
    1162:	e8 81       	ld	r30, Y
    1164:	f9 81       	ldd	r31, Y+1	; 0x01
    1166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1168:	2c 8d       	ldd	r18, Y+28	; 0x1c
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	82 9f       	mul	r24, r18
    1170:	a0 01       	movw	r20, r0
    1172:	83 9f       	mul	r24, r19
    1174:	50 0d       	add	r21, r0
    1176:	92 9f       	mul	r25, r18
    1178:	50 0d       	add	r21, r0
    117a:	11 24       	eor	r1, r1
    117c:	4e 0f       	add	r20, r30
    117e:	5f 1f       	adc	r21, r31
    1180:	5d 83       	std	Y+5, r21	; 0x05
    1182:	4c 83       	std	Y+4, r20	; 0x04
    1184:	1a 8e       	std	Y+26, r1	; 0x1a
    1186:	fb 83       	std	Y+3, r31	; 0x03
    1188:	ea 83       	std	Y+2, r30	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	82 9f       	mul	r24, r18
    118e:	a0 01       	movw	r20, r0
    1190:	83 9f       	mul	r24, r19
    1192:	50 0d       	add	r21, r0
    1194:	92 9f       	mul	r25, r18
    1196:	50 0d       	add	r21, r0
    1198:	11 24       	eor	r1, r1
    119a:	cf 01       	movw	r24, r30
    119c:	84 0f       	add	r24, r20
    119e:	95 1f       	adc	r25, r21
    11a0:	9f 83       	std	Y+7, r25	; 0x07
    11a2:	8e 83       	std	Y+6, r24	; 0x06
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	8d 8f       	std	Y+29, r24	; 0x1d
    11a8:	8e 8f       	std	Y+30, r24	; 0x1e
    11aa:	61 11       	cpse	r22, r1
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <xQueueGenericReset+0x6e>
    11ae:	88 85       	ldd	r24, Y+8	; 0x08
    11b0:	88 23       	and	r24, r24
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <xQueueGenericReset+0x7a>
    11b4:	ce 01       	movw	r24, r28
    11b6:	08 96       	adiw	r24, 0x08	; 8
    11b8:	0e 94 65 11 	call	0x22ca	; 0x22ca <xTaskRemoveFromEventList>
    11bc:	88 23       	and	r24, r24
    11be:	41 f0       	breq	.+16     	; 0x11d0 <xQueueGenericReset+0x7a>
    11c0:	32 de       	rcall	.-924    	; 0xe26 <vPortYield>
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <xQueueGenericReset+0x7a>
    11c4:	ce 01       	movw	r24, r28
    11c6:	08 96       	adiw	r24, 0x08	; 8
    11c8:	f5 dc       	rcall	.-1558   	; 0xbb4 <vListInitialise>
    11ca:	ce 01       	movw	r24, r28
    11cc:	41 96       	adiw	r24, 0x11	; 17
    11ce:	f2 dc       	rcall	.-1564   	; 0xbb4 <vListInitialise>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <xQueueGenericCreate>:
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	08 2f       	mov	r16, r24
    11e8:	16 2f       	mov	r17, r22
    11ea:	f4 2e       	mov	r15, r20
    11ec:	66 23       	and	r22, r22
    11ee:	b9 f0       	breq	.+46     	; 0x121e <xQueueGenericCreate+0x42>
    11f0:	86 9f       	mul	r24, r22
    11f2:	c0 01       	movw	r24, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	81 96       	adiw	r24, 0x21	; 33
    11f8:	f3 db       	rcall	.-2074   	; 0x9e0 <pvPortMalloc>
    11fa:	ec 01       	movw	r28, r24
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	41 f4       	brne	.+16     	; 0x1210 <xQueueGenericCreate+0x34>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <xQueueGenericCreate+0x4e>
    1202:	0b 8f       	std	Y+27, r16	; 0x1b
    1204:	1c 8f       	std	Y+28, r17	; 0x1c
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	ce 01       	movw	r24, r28
    120a:	a5 df       	rcall	.-182    	; 0x1156 <xQueueGenericReset>
    120c:	f8 a2       	std	Y+32, r15	; 0x20
    120e:	0d c0       	rjmp	.+26     	; 0x122a <xQueueGenericCreate+0x4e>
    1210:	81 96       	adiw	r24, 0x21	; 33
    1212:	99 83       	std	Y+1, r25	; 0x01
    1214:	88 83       	st	Y, r24
    1216:	f5 cf       	rjmp	.-22     	; 0x1202 <xQueueGenericCreate+0x26>
    1218:	d9 83       	std	Y+1, r29	; 0x01
    121a:	c8 83       	st	Y, r28
    121c:	f2 cf       	rjmp	.-28     	; 0x1202 <xQueueGenericCreate+0x26>
    121e:	81 e2       	ldi	r24, 0x21	; 33
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	de db       	rcall	.-2116   	; 0x9e0 <pvPortMalloc>
    1224:	ec 01       	movw	r28, r24
    1226:	89 2b       	or	r24, r25
    1228:	b9 f7       	brne	.-18     	; 0x1218 <xQueueGenericCreate+0x3c>
    122a:	ce 01       	movw	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	08 95       	ret

00001238 <xQueueGenericSend>:
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	00 d0       	rcall	.+0      	; 0x1250 <xQueueGenericSend+0x18>
    1250:	1f 92       	push	r1
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	8c 01       	movw	r16, r24
    125a:	6b 01       	movw	r12, r22
    125c:	5d 83       	std	Y+5, r21	; 0x05
    125e:	4c 83       	std	Y+4, r20	; 0x04
    1260:	a2 2e       	mov	r10, r18
    1262:	b1 2c       	mov	r11, r1
    1264:	99 24       	eor	r9, r9
    1266:	93 94       	inc	r9
    1268:	7c 01       	movw	r14, r24
    126a:	88 e0       	ldi	r24, 0x08	; 8
    126c:	e8 0e       	add	r14, r24
    126e:	f1 1c       	adc	r15, r1
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	0f 92       	push	r0
    1276:	f8 01       	movw	r30, r16
    1278:	92 8d       	ldd	r25, Z+26	; 0x1a
    127a:	83 8d       	ldd	r24, Z+27	; 0x1b
    127c:	98 17       	cp	r25, r24
    127e:	18 f0       	brcs	.+6      	; 0x1286 <xQueueGenericSend+0x4e>
    1280:	f2 e0       	ldi	r31, 0x02	; 2
    1282:	af 12       	cpse	r10, r31
    1284:	16 c0       	rjmp	.+44     	; 0x12b2 <xQueueGenericSend+0x7a>
    1286:	4a 2d       	mov	r20, r10
    1288:	b6 01       	movw	r22, r12
    128a:	c8 01       	movw	r24, r16
    128c:	9e de       	rcall	.-708    	; 0xfca <prvCopyDataToQueue>
    128e:	f8 01       	movw	r30, r16
    1290:	91 89       	ldd	r25, Z+17	; 0x11
    1292:	99 23       	and	r25, r25
    1294:	41 f0       	breq	.+16     	; 0x12a6 <xQueueGenericSend+0x6e>
    1296:	c8 01       	movw	r24, r16
    1298:	41 96       	adiw	r24, 0x11	; 17
    129a:	0e 94 65 11 	call	0x22ca	; 0x22ca <xTaskRemoveFromEventList>
    129e:	88 23       	and	r24, r24
    12a0:	21 f0       	breq	.+8      	; 0x12aa <xQueueGenericSend+0x72>
    12a2:	c1 dd       	rcall	.-1150   	; 0xe26 <vPortYield>
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <xQueueGenericSend+0x72>
    12a6:	81 11       	cpse	r24, r1
    12a8:	be dd       	rcall	.-1156   	; 0xe26 <vPortYield>
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	47 c0       	rjmp	.+142    	; 0x1340 <xQueueGenericSend+0x108>
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	89 2b       	or	r24, r25
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <xQueueGenericSend+0x8a>
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <xQueueGenericSend+0x108>
    12c2:	b1 10       	cpse	r11, r1
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <xQueueGenericSend+0x98>
    12c6:	ce 01       	movw	r24, r28
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	0e 94 ad 11 	call	0x235a	; 0x235a <vTaskInternalSetTimeOutState>
    12ce:	b9 2c       	mov	r11, r9
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	eb d5       	rcall	.+3030   	; 0x1eac <vTaskSuspendAll>
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	0f 92       	push	r0
    12dc:	f8 01       	movw	r30, r16
    12de:	85 8d       	ldd	r24, Z+29	; 0x1d
    12e0:	8f 3f       	cpi	r24, 0xFF	; 255
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <xQueueGenericSend+0xae>
    12e4:	15 8e       	std	Z+29, r1	; 0x1d
    12e6:	f8 01       	movw	r30, r16
    12e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    12ea:	8f 3f       	cpi	r24, 0xFF	; 255
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <xQueueGenericSend+0xb8>
    12ee:	16 8e       	std	Z+30, r1	; 0x1e
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	be 01       	movw	r22, r28
    12f6:	6c 5f       	subi	r22, 0xFC	; 252
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 b8 11 	call	0x2370	; 0x2370 <xTaskCheckForTimeOut>
    1302:	81 11       	cpse	r24, r1
    1304:	19 c0       	rjmp	.+50     	; 0x1338 <xQueueGenericSend+0x100>
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	0f 92       	push	r0
    130c:	f8 01       	movw	r30, r16
    130e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1310:	83 8d       	ldd	r24, Z+27	; 0x1b
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	98 13       	cpse	r25, r24
    1318:	0b c0       	rjmp	.+22     	; 0x1330 <xQueueGenericSend+0xf8>
    131a:	6c 81       	ldd	r22, Y+4	; 0x04
    131c:	7d 81       	ldd	r23, Y+5	; 0x05
    131e:	c7 01       	movw	r24, r14
    1320:	ab d7       	rcall	.+3926   	; 0x2278 <vTaskPlaceOnEventList>
    1322:	c8 01       	movw	r24, r16
    1324:	cb de       	rcall	.-618    	; 0x10bc <prvUnlockQueue>
    1326:	8c d6       	rcall	.+3352   	; 0x2040 <xTaskResumeAll>
    1328:	81 11       	cpse	r24, r1
    132a:	a2 cf       	rjmp	.-188    	; 0x1270 <xQueueGenericSend+0x38>
    132c:	7c dd       	rcall	.-1288   	; 0xe26 <vPortYield>
    132e:	a0 cf       	rjmp	.-192    	; 0x1270 <xQueueGenericSend+0x38>
    1330:	c8 01       	movw	r24, r16
    1332:	c4 de       	rcall	.-632    	; 0x10bc <prvUnlockQueue>
    1334:	85 d6       	rcall	.+3338   	; 0x2040 <xTaskResumeAll>
    1336:	9c cf       	rjmp	.-200    	; 0x1270 <xQueueGenericSend+0x38>
    1338:	c8 01       	movw	r24, r16
    133a:	c0 de       	rcall	.-640    	; 0x10bc <prvUnlockQueue>
    133c:	81 d6       	rcall	.+3330   	; 0x2040 <xTaskResumeAll>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	08 95       	ret

00001362 <xQueueCreateMutex>:
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	48 2f       	mov	r20, r24
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	37 df       	rcall	.-402    	; 0x11dc <xQueueGenericCreate>
    136e:	ec 01       	movw	r28, r24
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	59 f0       	breq	.+22     	; 0x138a <xQueueCreateMutex+0x28>
    1374:	1d 82       	std	Y+5, r1	; 0x05
    1376:	1c 82       	std	Y+4, r1	; 0x04
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	18 82       	st	Y, r1
    137c:	1e 82       	std	Y+6, r1	; 0x06
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	57 df       	rcall	.-338    	; 0x1238 <xQueueGenericSend>
    138a:	ce 01       	movw	r24, r28
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <xQueueGenericSendFromISR>:
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	8a 01       	movw	r16, r20
    13a0:	fc 01       	movw	r30, r24
    13a2:	52 8d       	ldd	r21, Z+26	; 0x1a
    13a4:	33 8d       	ldd	r19, Z+27	; 0x1b
    13a6:	53 17       	cp	r21, r19
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <xQueueGenericSendFromISR+0x1c>
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	e1 f4       	brne	.+56     	; 0x13e6 <xQueueGenericSendFromISR+0x54>
    13ae:	42 2f       	mov	r20, r18
    13b0:	78 01       	movw	r14, r16
    13b2:	ec 01       	movw	r28, r24
    13b4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    13b6:	09 de       	rcall	.-1006   	; 0xfca <prvCopyDataToQueue>
    13b8:	1f 3f       	cpi	r17, 0xFF	; 255
    13ba:	79 f4       	brne	.+30     	; 0x13da <xQueueGenericSendFromISR+0x48>
    13bc:	89 89       	ldd	r24, Y+17	; 0x11
    13be:	88 23       	and	r24, r24
    13c0:	a1 f0       	breq	.+40     	; 0x13ea <xQueueGenericSendFromISR+0x58>
    13c2:	ce 01       	movw	r24, r28
    13c4:	41 96       	adiw	r24, 0x11	; 17
    13c6:	81 d7       	rcall	.+3842   	; 0x22ca <xTaskRemoveFromEventList>
    13c8:	88 23       	and	r24, r24
    13ca:	89 f0       	breq	.+34     	; 0x13ee <xQueueGenericSendFromISR+0x5c>
    13cc:	e1 14       	cp	r14, r1
    13ce:	f1 04       	cpc	r15, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <xQueueGenericSendFromISR+0x60>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	f7 01       	movw	r30, r14
    13d6:	80 83       	st	Z, r24
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13da:	ff 24       	eor	r15, r15
    13dc:	f3 94       	inc	r15
    13de:	f1 0e       	add	r15, r17
    13e0:	fe 8e       	std	Y+30, r15	; 0x1e
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <xQueueGenericSendFromISR+0x62>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <xQueueReceive>:
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <xQueueReceive+0x18>
    141a:	1f 92       	push	r1
    141c:	1f 92       	push	r1
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8c 01       	movw	r16, r24
    1424:	5b 01       	movw	r10, r22
    1426:	5d 83       	std	Y+5, r21	; 0x05
    1428:	4c 83       	std	Y+4, r20	; 0x04
    142a:	e1 2c       	mov	r14, r1
    142c:	99 24       	eor	r9, r9
    142e:	93 94       	inc	r9
    1430:	6c 01       	movw	r12, r24
    1432:	81 e1       	ldi	r24, 0x11	; 17
    1434:	c8 0e       	add	r12, r24
    1436:	d1 1c       	adc	r13, r1
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	0f 92       	push	r0
    143e:	f8 01       	movw	r30, r16
    1440:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1442:	ff 20       	and	r15, r15
    1444:	91 f0       	breq	.+36     	; 0x146a <xQueueReceive+0x68>
    1446:	b5 01       	movw	r22, r10
    1448:	c8 01       	movw	r24, r16
    144a:	1e de       	rcall	.-964    	; 0x1088 <prvCopyDataFromQueue>
    144c:	fa 94       	dec	r15
    144e:	f8 01       	movw	r30, r16
    1450:	f2 8e       	std	Z+26, r15	; 0x1a
    1452:	80 85       	ldd	r24, Z+8	; 0x08
    1454:	88 23       	and	r24, r24
    1456:	29 f0       	breq	.+10     	; 0x1462 <xQueueReceive+0x60>
    1458:	c8 01       	movw	r24, r16
    145a:	08 96       	adiw	r24, 0x08	; 8
    145c:	36 d7       	rcall	.+3692   	; 0x22ca <xTaskRemoveFromEventList>
    145e:	81 11       	cpse	r24, r1
    1460:	e2 dc       	rcall	.-1596   	; 0xe26 <vPortYield>
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	44 c0       	rjmp	.+136    	; 0x14f2 <xQueueReceive+0xf0>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	89 2b       	or	r24, r25
    1470:	21 f4       	brne	.+8      	; 0x147a <xQueueReceive+0x78>
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	3c c0       	rjmp	.+120    	; 0x14f2 <xQueueReceive+0xf0>
    147a:	e1 10       	cpse	r14, r1
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <xQueueReceive+0x84>
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	6b d7       	rcall	.+3798   	; 0x235a <vTaskInternalSetTimeOutState>
    1484:	e9 2c       	mov	r14, r9
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	10 d5       	rcall	.+2592   	; 0x1eac <vTaskSuspendAll>
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	0f 92       	push	r0
    1492:	f8 01       	movw	r30, r16
    1494:	85 8d       	ldd	r24, Z+29	; 0x1d
    1496:	8f 3f       	cpi	r24, 0xFF	; 255
    1498:	09 f4       	brne	.+2      	; 0x149c <xQueueReceive+0x9a>
    149a:	15 8e       	std	Z+29, r1	; 0x1d
    149c:	f8 01       	movw	r30, r16
    149e:	86 8d       	ldd	r24, Z+30	; 0x1e
    14a0:	8f 3f       	cpi	r24, 0xFF	; 255
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <xQueueReceive+0xa4>
    14a4:	16 8e       	std	Z+30, r1	; 0x1e
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	be 01       	movw	r22, r28
    14ac:	6c 5f       	subi	r22, 0xFC	; 252
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	5d d7       	rcall	.+3770   	; 0x2370 <xTaskCheckForTimeOut>
    14b6:	81 11       	cpse	r24, r1
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <xQueueReceive+0xde>
    14ba:	c8 01       	movw	r24, r16
    14bc:	7b dd       	rcall	.-1290   	; 0xfb4 <prvIsQueueEmpty>
    14be:	88 23       	and	r24, r24
    14c0:	59 f0       	breq	.+22     	; 0x14d8 <xQueueReceive+0xd6>
    14c2:	6c 81       	ldd	r22, Y+4	; 0x04
    14c4:	7d 81       	ldd	r23, Y+5	; 0x05
    14c6:	c6 01       	movw	r24, r12
    14c8:	d7 d6       	rcall	.+3502   	; 0x2278 <vTaskPlaceOnEventList>
    14ca:	c8 01       	movw	r24, r16
    14cc:	f7 dd       	rcall	.-1042   	; 0x10bc <prvUnlockQueue>
    14ce:	b8 d5       	rcall	.+2928   	; 0x2040 <xTaskResumeAll>
    14d0:	81 11       	cpse	r24, r1
    14d2:	b2 cf       	rjmp	.-156    	; 0x1438 <xQueueReceive+0x36>
    14d4:	a8 dc       	rcall	.-1712   	; 0xe26 <vPortYield>
    14d6:	b0 cf       	rjmp	.-160    	; 0x1438 <xQueueReceive+0x36>
    14d8:	c8 01       	movw	r24, r16
    14da:	f0 dd       	rcall	.-1056   	; 0x10bc <prvUnlockQueue>
    14dc:	b1 d5       	rcall	.+2914   	; 0x2040 <xTaskResumeAll>
    14de:	ac cf       	rjmp	.-168    	; 0x1438 <xQueueReceive+0x36>
    14e0:	c8 01       	movw	r24, r16
    14e2:	ec dd       	rcall	.-1064   	; 0x10bc <prvUnlockQueue>
    14e4:	ad d5       	rcall	.+2906   	; 0x2040 <xTaskResumeAll>
    14e6:	c8 01       	movw	r24, r16
    14e8:	65 dd       	rcall	.-1334   	; 0xfb4 <prvIsQueueEmpty>
    14ea:	88 23       	and	r24, r24
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <xQueueReceive+0xee>
    14ee:	a4 cf       	rjmp	.-184    	; 0x1438 <xQueueReceive+0x36>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	08 95       	ret

00001514 <xQueueSemaphoreTake>:
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	00 d0       	rcall	.+0      	; 0x1528 <xQueueSemaphoreTake+0x14>
    1528:	1f 92       	push	r1
    152a:	1f 92       	push	r1
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	8c 01       	movw	r16, r24
    1532:	7d 83       	std	Y+5, r23	; 0x05
    1534:	6c 83       	std	Y+4, r22	; 0x04
    1536:	b1 2c       	mov	r11, r1
    1538:	d1 2c       	mov	r13, r1
    153a:	cc 24       	eor	r12, r12
    153c:	c3 94       	inc	r12
    153e:	7c 01       	movw	r14, r24
    1540:	81 e1       	ldi	r24, 0x11	; 17
    1542:	e8 0e       	add	r14, r24
    1544:	f1 1c       	adc	r15, r1
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	0f 92       	push	r0
    154c:	d8 01       	movw	r26, r16
    154e:	5a 96       	adiw	r26, 0x1a	; 26
    1550:	8c 91       	ld	r24, X
    1552:	5a 97       	sbiw	r26, 0x1a	; 26
    1554:	88 23       	and	r24, r24
    1556:	d9 f0       	breq	.+54     	; 0x158e <xQueueSemaphoreTake+0x7a>
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	5a 96       	adiw	r26, 0x1a	; 26
    155c:	8c 93       	st	X, r24
    155e:	5a 97       	sbiw	r26, 0x1a	; 26
    1560:	8d 91       	ld	r24, X+
    1562:	9c 91       	ld	r25, X
    1564:	89 2b       	or	r24, r25
    1566:	29 f4       	brne	.+10     	; 0x1572 <xQueueSemaphoreTake+0x5e>
    1568:	0e 94 06 13 	call	0x260c	; 0x260c <pvTaskIncrementMutexHeldCount>
    156c:	f8 01       	movw	r30, r16
    156e:	95 83       	std	Z+5, r25	; 0x05
    1570:	84 83       	std	Z+4, r24	; 0x04
    1572:	d8 01       	movw	r26, r16
    1574:	18 96       	adiw	r26, 0x08	; 8
    1576:	8c 91       	ld	r24, X
    1578:	88 23       	and	r24, r24
    157a:	29 f0       	breq	.+10     	; 0x1586 <xQueueSemaphoreTake+0x72>
    157c:	c8 01       	movw	r24, r16
    157e:	08 96       	adiw	r24, 0x08	; 8
    1580:	a4 d6       	rcall	.+3400   	; 0x22ca <xTaskRemoveFromEventList>
    1582:	81 11       	cpse	r24, r1
    1584:	50 dc       	rcall	.-1888   	; 0xe26 <vPortYield>
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	70 c0       	rjmp	.+224    	; 0x166e <xQueueSemaphoreTake+0x15a>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	89 2b       	or	r24, r25
    1594:	21 f4       	brne	.+8      	; 0x159e <xQueueSemaphoreTake+0x8a>
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	68 c0       	rjmp	.+208    	; 0x166e <xQueueSemaphoreTake+0x15a>
    159e:	d1 10       	cpse	r13, r1
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <xQueueSemaphoreTake+0x96>
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	d9 d6       	rcall	.+3506   	; 0x235a <vTaskInternalSetTimeOutState>
    15a8:	dc 2c       	mov	r13, r12
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	7e d4       	rcall	.+2300   	; 0x1eac <vTaskSuspendAll>
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	0f 92       	push	r0
    15b6:	f8 01       	movw	r30, r16
    15b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    15ba:	8f 3f       	cpi	r24, 0xFF	; 255
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <xQueueSemaphoreTake+0xac>
    15be:	15 8e       	std	Z+29, r1	; 0x1d
    15c0:	d8 01       	movw	r26, r16
    15c2:	5e 96       	adiw	r26, 0x1e	; 30
    15c4:	8c 91       	ld	r24, X
    15c6:	5e 97       	sbiw	r26, 0x1e	; 30
    15c8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <xQueueSemaphoreTake+0xbc>
    15cc:	5e 96       	adiw	r26, 0x1e	; 30
    15ce:	1c 92       	st	X, r1
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	be 01       	movw	r22, r28
    15d6:	6c 5f       	subi	r22, 0xFC	; 252
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	c8 d6       	rcall	.+3472   	; 0x2370 <xTaskCheckForTimeOut>
    15e0:	81 11       	cpse	r24, r1
    15e2:	21 c0       	rjmp	.+66     	; 0x1626 <xQueueSemaphoreTake+0x112>
    15e4:	c8 01       	movw	r24, r16
    15e6:	e6 dc       	rcall	.-1588   	; 0xfb4 <prvIsQueueEmpty>
    15e8:	88 23       	and	r24, r24
    15ea:	c9 f0       	breq	.+50     	; 0x161e <xQueueSemaphoreTake+0x10a>
    15ec:	f8 01       	movw	r30, r16
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	89 2b       	or	r24, r25
    15f4:	49 f4       	brne	.+18     	; 0x1608 <xQueueSemaphoreTake+0xf4>
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	0f 92       	push	r0
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	95 81       	ldd	r25, Z+5	; 0x05
    1600:	03 d7       	rcall	.+3590   	; 0x2408 <xTaskPriorityInherit>
    1602:	b8 2e       	mov	r11, r24
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	6c 81       	ldd	r22, Y+4	; 0x04
    160a:	7d 81       	ldd	r23, Y+5	; 0x05
    160c:	c7 01       	movw	r24, r14
    160e:	34 d6       	rcall	.+3176   	; 0x2278 <vTaskPlaceOnEventList>
    1610:	c8 01       	movw	r24, r16
    1612:	54 dd       	rcall	.-1368   	; 0x10bc <prvUnlockQueue>
    1614:	15 d5       	rcall	.+2602   	; 0x2040 <xTaskResumeAll>
    1616:	81 11       	cpse	r24, r1
    1618:	96 cf       	rjmp	.-212    	; 0x1546 <xQueueSemaphoreTake+0x32>
    161a:	05 dc       	rcall	.-2038   	; 0xe26 <vPortYield>
    161c:	94 cf       	rjmp	.-216    	; 0x1546 <xQueueSemaphoreTake+0x32>
    161e:	c8 01       	movw	r24, r16
    1620:	4d dd       	rcall	.-1382   	; 0x10bc <prvUnlockQueue>
    1622:	0e d5       	rcall	.+2588   	; 0x2040 <xTaskResumeAll>
    1624:	90 cf       	rjmp	.-224    	; 0x1546 <xQueueSemaphoreTake+0x32>
    1626:	c8 01       	movw	r24, r16
    1628:	49 dd       	rcall	.-1390   	; 0x10bc <prvUnlockQueue>
    162a:	0a d5       	rcall	.+2580   	; 0x2040 <xTaskResumeAll>
    162c:	c8 01       	movw	r24, r16
    162e:	c2 dc       	rcall	.-1660   	; 0xfb4 <prvIsQueueEmpty>
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <xQueueSemaphoreTake+0x122>
    1634:	88 cf       	rjmp	.-240    	; 0x1546 <xQueueSemaphoreTake+0x32>
    1636:	bb 20       	and	r11, r11
    1638:	c9 f0       	breq	.+50     	; 0x166c <xQueueSemaphoreTake+0x158>
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	0f 92       	push	r0
    1640:	f8 01       	movw	r30, r16
    1642:	81 89       	ldd	r24, Z+17	; 0x11
    1644:	88 23       	and	r24, r24
    1646:	39 f0       	breq	.+14     	; 0x1656 <xQueueSemaphoreTake+0x142>
    1648:	06 88       	ldd	r0, Z+22	; 0x16
    164a:	f7 89       	ldd	r31, Z+23	; 0x17
    164c:	e0 2d       	mov	r30, r0
    164e:	80 81       	ld	r24, Z
    1650:	64 e0       	ldi	r22, 0x04	; 4
    1652:	68 1b       	sub	r22, r24
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <xQueueSemaphoreTake+0x144>
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	d8 01       	movw	r26, r16
    165a:	14 96       	adiw	r26, 0x04	; 4
    165c:	8d 91       	ld	r24, X+
    165e:	9c 91       	ld	r25, X
    1660:	15 97       	sbiw	r26, 0x05	; 5
    1662:	84 d7       	rcall	.+3848   	; 0x256c <vTaskPriorityDisinheritAfterTimeout>
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <xQueueSemaphoreTake+0x15a>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	08 95       	ret

0000168c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	0f 92       	push	r0
    1698:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	09 f4       	brne	.+2      	; 0x16a0 <vQueueWaitForMessageRestricted+0x14>
    169e:	1d 8e       	std	Y+29, r1	; 0x1d
    16a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a2:	8f 3f       	cpi	r24, 0xFF	; 255
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <vQueueWaitForMessageRestricted+0x1c>
    16a6:	1e 8e       	std	Y+30, r1	; 0x1e
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ae:	81 11       	cpse	r24, r1
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16b2:	ce 01       	movw	r24, r28
    16b4:	41 96       	adiw	r24, 0x11	; 17
    16b6:	f1 d5       	rcall	.+3042   	; 0x229a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    16b8:	ce 01       	movw	r24, r28
    16ba:	00 dd       	rcall	.-1536   	; 0x10bc <prvUnlockQueue>
    }
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    16c2:	fc 01       	movw	r30, r24
    16c4:	44 81       	ldd	r20, Z+4	; 0x04
    16c6:	55 81       	ldd	r21, Z+5	; 0x05
    16c8:	22 81       	ldd	r18, Z+2	; 0x02
    16ca:	33 81       	ldd	r19, Z+3	; 0x03
    16cc:	24 0f       	add	r18, r20
    16ce:	35 1f       	adc	r19, r21
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	b9 01       	movw	r22, r18
    16d6:	68 1b       	sub	r22, r24
    16d8:	79 0b       	sbc	r23, r25
    16da:	cb 01       	movw	r24, r22
    16dc:	64 17       	cp	r22, r20
    16de:	75 07       	cpc	r23, r21
    16e0:	10 f0       	brcs	.+4      	; 0x16e6 <prvBytesInBuffer+0x24>
    16e2:	84 1b       	sub	r24, r20
    16e4:	95 0b       	sbc	r25, r21
    16e6:	08 95       	ret

000016e8 <prvWriteBytesToBuffer>:
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	6c 01       	movw	r12, r24
    16fe:	5b 01       	movw	r10, r22
    1700:	7a 01       	movw	r14, r20
    1702:	fc 01       	movw	r30, r24
    1704:	c2 81       	ldd	r28, Z+2	; 0x02
    1706:	d3 81       	ldd	r29, Z+3	; 0x03
    1708:	04 81       	ldd	r16, Z+4	; 0x04
    170a:	15 81       	ldd	r17, Z+5	; 0x05
    170c:	0c 1b       	sub	r16, r28
    170e:	1d 0b       	sbc	r17, r29
    1710:	40 17       	cp	r20, r16
    1712:	51 07       	cpc	r21, r17
    1714:	08 f4       	brcc	.+2      	; 0x1718 <prvWriteBytesToBuffer+0x30>
    1716:	8a 01       	movw	r16, r20
    1718:	f6 01       	movw	r30, r12
    171a:	84 85       	ldd	r24, Z+12	; 0x0c
    171c:	95 85       	ldd	r25, Z+13	; 0x0d
    171e:	a8 01       	movw	r20, r16
    1720:	b5 01       	movw	r22, r10
    1722:	8c 0f       	add	r24, r28
    1724:	9d 1f       	adc	r25, r29
    1726:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    172a:	0e 15       	cp	r16, r14
    172c:	1f 05       	cpc	r17, r15
    172e:	58 f4       	brcc	.+22     	; 0x1746 <prvWriteBytesToBuffer+0x5e>
    1730:	a7 01       	movw	r20, r14
    1732:	40 1b       	sub	r20, r16
    1734:	51 0b       	sbc	r21, r17
    1736:	b5 01       	movw	r22, r10
    1738:	60 0f       	add	r22, r16
    173a:	71 1f       	adc	r23, r17
    173c:	f6 01       	movw	r30, r12
    173e:	84 85       	ldd	r24, Z+12	; 0x0c
    1740:	95 85       	ldd	r25, Z+13	; 0x0d
    1742:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    1746:	ce 01       	movw	r24, r28
    1748:	8e 0d       	add	r24, r14
    174a:	9f 1d       	adc	r25, r15
    174c:	f6 01       	movw	r30, r12
    174e:	24 81       	ldd	r18, Z+4	; 0x04
    1750:	35 81       	ldd	r19, Z+5	; 0x05
    1752:	82 17       	cp	r24, r18
    1754:	93 07       	cpc	r25, r19
    1756:	10 f0       	brcs	.+4      	; 0x175c <prvWriteBytesToBuffer+0x74>
    1758:	82 1b       	sub	r24, r18
    175a:	93 0b       	sbc	r25, r19
    175c:	f6 01       	movw	r30, r12
    175e:	93 83       	std	Z+3, r25	; 0x03
    1760:	82 83       	std	Z+2, r24	; 0x02
    1762:	c7 01       	movw	r24, r14
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	df 90       	pop	r13
    1772:	cf 90       	pop	r12
    1774:	bf 90       	pop	r11
    1776:	af 90       	pop	r10
    1778:	08 95       	ret

0000177a <prvWriteMessageToBuffer>:
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	1f 92       	push	r1
    178c:	1f 92       	push	r1
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	5a 83       	std	Y+2, r21	; 0x02
    1794:	49 83       	std	Y+1, r20	; 0x01
    1796:	21 15       	cp	r18, r1
    1798:	31 05       	cpc	r19, r1
    179a:	c9 f0       	breq	.+50     	; 0x17ce <prvWriteMessageToBuffer+0x54>
    179c:	6b 01       	movw	r12, r22
    179e:	7c 01       	movw	r14, r24
    17a0:	fc 01       	movw	r30, r24
    17a2:	86 85       	ldd	r24, Z+14	; 0x0e
    17a4:	80 fd       	sbrc	r24, 0
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <prvWriteMessageToBuffer+0x3e>
    17a8:	ca 01       	movw	r24, r20
    17aa:	24 17       	cp	r18, r20
    17ac:	35 07       	cpc	r19, r21
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <prvWriteMessageToBuffer+0x38>
    17b0:	c9 01       	movw	r24, r18
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	11 c0       	rjmp	.+34     	; 0x17da <prvWriteMessageToBuffer+0x60>
    17b8:	20 17       	cp	r18, r16
    17ba:	31 07       	cpc	r19, r17
    17bc:	58 f0       	brcs	.+22     	; 0x17d4 <prvWriteMessageToBuffer+0x5a>
    17be:	42 e0       	ldi	r20, 0x02	; 2
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	be 01       	movw	r22, r28
    17c4:	6f 5f       	subi	r22, 0xFF	; 255
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	c7 01       	movw	r24, r14
    17ca:	8e df       	rcall	.-228    	; 0x16e8 <prvWriteBytesToBuffer>
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <prvWriteMessageToBuffer+0x60>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <prvWriteMessageToBuffer+0x6a>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <prvWriteMessageToBuffer+0x6a>
    17da:	49 81       	ldd	r20, Y+1	; 0x01
    17dc:	5a 81       	ldd	r21, Y+2	; 0x02
    17de:	b6 01       	movw	r22, r12
    17e0:	c7 01       	movw	r24, r14
    17e2:	82 df       	rcall	.-252    	; 0x16e8 <prvWriteBytesToBuffer>
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	08 95       	ret

000017fa <prvReadBytesFromBuffer>:
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	7c 01       	movw	r14, r24
    1810:	5b 01       	movw	r10, r22
    1812:	e9 01       	movw	r28, r18
    1814:	42 17       	cp	r20, r18
    1816:	53 07       	cpc	r21, r19
    1818:	08 f4       	brcc	.+2      	; 0x181c <prvReadBytesFromBuffer+0x22>
    181a:	ea 01       	movw	r28, r20
    181c:	20 97       	sbiw	r28, 0x00	; 0
    181e:	79 f1       	breq	.+94     	; 0x187e <prvReadBytesFromBuffer+0x84>
    1820:	f7 01       	movw	r30, r14
    1822:	00 81       	ld	r16, Z
    1824:	11 81       	ldd	r17, Z+1	; 0x01
    1826:	c4 80       	ldd	r12, Z+4	; 0x04
    1828:	d5 80       	ldd	r13, Z+5	; 0x05
    182a:	c0 1a       	sub	r12, r16
    182c:	d1 0a       	sbc	r13, r17
    182e:	cc 15       	cp	r28, r12
    1830:	dd 05       	cpc	r29, r13
    1832:	08 f4       	brcc	.+2      	; 0x1836 <prvReadBytesFromBuffer+0x3c>
    1834:	6e 01       	movw	r12, r28
    1836:	f7 01       	movw	r30, r14
    1838:	64 85       	ldd	r22, Z+12	; 0x0c
    183a:	75 85       	ldd	r23, Z+13	; 0x0d
    183c:	60 0f       	add	r22, r16
    183e:	71 1f       	adc	r23, r17
    1840:	a6 01       	movw	r20, r12
    1842:	c5 01       	movw	r24, r10
    1844:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    1848:	cc 16       	cp	r12, r28
    184a:	dd 06       	cpc	r13, r29
    184c:	58 f4       	brcc	.+22     	; 0x1864 <prvReadBytesFromBuffer+0x6a>
    184e:	ae 01       	movw	r20, r28
    1850:	4c 19       	sub	r20, r12
    1852:	5d 09       	sbc	r21, r13
    1854:	f7 01       	movw	r30, r14
    1856:	64 85       	ldd	r22, Z+12	; 0x0c
    1858:	75 85       	ldd	r23, Z+13	; 0x0d
    185a:	c5 01       	movw	r24, r10
    185c:	8c 0d       	add	r24, r12
    185e:	9d 1d       	adc	r25, r13
    1860:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <memcpy>
    1864:	0c 0f       	add	r16, r28
    1866:	1d 1f       	adc	r17, r29
    1868:	f7 01       	movw	r30, r14
    186a:	84 81       	ldd	r24, Z+4	; 0x04
    186c:	95 81       	ldd	r25, Z+5	; 0x05
    186e:	08 17       	cp	r16, r24
    1870:	19 07       	cpc	r17, r25
    1872:	10 f0       	brcs	.+4      	; 0x1878 <prvReadBytesFromBuffer+0x7e>
    1874:	08 1b       	sub	r16, r24
    1876:	19 0b       	sbc	r17, r25
    1878:	f7 01       	movw	r30, r14
    187a:	11 83       	std	Z+1, r17	; 0x01
    187c:	00 83       	st	Z, r16
    187e:	ce 01       	movw	r24, r28
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	08 95       	ret

00001896 <xStreamBufferGenericCreate>:
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	eb 01       	movw	r28, r22
    18a2:	11 e0       	ldi	r17, 0x01	; 1
    18a4:	41 30       	cpi	r20, 0x01	; 1
    18a6:	09 f0       	breq	.+2      	; 0x18aa <xStreamBufferGenericCreate+0x14>
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	20 97       	sbiw	r28, 0x00	; 0
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <xStreamBufferGenericCreate+0x1c>
    18ae:	c1 e0       	ldi	r28, 0x01	; 1
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
    18b2:	7c 01       	movw	r14, r24
    18b4:	2f ef       	ldi	r18, 0xFF	; 255
    18b6:	e2 1a       	sub	r14, r18
    18b8:	f2 0a       	sbc	r15, r18
    18ba:	41 96       	adiw	r24, 0x11	; 17
    18bc:	91 d8       	rcall	.-3806   	; 0x9e0 <pvPortMalloc>
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <xStreamBufferGenericCreate+0x4c>
    18c2:	20 e1       	ldi	r18, 0x10	; 16
    18c4:	fc 01       	movw	r30, r24
    18c6:	11 92       	st	Z+, r1
    18c8:	2a 95       	dec	r18
    18ca:	e9 f7       	brne	.-6      	; 0x18c6 <xStreamBufferGenericCreate+0x30>
    18cc:	9c 01       	movw	r18, r24
    18ce:	20 5f       	subi	r18, 0xF0	; 240
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	fc 01       	movw	r30, r24
    18d4:	35 87       	std	Z+13, r19	; 0x0d
    18d6:	24 87       	std	Z+12, r18	; 0x0c
    18d8:	f5 82       	std	Z+5, r15	; 0x05
    18da:	e4 82       	std	Z+4, r14	; 0x04
    18dc:	d7 83       	std	Z+7, r29	; 0x07
    18de:	c6 83       	std	Z+6, r28	; 0x06
    18e0:	16 87       	std	Z+14, r17	; 0x0e
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <xStreamBufferReset>:
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	fc 01       	movw	r30, r24
    18f4:	27 85       	ldd	r18, Z+15	; 0x0f
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	0f 92       	push	r0
    18fc:	80 85       	ldd	r24, Z+8	; 0x08
    18fe:	91 85       	ldd	r25, Z+9	; 0x09
    1900:	89 2b       	or	r24, r25
    1902:	d1 f4       	brne	.+52     	; 0x1938 <xStreamBufferReset+0x4a>
    1904:	82 85       	ldd	r24, Z+10	; 0x0a
    1906:	93 85       	ldd	r25, Z+11	; 0x0b
    1908:	89 2b       	or	r24, r25
    190a:	c1 f4       	brne	.+48     	; 0x193c <xStreamBufferReset+0x4e>
    190c:	86 85       	ldd	r24, Z+14	; 0x0e
    190e:	46 81       	ldd	r20, Z+6	; 0x06
    1910:	57 81       	ldd	r21, Z+7	; 0x07
    1912:	64 81       	ldd	r22, Z+4	; 0x04
    1914:	75 81       	ldd	r23, Z+5	; 0x05
    1916:	a4 85       	ldd	r26, Z+12	; 0x0c
    1918:	b5 85       	ldd	r27, Z+13	; 0x0d
    191a:	90 e1       	ldi	r25, 0x10	; 16
    191c:	ef 01       	movw	r28, r30
    191e:	19 92       	st	Y+, r1
    1920:	9a 95       	dec	r25
    1922:	e9 f7       	brne	.-6      	; 0x191e <xStreamBufferReset+0x30>
    1924:	b5 87       	std	Z+13, r27	; 0x0d
    1926:	a4 87       	std	Z+12, r26	; 0x0c
    1928:	75 83       	std	Z+5, r23	; 0x05
    192a:	64 83       	std	Z+4, r22	; 0x04
    192c:	57 83       	std	Z+7, r21	; 0x07
    192e:	46 83       	std	Z+6, r20	; 0x06
    1930:	86 87       	std	Z+14, r24	; 0x0e
    1932:	27 87       	std	Z+15, r18	; 0x0f
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	03 c0       	rjmp	.+6      	; 0x193e <xStreamBufferReset+0x50>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	01 c0       	rjmp	.+2      	; 0x193e <xStreamBufferReset+0x50>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <xStreamBufferSpacesAvailable>:
    1948:	fc 01       	movw	r30, r24
    194a:	24 81       	ldd	r18, Z+4	; 0x04
    194c:	35 81       	ldd	r19, Z+5	; 0x05
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	42 81       	ldd	r20, Z+2	; 0x02
    1954:	53 81       	ldd	r21, Z+3	; 0x03
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	84 1b       	sub	r24, r20
    195e:	95 0b       	sbc	r25, r21
    1960:	82 17       	cp	r24, r18
    1962:	93 07       	cpc	r25, r19
    1964:	10 f0       	brcs	.+4      	; 0x196a <xStreamBufferSpacesAvailable+0x22>
    1966:	82 1b       	sub	r24, r18
    1968:	93 0b       	sbc	r25, r19
    196a:	08 95       	ret

0000196c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
    1982:	5b 01       	movw	r10, r22
    1984:	6a 01       	movw	r12, r20
    1986:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1988:	8e 85       	ldd	r24, Y+14	; 0x0e
    198a:	80 ff       	sbrs	r24, 0
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    198e:	8a 01       	movw	r16, r20
    1990:	0e 5f       	subi	r16, 0xFE	; 254
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1996:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1998:	ce 01       	movw	r24, r28
    199a:	d6 df       	rcall	.-84     	; 0x1948 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    199c:	9c 01       	movw	r18, r24
    199e:	a6 01       	movw	r20, r12
    19a0:	b5 01       	movw	r22, r10
    19a2:	ce 01       	movw	r24, r28
    19a4:	ea de       	rcall	.-556    	; 0x177a <prvWriteMessageToBuffer>
    19a6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    19a8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19aa:	b1 f0       	breq	.+44     	; 0x19d8 <xStreamBufferSendFromISR+0x6c>
    19ac:	ce 01       	movw	r24, r28
    19ae:	89 de       	rcall	.-750    	; 0x16c2 <prvBytesInBuffer>
    19b0:	2e 81       	ldd	r18, Y+6	; 0x06
    19b2:	3f 81       	ldd	r19, Y+7	; 0x07
    19b4:	82 17       	cp	r24, r18
    19b6:	93 07       	cpc	r25, r19
    19b8:	78 f0       	brcs	.+30     	; 0x19d8 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    19ba:	88 85       	ldd	r24, Y+8	; 0x08
    19bc:	99 85       	ldd	r25, Y+9	; 0x09
    19be:	89 2b       	or	r24, r25
    19c0:	59 f0       	breq	.+22     	; 0x19d8 <xStreamBufferSendFromISR+0x6c>
    19c2:	88 85       	ldd	r24, Y+8	; 0x08
    19c4:	99 85       	ldd	r25, Y+9	; 0x09
    19c6:	00 e0       	ldi	r16, 0x00	; 0
    19c8:	10 e0       	ldi	r17, 0x00	; 0
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	ba 01       	movw	r22, r20
    19d2:	2f d7       	rcall	.+3678   	; 0x2832 <xTaskGenericNotifyFromISR>
    19d4:	19 86       	std	Y+9, r1	; 0x09
    19d6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    19d8:	c6 01       	movw	r24, r12
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	08 95       	ret

000019f0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    19f0:	6f 92       	push	r6
    19f2:	7f 92       	push	r7
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	1f 92       	push	r1
    1a0e:	1f 92       	push	r1
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	6c 01       	movw	r12, r24
    1a16:	3b 01       	movw	r6, r22
    1a18:	4a 01       	movw	r8, r20
    1a1a:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	86 85       	ldd	r24, Z+14	; 0x0e
    1a20:	80 fd       	sbrc	r24, 0
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a24:	a1 2c       	mov	r10, r1
    1a26:	b1 2c       	mov	r11, r1
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a2a:	68 94       	set
    1a2c:	aa 24       	eor	r10, r10
    1a2e:	a1 f8       	bld	r10, 1
    1a30:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a32:	e1 14       	cp	r14, r1
    1a34:	f1 04       	cpc	r15, r1
    1a36:	29 f1       	breq	.+74     	; 0x1a82 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a3e:	c6 01       	movw	r24, r12
    1a40:	40 de       	rcall	.-896    	; 0x16c2 <prvBytesInBuffer>
    1a42:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a44:	a8 16       	cp	r10, r24
    1a46:	b9 06       	cpc	r11, r25
    1a48:	38 f0       	brcs	.+14     	; 0x1a58 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a4e:	81 d7       	rcall	.+3842   	; 0x2952 <xTaskNotifyStateClear>
    1a50:	c8 d4       	rcall	.+2448   	; 0x23e2 <xTaskGetCurrentTaskHandle>
    1a52:	f6 01       	movw	r30, r12
    1a54:	91 87       	std	Z+9, r25	; 0x09
    1a56:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a5c:	a0 16       	cp	r10, r16
    1a5e:	b1 06       	cpc	r11, r17
    1a60:	b0 f0       	brcs	.+44     	; 0x1a8e <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	a9 01       	movw	r20, r18
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	cb 01       	movw	r24, r22
    1a72:	de d5       	rcall	.+3004   	; 0x2630 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a74:	f6 01       	movw	r30, r12
    1a76:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a78:	10 86       	std	Z+8, r1	; 0x08
    1a7a:	c6 01       	movw	r24, r12
    1a7c:	22 de       	rcall	.-956    	; 0x16c2 <prvBytesInBuffer>
    1a7e:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <xStreamBufferReceive+0x98>
    1a82:	c6 01       	movw	r24, r12
    1a84:	1e de       	rcall	.-964    	; 0x16c2 <prvBytesInBuffer>
    1a86:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a88:	a0 16       	cp	r10, r16
    1a8a:	b1 06       	cpc	r11, r17
    1a8c:	b8 f5       	brcc	.+110    	; 0x1afc <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1a8e:	a1 14       	cp	r10, r1
    1a90:	b1 04       	cpc	r11, r1
    1a92:	c1 f0       	breq	.+48     	; 0x1ac4 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1a94:	f6 01       	movw	r30, r12
    1a96:	e0 80       	ld	r14, Z
    1a98:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1a9a:	98 01       	movw	r18, r16
    1a9c:	a5 01       	movw	r20, r10
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	c6 01       	movw	r24, r12
    1aa6:	a9 de       	rcall	.-686    	; 0x17fa <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1aac:	0a 19       	sub	r16, r10
    1aae:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1ab0:	88 16       	cp	r8, r24
    1ab2:	99 06       	cpc	r9, r25
    1ab4:	30 f4       	brcc	.+12     	; 0x1ac2 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1ab6:	f6 01       	movw	r30, r12
    1ab8:	f1 82       	std	Z+1, r15	; 0x01
    1aba:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1abc:	81 2c       	mov	r8, r1
    1abe:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1ac2:	4c 01       	movw	r8, r24
    1ac4:	98 01       	movw	r18, r16
    1ac6:	a4 01       	movw	r20, r8
    1ac8:	b3 01       	movw	r22, r6
    1aca:	c6 01       	movw	r24, r12
    1acc:	96 de       	rcall	.-724    	; 0x17fa <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ace:	7c 01       	movw	r14, r24
    1ad0:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ad2:	b1 f0       	breq	.+44     	; 0x1b00 <xStreamBufferReceive+0x110>
    1ad4:	eb d1       	rcall	.+982    	; 0x1eac <vTaskSuspendAll>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	82 85       	ldd	r24, Z+10	; 0x0a
    1ada:	93 85       	ldd	r25, Z+11	; 0x0b
    1adc:	89 2b       	or	r24, r25
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <xStreamBufferReceive+0x108>
    1ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ae2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ae4:	00 e0       	ldi	r16, 0x00	; 0
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	ba 01       	movw	r22, r20
    1af0:	22 d6       	rcall	.+3140   	; 0x2736 <xTaskGenericNotify>
    1af2:	f6 01       	movw	r30, r12
    1af4:	13 86       	std	Z+11, r1	; 0x0b
    1af6:	12 86       	std	Z+10, r1	; 0x0a
    1af8:	a3 d2       	rcall	.+1350   	; 0x2040 <xTaskResumeAll>
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1afc:	e1 2c       	mov	r14, r1
    1afe:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b00:	c7 01       	movw	r24, r14
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15
    1b10:	ef 90       	pop	r14
    1b12:	df 90       	pop	r13
    1b14:	cf 90       	pop	r12
    1b16:	bf 90       	pop	r11
    1b18:	af 90       	pop	r10
    1b1a:	9f 90       	pop	r9
    1b1c:	8f 90       	pop	r8
    1b1e:	7f 90       	pop	r7
    1b20:	6f 90       	pop	r6
    1b22:	08 95       	ret

00001b24 <prvResetNextTaskUnblockTime>:
    1b24:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <pxDelayedTaskList>
    1b28:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1b2c:	80 81       	ld	r24, Z
    1b2e:	81 11       	cpse	r24, r1
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <prvResetNextTaskUnblockTime+0x1c>
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	90 93 13 18 	sts	0x1813, r25	; 0x801813 <xNextTaskUnblockTime+0x1>
    1b3a:	80 93 12 18 	sts	0x1812, r24	; 0x801812 <xNextTaskUnblockTime>
    1b3e:	08 95       	ret
    1b40:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <pxDelayedTaskList>
    1b44:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1b48:	05 80       	ldd	r0, Z+5	; 0x05
    1b4a:	f6 81       	ldd	r31, Z+6	; 0x06
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	06 80       	ldd	r0, Z+6	; 0x06
    1b50:	f7 81       	ldd	r31, Z+7	; 0x07
    1b52:	e0 2d       	mov	r30, r0
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	90 93 13 18 	sts	0x1813, r25	; 0x801813 <xNextTaskUnblockTime+0x1>
    1b5c:	80 93 12 18 	sts	0x1812, r24	; 0x801812 <xNextTaskUnblockTime>
    1b60:	08 95       	ret

00001b62 <prvAddCurrentTaskToDelayedList>:
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	ec 01       	movw	r28, r24
    1b6e:	f6 2e       	mov	r15, r22
    1b70:	00 91 1a 18 	lds	r16, 0x181A	; 0x80181a <xTickCount>
    1b74:	10 91 1b 18 	lds	r17, 0x181B	; 0x80181b <xTickCount+0x1>
    1b78:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    1b7c:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	7c d8       	rcall	.-3848   	; 0xc7c <uxListRemove>
    1b84:	cf 3f       	cpi	r28, 0xFF	; 255
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	d8 07       	cpc	r29, r24
    1b8a:	61 f4       	brne	.+24     	; 0x1ba4 <prvAddCurrentTaskToDelayedList+0x42>
    1b8c:	ff 20       	and	r15, r15
    1b8e:	51 f0       	breq	.+20     	; 0x1ba4 <prvAddCurrentTaskToDelayedList+0x42>
    1b90:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    1b94:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1b98:	6e 5f       	subi	r22, 0xFE	; 254
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8d e1       	ldi	r24, 0x1D	; 29
    1b9e:	98 e1       	ldi	r25, 0x18	; 24
    1ba0:	1b d8       	rcall	.-4042   	; 0xbd8 <vListInsertEnd>
    1ba2:	2d c0       	rjmp	.+90     	; 0x1bfe <prvAddCurrentTaskToDelayedList+0x9c>
    1ba4:	c0 0f       	add	r28, r16
    1ba6:	d1 1f       	adc	r29, r17
    1ba8:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1bac:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1bb0:	d3 83       	std	Z+3, r29	; 0x03
    1bb2:	c2 83       	std	Z+2, r28	; 0x02
    1bb4:	c0 17       	cp	r28, r16
    1bb6:	d1 07       	cpc	r29, r17
    1bb8:	60 f4       	brcc	.+24     	; 0x1bd2 <prvAddCurrentTaskToDelayedList+0x70>
    1bba:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    1bbe:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1bc2:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <pxOverflowDelayedTaskList>
    1bc6:	90 91 3a 18 	lds	r25, 0x183A	; 0x80183a <pxOverflowDelayedTaskList+0x1>
    1bca:	6e 5f       	subi	r22, 0xFE	; 254
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	25 d8       	rcall	.-4022   	; 0xc1a <vListInsert>
    1bd0:	16 c0       	rjmp	.+44     	; 0x1bfe <prvAddCurrentTaskToDelayedList+0x9c>
    1bd2:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    1bd6:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1bda:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <pxDelayedTaskList>
    1bde:	90 91 3c 18 	lds	r25, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1be2:	6e 5f       	subi	r22, 0xFE	; 254
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	19 d8       	rcall	.-4046   	; 0xc1a <vListInsert>
    1be8:	80 91 12 18 	lds	r24, 0x1812	; 0x801812 <xNextTaskUnblockTime>
    1bec:	90 91 13 18 	lds	r25, 0x1813	; 0x801813 <xNextTaskUnblockTime+0x1>
    1bf0:	c8 17       	cp	r28, r24
    1bf2:	d9 07       	cpc	r29, r25
    1bf4:	20 f4       	brcc	.+8      	; 0x1bfe <prvAddCurrentTaskToDelayedList+0x9c>
    1bf6:	d0 93 13 18 	sts	0x1813, r29	; 0x801813 <xNextTaskUnblockTime+0x1>
    1bfa:	c0 93 12 18 	sts	0x1812, r28	; 0x801812 <xNextTaskUnblockTime>
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	08 95       	ret

00001c0a <xTaskCreate>:
    1c0a:	4f 92       	push	r4
    1c0c:	5f 92       	push	r5
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	4c 01       	movw	r8, r24
    1c2a:	6b 01       	movw	r12, r22
    1c2c:	5a 01       	movw	r10, r20
    1c2e:	29 01       	movw	r4, r18
    1c30:	ca 01       	movw	r24, r20
    1c32:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <pvPortMalloc>
    1c36:	3c 01       	movw	r6, r24
    1c38:	89 2b       	or	r24, r25
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <xTaskCreate+0x34>
    1c3c:	f3 c0       	rjmp	.+486    	; 0x1e24 <xTaskCreate+0x21a>
    1c3e:	8c e2       	ldi	r24, 0x2C	; 44
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <pvPortMalloc>
    1c46:	ec 01       	movw	r28, r24
    1c48:	89 2b       	or	r24, r25
    1c4a:	99 f0       	breq	.+38     	; 0x1c72 <xTaskCreate+0x68>
    1c4c:	78 8e       	std	Y+24, r7	; 0x18
    1c4e:	6f 8a       	std	Y+23, r6	; 0x17
    1c50:	a5 01       	movw	r20, r10
    1c52:	65 ea       	ldi	r22, 0xA5	; 165
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	c3 01       	movw	r24, r6
    1c58:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memset>
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	a8 1a       	sub	r10, r24
    1c60:	b1 08       	sbc	r11, r1
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	a8 0e       	add	r10, r24
    1c68:	b9 1e       	adc	r11, r25
    1c6a:	c1 14       	cp	r12, r1
    1c6c:	d1 04       	cpc	r13, r1
    1c6e:	29 f4       	brne	.+10     	; 0x1c7a <xTaskCreate+0x70>
    1c70:	20 c0       	rjmp	.+64     	; 0x1cb2 <xTaskCreate+0xa8>
    1c72:	c3 01       	movw	r24, r6
    1c74:	0e 94 a9 05 	call	0xb52	; 0xb52 <vPortFree>
    1c78:	d5 c0       	rjmp	.+426    	; 0x1e24 <xTaskCreate+0x21a>
    1c7a:	d6 01       	movw	r26, r12
    1c7c:	8c 91       	ld	r24, X
    1c7e:	89 8f       	std	Y+25, r24	; 0x19
    1c80:	8c 91       	ld	r24, X
    1c82:	88 23       	and	r24, r24
    1c84:	a1 f0       	breq	.+40     	; 0x1cae <xTaskCreate+0xa4>
    1c86:	ae 01       	movw	r20, r28
    1c88:	46 5e       	subi	r20, 0xE6	; 230
    1c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8c:	f6 01       	movw	r30, r12
    1c8e:	31 96       	adiw	r30, 0x01	; 1
    1c90:	b8 e0       	ldi	r27, 0x08	; 8
    1c92:	cb 0e       	add	r12, r27
    1c94:	d1 1c       	adc	r13, r1
    1c96:	cf 01       	movw	r24, r30
    1c98:	21 91       	ld	r18, Z+
    1c9a:	da 01       	movw	r26, r20
    1c9c:	2d 93       	st	X+, r18
    1c9e:	ad 01       	movw	r20, r26
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	8c 91       	ld	r24, X
    1ca4:	88 23       	and	r24, r24
    1ca6:	19 f0       	breq	.+6      	; 0x1cae <xTaskCreate+0xa4>
    1ca8:	ec 15       	cp	r30, r12
    1caa:	fd 05       	cpc	r31, r13
    1cac:	a1 f7       	brne	.-24     	; 0x1c96 <xTaskCreate+0x8c>
    1cae:	18 a2       	std	Y+32, r1	; 0x20
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <xTaskCreate+0xaa>
    1cb2:	19 8e       	std	Y+25, r1	; 0x19
    1cb4:	04 30       	cpi	r16, 0x04	; 4
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <xTaskCreate+0xb0>
    1cb8:	03 e0       	ldi	r16, 0x03	; 3
    1cba:	0e 8b       	std	Y+22, r16	; 0x16
    1cbc:	0b a3       	std	Y+35, r16	; 0x23
    1cbe:	1c a2       	std	Y+36, r1	; 0x24
    1cc0:	6e 01       	movw	r12, r28
    1cc2:	b2 e0       	ldi	r27, 0x02	; 2
    1cc4:	cb 0e       	add	r12, r27
    1cc6:	d1 1c       	adc	r13, r1
    1cc8:	c6 01       	movw	r24, r12
    1cca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <vListInitialiseItem>
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0c 96       	adiw	r24, 0x0c	; 12
    1cd2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <vListInitialiseItem>
    1cd6:	d9 87       	std	Y+9, r29	; 0x09
    1cd8:	c8 87       	std	Y+8, r28	; 0x08
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	80 1b       	sub	r24, r16
    1ce0:	91 09       	sbc	r25, r1
    1ce2:	9d 87       	std	Y+13, r25	; 0x0d
    1ce4:	8c 87       	std	Y+12, r24	; 0x0c
    1ce6:	db 8b       	std	Y+19, r29	; 0x13
    1ce8:	ca 8b       	std	Y+18, r28	; 0x12
    1cea:	1e a2       	std	Y+38, r1	; 0x26
    1cec:	1d a2       	std	Y+37, r1	; 0x25
    1cee:	1f a2       	std	Y+39, r1	; 0x27
    1cf0:	18 a6       	std	Y+40, r1	; 0x28
    1cf2:	19 a6       	std	Y+41, r1	; 0x29
    1cf4:	1a a6       	std	Y+42, r1	; 0x2a
    1cf6:	1b a6       	std	Y+43, r1	; 0x2b
    1cf8:	a2 01       	movw	r20, r4
    1cfa:	b4 01       	movw	r22, r8
    1cfc:	c5 01       	movw	r24, r10
    1cfe:	0e 94 65 06 	call	0xcca	; 0xcca <pxPortInitialiseStack>
    1d02:	99 83       	std	Y+1, r25	; 0x01
    1d04:	88 83       	st	Y, r24
    1d06:	e1 14       	cp	r14, r1
    1d08:	f1 04       	cpc	r15, r1
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <xTaskCreate+0x108>
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	d1 83       	std	Z+1, r29	; 0x01
    1d10:	c0 83       	st	Z, r28
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	0f 92       	push	r0
    1d18:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <uxCurrentNumberOfTasks>
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <uxCurrentNumberOfTasks>
    1d22:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    1d26:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	d1 f5       	brne	.+116    	; 0x1da2 <xTaskCreate+0x198>
    1d2e:	d0 93 74 18 	sts	0x1874, r29	; 0x801874 <pxCurrentTCB+0x1>
    1d32:	c0 93 73 18 	sts	0x1873, r28	; 0x801873 <pxCurrentTCB>
    1d36:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <uxCurrentNumberOfTasks>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <xTaskCreate+0x136>
    1d3e:	41 c0       	rjmp	.+130    	; 0x1dc2 <xTaskCreate+0x1b8>
    1d40:	8f e4       	ldi	r24, 0x4F	; 79
    1d42:	98 e1       	ldi	r25, 0x18	; 24
    1d44:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d48:	88 e5       	ldi	r24, 0x58	; 88
    1d4a:	98 e1       	ldi	r25, 0x18	; 24
    1d4c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d50:	81 e6       	ldi	r24, 0x61	; 97
    1d52:	98 e1       	ldi	r25, 0x18	; 24
    1d54:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d58:	8a e6       	ldi	r24, 0x6A	; 106
    1d5a:	98 e1       	ldi	r25, 0x18	; 24
    1d5c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d60:	86 e4       	ldi	r24, 0x46	; 70
    1d62:	98 e1       	ldi	r25, 0x18	; 24
    1d64:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d68:	8d e3       	ldi	r24, 0x3D	; 61
    1d6a:	98 e1       	ldi	r25, 0x18	; 24
    1d6c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d70:	80 e3       	ldi	r24, 0x30	; 48
    1d72:	98 e1       	ldi	r25, 0x18	; 24
    1d74:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d78:	87 e2       	ldi	r24, 0x27	; 39
    1d7a:	98 e1       	ldi	r25, 0x18	; 24
    1d7c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d80:	8d e1       	ldi	r24, 0x1D	; 29
    1d82:	98 e1       	ldi	r25, 0x18	; 24
    1d84:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    1d88:	86 e4       	ldi	r24, 0x46	; 70
    1d8a:	98 e1       	ldi	r25, 0x18	; 24
    1d8c:	90 93 3c 18 	sts	0x183C, r25	; 0x80183c <pxDelayedTaskList+0x1>
    1d90:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <pxDelayedTaskList>
    1d94:	8d e3       	ldi	r24, 0x3D	; 61
    1d96:	98 e1       	ldi	r25, 0x18	; 24
    1d98:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <pxOverflowDelayedTaskList+0x1>
    1d9c:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <pxOverflowDelayedTaskList>
    1da0:	10 c0       	rjmp	.+32     	; 0x1dc2 <xTaskCreate+0x1b8>
    1da2:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <xSchedulerRunning>
    1da6:	81 11       	cpse	r24, r1
    1da8:	0c c0       	rjmp	.+24     	; 0x1dc2 <xTaskCreate+0x1b8>
    1daa:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1dae:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1db2:	96 89       	ldd	r25, Z+22	; 0x16
    1db4:	8e 89       	ldd	r24, Y+22	; 0x16
    1db6:	89 17       	cp	r24, r25
    1db8:	20 f0       	brcs	.+8      	; 0x1dc2 <xTaskCreate+0x1b8>
    1dba:	d0 93 74 18 	sts	0x1874, r29	; 0x801874 <pxCurrentTCB+0x1>
    1dbe:	c0 93 73 18 	sts	0x1873, r28	; 0x801873 <pxCurrentTCB>
    1dc2:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <uxTaskNumber>
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <uxTaskNumber>
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
    1dce:	8e 89       	ldd	r24, Y+22	; 0x16
    1dd0:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    1dd4:	98 17       	cp	r25, r24
    1dd6:	10 f4       	brcc	.+4      	; 0x1ddc <xTaskCreate+0x1d2>
    1dd8:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9c 01       	movw	r18, r24
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	82 0f       	add	r24, r18
    1dee:	93 1f       	adc	r25, r19
    1df0:	b6 01       	movw	r22, r12
    1df2:	81 5b       	subi	r24, 0xB1	; 177
    1df4:	97 4e       	sbci	r25, 0xE7	; 231
    1df6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <xSchedulerRunning>
    1e02:	88 23       	and	r24, r24
    1e04:	59 f0       	breq	.+22     	; 0x1e1c <xTaskCreate+0x212>
    1e06:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1e0a:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1e0e:	96 89       	ldd	r25, Z+22	; 0x16
    1e10:	8e 89       	ldd	r24, Y+22	; 0x16
    1e12:	98 17       	cp	r25, r24
    1e14:	28 f4       	brcc	.+10     	; 0x1e20 <xTaskCreate+0x216>
    1e16:	07 d8       	rcall	.-4082   	; 0xe26 <vPortYield>
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <xTaskCreate+0x21c>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <xTaskCreate+0x21c>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <xTaskCreate+0x21c>
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	9f 90       	pop	r9
    1e3a:	8f 90       	pop	r8
    1e3c:	7f 90       	pop	r7
    1e3e:	6f 90       	pop	r6
    1e40:	5f 90       	pop	r5
    1e42:	4f 90       	pop	r4
    1e44:	08 95       	ret

00001e46 <vTaskStartScheduler>:
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	0f 2e       	mov	r0, r31
    1e4e:	f0 e1       	ldi	r31, 0x10	; 16
    1e50:	ef 2e       	mov	r14, r31
    1e52:	f8 e1       	ldi	r31, 0x18	; 24
    1e54:	ff 2e       	mov	r15, r31
    1e56:	f0 2d       	mov	r31, r0
    1e58:	00 e0       	ldi	r16, 0x00	; 0
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 ec       	ldi	r20, 0xC0	; 192
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	6f e6       	ldi	r22, 0x6F	; 111
    1e64:	75 e0       	ldi	r23, 0x05	; 5
    1e66:	8d ec       	ldi	r24, 0xCD	; 205
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	cf de       	rcall	.-610    	; 0x1c0a <xTaskCreate>
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	d1 f4       	brne	.+52     	; 0x1ea4 <vTaskStartScheduler+0x5e>
    1e70:	dc d5       	rcall	.+3000   	; 0x2a2a <xTimerCreateTimerTask>
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	b9 f4       	brne	.+46     	; 0x1ea4 <vTaskStartScheduler+0x5e>
    1e76:	f8 94       	cli
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	90 93 13 18 	sts	0x1813, r25	; 0x801813 <xNextTaskUnblockTime+0x1>
    1e80:	80 93 12 18 	sts	0x1812, r24	; 0x801812 <xNextTaskUnblockTime>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <xSchedulerRunning>
    1e8a:	10 92 1b 18 	sts	0x181B, r1	; 0x80181b <xTickCount+0x1>
    1e8e:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <xTickCount>
    1e92:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1e96:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1e9a:	85 a1       	ldd	r24, Z+37	; 0x25
    1e9c:	0e 94 93 04 	call	0x926	; 0x926 <task_switch_in>
    1ea0:	0e 94 d7 06 	call	0xdae	; 0xdae <xPortStartScheduler>
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <vTaskSuspendAll>:
    1eac:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <uxSchedulerSuspended>
    1eb6:	08 95       	ret

00001eb8 <xTaskGetTickCount>:
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	0f 92       	push	r0
    1ebe:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <xTickCount>
    1ec2:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <xTickCount+0x1>
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	08 95       	ret

00001ecc <xTaskIncrementTick>:
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	98 c0       	rjmp	.+304    	; 0x2014 <xTaskIncrementTick+0x148>
    1ee4:	e0 90 1a 18 	lds	r14, 0x181A	; 0x80181a <xTickCount>
    1ee8:	f0 90 1b 18 	lds	r15, 0x181B	; 0x80181b <xTickCount+0x1>
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	e8 1a       	sub	r14, r24
    1ef0:	f8 0a       	sbc	r15, r24
    1ef2:	f0 92 1b 18 	sts	0x181B, r15	; 0x80181b <xTickCount+0x1>
    1ef6:	e0 92 1a 18 	sts	0x181A, r14	; 0x80181a <xTickCount>
    1efa:	e1 14       	cp	r14, r1
    1efc:	f1 04       	cpc	r15, r1
    1efe:	b1 f4       	brne	.+44     	; 0x1f2c <xTaskIncrementTick+0x60>
    1f00:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <pxDelayedTaskList>
    1f04:	90 91 3c 18 	lds	r25, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1f08:	20 91 39 18 	lds	r18, 0x1839	; 0x801839 <pxOverflowDelayedTaskList>
    1f0c:	30 91 3a 18 	lds	r19, 0x183A	; 0x80183a <pxOverflowDelayedTaskList+0x1>
    1f10:	30 93 3c 18 	sts	0x183C, r19	; 0x80183c <pxDelayedTaskList+0x1>
    1f14:	20 93 3b 18 	sts	0x183B, r18	; 0x80183b <pxDelayedTaskList>
    1f18:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <pxOverflowDelayedTaskList+0x1>
    1f1c:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <pxOverflowDelayedTaskList>
    1f20:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <xNumOfOverflows>
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <xNumOfOverflows>
    1f2a:	fc dd       	rcall	.-1032   	; 0x1b24 <prvResetNextTaskUnblockTime>
    1f2c:	80 91 12 18 	lds	r24, 0x1812	; 0x801812 <xNextTaskUnblockTime>
    1f30:	90 91 13 18 	lds	r25, 0x1813	; 0x801813 <xNextTaskUnblockTime+0x1>
    1f34:	e8 16       	cp	r14, r24
    1f36:	f9 06       	cpc	r15, r25
    1f38:	10 f4       	brcc	.+4      	; 0x1f3e <xTaskIncrementTick+0x72>
    1f3a:	d1 2c       	mov	r13, r1
    1f3c:	53 c0       	rjmp	.+166    	; 0x1fe4 <xTaskIncrementTick+0x118>
    1f3e:	d1 2c       	mov	r13, r1
    1f40:	cc 24       	eor	r12, r12
    1f42:	c3 94       	inc	r12
    1f44:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <pxDelayedTaskList>
    1f48:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1f4c:	80 81       	ld	r24, Z
    1f4e:	81 11       	cpse	r24, r1
    1f50:	07 c0       	rjmp	.+14     	; 0x1f60 <xTaskIncrementTick+0x94>
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	9f ef       	ldi	r25, 0xFF	; 255
    1f56:	90 93 13 18 	sts	0x1813, r25	; 0x801813 <xNextTaskUnblockTime+0x1>
    1f5a:	80 93 12 18 	sts	0x1812, r24	; 0x801812 <xNextTaskUnblockTime>
    1f5e:	42 c0       	rjmp	.+132    	; 0x1fe4 <xTaskIncrementTick+0x118>
    1f60:	e0 91 3b 18 	lds	r30, 0x183B	; 0x80183b <pxDelayedTaskList>
    1f64:	f0 91 3c 18 	lds	r31, 0x183C	; 0x80183c <pxDelayedTaskList+0x1>
    1f68:	05 80       	ldd	r0, Z+5	; 0x05
    1f6a:	f6 81       	ldd	r31, Z+6	; 0x06
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	c6 81       	ldd	r28, Z+6	; 0x06
    1f70:	d7 81       	ldd	r29, Z+7	; 0x07
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	e8 16       	cp	r14, r24
    1f78:	f9 06       	cpc	r15, r25
    1f7a:	28 f4       	brcc	.+10     	; 0x1f86 <xTaskIncrementTick+0xba>
    1f7c:	90 93 13 18 	sts	0x1813, r25	; 0x801813 <xNextTaskUnblockTime+0x1>
    1f80:	80 93 12 18 	sts	0x1812, r24	; 0x801812 <xNextTaskUnblockTime>
    1f84:	2f c0       	rjmp	.+94     	; 0x1fe4 <xTaskIncrementTick+0x118>
    1f86:	8e 01       	movw	r16, r28
    1f88:	0e 5f       	subi	r16, 0xFE	; 254
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    1f92:	8c 89       	ldd	r24, Y+20	; 0x14
    1f94:	9d 89       	ldd	r25, Y+21	; 0x15
    1f96:	89 2b       	or	r24, r25
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <xTaskIncrementTick+0xd6>
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	0c 96       	adiw	r24, 0x0c	; 12
    1f9e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    1fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fa4:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    1fa8:	98 17       	cp	r25, r24
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <xTaskIncrementTick+0xe4>
    1fac:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	22 0f       	add	r18, r18
    1fbe:	33 1f       	adc	r19, r19
    1fc0:	82 0f       	add	r24, r18
    1fc2:	93 1f       	adc	r25, r19
    1fc4:	b8 01       	movw	r22, r16
    1fc6:	81 5b       	subi	r24, 0xB1	; 177
    1fc8:	97 4e       	sbci	r25, 0xE7	; 231
    1fca:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    1fce:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1fd2:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1fd6:	9e 89       	ldd	r25, Y+22	; 0x16
    1fd8:	86 89       	ldd	r24, Z+22	; 0x16
    1fda:	98 17       	cp	r25, r24
    1fdc:	08 f4       	brcc	.+2      	; 0x1fe0 <xTaskIncrementTick+0x114>
    1fde:	b2 cf       	rjmp	.-156    	; 0x1f44 <xTaskIncrementTick+0x78>
    1fe0:	dc 2c       	mov	r13, r12
    1fe2:	b0 cf       	rjmp	.-160    	; 0x1f44 <xTaskIncrementTick+0x78>
    1fe4:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    1fe8:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    1fec:	86 89       	ldd	r24, Z+22	; 0x16
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	ee 0f       	add	r30, r30
    1ff4:	ff 1f       	adc	r31, r31
    1ff6:	ee 0f       	add	r30, r30
    1ff8:	ff 1f       	adc	r31, r31
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	8e 0f       	add	r24, r30
    2000:	9f 1f       	adc	r25, r31
    2002:	fc 01       	movw	r30, r24
    2004:	e1 5b       	subi	r30, 0xB1	; 177
    2006:	f7 4e       	sbci	r31, 0xE7	; 231
    2008:	80 81       	ld	r24, Z
    200a:	82 30       	cpi	r24, 0x02	; 2
    200c:	48 f0       	brcs	.+18     	; 0x2020 <xTaskIncrementTick+0x154>
    200e:	dd 24       	eor	r13, r13
    2010:	d3 94       	inc	r13
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <xTaskIncrementTick+0x154>
    2014:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <uxPendedTicks>
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <uxPendedTicks>
    201e:	d1 2c       	mov	r13, r1
    2020:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xYieldPending>
    2024:	88 23       	and	r24, r24
    2026:	11 f0       	breq	.+4      	; 0x202c <xTaskIncrementTick+0x160>
    2028:	dd 24       	eor	r13, r13
    202a:	d3 94       	inc	r13
    202c:	8d 2d       	mov	r24, r13
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	df 90       	pop	r13
    203c:	cf 90       	pop	r12
    203e:	08 95       	ret

00002040 <xTaskResumeAll>:
    2040:	df 92       	push	r13
    2042:	ef 92       	push	r14
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	0f 92       	push	r0
    2054:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    2058:	81 50       	subi	r24, 0x01	; 1
    205a:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <uxSchedulerSuspended>
    205e:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    2062:	81 11       	cpse	r24, r1
    2064:	5d c0       	rjmp	.+186    	; 0x2120 <xTaskResumeAll+0xe0>
    2066:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <uxCurrentNumberOfTasks>
    206a:	81 11       	cpse	r24, r1
    206c:	33 c0       	rjmp	.+102    	; 0x20d4 <xTaskResumeAll+0x94>
    206e:	5b c0       	rjmp	.+182    	; 0x2126 <xTaskResumeAll+0xe6>
    2070:	d7 01       	movw	r26, r14
    2072:	15 96       	adiw	r26, 0x05	; 5
    2074:	ed 91       	ld	r30, X+
    2076:	fc 91       	ld	r31, X
    2078:	16 97       	sbiw	r26, 0x06	; 6
    207a:	c6 81       	ldd	r28, Z+6	; 0x06
    207c:	d7 81       	ldd	r29, Z+7	; 0x07
    207e:	ce 01       	movw	r24, r28
    2080:	0c 96       	adiw	r24, 0x0c	; 12
    2082:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    2086:	8e 01       	movw	r16, r28
    2088:	0e 5f       	subi	r16, 0xFE	; 254
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	c8 01       	movw	r24, r16
    208e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    2092:	8e 89       	ldd	r24, Y+22	; 0x16
    2094:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    2098:	98 17       	cp	r25, r24
    209a:	10 f4       	brcc	.+4      	; 0x20a0 <xTaskResumeAll+0x60>
    209c:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 01       	movw	r18, r24
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	22 0f       	add	r18, r18
    20ae:	33 1f       	adc	r19, r19
    20b0:	82 0f       	add	r24, r18
    20b2:	93 1f       	adc	r25, r19
    20b4:	b8 01       	movw	r22, r16
    20b6:	81 5b       	subi	r24, 0xB1	; 177
    20b8:	97 4e       	sbci	r25, 0xE7	; 231
    20ba:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    20be:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    20c2:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    20c6:	9e 89       	ldd	r25, Y+22	; 0x16
    20c8:	86 89       	ldd	r24, Z+22	; 0x16
    20ca:	98 17       	cp	r25, r24
    20cc:	68 f0       	brcs	.+26     	; 0x20e8 <xTaskResumeAll+0xa8>
    20ce:	d0 92 16 18 	sts	0x1816, r13	; 0x801816 <xYieldPending>
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <xTaskResumeAll+0xa8>
    20d4:	c0 e0       	ldi	r28, 0x00	; 0
    20d6:	d0 e0       	ldi	r29, 0x00	; 0
    20d8:	0f 2e       	mov	r0, r31
    20da:	f0 e3       	ldi	r31, 0x30	; 48
    20dc:	ef 2e       	mov	r14, r31
    20de:	f8 e1       	ldi	r31, 0x18	; 24
    20e0:	ff 2e       	mov	r15, r31
    20e2:	f0 2d       	mov	r31, r0
    20e4:	dd 24       	eor	r13, r13
    20e6:	d3 94       	inc	r13
    20e8:	f7 01       	movw	r30, r14
    20ea:	80 81       	ld	r24, Z
    20ec:	81 11       	cpse	r24, r1
    20ee:	c0 cf       	rjmp	.-128    	; 0x2070 <xTaskResumeAll+0x30>
    20f0:	cd 2b       	or	r28, r29
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <xTaskResumeAll+0xb6>
    20f4:	17 dd       	rcall	.-1490   	; 0x1b24 <prvResetNextTaskUnblockTime>
    20f6:	c0 91 17 18 	lds	r28, 0x1817	; 0x801817 <uxPendedTicks>
    20fa:	cc 23       	and	r28, r28
    20fc:	49 f0       	breq	.+18     	; 0x2110 <xTaskResumeAll+0xd0>
    20fe:	d1 e0       	ldi	r29, 0x01	; 1
    2100:	e5 de       	rcall	.-566    	; 0x1ecc <xTaskIncrementTick>
    2102:	81 11       	cpse	r24, r1
    2104:	d0 93 16 18 	sts	0x1816, r29	; 0x801816 <xYieldPending>
    2108:	c1 50       	subi	r28, 0x01	; 1
    210a:	d1 f7       	brne	.-12     	; 0x2100 <xTaskResumeAll+0xc0>
    210c:	10 92 17 18 	sts	0x1817, r1	; 0x801817 <uxPendedTicks>
    2110:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <xYieldPending>
    2114:	88 23       	and	r24, r24
    2116:	31 f0       	breq	.+12     	; 0x2124 <xTaskResumeAll+0xe4>
    2118:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	03 c0       	rjmp	.+6      	; 0x2126 <xTaskResumeAll+0xe6>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <xTaskResumeAll+0xe6>
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	0f 90       	pop	r0
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	08 95       	ret

0000213a <vTaskDelay>:
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	ec 01       	movw	r28, r24
    2140:	89 2b       	or	r24, r25
    2142:	39 f0       	breq	.+14     	; 0x2152 <vTaskDelay+0x18>
    2144:	b3 de       	rcall	.-666    	; 0x1eac <vTaskSuspendAll>
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	ce 01       	movw	r24, r28
    214a:	0b dd       	rcall	.-1514   	; 0x1b62 <prvAddCurrentTaskToDelayedList>
    214c:	79 df       	rcall	.-270    	; 0x2040 <xTaskResumeAll>
    214e:	81 11       	cpse	r24, r1
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <vTaskDelay+0x1c>
    2152:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <vTaskSwitchContext>:
    215c:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    2160:	88 23       	and	r24, r24
    2162:	21 f0       	breq	.+8      	; 0x216c <vTaskSwitchContext+0x10>
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <xYieldPending>
    216a:	08 95       	ret
    216c:	10 92 16 18 	sts	0x1816, r1	; 0x801816 <xYieldPending>
    2170:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2174:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2178:	85 a1       	ldd	r24, Z+37	; 0x25
    217a:	0e 94 9d 04 	call	0x93a	; 0x93a <task_switch_out>
    217e:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
    2182:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2186:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    218a:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    218e:	2d 91       	ld	r18, X+
    2190:	3c 91       	ld	r19, X
    2192:	87 89       	ldd	r24, Z+23	; 0x17
    2194:	90 8d       	ldd	r25, Z+24	; 0x18
    2196:	82 17       	cp	r24, r18
    2198:	93 07       	cpc	r25, r19
    219a:	58 f0       	brcs	.+22     	; 0x21b2 <vTaskSwitchContext+0x56>
    219c:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    21a0:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    21a4:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    21a8:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    21ac:	67 5e       	subi	r22, 0xE7	; 231
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	1f d5       	rcall	.+2622   	; 0x2bf0 <vApplicationStackOverflowHook>
    21b2:	20 91 19 18 	lds	r18, 0x1819	; 0x801819 <uxTopReadyPriority>
    21b6:	82 2f       	mov	r24, r18
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	fc 01       	movw	r30, r24
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	e8 0f       	add	r30, r24
    21ca:	f9 1f       	adc	r31, r25
    21cc:	e1 5b       	subi	r30, 0xB1	; 177
    21ce:	f7 4e       	sbci	r31, 0xE7	; 231
    21d0:	30 81       	ld	r19, Z
    21d2:	31 11       	cpse	r19, r1
    21d4:	11 c0       	rjmp	.+34     	; 0x21f8 <vTaskSwitchContext+0x9c>
    21d6:	21 50       	subi	r18, 0x01	; 1
    21d8:	82 2f       	mov	r24, r18
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	fc 01       	movw	r30, r24
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	e8 0f       	add	r30, r24
    21ec:	f9 1f       	adc	r31, r25
    21ee:	e1 5b       	subi	r30, 0xB1	; 177
    21f0:	f7 4e       	sbci	r31, 0xE7	; 231
    21f2:	30 81       	ld	r19, Z
    21f4:	33 23       	and	r19, r19
    21f6:	79 f3       	breq	.-34     	; 0x21d6 <vTaskSwitchContext+0x7a>
    21f8:	ac 01       	movw	r20, r24
    21fa:	44 0f       	add	r20, r20
    21fc:	55 1f       	adc	r21, r21
    21fe:	44 0f       	add	r20, r20
    2200:	55 1f       	adc	r21, r21
    2202:	44 0f       	add	r20, r20
    2204:	55 1f       	adc	r21, r21
    2206:	48 0f       	add	r20, r24
    2208:	59 1f       	adc	r21, r25
    220a:	da 01       	movw	r26, r20
    220c:	a1 5b       	subi	r26, 0xB1	; 177
    220e:	b7 4e       	sbci	r27, 0xE7	; 231
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	12 97       	sbiw	r26, 0x02	; 2
    2218:	02 80       	ldd	r0, Z+2	; 0x02
    221a:	f3 81       	ldd	r31, Z+3	; 0x03
    221c:	e0 2d       	mov	r30, r0
    221e:	12 96       	adiw	r26, 0x02	; 2
    2220:	fc 93       	st	X, r31
    2222:	ee 93       	st	-X, r30
    2224:	11 97       	sbiw	r26, 0x01	; 1
    2226:	4e 5a       	subi	r20, 0xAE	; 174
    2228:	57 4e       	sbci	r21, 0xE7	; 231
    222a:	e4 17       	cp	r30, r20
    222c:	f5 07       	cpc	r31, r21
    222e:	29 f4       	brne	.+10     	; 0x223a <__stack+0x3b>
    2230:	42 81       	ldd	r20, Z+2	; 0x02
    2232:	53 81       	ldd	r21, Z+3	; 0x03
    2234:	fd 01       	movw	r30, r26
    2236:	52 83       	std	Z+2, r21	; 0x02
    2238:	41 83       	std	Z+1, r20	; 0x01
    223a:	fc 01       	movw	r30, r24
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	8e 0f       	add	r24, r30
    224a:	9f 1f       	adc	r25, r31
    224c:	fc 01       	movw	r30, r24
    224e:	e1 5b       	subi	r30, 0xB1	; 177
    2250:	f7 4e       	sbci	r31, 0xE7	; 231
    2252:	01 80       	ldd	r0, Z+1	; 0x01
    2254:	f2 81       	ldd	r31, Z+2	; 0x02
    2256:	e0 2d       	mov	r30, r0
    2258:	86 81       	ldd	r24, Z+6	; 0x06
    225a:	97 81       	ldd	r25, Z+7	; 0x07
    225c:	90 93 74 18 	sts	0x1874, r25	; 0x801874 <pxCurrentTCB+0x1>
    2260:	80 93 73 18 	sts	0x1873, r24	; 0x801873 <pxCurrentTCB>
    2264:	20 93 19 18 	sts	0x1819, r18	; 0x801819 <uxTopReadyPriority>
    2268:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    226c:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2270:	85 a1       	ldd	r24, Z+37	; 0x25
    2272:	0c 94 93 04 	jmp	0x926	; 0x926 <task_switch_in>
    2276:	08 95       	ret

00002278 <vTaskPlaceOnEventList>:
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	eb 01       	movw	r28, r22
    227e:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    2282:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2286:	64 5f       	subi	r22, 0xF4	; 244
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInsert>
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	ce 01       	movw	r24, r28
    2292:	67 dc       	rcall	.-1842   	; 0x1b62 <prvAddCurrentTaskToDelayedList>
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <vTaskPlaceOnEventListRestricted>:
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	8b 01       	movw	r16, r22
    22a2:	c4 2f       	mov	r28, r20
    22a4:	60 91 73 18 	lds	r22, 0x1873	; 0x801873 <pxCurrentTCB>
    22a8:	70 91 74 18 	lds	r23, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    22ac:	64 5f       	subi	r22, 0xF4	; 244
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    22b4:	cc 23       	and	r28, r28
    22b6:	11 f0       	breq	.+4      	; 0x22bc <vTaskPlaceOnEventListRestricted+0x22>
    22b8:	0f ef       	ldi	r16, 0xFF	; 255
    22ba:	1f ef       	ldi	r17, 0xFF	; 255
    22bc:	6c 2f       	mov	r22, r28
    22be:	c8 01       	movw	r24, r16
    22c0:	50 dc       	rcall	.-1888   	; 0x1b62 <prvAddCurrentTaskToDelayedList>
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <xTaskRemoveFromEventList>:
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	dc 01       	movw	r26, r24
    22d4:	15 96       	adiw	r26, 0x05	; 5
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	16 97       	sbiw	r26, 0x06	; 6
    22dc:	c6 81       	ldd	r28, Z+6	; 0x06
    22de:	d7 81       	ldd	r29, Z+7	; 0x07
    22e0:	8e 01       	movw	r16, r28
    22e2:	04 5f       	subi	r16, 0xF4	; 244
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	c8 01       	movw	r24, r16
    22e8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    22ec:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    22f0:	81 11       	cpse	r24, r1
    22f2:	1c c0       	rjmp	.+56     	; 0x232c <xTaskRemoveFromEventList+0x62>
    22f4:	0a 50       	subi	r16, 0x0A	; 10
    22f6:	11 09       	sbc	r17, r1
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    22fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2300:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    2304:	98 17       	cp	r25, r24
    2306:	10 f4       	brcc	.+4      	; 0x230c <xTaskRemoveFromEventList+0x42>
    2308:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 01       	movw	r18, r24
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	22 0f       	add	r18, r18
    2316:	33 1f       	adc	r19, r19
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	b8 01       	movw	r22, r16
    2322:	81 5b       	subi	r24, 0xB1	; 177
    2324:	97 4e       	sbci	r25, 0xE7	; 231
    2326:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <xTaskRemoveFromEventList+0x6c>
    232c:	b8 01       	movw	r22, r16
    232e:	80 e3       	ldi	r24, 0x30	; 48
    2330:	98 e1       	ldi	r25, 0x18	; 24
    2332:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2336:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    233a:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    233e:	9e 89       	ldd	r25, Y+22	; 0x16
    2340:	86 89       	ldd	r24, Z+22	; 0x16
    2342:	89 17       	cp	r24, r25
    2344:	20 f4       	brcc	.+8      	; 0x234e <xTaskRemoveFromEventList+0x84>
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <xYieldPending>
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <xTaskRemoveFromEventList+0x86>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <vTaskInternalSetTimeOutState>:
    235a:	20 91 15 18 	lds	r18, 0x1815	; 0x801815 <xNumOfOverflows>
    235e:	fc 01       	movw	r30, r24
    2360:	20 83       	st	Z, r18
    2362:	20 91 1a 18 	lds	r18, 0x181A	; 0x80181a <xTickCount>
    2366:	30 91 1b 18 	lds	r19, 0x181B	; 0x80181b <xTickCount+0x1>
    236a:	32 83       	std	Z+2, r19	; 0x02
    236c:	21 83       	std	Z+1, r18	; 0x01
    236e:	08 95       	ret

00002370 <xTaskCheckForTimeOut>:
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	0f 92       	push	r0
    237a:	20 91 1a 18 	lds	r18, 0x181A	; 0x80181a <xTickCount>
    237e:	30 91 1b 18 	lds	r19, 0x181B	; 0x80181b <xTickCount+0x1>
    2382:	db 01       	movw	r26, r22
    2384:	4d 91       	ld	r20, X+
    2386:	5c 91       	ld	r21, X
    2388:	4f 3f       	cpi	r20, 0xFF	; 255
    238a:	bf ef       	ldi	r27, 0xFF	; 255
    238c:	5b 07       	cpc	r21, r27
    238e:	e9 f0       	breq	.+58     	; 0x23ca <xTaskCheckForTimeOut+0x5a>
    2390:	ec 01       	movw	r28, r24
    2392:	e9 81       	ldd	r30, Y+1	; 0x01
    2394:	fa 81       	ldd	r31, Y+2	; 0x02
    2396:	a0 91 15 18 	lds	r26, 0x1815	; 0x801815 <xNumOfOverflows>
    239a:	b8 81       	ld	r27, Y
    239c:	ba 17       	cp	r27, r26
    239e:	19 f0       	breq	.+6      	; 0x23a6 <xTaskCheckForTimeOut+0x36>
    23a0:	2e 17       	cp	r18, r30
    23a2:	3f 07       	cpc	r19, r31
    23a4:	a0 f4       	brcc	.+40     	; 0x23ce <xTaskCheckForTimeOut+0x5e>
    23a6:	2e 1b       	sub	r18, r30
    23a8:	3f 0b       	sbc	r19, r31
    23aa:	24 17       	cp	r18, r20
    23ac:	35 07       	cpc	r19, r21
    23ae:	40 f4       	brcc	.+16     	; 0x23c0 <xTaskCheckForTimeOut+0x50>
    23b0:	fb 01       	movw	r30, r22
    23b2:	42 1b       	sub	r20, r18
    23b4:	53 0b       	sbc	r21, r19
    23b6:	51 83       	std	Z+1, r21	; 0x01
    23b8:	40 83       	st	Z, r20
    23ba:	cf df       	rcall	.-98     	; 0x235a <vTaskInternalSetTimeOutState>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <xTaskCheckForTimeOut+0x60>
    23c0:	fb 01       	movw	r30, r22
    23c2:	11 82       	std	Z+1, r1	; 0x01
    23c4:	10 82       	st	Z, r1
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <xTaskCheckForTimeOut+0x60>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <xTaskCheckForTimeOut+0x60>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <vTaskMissedYield>:
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <xYieldPending>
    23e0:	08 95       	ret

000023e2 <xTaskGetCurrentTaskHandle>:
    23e2:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    23e6:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    23ea:	08 95       	ret

000023ec <xTaskGetSchedulerState>:
    23ec:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <xSchedulerRunning>
    23f0:	88 23       	and	r24, r24
    23f2:	31 f0       	breq	.+12     	; 0x2400 <xTaskGetSchedulerState+0x14>
    23f4:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    23f8:	88 23       	and	r24, r24
    23fa:	21 f0       	breq	.+8      	; 0x2404 <xTaskGetSchedulerState+0x18>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	08 95       	ret
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	08 95       	ret
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	08 95       	ret

00002408 <xTaskPriorityInherit>:
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	fc 01       	movw	r30, r24
    2412:	89 2b       	or	r24, r25
    2414:	09 f4       	brne	.+2      	; 0x2418 <xTaskPriorityInherit+0x10>
    2416:	64 c0       	rjmp	.+200    	; 0x24e0 <xTaskPriorityInherit+0xd8>
    2418:	26 89       	ldd	r18, Z+22	; 0x16
    241a:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
    241e:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2422:	56 96       	adiw	r26, 0x16	; 22
    2424:	8c 91       	ld	r24, X
    2426:	28 17       	cp	r18, r24
    2428:	08 f0       	brcs	.+2      	; 0x242c <xTaskPriorityInherit+0x24>
    242a:	4e c0       	rjmp	.+156    	; 0x24c8 <xTaskPriorityInherit+0xc0>
    242c:	84 85       	ldd	r24, Z+12	; 0x0c
    242e:	95 85       	ldd	r25, Z+13	; 0x0d
    2430:	99 23       	and	r25, r25
    2432:	64 f0       	brlt	.+24     	; 0x244c <xTaskPriorityInherit+0x44>
    2434:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
    2438:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    243c:	56 96       	adiw	r26, 0x16	; 22
    243e:	3c 91       	ld	r19, X
    2440:	84 e0       	ldi	r24, 0x04	; 4
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	83 1b       	sub	r24, r19
    2446:	91 09       	sbc	r25, r1
    2448:	95 87       	std	Z+13, r25	; 0x0d
    244a:	84 87       	std	Z+12, r24	; 0x0c
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	c9 01       	movw	r24, r18
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	28 0f       	add	r18, r24
    245e:	39 1f       	adc	r19, r25
    2460:	21 5b       	subi	r18, 0xB1	; 177
    2462:	37 4e       	sbci	r19, 0xE7	; 231
    2464:	82 85       	ldd	r24, Z+10	; 0x0a
    2466:	93 85       	ldd	r25, Z+11	; 0x0b
    2468:	82 17       	cp	r24, r18
    246a:	93 07       	cpc	r25, r19
    246c:	21 f5       	brne	.+72     	; 0x24b6 <xTaskPriorityInherit+0xae>
    246e:	8f 01       	movw	r16, r30
    2470:	ef 01       	movw	r28, r30
    2472:	22 96       	adiw	r28, 0x02	; 2
    2474:	ce 01       	movw	r24, r28
    2476:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    247a:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    247e:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2482:	86 89       	ldd	r24, Z+22	; 0x16
    2484:	f8 01       	movw	r30, r16
    2486:	86 8b       	std	Z+22, r24	; 0x16
    2488:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    248c:	98 17       	cp	r25, r24
    248e:	10 f4       	brcc	.+4      	; 0x2494 <xTaskPriorityInherit+0x8c>
    2490:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 01       	movw	r18, r24
    2498:	22 0f       	add	r18, r18
    249a:	33 1f       	adc	r19, r19
    249c:	22 0f       	add	r18, r18
    249e:	33 1f       	adc	r19, r19
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	82 0f       	add	r24, r18
    24a6:	93 1f       	adc	r25, r19
    24a8:	be 01       	movw	r22, r28
    24aa:	81 5b       	subi	r24, 0xB1	; 177
    24ac:	97 4e       	sbci	r25, 0xE7	; 231
    24ae:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	16 c0       	rjmp	.+44     	; 0x24e2 <xTaskPriorityInherit+0xda>
    24b6:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
    24ba:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    24be:	56 96       	adiw	r26, 0x16	; 22
    24c0:	8c 91       	ld	r24, X
    24c2:	86 8b       	std	Z+22, r24	; 0x16
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <xTaskPriorityInherit+0xda>
    24c8:	a0 91 73 18 	lds	r26, 0x1873	; 0x801873 <pxCurrentTCB>
    24cc:	b0 91 74 18 	lds	r27, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	23 a1       	ldd	r18, Z+35	; 0x23
    24d4:	56 96       	adiw	r26, 0x16	; 22
    24d6:	9c 91       	ld	r25, X
    24d8:	29 17       	cp	r18, r25
    24da:	18 f0       	brcs	.+6      	; 0x24e2 <xTaskPriorityInherit+0xda>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <xTaskPriorityInherit+0xda>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <xTaskPriorityDisinherit>:
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	fc 01       	movw	r30, r24
    24f6:	89 2b       	or	r24, r25
    24f8:	79 f1       	breq	.+94     	; 0x2558 <xTaskPriorityDisinherit+0x6c>
    24fa:	84 a1       	ldd	r24, Z+36	; 0x24
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	84 a3       	std	Z+36, r24	; 0x24
    2500:	26 89       	ldd	r18, Z+22	; 0x16
    2502:	93 a1       	ldd	r25, Z+35	; 0x23
    2504:	29 17       	cp	r18, r25
    2506:	51 f1       	breq	.+84     	; 0x255c <xTaskPriorityDisinherit+0x70>
    2508:	81 11       	cpse	r24, r1
    250a:	2a c0       	rjmp	.+84     	; 0x2560 <xTaskPriorityDisinherit+0x74>
    250c:	ef 01       	movw	r28, r30
    250e:	8f 01       	movw	r16, r30
    2510:	0e 5f       	subi	r16, 0xFE	; 254
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	c8 01       	movw	r24, r16
    2516:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    251a:	8b a1       	ldd	r24, Y+35	; 0x23
    251c:	8e 8b       	std	Y+22, r24	; 0x16
    251e:	24 e0       	ldi	r18, 0x04	; 4
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	28 1b       	sub	r18, r24
    2524:	31 09       	sbc	r19, r1
    2526:	3d 87       	std	Y+13, r19	; 0x0d
    2528:	2c 87       	std	Y+12, r18	; 0x0c
    252a:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    252e:	98 17       	cp	r25, r24
    2530:	10 f4       	brcc	.+4      	; 0x2536 <xTaskPriorityDisinherit+0x4a>
    2532:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 01       	movw	r18, r24
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	22 0f       	add	r18, r18
    2540:	33 1f       	adc	r19, r19
    2542:	22 0f       	add	r18, r18
    2544:	33 1f       	adc	r19, r19
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	b8 01       	movw	r22, r16
    254c:	81 5b       	subi	r24, 0xB1	; 177
    254e:	97 4e       	sbci	r25, 0xE7	; 231
    2550:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	05 c0       	rjmp	.+10     	; 0x2562 <xTaskPriorityDisinherit+0x76>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	03 c0       	rjmp	.+6      	; 0x2562 <xTaskPriorityDisinherit+0x76>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <xTaskPriorityDisinherit+0x76>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	08 95       	ret

0000256c <vTaskPriorityDisinheritAfterTimeout>:
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	fc 01       	movw	r30, r24
    2576:	89 2b       	or	r24, r25
    2578:	09 f4       	brne	.+2      	; 0x257c <vTaskPriorityDisinheritAfterTimeout+0x10>
    257a:	43 c0       	rjmp	.+134    	; 0x2602 <vTaskPriorityDisinheritAfterTimeout+0x96>
    257c:	93 a1       	ldd	r25, Z+35	; 0x23
    257e:	96 17       	cp	r25, r22
    2580:	08 f4       	brcc	.+2      	; 0x2584 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2582:	96 2f       	mov	r25, r22
    2584:	86 89       	ldd	r24, Z+22	; 0x16
    2586:	89 17       	cp	r24, r25
    2588:	e1 f1       	breq	.+120    	; 0x2602 <vTaskPriorityDisinheritAfterTimeout+0x96>
    258a:	24 a1       	ldd	r18, Z+36	; 0x24
    258c:	21 30       	cpi	r18, 0x01	; 1
    258e:	c9 f5       	brne	.+114    	; 0x2602 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2590:	96 8b       	std	Z+22, r25	; 0x16
    2592:	24 85       	ldd	r18, Z+12	; 0x0c
    2594:	35 85       	ldd	r19, Z+13	; 0x0d
    2596:	33 23       	and	r19, r19
    2598:	34 f0       	brlt	.+12     	; 0x25a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    259a:	24 e0       	ldi	r18, 0x04	; 4
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	29 1b       	sub	r18, r25
    25a0:	31 09       	sbc	r19, r1
    25a2:	35 87       	std	Z+13, r19	; 0x0d
    25a4:	24 87       	std	Z+12, r18	; 0x0c
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 01       	movw	r18, r24
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	82 0f       	add	r24, r18
    25b8:	93 1f       	adc	r25, r19
    25ba:	81 5b       	subi	r24, 0xB1	; 177
    25bc:	97 4e       	sbci	r25, 0xE7	; 231
    25be:	22 85       	ldd	r18, Z+10	; 0x0a
    25c0:	33 85       	ldd	r19, Z+11	; 0x0b
    25c2:	28 17       	cp	r18, r24
    25c4:	39 07       	cpc	r19, r25
    25c6:	e9 f4       	brne	.+58     	; 0x2602 <vTaskPriorityDisinheritAfterTimeout+0x96>
    25c8:	ef 01       	movw	r28, r30
    25ca:	8f 01       	movw	r16, r30
    25cc:	0e 5f       	subi	r16, 0xFE	; 254
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	c8 01       	movw	r24, r16
    25d2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    25d6:	8e 89       	ldd	r24, Y+22	; 0x16
    25d8:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    25dc:	98 17       	cp	r25, r24
    25de:	10 f4       	brcc	.+4      	; 0x25e4 <vTaskPriorityDisinheritAfterTimeout+0x78>
    25e0:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9c 01       	movw	r18, r24
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	22 0f       	add	r18, r18
    25ee:	33 1f       	adc	r19, r19
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	b8 01       	movw	r22, r16
    25fa:	81 5b       	subi	r24, 0xB1	; 177
    25fc:	97 4e       	sbci	r25, 0xE7	; 231
    25fe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <pvTaskIncrementMutexHeldCount>:
    260c:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    2610:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2614:	89 2b       	or	r24, r25
    2616:	39 f0       	breq	.+14     	; 0x2626 <pvTaskIncrementMutexHeldCount+0x1a>
    2618:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    261c:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2620:	84 a1       	ldd	r24, Z+36	; 0x24
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	84 a3       	std	Z+36, r24	; 0x24
    2626:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    262a:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    262e:	08 95       	ret

00002630 <xTaskNotifyWait>:
    2630:	4f 92       	push	r4
    2632:	5f 92       	push	r5
    2634:	6f 92       	push	r6
    2636:	7f 92       	push	r7
    2638:	8f 92       	push	r8
    263a:	9f 92       	push	r9
    263c:	af 92       	push	r10
    263e:	bf 92       	push	r11
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	49 01       	movw	r8, r18
    264a:	5a 01       	movw	r10, r20
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	0f 92       	push	r0
    2652:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2656:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    265a:	23 a5       	ldd	r18, Z+43	; 0x2b
    265c:	22 30       	cpi	r18, 0x02	; 2
    265e:	21 f1       	breq	.+72     	; 0x26a8 <xTaskNotifyWait+0x78>
    2660:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2664:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2668:	47 a0       	ldd	r4, Z+39	; 0x27
    266a:	50 a4       	ldd	r5, Z+40	; 0x28
    266c:	61 a4       	ldd	r6, Z+41	; 0x29
    266e:	72 a4       	ldd	r7, Z+42	; 0x2a
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	80 95       	com	r24
    2676:	90 95       	com	r25
    2678:	a0 95       	com	r26
    267a:	b0 95       	com	r27
    267c:	84 21       	and	r24, r4
    267e:	95 21       	and	r25, r5
    2680:	a6 21       	and	r26, r6
    2682:	b7 21       	and	r27, r7
    2684:	87 a3       	std	Z+39, r24	; 0x27
    2686:	90 a7       	std	Z+40, r25	; 0x28
    2688:	a1 a7       	std	Z+41, r26	; 0x29
    268a:	b2 a7       	std	Z+42, r27	; 0x2a
    268c:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2690:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	83 a7       	std	Z+43, r24	; 0x2b
    2698:	e1 14       	cp	r14, r1
    269a:	f1 04       	cpc	r15, r1
    269c:	29 f0       	breq	.+10     	; 0x26a8 <xTaskNotifyWait+0x78>
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	c7 01       	movw	r24, r14
    26a2:	5f da       	rcall	.-2882   	; 0x1b62 <prvAddCurrentTaskToDelayedList>
    26a4:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	0f 92       	push	r0
    26b2:	01 15       	cp	r16, r1
    26b4:	11 05       	cpc	r17, r1
    26b6:	69 f0       	breq	.+26     	; 0x26d2 <xTaskNotifyWait+0xa2>
    26b8:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    26bc:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    26c0:	87 a1       	ldd	r24, Z+39	; 0x27
    26c2:	90 a5       	ldd	r25, Z+40	; 0x28
    26c4:	a1 a5       	ldd	r26, Z+41	; 0x29
    26c6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26c8:	f8 01       	movw	r30, r16
    26ca:	80 83       	st	Z, r24
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	a2 83       	std	Z+2, r26	; 0x02
    26d0:	b3 83       	std	Z+3, r27	; 0x03
    26d2:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    26d6:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    26da:	83 a5       	ldd	r24, Z+43	; 0x2b
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	b1 f4       	brne	.+44     	; 0x270c <xTaskNotifyWait+0xdc>
    26e0:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    26e4:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    26e8:	87 a1       	ldd	r24, Z+39	; 0x27
    26ea:	90 a5       	ldd	r25, Z+40	; 0x28
    26ec:	a1 a5       	ldd	r26, Z+41	; 0x29
    26ee:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26f0:	80 94       	com	r8
    26f2:	90 94       	com	r9
    26f4:	a0 94       	com	r10
    26f6:	b0 94       	com	r11
    26f8:	88 22       	and	r8, r24
    26fa:	99 22       	and	r9, r25
    26fc:	aa 22       	and	r10, r26
    26fe:	bb 22       	and	r11, r27
    2700:	87 a2       	std	Z+39, r8	; 0x27
    2702:	90 a6       	std	Z+40, r9	; 0x28
    2704:	a1 a6       	std	Z+41, r10	; 0x29
    2706:	b2 a6       	std	Z+42, r11	; 0x2a
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	01 c0       	rjmp	.+2      	; 0x270e <xTaskNotifyWait+0xde>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2712:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    2716:	13 a6       	std	Z+43, r1	; 0x2b
    2718:	0f 90       	pop	r0
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	bf 90       	pop	r11
    2726:	af 90       	pop	r10
    2728:	9f 90       	pop	r9
    272a:	8f 90       	pop	r8
    272c:	7f 90       	pop	r7
    272e:	6f 90       	pop	r6
    2730:	5f 90       	pop	r5
    2732:	4f 90       	pop	r4
    2734:	08 95       	ret

00002736 <xTaskGenericNotify>:
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	fc 01       	movw	r30, r24
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	0f 92       	push	r0
    2746:	01 15       	cp	r16, r1
    2748:	11 05       	cpc	r17, r1
    274a:	49 f0       	breq	.+18     	; 0x275e <xTaskGenericNotify+0x28>
    274c:	87 a1       	ldd	r24, Z+39	; 0x27
    274e:	90 a5       	ldd	r25, Z+40	; 0x28
    2750:	a1 a5       	ldd	r26, Z+41	; 0x29
    2752:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2754:	e8 01       	movw	r28, r16
    2756:	88 83       	st	Y, r24
    2758:	99 83       	std	Y+1, r25	; 0x01
    275a:	aa 83       	std	Y+2, r26	; 0x02
    275c:	bb 83       	std	Y+3, r27	; 0x03
    275e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2760:	92 e0       	ldi	r25, 0x02	; 2
    2762:	93 a7       	std	Z+43, r25	; 0x2b
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	b1 f0       	breq	.+44     	; 0x2794 <xTaskGenericNotify+0x5e>
    2768:	18 f4       	brcc	.+6      	; 0x2770 <xTaskGenericNotify+0x3a>
    276a:	21 30       	cpi	r18, 0x01	; 1
    276c:	31 f0       	breq	.+12     	; 0x277a <xTaskGenericNotify+0x44>
    276e:	2a c0       	rjmp	.+84     	; 0x27c4 <xTaskGenericNotify+0x8e>
    2770:	23 30       	cpi	r18, 0x03	; 3
    2772:	e9 f0       	breq	.+58     	; 0x27ae <xTaskGenericNotify+0x78>
    2774:	24 30       	cpi	r18, 0x04	; 4
    2776:	01 f1       	breq	.+64     	; 0x27b8 <xTaskGenericNotify+0x82>
    2778:	25 c0       	rjmp	.+74     	; 0x27c4 <xTaskGenericNotify+0x8e>
    277a:	07 a1       	ldd	r16, Z+39	; 0x27
    277c:	10 a5       	ldd	r17, Z+40	; 0x28
    277e:	21 a5       	ldd	r18, Z+41	; 0x29
    2780:	32 a5       	ldd	r19, Z+42	; 0x2a
    2782:	40 2b       	or	r20, r16
    2784:	51 2b       	or	r21, r17
    2786:	62 2b       	or	r22, r18
    2788:	73 2b       	or	r23, r19
    278a:	47 a3       	std	Z+39, r20	; 0x27
    278c:	50 a7       	std	Z+40, r21	; 0x28
    278e:	61 a7       	std	Z+41, r22	; 0x29
    2790:	72 a7       	std	Z+42, r23	; 0x2a
    2792:	18 c0       	rjmp	.+48     	; 0x27c4 <xTaskGenericNotify+0x8e>
    2794:	47 a1       	ldd	r20, Z+39	; 0x27
    2796:	50 a5       	ldd	r21, Z+40	; 0x28
    2798:	61 a5       	ldd	r22, Z+41	; 0x29
    279a:	72 a5       	ldd	r23, Z+42	; 0x2a
    279c:	4f 5f       	subi	r20, 0xFF	; 255
    279e:	5f 4f       	sbci	r21, 0xFF	; 255
    27a0:	6f 4f       	sbci	r22, 0xFF	; 255
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	47 a3       	std	Z+39, r20	; 0x27
    27a6:	50 a7       	std	Z+40, r21	; 0x28
    27a8:	61 a7       	std	Z+41, r22	; 0x29
    27aa:	72 a7       	std	Z+42, r23	; 0x2a
    27ac:	0b c0       	rjmp	.+22     	; 0x27c4 <xTaskGenericNotify+0x8e>
    27ae:	47 a3       	std	Z+39, r20	; 0x27
    27b0:	50 a7       	std	Z+40, r21	; 0x28
    27b2:	61 a7       	std	Z+41, r22	; 0x29
    27b4:	72 a7       	std	Z+42, r23	; 0x2a
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <xTaskGenericNotify+0x8e>
    27b8:	82 30       	cpi	r24, 0x02	; 2
    27ba:	79 f1       	breq	.+94     	; 0x281a <xTaskGenericNotify+0xe4>
    27bc:	47 a3       	std	Z+39, r20	; 0x27
    27be:	50 a7       	std	Z+40, r21	; 0x28
    27c0:	61 a7       	std	Z+41, r22	; 0x29
    27c2:	72 a7       	std	Z+42, r23	; 0x2a
    27c4:	81 30       	cpi	r24, 0x01	; 1
    27c6:	59 f5       	brne	.+86     	; 0x281e <xTaskGenericNotify+0xe8>
    27c8:	ef 01       	movw	r28, r30
    27ca:	8f 01       	movw	r16, r30
    27cc:	0e 5f       	subi	r16, 0xFE	; 254
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	c8 01       	movw	r24, r16
    27d2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    27d6:	8e 89       	ldd	r24, Y+22	; 0x16
    27d8:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    27dc:	98 17       	cp	r25, r24
    27de:	10 f4       	brcc	.+4      	; 0x27e4 <xTaskGenericNotify+0xae>
    27e0:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9c 01       	movw	r18, r24
    27e8:	22 0f       	add	r18, r18
    27ea:	33 1f       	adc	r19, r19
    27ec:	22 0f       	add	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	22 0f       	add	r18, r18
    27f2:	33 1f       	adc	r19, r19
    27f4:	82 0f       	add	r24, r18
    27f6:	93 1f       	adc	r25, r19
    27f8:	b8 01       	movw	r22, r16
    27fa:	81 5b       	subi	r24, 0xB1	; 177
    27fc:	97 4e       	sbci	r25, 0xE7	; 231
    27fe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2802:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    2806:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    280a:	9e 89       	ldd	r25, Y+22	; 0x16
    280c:	86 89       	ldd	r24, Z+22	; 0x16
    280e:	89 17       	cp	r24, r25
    2810:	40 f4       	brcc	.+16     	; 0x2822 <xTaskGenericNotify+0xec>
    2812:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <xTaskGenericNotify+0xee>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	03 c0       	rjmp	.+6      	; 0x2824 <xTaskGenericNotify+0xee>
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <xTaskGenericNotify+0xee>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0f 90       	pop	r0
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	08 95       	ret

00002832 <xTaskGenericNotifyFromISR>:
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	fc 01       	movw	r30, r24
    2840:	01 15       	cp	r16, r1
    2842:	11 05       	cpc	r17, r1
    2844:	49 f0       	breq	.+18     	; 0x2858 <xTaskGenericNotifyFromISR+0x26>
    2846:	87 a1       	ldd	r24, Z+39	; 0x27
    2848:	90 a5       	ldd	r25, Z+40	; 0x28
    284a:	a1 a5       	ldd	r26, Z+41	; 0x29
    284c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    284e:	e8 01       	movw	r28, r16
    2850:	88 83       	st	Y, r24
    2852:	99 83       	std	Y+1, r25	; 0x01
    2854:	aa 83       	std	Y+2, r26	; 0x02
    2856:	bb 83       	std	Y+3, r27	; 0x03
    2858:	83 a5       	ldd	r24, Z+43	; 0x2b
    285a:	92 e0       	ldi	r25, 0x02	; 2
    285c:	93 a7       	std	Z+43, r25	; 0x2b
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	b1 f0       	breq	.+44     	; 0x288e <xTaskGenericNotifyFromISR+0x5c>
    2862:	18 f4       	brcc	.+6      	; 0x286a <xTaskGenericNotifyFromISR+0x38>
    2864:	21 30       	cpi	r18, 0x01	; 1
    2866:	31 f0       	breq	.+12     	; 0x2874 <xTaskGenericNotifyFromISR+0x42>
    2868:	2b c0       	rjmp	.+86     	; 0x28c0 <xTaskGenericNotifyFromISR+0x8e>
    286a:	23 30       	cpi	r18, 0x03	; 3
    286c:	e9 f0       	breq	.+58     	; 0x28a8 <xTaskGenericNotifyFromISR+0x76>
    286e:	24 30       	cpi	r18, 0x04	; 4
    2870:	01 f1       	breq	.+64     	; 0x28b2 <xTaskGenericNotifyFromISR+0x80>
    2872:	26 c0       	rjmp	.+76     	; 0x28c0 <xTaskGenericNotifyFromISR+0x8e>
    2874:	07 a1       	ldd	r16, Z+39	; 0x27
    2876:	10 a5       	ldd	r17, Z+40	; 0x28
    2878:	21 a5       	ldd	r18, Z+41	; 0x29
    287a:	32 a5       	ldd	r19, Z+42	; 0x2a
    287c:	40 2b       	or	r20, r16
    287e:	51 2b       	or	r21, r17
    2880:	62 2b       	or	r22, r18
    2882:	73 2b       	or	r23, r19
    2884:	47 a3       	std	Z+39, r20	; 0x27
    2886:	50 a7       	std	Z+40, r21	; 0x28
    2888:	61 a7       	std	Z+41, r22	; 0x29
    288a:	72 a7       	std	Z+42, r23	; 0x2a
    288c:	19 c0       	rjmp	.+50     	; 0x28c0 <xTaskGenericNotifyFromISR+0x8e>
    288e:	47 a1       	ldd	r20, Z+39	; 0x27
    2890:	50 a5       	ldd	r21, Z+40	; 0x28
    2892:	61 a5       	ldd	r22, Z+41	; 0x29
    2894:	72 a5       	ldd	r23, Z+42	; 0x2a
    2896:	4f 5f       	subi	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	6f 4f       	sbci	r22, 0xFF	; 255
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	47 a3       	std	Z+39, r20	; 0x27
    28a0:	50 a7       	std	Z+40, r21	; 0x28
    28a2:	61 a7       	std	Z+41, r22	; 0x29
    28a4:	72 a7       	std	Z+42, r23	; 0x2a
    28a6:	0c c0       	rjmp	.+24     	; 0x28c0 <xTaskGenericNotifyFromISR+0x8e>
    28a8:	47 a3       	std	Z+39, r20	; 0x27
    28aa:	50 a7       	std	Z+40, r21	; 0x28
    28ac:	61 a7       	std	Z+41, r22	; 0x29
    28ae:	72 a7       	std	Z+42, r23	; 0x2a
    28b0:	07 c0       	rjmp	.+14     	; 0x28c0 <xTaskGenericNotifyFromISR+0x8e>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <xTaskGenericNotifyFromISR+0x86>
    28b6:	41 c0       	rjmp	.+130    	; 0x293a <xTaskGenericNotifyFromISR+0x108>
    28b8:	47 a3       	std	Z+39, r20	; 0x27
    28ba:	50 a7       	std	Z+40, r21	; 0x28
    28bc:	61 a7       	std	Z+41, r22	; 0x29
    28be:	72 a7       	std	Z+42, r23	; 0x2a
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	e9 f5       	brne	.+122    	; 0x293e <xTaskGenericNotifyFromISR+0x10c>
    28c4:	ef 01       	movw	r28, r30
    28c6:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <uxSchedulerSuspended>
    28ca:	81 11       	cpse	r24, r1
    28cc:	1d c0       	rjmp	.+58     	; 0x2908 <xTaskGenericNotifyFromISR+0xd6>
    28ce:	8f 01       	movw	r16, r30
    28d0:	0e 5f       	subi	r16, 0xFE	; 254
    28d2:	1f 4f       	sbci	r17, 0xFF	; 255
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
    28da:	8e 89       	ldd	r24, Y+22	; 0x16
    28dc:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <uxTopReadyPriority>
    28e0:	98 17       	cp	r25, r24
    28e2:	10 f4       	brcc	.+4      	; 0x28e8 <xTaskGenericNotifyFromISR+0xb6>
    28e4:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <uxTopReadyPriority>
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 01       	movw	r18, r24
    28ec:	22 0f       	add	r18, r18
    28ee:	33 1f       	adc	r19, r19
    28f0:	22 0f       	add	r18, r18
    28f2:	33 1f       	adc	r19, r19
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	82 0f       	add	r24, r18
    28fa:	93 1f       	adc	r25, r19
    28fc:	b8 01       	movw	r22, r16
    28fe:	81 5b       	subi	r24, 0xB1	; 177
    2900:	97 4e       	sbci	r25, 0xE7	; 231
    2902:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2906:	07 c0       	rjmp	.+14     	; 0x2916 <xTaskGenericNotifyFromISR+0xe4>
    2908:	bf 01       	movw	r22, r30
    290a:	64 5f       	subi	r22, 0xF4	; 244
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	80 e3       	ldi	r24, 0x30	; 48
    2910:	98 e1       	ldi	r25, 0x18	; 24
    2912:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInsertEnd>
    2916:	e0 91 73 18 	lds	r30, 0x1873	; 0x801873 <pxCurrentTCB>
    291a:	f0 91 74 18 	lds	r31, 0x1874	; 0x801874 <pxCurrentTCB+0x1>
    291e:	9e 89       	ldd	r25, Y+22	; 0x16
    2920:	86 89       	ldd	r24, Z+22	; 0x16
    2922:	89 17       	cp	r24, r25
    2924:	70 f4       	brcc	.+28     	; 0x2942 <xTaskGenericNotifyFromISR+0x110>
    2926:	e1 14       	cp	r14, r1
    2928:	f1 04       	cpc	r15, r1
    292a:	19 f0       	breq	.+6      	; 0x2932 <xTaskGenericNotifyFromISR+0x100>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	f7 01       	movw	r30, r14
    2930:	80 83       	st	Z, r24
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <xYieldPending>
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <xTaskGenericNotifyFromISR+0x112>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <xTaskGenericNotifyFromISR+0x112>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	01 c0       	rjmp	.+2      	; 0x2944 <xTaskGenericNotifyFromISR+0x112>
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	ff 90       	pop	r15
    294e:	ef 90       	pop	r14
    2950:	08 95       	ret

00002952 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	21 f4       	brne	.+8      	; 0x295e <xTaskNotifyStateClear+0xc>
    2956:	80 91 73 18 	lds	r24, 0x1873	; 0x801873 <pxCurrentTCB>
    295a:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2964:	fc 01       	movw	r30, r24
    2966:	23 a5       	ldd	r18, Z+43	; 0x2b
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	19 f4       	brne	.+6      	; 0x2972 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    296c:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2972:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2974:	0f 90       	pop	r0
    2976:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2978:	08 95       	ret

0000297a <prvInsertTimerInActiveList>:
    297a:	fc 01       	movw	r30, r24
    297c:	73 83       	std	Z+3, r23	; 0x03
    297e:	62 83       	std	Z+2, r22	; 0x02
    2980:	91 87       	std	Z+9, r25	; 0x09
    2982:	80 87       	std	Z+8, r24	; 0x08
    2984:	46 17       	cp	r20, r22
    2986:	57 07       	cpc	r21, r23
    2988:	90 f0       	brcs	.+36     	; 0x29ae <prvInsertTimerInActiveList+0x34>
    298a:	42 1b       	sub	r20, r18
    298c:	53 0b       	sbc	r21, r19
    298e:	84 85       	ldd	r24, Z+12	; 0x0c
    2990:	95 85       	ldd	r25, Z+13	; 0x0d
    2992:	48 17       	cp	r20, r24
    2994:	59 07       	cpc	r21, r25
    2996:	e0 f4       	brcc	.+56     	; 0x29d0 <prvInsertTimerInActiveList+0x56>
    2998:	bf 01       	movw	r22, r30
    299a:	6e 5f       	subi	r22, 0xFE	; 254
    299c:	7f 4f       	sbci	r23, 0xFF	; 255
    299e:	80 91 7b 18 	lds	r24, 0x187B	; 0x80187b <pxOverflowTimerList>
    29a2:	90 91 7c 18 	lds	r25, 0x187C	; 0x80187c <pxOverflowTimerList+0x1>
    29a6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInsert>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	08 95       	ret
    29ae:	42 17       	cp	r20, r18
    29b0:	53 07       	cpc	r21, r19
    29b2:	18 f4       	brcc	.+6      	; 0x29ba <prvInsertTimerInActiveList+0x40>
    29b4:	62 17       	cp	r22, r18
    29b6:	73 07       	cpc	r23, r19
    29b8:	68 f4       	brcc	.+26     	; 0x29d4 <prvInsertTimerInActiveList+0x5a>
    29ba:	bf 01       	movw	r22, r30
    29bc:	6e 5f       	subi	r22, 0xFE	; 254
    29be:	7f 4f       	sbci	r23, 0xFF	; 255
    29c0:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <pxCurrentTimerList>
    29c4:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <pxCurrentTimerList+0x1>
    29c8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInsert>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	08 95       	ret
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	08 95       	ret
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	08 95       	ret

000029d8 <prvCheckForValidListAndQueue>:
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	0f 92       	push	r0
    29de:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
    29e2:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
    29e6:	89 2b       	or	r24, r25
    29e8:	e9 f4       	brne	.+58     	; 0x2a24 <prvCheckForValidListAndQueue+0x4c>
    29ea:	88 e8       	ldi	r24, 0x88	; 136
    29ec:	98 e1       	ldi	r25, 0x18	; 24
    29ee:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    29f2:	8f e7       	ldi	r24, 0x7F	; 127
    29f4:	98 e1       	ldi	r25, 0x18	; 24
    29f6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <vListInitialise>
    29fa:	88 e8       	ldi	r24, 0x88	; 136
    29fc:	98 e1       	ldi	r25, 0x18	; 24
    29fe:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <pxCurrentTimerList+0x1>
    2a02:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <pxCurrentTimerList>
    2a06:	8f e7       	ldi	r24, 0x7F	; 127
    2a08:	98 e1       	ldi	r25, 0x18	; 24
    2a0a:	90 93 7c 18 	sts	0x187C, r25	; 0x80187c <pxOverflowTimerList+0x1>
    2a0e:	80 93 7b 18 	sts	0x187B, r24	; 0x80187b <pxOverflowTimerList>
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	65 e0       	ldi	r22, 0x05	; 5
    2a16:	8a e0       	ldi	r24, 0x0A	; 10
    2a18:	0e 94 ee 08 	call	0x11dc	; 0x11dc <xQueueGenericCreate>
    2a1c:	90 93 7a 18 	sts	0x187A, r25	; 0x80187a <xTimerQueue+0x1>
    2a20:	80 93 79 18 	sts	0x1879, r24	; 0x801879 <xTimerQueue>
    2a24:	0f 90       	pop	r0
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	08 95       	ret

00002a2a <xTimerCreateTimerTask>:
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	0f 93       	push	r16
    2a30:	d3 df       	rcall	.-90     	; 0x29d8 <prvCheckForValidListAndQueue>
    2a32:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
    2a36:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
    2a3a:	89 2b       	or	r24, r25
    2a3c:	89 f0       	breq	.+34     	; 0x2a60 <xTimerCreateTimerTask+0x36>
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	f7 e7       	ldi	r31, 0x77	; 119
    2a42:	ef 2e       	mov	r14, r31
    2a44:	f8 e1       	ldi	r31, 0x18	; 24
    2a46:	ff 2e       	mov	r15, r31
    2a48:	f0 2d       	mov	r31, r0
    2a4a:	03 e0       	ldi	r16, 0x03	; 3
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	45 e5       	ldi	r20, 0x55	; 85
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	64 e7       	ldi	r22, 0x74	; 116
    2a56:	75 e0       	ldi	r23, 0x05	; 5
    2a58:	83 e0       	ldi	r24, 0x03	; 3
    2a5a:	91 e0       	ldi	r25, 0x01	; 1
    2a5c:	d6 d8       	rcall	.-3668   	; 0x1c0a <xTaskCreate>
    2a5e:	01 c0       	rjmp	.+2      	; 0x2a62 <xTimerCreateTimerTask+0x38>
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	08 95       	ret

00002a6a <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <xTimerGenericCommand+0xa>
    2a74:	1f 92       	push	r1
    2a76:	1f 92       	push	r1
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2a7c:	e0 91 79 18 	lds	r30, 0x1879	; 0x801879 <xTimerQueue>
    2a80:	f0 91 7a 18 	lds	r31, 0x187A	; 0x80187a <xTimerQueue+0x1>
    2a84:	30 97       	sbiw	r30, 0x00	; 0
    2a86:	69 f1       	breq	.+90     	; 0x2ae2 <xTimerGenericCommand+0x78>
    2a88:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2a8a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a8c:	5b 83       	std	Y+3, r21	; 0x03
    2a8e:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a90:	9d 83       	std	Y+5, r25	; 0x05
    2a92:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a94:	66 30       	cpi	r22, 0x06	; 6
    2a96:	e4 f4       	brge	.+56     	; 0x2ad0 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a98:	a9 dc       	rcall	.-1710   	; 0x23ec <xTaskGetSchedulerState>
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	61 f4       	brne	.+24     	; 0x2ab6 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	a8 01       	movw	r20, r16
    2aa2:	be 01       	movw	r22, r28
    2aa4:	6f 5f       	subi	r22, 0xFF	; 255
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
    2aac:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
    2ab0:	0e 94 1c 09 	call	0x1238	; 0x1238 <xQueueGenericSend>
    2ab4:	17 c0       	rjmp	.+46     	; 0x2ae4 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	be 01       	movw	r22, r28
    2abe:	6f 5f       	subi	r22, 0xFF	; 255
    2ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac2:	80 91 79 18 	lds	r24, 0x1879	; 0x801879 <xTimerQueue>
    2ac6:	90 91 7a 18 	lds	r25, 0x187A	; 0x80187a <xTimerQueue+0x1>
    2aca:	0e 94 1c 09 	call	0x1238	; 0x1238 <xQueueGenericSend>
    2ace:	0a c0       	rjmp	.+20     	; 0x2ae4 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	ad 01       	movw	r20, r26
    2ad4:	be 01       	movw	r22, r28
    2ad6:	6f 5f       	subi	r22, 0xFF	; 255
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	cf 01       	movw	r24, r30
    2adc:	0e 94 c9 09 	call	0x1392	; 0x1392 <xQueueGenericSendFromISR>
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	08 95       	ret

00002af8 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2af8:	af 92       	push	r10
    2afa:	bf 92       	push	r11
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b0e:	d4 d9       	rcall	.-3160   	; 0x1eb8 <xTaskGetTickCount>
    2b10:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2b12:	80 91 75 18 	lds	r24, 0x1875	; 0x801875 <xLastTime.2432>
    2b16:	90 91 76 18 	lds	r25, 0x1876	; 0x801876 <xLastTime.2432+0x1>
    2b1a:	e8 16       	cp	r14, r24
    2b1c:	f9 06       	cpc	r15, r25
    2b1e:	08 f0       	brcs	.+2      	; 0x2b22 <prvSampleTimeNow+0x2a>
    2b20:	47 c0       	rjmp	.+142    	; 0x2bb0 <prvSampleTimeNow+0xb8>
    2b22:	2f c0       	rjmp	.+94     	; 0x2b82 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b24:	05 80       	ldd	r0, Z+5	; 0x05
    2b26:	f6 81       	ldd	r31, Z+6	; 0x06
    2b28:	e0 2d       	mov	r30, r0
    2b2a:	a0 80       	ld	r10, Z
    2b2c:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b2e:	c6 81       	ldd	r28, Z+6	; 0x06
    2b30:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b32:	8e 01       	movw	r16, r28
    2b34:	0e 5f       	subi	r16, 0xFE	; 254
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	c8 01       	movw	r24, r16
    2b3a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b3e:	e8 89       	ldd	r30, Y+16	; 0x10
    2b40:	f9 89       	ldd	r31, Y+17	; 0x11
    2b42:	ce 01       	movw	r24, r28
    2b44:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	82 ff       	sbrs	r24, 2
    2b4a:	1b c0       	rjmp	.+54     	; 0x2b82 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b50:	8a 0d       	add	r24, r10
    2b52:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2b54:	a8 16       	cp	r10, r24
    2b56:	b9 06       	cpc	r11, r25
    2b58:	60 f4       	brcc	.+24     	; 0x2b72 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b5a:	9b 83       	std	Y+3, r25	; 0x03
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b5e:	d9 87       	std	Y+9, r29	; 0x09
    2b60:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b62:	b8 01       	movw	r22, r16
    2b64:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <pxCurrentTimerList>
    2b68:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <pxCurrentTimerList+0x1>
    2b6c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInsert>
    2b70:	08 c0       	rjmp	.+16     	; 0x2b82 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b72:	00 e0       	ldi	r16, 0x00	; 0
    2b74:	10 e0       	ldi	r17, 0x00	; 0
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	a5 01       	movw	r20, r10
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	ce 01       	movw	r24, r28
    2b80:	74 df       	rcall	.-280    	; 0x2a6a <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b82:	e0 91 7d 18 	lds	r30, 0x187D	; 0x80187d <pxCurrentTimerList>
    2b86:	f0 91 7e 18 	lds	r31, 0x187E	; 0x80187e <pxCurrentTimerList+0x1>
    2b8a:	80 81       	ld	r24, Z
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	ca cf       	rjmp	.-108    	; 0x2b24 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2b90:	80 91 7b 18 	lds	r24, 0x187B	; 0x80187b <pxOverflowTimerList>
    2b94:	90 91 7c 18 	lds	r25, 0x187C	; 0x80187c <pxOverflowTimerList+0x1>
    2b98:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <pxCurrentTimerList+0x1>
    2b9c:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2ba0:	f0 93 7c 18 	sts	0x187C, r31	; 0x80187c <pxOverflowTimerList+0x1>
    2ba4:	e0 93 7b 18 	sts	0x187B, r30	; 0x80187b <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	f6 01       	movw	r30, r12
    2bac:	80 83       	st	Z, r24
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2bb0:	f6 01       	movw	r30, r12
    2bb2:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2bb4:	f0 92 76 18 	sts	0x1876, r15	; 0x801876 <xLastTime.2432+0x1>
    2bb8:	e0 92 75 18 	sts	0x1875, r14	; 0x801875 <xLastTime.2432>

    return xTimeNow;
}
    2bbc:	c7 01       	movw	r24, r14
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	df 90       	pop	r13
    2bcc:	cf 90       	pop	r12
    2bce:	bf 90       	pop	r11
    2bd0:	af 90       	pop	r10
    2bd2:	08 95       	ret

00002bd4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2bd4:	08 95       	ret

00002bd6 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2bd6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bd8:	2f 9a       	sbi	0x05, 7	; 5
    2bda:	2f ef       	ldi	r18, 0xFF	; 255
    2bdc:	80 e7       	ldi	r24, 0x70	; 112
    2bde:	92 e0       	ldi	r25, 0x02	; 2
    2be0:	21 50       	subi	r18, 0x01	; 1
    2be2:	80 40       	sbci	r24, 0x00	; 0
    2be4:	90 40       	sbci	r25, 0x00	; 0
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <vApplicationMallocFailedHook+0xa>
    2be8:	00 c0       	rjmp	.+0      	; 0x2bea <vApplicationMallocFailedHook+0x14>
    2bea:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2bec:	1f 9a       	sbi	0x03, 7	; 3
    2bee:	f5 cf       	rjmp	.-22     	; 0x2bda <vApplicationMallocFailedHook+0x4>

00002bf0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2bf0:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bf2:	2f 9a       	sbi	0x05, 7	; 5
    2bf4:	2f ef       	ldi	r18, 0xFF	; 255
    2bf6:	87 ea       	ldi	r24, 0xA7	; 167
    2bf8:	91 e6       	ldi	r25, 0x61	; 97
    2bfa:	21 50       	subi	r18, 0x01	; 1
    2bfc:	80 40       	sbci	r24, 0x00	; 0
    2bfe:	90 40       	sbci	r25, 0x00	; 0
    2c00:	e1 f7       	brne	.-8      	; 0x2bfa <vApplicationStackOverflowHook+0xa>
    2c02:	00 c0       	rjmp	.+0      	; 0x2c04 <vApplicationStackOverflowHook+0x14>
    2c04:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2c06:	1f 9a       	sbi	0x03, 7	; 3
    2c08:	f5 cf       	rjmp	.-22     	; 0x2bf4 <vApplicationStackOverflowHook+0x4>

00002c0a <hal_create>:
    2c0a:	e9 ef       	ldi	r30, 0xF9	; 249
    2c0c:	f9 e1       	ldi	r31, 0x19	; 25
    2c0e:	20 ee       	ldi	r18, 0xE0	; 224
    2c10:	3b e1       	ldi	r19, 0x1B	; 27
    2c12:	31 83       	std	Z+1, r19	; 0x01
    2c14:	20 83       	st	Z, r18
    2c16:	23 ee       	ldi	r18, 0xE3	; 227
    2c18:	3b e1       	ldi	r19, 0x1B	; 27
    2c1a:	33 83       	std	Z+3, r19	; 0x03
    2c1c:	22 83       	std	Z+2, r18	; 0x02
    2c1e:	2e ee       	ldi	r18, 0xEE	; 238
    2c20:	3b e1       	ldi	r19, 0x1B	; 27
    2c22:	35 83       	std	Z+5, r19	; 0x05
    2c24:	24 83       	std	Z+4, r18	; 0x04
    2c26:	22 ef       	ldi	r18, 0xF2	; 242
    2c28:	3b e1       	ldi	r19, 0x1B	; 27
    2c2a:	37 83       	std	Z+7, r19	; 0x07
    2c2c:	26 83       	std	Z+6, r18	; 0x06
    2c2e:	28 ef       	ldi	r18, 0xF8	; 248
    2c30:	3b e1       	ldi	r19, 0x1B	; 27
    2c32:	31 87       	std	Z+9, r19	; 0x09
    2c34:	20 87       	std	Z+8, r18	; 0x08
    2c36:	24 e0       	ldi	r18, 0x04	; 4
    2c38:	3c e1       	ldi	r19, 0x1C	; 28
    2c3a:	33 87       	std	Z+11, r19	; 0x0b
    2c3c:	22 87       	std	Z+10, r18	; 0x0a
    2c3e:	29 e0       	ldi	r18, 0x09	; 9
    2c40:	3c e1       	ldi	r19, 0x1C	; 28
    2c42:	35 87       	std	Z+13, r19	; 0x0d
    2c44:	24 87       	std	Z+12, r18	; 0x0c
    2c46:	25 e1       	ldi	r18, 0x15	; 21
    2c48:	3c e1       	ldi	r19, 0x1C	; 28
    2c4a:	37 87       	std	Z+15, r19	; 0x0f
    2c4c:	26 87       	std	Z+14, r18	; 0x0e
    2c4e:	25 ef       	ldi	r18, 0xF5	; 245
    2c50:	3b e1       	ldi	r19, 0x1B	; 27
    2c52:	31 8b       	std	Z+17, r19	; 0x11
    2c54:	20 8b       	std	Z+16, r18	; 0x10
    2c56:	2a e1       	ldi	r18, 0x1A	; 26
    2c58:	3c e1       	ldi	r19, 0x1C	; 28
    2c5a:	33 8b       	std	Z+19, r19	; 0x13
    2c5c:	22 8b       	std	Z+18, r18	; 0x12
    2c5e:	27 e2       	ldi	r18, 0x27	; 39
    2c60:	3c e1       	ldi	r19, 0x1C	; 28
    2c62:	35 8b       	std	Z+21, r19	; 0x15
    2c64:	24 8b       	std	Z+20, r18	; 0x14
    2c66:	68 2f       	mov	r22, r24
    2c68:	cf 01       	movw	r24, r30
    2c6a:	51 c1       	rjmp	.+674    	; 0x2f0e <led_create>
    2c6c:	08 95       	ret

00002c6e <_hihTwiCallback>:
    2c6e:	65 30       	cpi	r22, 0x05	; 5
    2c70:	f1 f4       	brne	.+60     	; 0x2cae <_hihTwiCallback+0x40>
    2c72:	fa 01       	movw	r30, r20
    2c74:	80 81       	ld	r24, Z
    2c76:	8f 73       	andi	r24, 0x3F	; 63
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	88 27       	eor	r24, r24
    2c7e:	21 81       	ldd	r18, Z+1	; 0x01
    2c80:	82 2b       	or	r24, r18
    2c82:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2c86:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	f0 e4       	ldi	r31, 0x40	; 64
    2c8e:	8f 9f       	mul	r24, r31
    2c90:	c0 01       	movw	r24, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	fa 01       	movw	r30, r20
    2c96:	23 81       	ldd	r18, Z+3	; 0x03
    2c98:	26 95       	lsr	r18
    2c9a:	26 95       	lsr	r18
    2c9c:	82 2b       	or	r24, r18
    2c9e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2ca2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <_measuringIsReady>
    2cac:	08 95       	ret
    2cae:	64 30       	cpi	r22, 0x04	; 4
    2cb0:	51 f0       	breq	.+20     	; 0x2cc6 <_hihTwiCallback+0x58>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e4       	ldi	r25, 0x40	; 64
    2cb6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2cba:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2cbe:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2cc2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2cc6:	08 95       	ret

00002cc8 <hih8120Create>:
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	07 e3       	ldi	r16, 0x37	; 55
    2cce:	16 e1       	ldi	r17, 0x16	; 22
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	34 e2       	ldi	r19, 0x24	; 36
    2cd4:	44 ef       	ldi	r20, 0xF4	; 244
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	87 e2       	ldi	r24, 0x27	; 39
    2cdc:	0e 94 bc 20 	call	0x4178	; 0x4178 <twiCreate>
    2ce0:	90 93 93 18 	sts	0x1893, r25	; 0x801893 <_hih8120Handler+0x1>
    2ce4:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <_hih8120Handler>
    2ce8:	21 e0       	ldi	r18, 0x01	; 1
    2cea:	89 2b       	or	r24, r25
    2cec:	09 f0       	breq	.+2      	; 0x2cf0 <hih8120Create+0x28>
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	82 2f       	mov	r24, r18
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	08 95       	ret

00002cf8 <hih8120Wakeup>:
    2cf8:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <_hih8120Handler>
    2cfc:	90 91 93 18 	lds	r25, 0x1893	; 0x801893 <_hih8120Handler+0x1>
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	59 f0       	breq	.+22     	; 0x2d1a <hih8120Wakeup+0x22>
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	0e 94 0d 21 	call	0x421a	; 0x421a <twiTransmit>
    2d0e:	84 30       	cpi	r24, 0x04	; 4
    2d10:	31 f4       	brne	.+12     	; 0x2d1e <hih8120Wakeup+0x26>
    2d12:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <_measuringIsReady>
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	08 95       	ret
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	08 95       	ret
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	08 95       	ret

00002d22 <hih8120Meassure>:
    2d22:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <_hih8120Handler>
    2d26:	90 91 93 18 	lds	r25, 0x1893	; 0x801893 <_hih8120Handler+0x1>
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <hih8120Meassure+0x1a>
    2d2e:	64 e0       	ldi	r22, 0x04	; 4
    2d30:	0e 94 59 21 	call	0x42b2	; 0x42b2 <twiReceive>
    2d34:	85 30       	cpi	r24, 0x05	; 5
    2d36:	21 f0       	breq	.+8      	; 0x2d40 <hih8120Meassure+0x1e>
    2d38:	83 e0       	ldi	r24, 0x03	; 3
    2d3a:	08 95       	ret
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	08 95       	ret
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	08 95       	ret

00002d44 <hih8120GetHumidity>:
    2d44:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2d48:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 63 23 	call	0x46c6	; 0x46c6 <__floatunsisf>
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	48 ec       	ldi	r20, 0xC8	; 200
    2d5a:	52 e4       	ldi	r21, 0x42	; 66
    2d5c:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__mulsf3>
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	38 ef       	ldi	r19, 0xF8	; 248
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	56 e4       	ldi	r21, 0x46	; 70
    2d68:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <__divsf3>
    2d6c:	08 95       	ret

00002d6e <hih8120GetHumidityPercent_x10>:
    2d6e:	ea df       	rcall	.-44     	; 0x2d44 <hih8120GetHumidity>
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__mulsf3>
    2d7c:	0e 94 37 23 	call	0x466e	; 0x466e <__fixunssfsi>
    2d80:	cb 01       	movw	r24, r22
    2d82:	08 95       	ret

00002d84 <hih8120GetTemperature>:
    2d84:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2d88:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 63 23 	call	0x46c6	; 0x46c6 <__floatunsisf>
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	45 e2       	ldi	r20, 0x25	; 37
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__mulsf3>
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	38 ef       	ldi	r19, 0xF8	; 248
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	56 e4       	ldi	r21, 0x46	; 70
    2da8:	0e 94 ca 22 	call	0x4594	; 0x4594 <__divsf3>
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	52 e4       	ldi	r21, 0x42	; 66
    2db4:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__subsf3>
    2db8:	08 95       	ret

00002dba <hih8120GetTemperature_x10>:
    2dba:	e4 df       	rcall	.-56     	; 0x2d84 <hih8120GetTemperature>
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__mulsf3>
    2dc8:	0e 94 32 23 	call	0x4664	; 0x4664 <__fixsfsi>
    2dcc:	cb 01       	movw	r24, r22
    2dce:	08 95       	ret

00002dd0 <_turn_off>:
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	ee 0f       	add	r30, r30
    2dda:	ff 1f       	adc	r31, r31
    2ddc:	e8 0f       	add	r30, r24
    2dde:	f9 1f       	adc	r31, r25
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	ec 56       	subi	r30, 0x6C	; 108
    2de6:	f7 4e       	sbci	r31, 0xE7	; 231
    2de8:	23 81       	ldd	r18, Z+3	; 0x03
    2dea:	21 11       	cpse	r18, r1
    2dec:	0a c0       	rjmp	.+20     	; 0x2e02 <_turn_off+0x32>
    2dee:	ef 01       	movw	r28, r30
    2df0:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <register_access+0x8>
    2df4:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <register_access+0x9>
    2df8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dfa:	88 81       	ld	r24, Y
    2dfc:	99 81       	ldd	r25, Y+1	; 0x01
    2dfe:	19 95       	eicall
    2e00:	12 c0       	rjmp	.+36     	; 0x2e26 <_turn_off+0x56>
    2e02:	dc 01       	movw	r26, r24
    2e04:	aa 0f       	add	r26, r26
    2e06:	bb 1f       	adc	r27, r27
    2e08:	ed 01       	movw	r28, r26
    2e0a:	c8 0f       	add	r28, r24
    2e0c:	d9 1f       	adc	r29, r25
    2e0e:	cc 0f       	add	r28, r28
    2e10:	dd 1f       	adc	r29, r29
    2e12:	cc 56       	subi	r28, 0x6C	; 108
    2e14:	d7 4e       	sbci	r29, 0xE7	; 231
    2e16:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <register_access+0x12>
    2e1a:	f0 91 0c 1a 	lds	r31, 0x1A0C	; 0x801a0c <register_access+0x13>
    2e1e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e20:	88 81       	ld	r24, Y
    2e22:	99 81       	ldd	r25, Y+1	; 0x01
    2e24:	19 95       	eicall
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <_turn_on>:
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	fc 01       	movw	r30, r24
    2e34:	ee 0f       	add	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	e8 0f       	add	r30, r24
    2e3a:	f9 1f       	adc	r31, r25
    2e3c:	ee 0f       	add	r30, r30
    2e3e:	ff 1f       	adc	r31, r31
    2e40:	ec 56       	subi	r30, 0x6C	; 108
    2e42:	f7 4e       	sbci	r31, 0xE7	; 231
    2e44:	23 81       	ldd	r18, Z+3	; 0x03
    2e46:	21 11       	cpse	r18, r1
    2e48:	0a c0       	rjmp	.+20     	; 0x2e5e <_turn_on+0x32>
    2e4a:	ef 01       	movw	r28, r30
    2e4c:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <register_access+0x12>
    2e50:	f0 91 0c 1a 	lds	r31, 0x1A0C	; 0x801a0c <register_access+0x13>
    2e54:	6a 81       	ldd	r22, Y+2	; 0x02
    2e56:	88 81       	ld	r24, Y
    2e58:	99 81       	ldd	r25, Y+1	; 0x01
    2e5a:	19 95       	eicall
    2e5c:	12 c0       	rjmp	.+36     	; 0x2e82 <_turn_on+0x56>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	aa 0f       	add	r26, r26
    2e62:	bb 1f       	adc	r27, r27
    2e64:	ed 01       	movw	r28, r26
    2e66:	c8 0f       	add	r28, r24
    2e68:	d9 1f       	adc	r29, r25
    2e6a:	cc 0f       	add	r28, r28
    2e6c:	dd 1f       	adc	r29, r29
    2e6e:	cc 56       	subi	r28, 0x6C	; 108
    2e70:	d7 4e       	sbci	r29, 0xE7	; 231
    2e72:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <register_access+0x8>
    2e76:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <register_access+0x9>
    2e7a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e7c:	88 81       	ld	r24, Y
    2e7e:	99 81       	ldd	r25, Y+1	; 0x01
    2e80:	19 95       	eicall
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	08 95       	ret

00002e88 <_hal_led_task>:
    2e88:	8c e7       	ldi	r24, 0x7C	; 124
    2e8a:	95 e0       	ldi	r25, 0x05	; 5
    2e8c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <puts>
    2e90:	0f 2e       	mov	r0, r31
    2e92:	f9 ef       	ldi	r31, 0xF9	; 249
    2e94:	cf 2e       	mov	r12, r31
    2e96:	f9 e1       	ldi	r31, 0x19	; 25
    2e98:	df 2e       	mov	r13, r31
    2e9a:	f0 2d       	mov	r31, r0
    2e9c:	04 e0       	ldi	r16, 0x04	; 4
    2e9e:	c4 e9       	ldi	r28, 0x94	; 148
    2ea0:	d8 e1       	ldi	r29, 0x18	; 24
    2ea2:	10 e0       	ldi	r17, 0x00	; 0
    2ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	69 f0       	breq	.+26     	; 0x2ec4 <_hal_led_task+0x3c>
    2eaa:	e8 f0       	brcs	.+58     	; 0x2ee6 <_hal_led_task+0x5e>
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	39 f5       	brne	.+78     	; 0x2efe <_hal_led_task+0x76>
    2eb0:	d6 01       	movw	r26, r12
    2eb2:	1c 96       	adiw	r26, 0x0c	; 12
    2eb4:	ed 91       	ld	r30, X+
    2eb6:	fc 91       	ld	r31, X
    2eb8:	1d 97       	sbiw	r26, 0x0d	; 13
    2eba:	6a 81       	ldd	r22, Y+2	; 0x02
    2ebc:	88 81       	ld	r24, Y
    2ebe:	99 81       	ldd	r25, Y+1	; 0x01
    2ec0:	19 95       	eicall
    2ec2:	1d c0       	rjmp	.+58     	; 0x2efe <_hal_led_task+0x76>
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	8a 30       	cpi	r24, 0x0A	; 10
    2eca:	10 f4       	brcc	.+4      	; 0x2ed0 <_hal_led_task+0x48>
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	17 c0       	rjmp	.+46     	; 0x2efe <_hal_led_task+0x76>
    2ed0:	1d 82       	std	Y+5, r1	; 0x05
    2ed2:	d6 01       	movw	r26, r12
    2ed4:	1c 96       	adiw	r26, 0x0c	; 12
    2ed6:	ed 91       	ld	r30, X+
    2ed8:	fc 91       	ld	r31, X
    2eda:	1d 97       	sbiw	r26, 0x0d	; 13
    2edc:	6a 81       	ldd	r22, Y+2	; 0x02
    2ede:	88 81       	ld	r24, Y
    2ee0:	99 81       	ldd	r25, Y+1	; 0x01
    2ee2:	19 95       	eicall
    2ee4:	0c c0       	rjmp	.+24     	; 0x2efe <_hal_led_task+0x76>
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	88 23       	and	r24, r24
    2eea:	31 f0       	breq	.+12     	; 0x2ef8 <_hal_led_task+0x70>
    2eec:	81 2f       	mov	r24, r17
    2eee:	9e df       	rcall	.-196    	; 0x2e2c <_turn_on>
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	81 50       	subi	r24, 0x01	; 1
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <_hal_led_task+0x76>
    2ef8:	0c 83       	std	Y+4, r16	; 0x04
    2efa:	81 2f       	mov	r24, r17
    2efc:	69 df       	rcall	.-302    	; 0x2dd0 <_turn_off>
    2efe:	1f 5f       	subi	r17, 0xFF	; 255
    2f00:	26 96       	adiw	r28, 0x06	; 6
    2f02:	14 30       	cpi	r17, 0x04	; 4
    2f04:	79 f6       	brne	.-98     	; 0x2ea4 <_hal_led_task+0x1c>
    2f06:	85 e0       	ldi	r24, 0x05	; 5
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	17 d9       	rcall	.-3538   	; 0x213a <vTaskDelay>
    2f0c:	c8 cf       	rjmp	.-112    	; 0x2e9e <_hal_led_task+0x16>

00002f0e <led_create>:
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	06 2f       	mov	r16, r22
    2f20:	0f 2e       	mov	r0, r31
    2f22:	f9 ef       	ldi	r31, 0xF9	; 249
    2f24:	ef 2e       	mov	r14, r31
    2f26:	f9 e1       	ldi	r31, 0x19	; 25
    2f28:	ff 2e       	mov	r15, r31
    2f2a:	f0 2d       	mov	r31, r0
    2f2c:	d7 01       	movw	r26, r14
    2f2e:	18 96       	adiw	r26, 0x08	; 8
    2f30:	ed 91       	ld	r30, X+
    2f32:	fc 91       	ld	r31, X
    2f34:	19 97       	sbiw	r26, 0x09	; 9
    2f36:	66 e0       	ldi	r22, 0x06	; 6
    2f38:	87 e2       	ldi	r24, 0x27	; 39
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	19 95       	eicall
    2f3e:	c4 e9       	ldi	r28, 0x94	; 148
    2f40:	d8 e1       	ldi	r29, 0x18	; 24
    2f42:	0f 2e       	mov	r0, r31
    2f44:	f8 e2       	ldi	r31, 0x28	; 40
    2f46:	cf 2e       	mov	r12, r31
    2f48:	d1 2c       	mov	r13, r1
    2f4a:	f0 2d       	mov	r31, r0
    2f4c:	d9 82       	std	Y+1, r13	; 0x01
    2f4e:	c8 82       	st	Y, r12
    2f50:	86 e0       	ldi	r24, 0x06	; 6
    2f52:	8a 83       	std	Y+2, r24	; 0x02
    2f54:	1b 82       	std	Y+3, r1	; 0x03
    2f56:	14 e0       	ldi	r17, 0x04	; 4
    2f58:	1c 83       	std	Y+4, r17	; 0x04
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	39 df       	rcall	.-398    	; 0x2dd0 <_turn_off>
    2f5e:	d7 01       	movw	r26, r14
    2f60:	18 96       	adiw	r26, 0x08	; 8
    2f62:	ed 91       	ld	r30, X+
    2f64:	fc 91       	ld	r31, X
    2f66:	19 97       	sbiw	r26, 0x09	; 9
    2f68:	67 e0       	ldi	r22, 0x07	; 7
    2f6a:	87 e2       	ldi	r24, 0x27	; 39
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	19 95       	eicall
    2f70:	df 82       	std	Y+7, r13	; 0x07
    2f72:	ce 82       	std	Y+6, r12	; 0x06
    2f74:	87 e0       	ldi	r24, 0x07	; 7
    2f76:	88 87       	std	Y+8, r24	; 0x08
    2f78:	19 86       	std	Y+9, r1	; 0x09
    2f7a:	1a 87       	std	Y+10, r17	; 0x0a
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	28 df       	rcall	.-432    	; 0x2dd0 <_turn_off>
    2f80:	d7 01       	movw	r26, r14
    2f82:	18 96       	adiw	r26, 0x08	; 8
    2f84:	ed 91       	ld	r30, X+
    2f86:	fc 91       	ld	r31, X
    2f88:	19 97       	sbiw	r26, 0x09	; 9
    2f8a:	65 e0       	ldi	r22, 0x05	; 5
    2f8c:	83 e3       	ldi	r24, 0x33	; 51
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	19 95       	eicall
    2f92:	d7 01       	movw	r26, r14
    2f94:	18 96       	adiw	r26, 0x08	; 8
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	19 97       	sbiw	r26, 0x09	; 9
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	84 e3       	ldi	r24, 0x34	; 52
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	19 95       	eicall
    2fa4:	84 e3       	ldi	r24, 0x34	; 52
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9d 87       	std	Y+13, r25	; 0x0d
    2faa:	8c 87       	std	Y+12, r24	; 0x0c
    2fac:	85 e0       	ldi	r24, 0x05	; 5
    2fae:	8e 87       	std	Y+14, r24	; 0x0e
    2fb0:	1f 86       	std	Y+15, r1	; 0x0f
    2fb2:	18 8b       	std	Y+16, r17	; 0x10
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	0c df       	rcall	.-488    	; 0x2dd0 <_turn_off>
    2fb8:	d7 01       	movw	r26, r14
    2fba:	18 96       	adiw	r26, 0x08	; 8
    2fbc:	ed 91       	ld	r30, X+
    2fbe:	fc 91       	ld	r31, X
    2fc0:	19 97       	sbiw	r26, 0x09	; 9
    2fc2:	64 e0       	ldi	r22, 0x04	; 4
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	19 95       	eicall
    2fca:	d7 01       	movw	r26, r14
    2fcc:	18 96       	adiw	r26, 0x08	; 8
    2fce:	ed 91       	ld	r30, X+
    2fd0:	fc 91       	ld	r31, X
    2fd2:	19 97       	sbiw	r26, 0x09	; 9
    2fd4:	61 e0       	ldi	r22, 0x01	; 1
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	91 e0       	ldi	r25, 0x01	; 1
    2fda:	19 95       	eicall
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	9b 8b       	std	Y+19, r25	; 0x13
    2fe2:	8a 8b       	std	Y+18, r24	; 0x12
    2fe4:	1c 8b       	std	Y+20, r17	; 0x14
    2fe6:	1d 8a       	std	Y+21, r1	; 0x15
    2fe8:	1e 8b       	std	Y+22, r17	; 0x16
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	f1 de       	rcall	.-542    	; 0x2dd0 <_turn_off>
    2fee:	e1 2c       	mov	r14, r1
    2ff0:	f1 2c       	mov	r15, r1
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 ec       	ldi	r20, 0xC0	; 192
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	63 e9       	ldi	r22, 0x93	; 147
    2ffc:	75 e0       	ldi	r23, 0x05	; 5
    2ffe:	84 e4       	ldi	r24, 0x44	; 68
    3000:	97 e1       	ldi	r25, 0x17	; 23
    3002:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskCreate>
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	ff 90       	pop	r15
    3010:	ef 90       	pop	r14
    3012:	df 90       	pop	r13
    3014:	cf 90       	pop	r12
    3016:	08 95       	ret

00003018 <_serial_call_back>:
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
    3020:	1f 92       	push	r1
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	8c 01       	movw	r16, r24
    302a:	19 82       	std	Y+1, r1	; 0x01
    302c:	2d c0       	rjmp	.+90     	; 0x3088 <_serial_call_back+0x70>
    302e:	e0 91 10 19 	lds	r30, 0x1910	; 0x801910 <rec_buf_inp.2926>
    3032:	ec 32       	cpi	r30, 0x2C	; 44
    3034:	50 f4       	brcc	.+20     	; 0x304a <_serial_call_back+0x32>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	8e 0f       	add	r24, r30
    303a:	80 93 10 19 	sts	0x1910, r24	; 0x801910 <rec_buf_inp.2926>
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	e0 5c       	subi	r30, 0xC0	; 192
    3042:	f6 4e       	sbci	r31, 0xE6	; 230
    3044:	8a 81       	ldd	r24, Y+2	; 0x02
    3046:	80 83       	st	Z, r24
    3048:	02 c0       	rjmp	.+4      	; 0x304e <_serial_call_back+0x36>
    304a:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <rec_buf_inp.2926>
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	8a 30       	cpi	r24, 0x0A	; 10
    3052:	d1 f4       	brne	.+52     	; 0x3088 <_serial_call_back+0x70>
    3054:	40 91 10 19 	lds	r20, 0x1910	; 0x801910 <rec_buf_inp.2926>
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	fa 01       	movw	r30, r20
    305c:	e2 5c       	subi	r30, 0xC2	; 194
    305e:	f6 4e       	sbci	r31, 0xE6	; 230
    3060:	10 82       	st	Z, r1
    3062:	41 50       	subi	r20, 0x01	; 1
    3064:	51 09       	sbc	r21, r1
    3066:	9e 01       	movw	r18, r28
    3068:	2f 5f       	subi	r18, 0xFF	; 255
    306a:	3f 4f       	sbci	r19, 0xFF	; 255
    306c:	60 e4       	ldi	r22, 0x40	; 64
    306e:	79 e1       	ldi	r23, 0x19	; 25
    3070:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_reply_buffer_handle>
    3074:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_reply_buffer_handle+0x1>
    3078:	0e 94 b6 0c 	call	0x196c	; 0x196c <xStreamBufferSendFromISR>
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	81 11       	cpse	r24, r1
    3080:	0e 94 13 07 	call	0xe26	; 0xe26 <vPortYield>
    3084:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <rec_buf_inp.2926>
    3088:	be 01       	movw	r22, r28
    308a:	6e 5f       	subi	r22, 0xFE	; 254
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	c8 01       	movw	r24, r16
    3090:	a7 d5       	rcall	.+2894   	; 0x3be0 <serial_get_byte>
    3092:	88 23       	and	r24, r24
    3094:	61 f2       	breq	.-104    	; 0x302e <_serial_call_back+0x16>
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <_upload_message>:
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	8c 01       	movw	r16, r24
    30ae:	eb 01       	movw	r28, r22
    30b0:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_reply_buffer_handle>
    30b4:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_reply_buffer_handle+0x1>
    30b8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <xStreamBufferReset>
    30bc:	b8 01       	movw	r22, r16
    30be:	8c ea       	ldi	r24, 0xAC	; 172
    30c0:	98 e1       	ldi	r25, 0x18	; 24
    30c2:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <strcpy>
    30c6:	20 97       	sbiw	r28, 0x00	; 0
    30c8:	79 f0       	breq	.+30     	; 0x30e8 <_upload_message+0x44>
    30ca:	ec ea       	ldi	r30, 0xAC	; 172
    30cc:	f8 e1       	ldi	r31, 0x18	; 24
    30ce:	01 90       	ld	r0, Z+
    30d0:	00 20       	and	r0, r0
    30d2:	e9 f7       	brne	.-6      	; 0x30ce <_upload_message+0x2a>
    30d4:	31 97       	sbiw	r30, 0x01	; 1
    30d6:	80 e2       	ldi	r24, 0x20	; 32
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	be 01       	movw	r22, r28
    30e0:	8c ea       	ldi	r24, 0xAC	; 172
    30e2:	98 e1       	ldi	r25, 0x18	; 24
    30e4:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <strcat>
    30e8:	ec ea       	ldi	r30, 0xAC	; 172
    30ea:	f8 e1       	ldi	r31, 0x18	; 24
    30ec:	df 01       	movw	r26, r30
    30ee:	0d 90       	ld	r0, X+
    30f0:	00 20       	and	r0, r0
    30f2:	e9 f7       	brne	.-6      	; 0x30ee <_upload_message+0x4a>
    30f4:	11 97       	sbiw	r26, 0x01	; 1
    30f6:	8d e0       	ldi	r24, 0x0D	; 13
    30f8:	9a e0       	ldi	r25, 0x0A	; 10
    30fa:	11 96       	adiw	r26, 0x01	; 1
    30fc:	9c 93       	st	X, r25
    30fe:	8e 93       	st	-X, r24
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	1c 92       	st	X, r1
    3104:	01 90       	ld	r0, Z+
    3106:	00 20       	and	r0, r0
    3108:	e9 f7       	brne	.-6      	; 0x3104 <_upload_message+0x60>
    310a:	31 97       	sbiw	r30, 0x01	; 1
    310c:	ec 5a       	subi	r30, 0xAC	; 172
    310e:	f8 41       	sbci	r31, 0x18	; 24
    3110:	ae 2f       	mov	r26, r30
    3112:	8c ea       	ldi	r24, 0xAC	; 172
    3114:	98 e1       	ldi	r25, 0x18	; 24
    3116:	ac 01       	movw	r20, r24
    3118:	6a 2f       	mov	r22, r26
    311a:	80 91 13 19 	lds	r24, 0x1913	; 0x801913 <_rn2483_serial>
    311e:	90 91 14 19 	lds	r25, 0x1914	; 0x801914 <_rn2483_serial+0x1>
    3122:	0e d5       	rcall	.+2588   	; 0x3b40 <serial_send_bytes>
    3124:	81 11       	cpse	r24, r1
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <_upload_message+0xa2>
    3128:	28 e2       	ldi	r18, 0x28	; 40
    312a:	35 e0       	ldi	r19, 0x05	; 5
    312c:	4d e2       	ldi	r20, 0x2D	; 45
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	6a e9       	ldi	r22, 0x9A	; 154
    3132:	79 e1       	ldi	r23, 0x19	; 25
    3134:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_reply_buffer_handle>
    3138:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_reply_buffer_handle+0x1>
    313c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <xStreamBufferReceive>
    3140:	8a e9       	ldi	r24, 0x9A	; 154
    3142:	99 e1       	ldi	r25, 0x19	; 25
    3144:	02 c0       	rjmp	.+4      	; 0x314a <_upload_message+0xa6>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	08 95       	ret

00003154 <_reply2return_code>:
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	6c 01       	movw	r12, r24
    316a:	fc 01       	movw	r30, r24
    316c:	01 90       	ld	r0, Z+
    316e:	00 20       	and	r0, r0
    3170:	e9 f7       	brne	.-6      	; 0x316c <_reply2return_code+0x18>
    3172:	31 97       	sbiw	r30, 0x01	; 1
    3174:	7f 01       	movw	r14, r30
    3176:	e8 1a       	sub	r14, r24
    3178:	f9 0a       	sbc	r15, r25
    317a:	0f e1       	ldi	r16, 0x1F	; 31
    317c:	18 e0       	ldi	r17, 0x08	; 8
    317e:	c0 e0       	ldi	r28, 0x00	; 0
    3180:	d0 e0       	ldi	r29, 0x00	; 0
    3182:	f8 01       	movw	r30, r16
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	a7 01       	movw	r20, r14
    318a:	c6 01       	movw	r24, r12
    318c:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strncasecmp>
    3190:	89 2b       	or	r24, r25
    3192:	49 f4       	brne	.+18     	; 0x31a6 <_reply2return_code+0x52>
    3194:	fe 01       	movw	r30, r28
    3196:	ee 0f       	add	r30, r30
    3198:	ff 1f       	adc	r31, r31
    319a:	ec 0f       	add	r30, r28
    319c:	fd 1f       	adc	r31, r29
    319e:	e2 5e       	subi	r30, 0xE2	; 226
    31a0:	f7 4f       	sbci	r31, 0xF7	; 247
    31a2:	80 81       	ld	r24, Z
    31a4:	07 c0       	rjmp	.+14     	; 0x31b4 <_reply2return_code+0x60>
    31a6:	21 96       	adiw	r28, 0x01	; 1
    31a8:	0d 5f       	subi	r16, 0xFD	; 253
    31aa:	1f 4f       	sbci	r17, 0xFF	; 255
    31ac:	c1 31       	cpi	r28, 0x11	; 17
    31ae:	d1 05       	cpc	r29, r1
    31b0:	41 f7       	brne	.-48     	; 0x3182 <_reply2return_code+0x2e>
    31b2:	80 e1       	ldi	r24, 0x10	; 16
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	08 95       	ret

000031ca <_upload_message_rc>:
    31ca:	6c df       	rcall	.-296    	; 0x30a4 <_upload_message>
    31cc:	c3 cf       	rjmp	.-122    	; 0x3154 <_reply2return_code>
    31ce:	08 95       	ret

000031d0 <lora_driver_flush_buffers>:
    31d0:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_reply_buffer_handle>
    31d4:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_reply_buffer_handle+0x1>
    31d8:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <xStreamBufferReset>
    31dc:	08 95       	ret

000031de <lora_driver_create>:
    31de:	8f 92       	push	r8
    31e0:	9f 92       	push	r9
    31e2:	af 92       	push	r10
    31e4:	cf 92       	push	r12
    31e6:	ef 92       	push	r14
    31e8:	0f 93       	push	r16
    31ea:	cf 93       	push	r28
    31ec:	c8 2f       	mov	r28, r24
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	88 ec       	ldi	r24, 0xC8	; 200
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <xStreamBufferGenericCreate>
    31fc:	90 93 12 19 	sts	0x1912, r25	; 0x801912 <_reply_buffer_handle+0x1>
    3200:	80 93 11 19 	sts	0x1911, r24	; 0x801911 <_reply_buffer_handle>
    3204:	0f 2e       	mov	r0, r31
    3206:	fc e0       	ldi	r31, 0x0C	; 12
    3208:	8f 2e       	mov	r8, r31
    320a:	f8 e1       	ldi	r31, 0x18	; 24
    320c:	9f 2e       	mov	r9, r31
    320e:	f0 2d       	mov	r31, r0
    3210:	68 94       	set
    3212:	aa 24       	eor	r10, r10
    3214:	a6 f8       	bld	r10, 6
    3216:	68 94       	set
    3218:	cc 24       	eor	r12, r12
    321a:	c6 f8       	bld	r12, 6
    321c:	e1 2c       	mov	r14, r1
    321e:	00 e0       	ldi	r16, 0x00	; 0
    3220:	23 e0       	ldi	r18, 0x03	; 3
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	51 ee       	ldi	r21, 0xE1	; 225
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	8c 2f       	mov	r24, r28
    322c:	ce d3       	rcall	.+1948   	; 0x39ca <serial_new_instance>
    322e:	90 93 14 19 	sts	0x1914, r25	; 0x801914 <_rn2483_serial+0x1>
    3232:	80 93 13 19 	sts	0x1913, r24	; 0x801913 <_rn2483_serial>
    3236:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <register_access+0x8>
    323a:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <register_access+0x9>
    323e:	64 e0       	ldi	r22, 0x04	; 4
    3240:	87 e0       	ldi	r24, 0x07	; 7
    3242:	91 e0       	ldi	r25, 0x01	; 1
    3244:	19 95       	eicall
    3246:	cf 91       	pop	r28
    3248:	0f 91       	pop	r16
    324a:	ef 90       	pop	r14
    324c:	cf 90       	pop	r12
    324e:	af 90       	pop	r10
    3250:	9f 90       	pop	r9
    3252:	8f 90       	pop	r8
    3254:	08 95       	ret

00003256 <lora_driver_reset_rn2483>:
    3256:	88 23       	and	r24, r24
    3258:	49 f0       	breq	.+18     	; 0x326c <lora_driver_reset_rn2483+0x16>
    325a:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <register_access+0x12>
    325e:	f0 91 0c 1a 	lds	r31, 0x1A0C	; 0x801a0c <register_access+0x13>
    3262:	64 e0       	ldi	r22, 0x04	; 4
    3264:	88 e0       	ldi	r24, 0x08	; 8
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	19 95       	eicall
    326a:	08 95       	ret
    326c:	e0 91 01 1a 	lds	r30, 0x1A01	; 0x801a01 <register_access+0x8>
    3270:	f0 91 02 1a 	lds	r31, 0x1A02	; 0x801a02 <register_access+0x9>
    3274:	64 e0       	ldi	r22, 0x04	; 4
    3276:	88 e0       	ldi	r24, 0x08	; 8
    3278:	91 e0       	ldi	r25, 0x01	; 1
    327a:	19 95       	eicall
    327c:	08 95       	ret

0000327e <lora_driver_rn2483_factory_reset>:
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	8a eb       	ldi	r24, 0xBA	; 186
    3284:	95 e0       	ldi	r25, 0x05	; 5
    3286:	0e df       	rcall	.-484    	; 0x30a4 <_upload_message>
    3288:	ea e9       	ldi	r30, 0x9A	; 154
    328a:	f9 e1       	ldi	r31, 0x19	; 25
    328c:	01 90       	ld	r0, Z+
    328e:	00 20       	and	r0, r0
    3290:	e9 f7       	brne	.-6      	; 0x328c <lora_driver_rn2483_factory_reset+0xe>
    3292:	31 97       	sbiw	r30, 0x01	; 1
    3294:	ea 59       	subi	r30, 0x9A	; 154
    3296:	f9 41       	sbci	r31, 0x19	; 25
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	75 97       	sbiw	r30, 0x15	; 21
    329c:	08 f0       	brcs	.+2      	; 0x32a0 <lora_driver_rn2483_factory_reset+0x22>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	08 95       	ret

000032a2 <lora_driver_get_rn2483_hweui>:
    32a2:	cf 93       	push	r28
    32a4:	df 93       	push	r29
    32a6:	ec 01       	movw	r28, r24
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	8b ec       	ldi	r24, 0xCB	; 203
    32ae:	95 e0       	ldi	r25, 0x05	; 5
    32b0:	f9 de       	rcall	.-526    	; 0x30a4 <_upload_message>
    32b2:	ea e9       	ldi	r30, 0x9A	; 154
    32b4:	f9 e1       	ldi	r31, 0x19	; 25
    32b6:	01 90       	ld	r0, Z+
    32b8:	00 20       	and	r0, r0
    32ba:	e9 f7       	brne	.-6      	; 0x32b6 <lora_driver_get_rn2483_hweui+0x14>
    32bc:	eb 5a       	subi	r30, 0xAB	; 171
    32be:	f9 41       	sbci	r31, 0x19	; 25
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <lora_driver_get_rn2483_hweui+0x2e>
    32c2:	6a e9       	ldi	r22, 0x9A	; 154
    32c4:	79 e1       	ldi	r23, 0x19	; 25
    32c6:	ce 01       	movw	r24, r28
    32c8:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <strcpy>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	02 c0       	rjmp	.+4      	; 0x32d4 <lora_driver_get_rn2483_hweui+0x32>
    32d0:	18 82       	st	Y, r1
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	08 95       	ret

000032da <lora_driver_set_device_identifier>:
    32da:	fc 01       	movw	r30, r24
    32dc:	01 90       	ld	r0, Z+
    32de:	00 20       	and	r0, r0
    32e0:	e9 f7       	brne	.-6      	; 0x32dc <lora_driver_set_device_identifier+0x2>
    32e2:	9f 01       	movw	r18, r30
    32e4:	21 51       	subi	r18, 0x11	; 17
    32e6:	31 09       	sbc	r19, r1
    32e8:	28 17       	cp	r18, r24
    32ea:	39 07       	cpc	r19, r25
    32ec:	29 f4       	brne	.+10     	; 0x32f8 <lora_driver_set_device_identifier+0x1e>
    32ee:	bc 01       	movw	r22, r24
    32f0:	89 ef       	ldi	r24, 0xF9	; 249
    32f2:	95 e0       	ldi	r25, 0x05	; 5
    32f4:	6a cf       	rjmp	.-300    	; 0x31ca <_upload_message_rc>
    32f6:	08 95       	ret
    32f8:	89 e0       	ldi	r24, 0x09	; 9
    32fa:	08 95       	ret

000032fc <lora_driver_set_application_identifier>:
    32fc:	fc 01       	movw	r30, r24
    32fe:	01 90       	ld	r0, Z+
    3300:	00 20       	and	r0, r0
    3302:	e9 f7       	brne	.-6      	; 0x32fe <lora_driver_set_application_identifier+0x2>
    3304:	9f 01       	movw	r18, r30
    3306:	21 51       	subi	r18, 0x11	; 17
    3308:	31 09       	sbc	r19, r1
    330a:	28 17       	cp	r18, r24
    330c:	39 07       	cpc	r19, r25
    330e:	29 f4       	brne	.+10     	; 0x331a <lora_driver_set_application_identifier+0x1e>
    3310:	bc 01       	movw	r22, r24
    3312:	88 e0       	ldi	r24, 0x08	; 8
    3314:	96 e0       	ldi	r25, 0x06	; 6
    3316:	59 cf       	rjmp	.-334    	; 0x31ca <_upload_message_rc>
    3318:	08 95       	ret
    331a:	89 e0       	ldi	r24, 0x09	; 9
    331c:	08 95       	ret

0000331e <lora_driver_set_application_key>:
    331e:	fc 01       	movw	r30, r24
    3320:	01 90       	ld	r0, Z+
    3322:	00 20       	and	r0, r0
    3324:	e9 f7       	brne	.-6      	; 0x3320 <lora_driver_set_application_key+0x2>
    3326:	9f 01       	movw	r18, r30
    3328:	21 52       	subi	r18, 0x21	; 33
    332a:	31 09       	sbc	r19, r1
    332c:	28 17       	cp	r18, r24
    332e:	39 07       	cpc	r19, r25
    3330:	29 f4       	brne	.+10     	; 0x333c <lora_driver_set_application_key+0x1e>
    3332:	bc 01       	movw	r22, r24
    3334:	87 e1       	ldi	r24, 0x17	; 23
    3336:	96 e0       	ldi	r25, 0x06	; 6
    3338:	48 cf       	rjmp	.-368    	; 0x31ca <_upload_message_rc>
    333a:	08 95       	ret
    333c:	89 e0       	ldi	r24, 0x09	; 9
    333e:	08 95       	ret

00003340 <lora_driver_save_mac>:
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	70 e0       	ldi	r23, 0x00	; 0
    3344:	86 e5       	ldi	r24, 0x56	; 86
    3346:	96 e0       	ldi	r25, 0x06	; 6
    3348:	40 cf       	rjmp	.-384    	; 0x31ca <_upload_message_rc>
    334a:	08 95       	ret

0000334c <lora_driver_join>:
    334c:	e8 2f       	mov	r30, r24
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e6 5e       	subi	r30, 0xE6	; 230
    3356:	f7 4f       	sbci	r31, 0xF7	; 247
    3358:	60 81       	ld	r22, Z
    335a:	71 81       	ldd	r23, Z+1	; 0x01
    335c:	8f e5       	ldi	r24, 0x5F	; 95
    335e:	96 e0       	ldi	r25, 0x06	; 6
    3360:	34 df       	rcall	.-408    	; 0x31ca <_upload_message_rc>
    3362:	81 11       	cpse	r24, r1
    3364:	12 c0       	rjmp	.+36     	; 0x338a <lora_driver_join+0x3e>
    3366:	28 e2       	ldi	r18, 0x28	; 40
    3368:	35 e0       	ldi	r19, 0x05	; 5
    336a:	4d e2       	ldi	r20, 0x2D	; 45
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	6a e9       	ldi	r22, 0x9A	; 154
    3370:	79 e1       	ldi	r23, 0x19	; 25
    3372:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_reply_buffer_handle>
    3376:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_reply_buffer_handle+0x1>
    337a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <xStreamBufferReceive>
    337e:	88 23       	and	r24, r24
    3380:	21 f0       	breq	.+8      	; 0x338a <lora_driver_join+0x3e>
    3382:	8a e9       	ldi	r24, 0x9A	; 154
    3384:	99 e1       	ldi	r25, 0x19	; 25
    3386:	e6 ce       	rjmp	.-564    	; 0x3154 <_reply2return_code>
    3388:	08 95       	ret
    338a:	8a e9       	ldi	r24, 0x9A	; 154
    338c:	99 e1       	ldi	r25, 0x19	; 25
    338e:	e2 ce       	rjmp	.-572    	; 0x3154 <_reply2return_code>
    3390:	08 95       	ret

00003392 <lora_driver_sent_upload_message>:
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	1f 92       	push	r1
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	db 01       	movw	r26, r22
    339e:	11 96       	adiw	r26, 0x01	; 1
    33a0:	9c 91       	ld	r25, X
    33a2:	11 97       	sbiw	r26, 0x01	; 1
    33a4:	95 31       	cpi	r25, 0x15	; 21
    33a6:	08 f0       	brcs	.+2      	; 0x33aa <lora_driver_sent_upload_message+0x18>
    33a8:	87 c0       	rjmp	.+270    	; 0x34b8 <lora_driver_sent_upload_message+0x126>
    33aa:	99 23       	and	r25, r25
    33ac:	81 f1       	breq	.+96     	; 0x340e <lora_driver_sent_upload_message+0x7c>
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	27 2f       	mov	r18, r23
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	46 2f       	mov	r20, r22
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	fd 01       	movw	r30, r26
    33bc:	e4 0f       	add	r30, r20
    33be:	f5 1f       	adc	r31, r21
    33c0:	92 81       	ldd	r25, Z+2	; 0x02
    33c2:	92 95       	swap	r25
    33c4:	9f 70       	andi	r25, 0x0F	; 15
    33c6:	9a 30       	cpi	r25, 0x0A	; 10
    33c8:	10 f0       	brcs	.+4      	; 0x33ce <lora_driver_sent_upload_message+0x3c>
    33ca:	99 5c       	subi	r25, 0xC9	; 201
    33cc:	01 c0       	rjmp	.+2      	; 0x33d0 <lora_driver_sent_upload_message+0x3e>
    33ce:	90 5d       	subi	r25, 0xD0	; 208
    33d0:	f9 01       	movw	r30, r18
    33d2:	e5 5d       	subi	r30, 0xD5	; 213
    33d4:	f6 4e       	sbci	r31, 0xE6	; 230
    33d6:	90 83       	st	Z, r25
    33d8:	2f 5f       	subi	r18, 0xFF	; 255
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	fd 01       	movw	r30, r26
    33de:	e4 0f       	add	r30, r20
    33e0:	f5 1f       	adc	r31, r21
    33e2:	92 81       	ldd	r25, Z+2	; 0x02
    33e4:	9f 70       	andi	r25, 0x0F	; 15
    33e6:	49 2f       	mov	r20, r25
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	4a 30       	cpi	r20, 0x0A	; 10
    33ec:	51 05       	cpc	r21, r1
    33ee:	14 f0       	brlt	.+4      	; 0x33f4 <lora_driver_sent_upload_message+0x62>
    33f0:	99 5c       	subi	r25, 0xC9	; 201
    33f2:	01 c0       	rjmp	.+2      	; 0x33f6 <lora_driver_sent_upload_message+0x64>
    33f4:	90 5d       	subi	r25, 0xD0	; 208
    33f6:	f9 01       	movw	r30, r18
    33f8:	e5 5d       	subi	r30, 0xD5	; 213
    33fa:	f6 4e       	sbci	r31, 0xE6	; 230
    33fc:	90 83       	st	Z, r25
    33fe:	7e 5f       	subi	r23, 0xFE	; 254
    3400:	6f 5f       	subi	r22, 0xFF	; 255
    3402:	11 96       	adiw	r26, 0x01	; 1
    3404:	9c 91       	ld	r25, X
    3406:	11 97       	sbiw	r26, 0x01	; 1
    3408:	69 17       	cp	r22, r25
    340a:	98 f2       	brcs	.-90     	; 0x33b2 <lora_driver_sent_upload_message+0x20>
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <lora_driver_sent_upload_message+0x7e>
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	e7 2f       	mov	r30, r23
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	e5 5d       	subi	r30, 0xD5	; 213
    3416:	f6 4e       	sbci	r31, 0xE6	; 230
    3418:	10 82       	st	Z, r1
    341a:	4c 91       	ld	r20, X
    341c:	81 11       	cpse	r24, r1
    341e:	03 c0       	rjmp	.+6      	; 0x3426 <lora_driver_sent_upload_message+0x94>
    3420:	88 e6       	ldi	r24, 0x68	; 104
    3422:	96 e0       	ldi	r25, 0x06	; 6
    3424:	02 c0       	rjmp	.+4      	; 0x342a <lora_driver_sent_upload_message+0x98>
    3426:	8a e6       	ldi	r24, 0x6A	; 106
    3428:	96 e0       	ldi	r25, 0x06	; 6
    342a:	2b e2       	ldi	r18, 0x2B	; 43
    342c:	39 e1       	ldi	r19, 0x19	; 25
    342e:	3f 93       	push	r19
    3430:	2f 93       	push	r18
    3432:	1f 92       	push	r1
    3434:	4f 93       	push	r20
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	8e e6       	ldi	r24, 0x6E	; 110
    343c:	96 e0       	ldi	r25, 0x06	; 6
    343e:	9f 93       	push	r25
    3440:	8f 93       	push	r24
    3442:	8d e6       	ldi	r24, 0x6D	; 109
    3444:	99 e1       	ldi	r25, 0x19	; 25
    3446:	9f 93       	push	r25
    3448:	8f 93       	push	r24
    344a:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <sprintf>
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	8d e6       	ldi	r24, 0x6D	; 109
    3454:	99 e1       	ldi	r25, 0x19	; 25
    3456:	b9 de       	rcall	.-654    	; 0x31ca <_upload_message_rc>
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	8e 30       	cpi	r24, 0x0E	; 14
    3464:	51 f5       	brne	.+84     	; 0x34ba <lora_driver_sent_upload_message+0x128>
    3466:	87 e0       	ldi	r24, 0x07	; 7
    3468:	89 83       	std	Y+1, r24	; 0x01
    346a:	be 01       	movw	r22, r28
    346c:	6f 5f       	subi	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	8a e9       	ldi	r24, 0x9A	; 154
    3472:	99 e1       	ldi	r25, 0x19	; 25
    3474:	30 d1       	rcall	.+608    	; 0x36d6 <decode_port_no>
    3476:	80 93 15 19 	sts	0x1915, r24	; 0x801915 <_downlink_payload>
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	e6 56       	subi	r30, 0x66	; 102
    3480:	f6 4e       	sbci	r31, 0xE6	; 230
    3482:	df 01       	movw	r26, r30
    3484:	0d 90       	ld	r0, X+
    3486:	00 20       	and	r0, r0
    3488:	e9 f7       	brne	.-6      	; 0x3484 <lora_driver_sent_upload_message+0xf2>
    348a:	11 97       	sbiw	r26, 0x01	; 1
    348c:	ae 1b       	sub	r26, r30
    348e:	bf 0b       	sbc	r27, r31
    3490:	aa 23       	and	r26, r26
    3492:	81 f0       	breq	.+32     	; 0x34b4 <lora_driver_sent_upload_message+0x122>
    3494:	bb 27       	eor	r27, r27
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	cd 01       	movw	r24, r26
    349a:	0a f4       	brpl	.+2      	; 0x349e <lora_driver_sent_upload_message+0x10c>
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	95 95       	asr	r25
    34a0:	87 95       	ror	r24
    34a2:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <_downlink_payload+0x1>
    34a6:	af 01       	movw	r20, r30
    34a8:	4f 5f       	subi	r20, 0xFF	; 255
    34aa:	5f 4f       	sbci	r21, 0xFF	; 255
    34ac:	64 e1       	ldi	r22, 0x14	; 20
    34ae:	87 e1       	ldi	r24, 0x17	; 23
    34b0:	99 e1       	ldi	r25, 0x19	; 25
    34b2:	3d d1       	rcall	.+634    	; 0x372e <decode_hexadecimal_string_bytes>
    34b4:	8e e0       	ldi	r24, 0x0E	; 14
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <lora_driver_sent_upload_message+0x128>
    34b8:	84 e1       	ldi	r24, 0x14	; 20
    34ba:	0f 90       	pop	r0
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <lora_driver_set_adaptive_data_rate>:
    34c2:	81 30       	cpi	r24, 0x01	; 1
    34c4:	19 f0       	breq	.+6      	; 0x34cc <lora_driver_set_adaptive_data_rate+0xa>
    34c6:	6e e7       	ldi	r22, 0x7E	; 126
    34c8:	76 e0       	ldi	r23, 0x06	; 6
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <lora_driver_set_adaptive_data_rate+0xe>
    34cc:	6e e3       	ldi	r22, 0x3E	; 62
    34ce:	77 e0       	ldi	r23, 0x07	; 7
    34d0:	82 e8       	ldi	r24, 0x82	; 130
    34d2:	96 e0       	ldi	r25, 0x06	; 6
    34d4:	7a ce       	rjmp	.-780    	; 0x31ca <_upload_message_rc>
    34d6:	08 95       	ret

000034d8 <lora_driver_configure_to_eu868>:
    34d8:	2f 92       	push	r2
    34da:	3f 92       	push	r3
    34dc:	4f 92       	push	r4
    34de:	5f 92       	push	r5
    34e0:	6f 92       	push	r6
    34e2:	7f 92       	push	r7
    34e4:	8f 92       	push	r8
    34e6:	9f 92       	push	r9
    34e8:	af 92       	push	r10
    34ea:	bf 92       	push	r11
    34ec:	cf 92       	push	r12
    34ee:	df 92       	push	r13
    34f0:	ef 92       	push	r14
    34f2:	ff 92       	push	r15
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	a0 97       	sbiw	r28, 0x20	; 32
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	67 ec       	ldi	r22, 0xC7	; 199
    350e:	76 e0       	ldi	r23, 0x06	; 6
    3510:	83 ed       	ldi	r24, 0xD3	; 211
    3512:	96 e0       	ldi	r25, 0x06	; 6
    3514:	c7 dd       	rcall	.-1138   	; 0x30a4 <_upload_message>
    3516:	1e de       	rcall	.-964    	; 0x3154 <_reply2return_code>
    3518:	81 11       	cpse	r24, r1
    351a:	a3 c0       	rjmp	.+326    	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    351c:	80 e2       	ldi	r24, 0x20	; 32
    351e:	e1 e2       	ldi	r30, 0x21	; 33
    3520:	f2 e0       	ldi	r31, 0x02	; 2
    3522:	de 01       	movw	r26, r28
    3524:	11 96       	adiw	r26, 0x01	; 1
    3526:	01 90       	ld	r0, Z+
    3528:	0d 92       	st	X+, r0
    352a:	8a 95       	dec	r24
    352c:	e1 f7       	brne	.-8      	; 0x3526 <lora_driver_configure_to_eu868+0x4e>
    352e:	9e 01       	movw	r18, r28
    3530:	2f 5f       	subi	r18, 0xFF	; 255
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	69 01       	movw	r12, r18
    3536:	e1 2c       	mov	r14, r1
    3538:	f1 2c       	mov	r15, r1
    353a:	0f 2e       	mov	r0, r31
    353c:	ff ed       	ldi	r31, 0xDF	; 223
    353e:	af 2e       	mov	r10, r31
    3540:	f6 e0       	ldi	r31, 0x06	; 6
    3542:	bf 2e       	mov	r11, r31
    3544:	f0 2d       	mov	r31, r0
    3546:	0d e6       	ldi	r16, 0x6D	; 109
    3548:	19 e1       	ldi	r17, 0x19	; 25
    354a:	0f 2e       	mov	r0, r31
    354c:	f8 ef       	ldi	r31, 0xF8	; 248
    354e:	4f 2e       	mov	r4, r31
    3550:	f6 e0       	ldi	r31, 0x06	; 6
    3552:	5f 2e       	mov	r5, r31
    3554:	f0 2d       	mov	r31, r0
    3556:	0f 2e       	mov	r0, r31
    3558:	ff e0       	ldi	r31, 0x0F	; 15
    355a:	8f 2e       	mov	r8, r31
    355c:	f7 e0       	ldi	r31, 0x07	; 7
    355e:	9f 2e       	mov	r9, r31
    3560:	f0 2d       	mov	r31, r0
    3562:	0f 2e       	mov	r0, r31
    3564:	f9 e2       	ldi	r31, 0x29	; 41
    3566:	6f 2e       	mov	r6, r31
    3568:	f7 e0       	ldi	r31, 0x07	; 7
    356a:	7f 2e       	mov	r7, r31
    356c:	f0 2d       	mov	r31, r0
    356e:	3e 2c       	mov	r3, r14
    3570:	2f 2c       	mov	r2, r15
    3572:	ff 92       	push	r15
    3574:	ef 92       	push	r14
    3576:	bf 92       	push	r11
    3578:	af 92       	push	r10
    357a:	1f 93       	push	r17
    357c:	0f 93       	push	r16
    357e:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <sprintf>
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	c8 01       	movw	r24, r16
    3588:	8d dd       	rcall	.-1254   	; 0x30a4 <_upload_message>
    358a:	e4 dd       	rcall	.-1080   	; 0x3154 <_reply2return_code>
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	81 11       	cpse	r24, r1
    359a:	63 c0       	rjmp	.+198    	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    359c:	32 e0       	ldi	r19, 0x02	; 2
    359e:	3e 15       	cp	r19, r14
    35a0:	e8 f4       	brcc	.+58     	; 0x35dc <lora_driver_configure_to_eu868+0x104>
    35a2:	f6 01       	movw	r30, r12
    35a4:	83 81       	ldd	r24, Z+3	; 0x03
    35a6:	8f 93       	push	r24
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	8f 93       	push	r24
    35ac:	81 81       	ldd	r24, Z+1	; 0x01
    35ae:	8f 93       	push	r24
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 93       	push	r24
    35b4:	ff 92       	push	r15
    35b6:	ef 92       	push	r14
    35b8:	5f 92       	push	r5
    35ba:	4f 92       	push	r4
    35bc:	1f 93       	push	r17
    35be:	0f 93       	push	r16
    35c0:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <sprintf>
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	c8 01       	movw	r24, r16
    35ca:	6c dd       	rcall	.-1320   	; 0x30a4 <_upload_message>
    35cc:	c3 dd       	rcall	.-1146   	; 0x3154 <_reply2return_code>
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	81 11       	cpse	r24, r1
    35da:	43 c0       	rjmp	.+134    	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    35dc:	2f 92       	push	r2
    35de:	3f 92       	push	r3
    35e0:	9f 92       	push	r9
    35e2:	8f 92       	push	r8
    35e4:	1f 93       	push	r17
    35e6:	0f 93       	push	r16
    35e8:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <sprintf>
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	c8 01       	movw	r24, r16
    35f2:	58 dd       	rcall	.-1360   	; 0x30a4 <_upload_message>
    35f4:	af dd       	rcall	.-1186   	; 0x3154 <_reply2return_code>
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	81 11       	cpse	r24, r1
    3604:	2e c0       	rjmp	.+92     	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    3606:	2f 92       	push	r2
    3608:	3f 92       	push	r3
    360a:	7f 92       	push	r7
    360c:	6f 92       	push	r6
    360e:	1f 93       	push	r17
    3610:	0f 93       	push	r16
    3612:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <sprintf>
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	c8 01       	movw	r24, r16
    361c:	43 dd       	rcall	.-1402   	; 0x30a4 <_upload_message>
    361e:	9a dd       	rcall	.-1228   	; 0x3154 <_reply2return_code>
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	81 11       	cpse	r24, r1
    362e:	19 c0       	rjmp	.+50     	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	e3 1a       	sub	r14, r19
    3634:	f3 0a       	sbc	r15, r19
    3636:	84 e0       	ldi	r24, 0x04	; 4
    3638:	c8 0e       	add	r12, r24
    363a:	d1 1c       	adc	r13, r1
    363c:	98 e0       	ldi	r25, 0x08	; 8
    363e:	e9 16       	cp	r14, r25
    3640:	f1 04       	cpc	r15, r1
    3642:	09 f0       	breq	.+2      	; 0x3646 <lora_driver_configure_to_eu868+0x16e>
    3644:	94 cf       	rjmp	.-216    	; 0x356e <lora_driver_configure_to_eu868+0x96>
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	81 e4       	ldi	r24, 0x41	; 65
    364c:	97 e0       	ldi	r25, 0x07	; 7
    364e:	2a dd       	rcall	.-1452   	; 0x30a4 <_upload_message>
    3650:	81 dd       	rcall	.-1278   	; 0x3154 <_reply2return_code>
    3652:	81 11       	cpse	r24, r1
    3654:	06 c0       	rjmp	.+12     	; 0x3662 <lora_driver_configure_to_eu868+0x18a>
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	82 e5       	ldi	r24, 0x52	; 82
    365c:	97 e0       	ldi	r25, 0x07	; 7
    365e:	22 dd       	rcall	.-1468   	; 0x30a4 <_upload_message>
    3660:	79 dd       	rcall	.-1294   	; 0x3154 <_reply2return_code>
    3662:	a0 96       	adiw	r28, 0x20	; 32
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	1f 91       	pop	r17
    3674:	0f 91       	pop	r16
    3676:	ff 90       	pop	r15
    3678:	ef 90       	pop	r14
    367a:	df 90       	pop	r13
    367c:	cf 90       	pop	r12
    367e:	bf 90       	pop	r11
    3680:	af 90       	pop	r10
    3682:	9f 90       	pop	r9
    3684:	8f 90       	pop	r8
    3686:	7f 90       	pop	r7
    3688:	6f 90       	pop	r6
    368a:	5f 90       	pop	r5
    368c:	4f 90       	pop	r4
    368e:	3f 90       	pop	r3
    3690:	2f 90       	pop	r2
    3692:	08 95       	ret

00003694 <lora_driver_set_otaa_identity>:
    3694:	ef 92       	push	r14
    3696:	ff 92       	push	r15
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	ec 01       	movw	r28, r24
    36a2:	8b 01       	movw	r16, r22
    36a4:	7a 01       	movw	r14, r20
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0c df       	rcall	.-488    	; 0x34c2 <lora_driver_set_adaptive_data_rate>
    36aa:	81 11       	cpse	r24, r1
    36ac:	0d c0       	rjmp	.+26     	; 0x36c8 <lora_driver_set_otaa_identity+0x34>
    36ae:	ce 01       	movw	r24, r28
    36b0:	25 de       	rcall	.-950    	; 0x32fc <lora_driver_set_application_identifier>
    36b2:	81 11       	cpse	r24, r1
    36b4:	09 c0       	rjmp	.+18     	; 0x36c8 <lora_driver_set_otaa_identity+0x34>
    36b6:	c8 01       	movw	r24, r16
    36b8:	32 de       	rcall	.-924    	; 0x331e <lora_driver_set_application_key>
    36ba:	81 11       	cpse	r24, r1
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <lora_driver_set_otaa_identity+0x34>
    36be:	c7 01       	movw	r24, r14
    36c0:	0c de       	rcall	.-1000   	; 0x32da <lora_driver_set_device_identifier>
    36c2:	81 11       	cpse	r24, r1
    36c4:	01 c0       	rjmp	.+2      	; 0x36c8 <lora_driver_set_otaa_identity+0x34>
    36c6:	3c de       	rcall	.-904    	; 0x3340 <lora_driver_save_mac>
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	08 95       	ret

000036d6 <decode_port_no>:
    36d6:	dc 01       	movw	r26, r24
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	29 f1       	breq	.+74     	; 0x3726 <decode_port_no+0x50>
    36dc:	fb 01       	movw	r30, r22
    36de:	20 81       	ld	r18, Z
    36e0:	fc 01       	movw	r30, r24
    36e2:	01 90       	ld	r0, Z+
    36e4:	00 20       	and	r0, r0
    36e6:	e9 f7       	brne	.-6      	; 0x36e2 <decode_port_no+0xc>
    36e8:	31 97       	sbiw	r30, 0x01	; 1
    36ea:	e8 1b       	sub	r30, r24
    36ec:	f9 0b       	sbc	r31, r25
    36ee:	82 2f       	mov	r24, r18
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	e8 17       	cp	r30, r24
    36f4:	f9 07       	cpc	r31, r25
    36f6:	c8 f0       	brcs	.+50     	; 0x372a <decode_port_no+0x54>
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	08 c0       	rjmp	.+16     	; 0x370c <decode_port_no+0x36>
    36fc:	88 0f       	add	r24, r24
    36fe:	38 2f       	mov	r19, r24
    3700:	33 0f       	add	r19, r19
    3702:	33 0f       	add	r19, r19
    3704:	83 0f       	add	r24, r19
    3706:	80 53       	subi	r24, 0x30	; 48
    3708:	89 0f       	add	r24, r25
    370a:	2f 5f       	subi	r18, 0xFF	; 255
    370c:	fd 01       	movw	r30, r26
    370e:	e2 0f       	add	r30, r18
    3710:	f1 1d       	adc	r31, r1
    3712:	90 81       	ld	r25, Z
    3714:	30 ed       	ldi	r19, 0xD0	; 208
    3716:	39 0f       	add	r19, r25
    3718:	3a 30       	cpi	r19, 0x0A	; 10
    371a:	10 f4       	brcc	.+4      	; 0x3720 <decode_port_no+0x4a>
    371c:	91 11       	cpse	r25, r1
    371e:	ee cf       	rjmp	.-36     	; 0x36fc <decode_port_no+0x26>
    3720:	fb 01       	movw	r30, r22
    3722:	20 83       	st	Z, r18
    3724:	08 95       	ret
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	08 95       	ret
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	08 95       	ret

0000372e <decode_hexadecimal_string_bytes>:
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	dc 01       	movw	r26, r24
    3738:	ea 01       	movw	r28, r20
    373a:	20 97       	sbiw	r28, 0x00	; 0
    373c:	e1 f1       	breq	.+120    	; 0x37b6 <decode_hexadecimal_string_bytes+0x88>
    373e:	fa 01       	movw	r30, r20
    3740:	01 90       	ld	r0, Z+
    3742:	00 20       	and	r0, r0
    3744:	e9 f7       	brne	.-6      	; 0x3740 <decode_hexadecimal_string_bytes+0x12>
    3746:	31 97       	sbiw	r30, 0x01	; 1
    3748:	e4 1b       	sub	r30, r20
    374a:	f5 0b       	sbc	r31, r21
    374c:	32 97       	sbiw	r30, 0x02	; 2
    374e:	10 f5       	brcc	.+68     	; 0x3794 <decode_hexadecimal_string_bytes+0x66>
    3750:	32 c0       	rjmp	.+100    	; 0x37b6 <decode_hexadecimal_string_bytes+0x88>
    3752:	8d 01       	movw	r16, r26
    3754:	04 0f       	add	r16, r20
    3756:	15 1f       	adc	r17, r21
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	ae 01       	movw	r20, r28
    375c:	42 0f       	add	r20, r18
    375e:	53 1f       	adc	r21, r19
    3760:	fa 01       	movw	r30, r20
    3762:	90 81       	ld	r25, Z
    3764:	91 34       	cpi	r25, 0x41	; 65
    3766:	28 f0       	brcs	.+10     	; 0x3772 <decode_hexadecimal_string_bytes+0x44>
    3768:	97 53       	subi	r25, 0x37	; 55
    376a:	59 2f       	mov	r21, r25
    376c:	52 95       	swap	r21
    376e:	50 7f       	andi	r21, 0xF0	; 240
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <decode_hexadecimal_string_bytes+0x4a>
    3772:	59 2f       	mov	r21, r25
    3774:	52 95       	swap	r21
    3776:	50 7f       	andi	r21, 0xF0	; 240
    3778:	2c 0f       	add	r18, r28
    377a:	3d 1f       	adc	r19, r29
    377c:	f9 01       	movw	r30, r18
    377e:	91 81       	ldd	r25, Z+1	; 0x01
    3780:	91 34       	cpi	r25, 0x41	; 65
    3782:	10 f0       	brcs	.+4      	; 0x3788 <decode_hexadecimal_string_bytes+0x5a>
    3784:	97 53       	subi	r25, 0x37	; 55
    3786:	01 c0       	rjmp	.+2      	; 0x378a <decode_hexadecimal_string_bytes+0x5c>
    3788:	90 53       	subi	r25, 0x30	; 48
    378a:	95 0f       	add	r25, r21
    378c:	f8 01       	movw	r30, r16
    378e:	90 83       	st	Z, r25
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	01 c0       	rjmp	.+2      	; 0x3796 <decode_hexadecimal_string_bytes+0x68>
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	28 2f       	mov	r18, r24
    3798:	22 0f       	add	r18, r18
    379a:	48 2f       	mov	r20, r24
    379c:	50 e0       	ldi	r21, 0x00	; 0
    379e:	fe 01       	movw	r30, r28
    37a0:	01 90       	ld	r0, Z+
    37a2:	00 20       	and	r0, r0
    37a4:	e9 f7       	brne	.-6      	; 0x37a0 <decode_hexadecimal_string_bytes+0x72>
    37a6:	31 97       	sbiw	r30, 0x01	; 1
    37a8:	ec 1b       	sub	r30, r28
    37aa:	fd 0b       	sbc	r31, r29
    37ac:	4e 17       	cp	r20, r30
    37ae:	5f 07       	cpc	r21, r31
    37b0:	10 f4       	brcc	.+4      	; 0x37b6 <decode_hexadecimal_string_bytes+0x88>
    37b2:	86 13       	cpse	r24, r22
    37b4:	ce cf       	rjmp	.-100    	; 0x3752 <decode_hexadecimal_string_bytes+0x24>
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	08 95       	ret

000037c0 <reg_read_register>:
    37c0:	fc 01       	movw	r30, r24
    37c2:	80 81       	ld	r24, Z
    37c4:	08 95       	ret

000037c6 <reg_read_bit>:
    37c6:	fc 01       	movw	r30, r24
    37c8:	20 81       	ld	r18, Z
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	02 c0       	rjmp	.+4      	; 0x37d4 <reg_read_bit+0xe>
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	6a 95       	dec	r22
    37d6:	e2 f7       	brpl	.-8      	; 0x37d0 <reg_read_bit+0xa>
    37d8:	82 23       	and	r24, r18
    37da:	08 95       	ret

000037dc <reg_read_bits>:
    37dc:	fc 01       	movw	r30, r24
    37de:	80 81       	ld	r24, Z
    37e0:	86 23       	and	r24, r22
    37e2:	08 95       	ret

000037e4 <reg_set_register>:
    37e4:	fc 01       	movw	r30, r24
    37e6:	60 83       	st	Z, r22
    37e8:	08 95       	ret

000037ea <reg_clear_register>:
    37ea:	fc 01       	movw	r30, r24
    37ec:	10 82       	st	Z, r1
    37ee:	08 95       	ret

000037f0 <reg_set_bit>:
    37f0:	fc 01       	movw	r30, r24
    37f2:	40 81       	ld	r20, Z
    37f4:	21 e0       	ldi	r18, 0x01	; 1
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <reg_set_bit+0xe>
    37fa:	22 0f       	add	r18, r18
    37fc:	33 1f       	adc	r19, r19
    37fe:	6a 95       	dec	r22
    3800:	e2 f7       	brpl	.-8      	; 0x37fa <reg_set_bit+0xa>
    3802:	24 2b       	or	r18, r20
    3804:	20 83       	st	Z, r18
    3806:	08 95       	ret

00003808 <reg_set_bits>:
    3808:	fc 01       	movw	r30, r24
    380a:	20 81       	ld	r18, Z
    380c:	62 2b       	or	r22, r18
    380e:	60 83       	st	Z, r22
    3810:	08 95       	ret

00003812 <reg_toggle_bit>:
    3812:	fc 01       	movw	r30, r24
    3814:	40 81       	ld	r20, Z
    3816:	21 e0       	ldi	r18, 0x01	; 1
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <reg_toggle_bit+0xe>
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	6a 95       	dec	r22
    3822:	e2 f7       	brpl	.-8      	; 0x381c <reg_toggle_bit+0xa>
    3824:	24 27       	eor	r18, r20
    3826:	20 83       	st	Z, r18
    3828:	08 95       	ret

0000382a <reg_toggle_bits>:
    382a:	fc 01       	movw	r30, r24
    382c:	20 81       	ld	r18, Z
    382e:	62 27       	eor	r22, r18
    3830:	60 83       	st	Z, r22
    3832:	08 95       	ret

00003834 <reg_clear_bit>:
    3834:	fc 01       	movw	r30, r24
    3836:	90 81       	ld	r25, Z
    3838:	21 e0       	ldi	r18, 0x01	; 1
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <reg_clear_bit+0xe>
    383e:	22 0f       	add	r18, r18
    3840:	33 1f       	adc	r19, r19
    3842:	6a 95       	dec	r22
    3844:	e2 f7       	brpl	.-8      	; 0x383e <reg_clear_bit+0xa>
    3846:	20 95       	com	r18
    3848:	29 23       	and	r18, r25
    384a:	20 83       	st	Z, r18
    384c:	08 95       	ret

0000384e <reg_clear_bits>:
    384e:	fc 01       	movw	r30, r24
    3850:	90 81       	ld	r25, Z
    3852:	60 95       	com	r22
    3854:	69 23       	and	r22, r25
    3856:	60 83       	st	Z, r22
    3858:	08 95       	ret

0000385a <_serial_call_back>:
    385a:	80 91 ca 19 	lds	r24, 0x19CA	; 0x8019ca <crc_sum.1941>
    385e:	86 0f       	add	r24, r22
    3860:	80 93 ca 19 	sts	0x19CA, r24	; 0x8019ca <crc_sum.1941>
    3864:	90 91 cd 19 	lds	r25, 0x19CD	; 0x8019cd <_mh_state>
    3868:	91 30       	cpi	r25, 0x01	; 1
    386a:	79 f0       	breq	.+30     	; 0x388a <_serial_call_back+0x30>
    386c:	28 f0       	brcs	.+10     	; 0x3878 <_serial_call_back+0x1e>
    386e:	92 30       	cpi	r25, 0x02	; 2
    3870:	a9 f0       	breq	.+42     	; 0x389c <_serial_call_back+0x42>
    3872:	93 30       	cpi	r25, 0x03	; 3
    3874:	19 f1       	breq	.+70     	; 0x38bc <_serial_call_back+0x62>
    3876:	08 95       	ret
    3878:	6f 3f       	cpi	r22, 0xFF	; 255
    387a:	09 f0       	breq	.+2      	; 0x387e <_serial_call_back+0x24>
    387c:	48 c0       	rjmp	.+144    	; 0x390e <_serial_call_back+0xb4>
    387e:	10 92 ca 19 	sts	0x19CA, r1	; 0x8019ca <crc_sum.1941>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <_mh_state>
    3888:	08 95       	ret
    388a:	66 38       	cpi	r22, 0x86	; 134
    388c:	09 f0       	breq	.+2      	; 0x3890 <_serial_call_back+0x36>
    388e:	3f c0       	rjmp	.+126    	; 0x390e <_serial_call_back+0xb4>
    3890:	10 92 c9 19 	sts	0x19C9, r1	; 0x8019c9 <inDex.1939>
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <_mh_state>
    389a:	08 95       	ret
    389c:	e0 91 c9 19 	lds	r30, 0x19C9	; 0x8019c9 <inDex.1939>
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	8e 0f       	add	r24, r30
    38a4:	80 93 c9 19 	sts	0x19C9, r24	; 0x8019c9 <inDex.1939>
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	e9 53       	subi	r30, 0x39	; 57
    38ac:	f6 4e       	sbci	r31, 0xE6	; 230
    38ae:	60 83       	st	Z, r22
    38b0:	82 30       	cpi	r24, 0x02	; 2
    38b2:	69 f5       	brne	.+90     	; 0x390e <_serial_call_back+0xb4>
    38b4:	83 e0       	ldi	r24, 0x03	; 3
    38b6:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <_mh_state>
    38ba:	08 95       	ret
    38bc:	90 91 c9 19 	lds	r25, 0x19C9	; 0x8019c9 <inDex.1939>
    38c0:	21 e0       	ldi	r18, 0x01	; 1
    38c2:	29 0f       	add	r18, r25
    38c4:	20 93 c9 19 	sts	0x19C9, r18	; 0x8019c9 <inDex.1939>
    38c8:	96 30       	cpi	r25, 0x06	; 6
    38ca:	09 f5       	brne	.+66     	; 0x390e <_serial_call_back+0xb4>
    38cc:	81 11       	cpse	r24, r1
    38ce:	0e c0       	rjmp	.+28     	; 0x38ec <_serial_call_back+0x92>
    38d0:	e7 ec       	ldi	r30, 0xC7	; 199
    38d2:	f9 e1       	ldi	r31, 0x19	; 25
    38d4:	80 81       	ld	r24, Z
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	98 2f       	mov	r25, r24
    38da:	88 27       	eor	r24, r24
    38dc:	21 81       	ldd	r18, Z+1	; 0x01
    38de:	82 0f       	add	r24, r18
    38e0:	91 1d       	adc	r25, r1
    38e2:	90 93 cf 19 	sts	0x19CF, r25	; 0x8019cf <_ppm+0x1>
    38e6:	80 93 ce 19 	sts	0x19CE, r24	; 0x8019ce <_ppm>
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <_serial_call_back+0x9a>
    38ec:	10 92 cf 19 	sts	0x19CF, r1	; 0x8019cf <_ppm+0x1>
    38f0:	10 92 ce 19 	sts	0x19CE, r1	; 0x8019ce <_ppm>
    38f4:	10 92 cd 19 	sts	0x19CD, r1	; 0x8019cd <_mh_state>
    38f8:	e0 91 cb 19 	lds	r30, 0x19CB	; 0x8019cb <_app_call_back>
    38fc:	f0 91 cc 19 	lds	r31, 0x19CC	; 0x8019cc <_app_call_back+0x1>
    3900:	30 97       	sbiw	r30, 0x00	; 0
    3902:	29 f0       	breq	.+10     	; 0x390e <_serial_call_back+0xb4>
    3904:	80 91 ce 19 	lds	r24, 0x19CE	; 0x8019ce <_ppm>
    3908:	90 91 cf 19 	lds	r25, 0x19CF	; 0x8019cf <_ppm+0x1>
    390c:	19 95       	eicall
    390e:	08 95       	ret

00003910 <mh_z19_create>:
    3910:	8f 92       	push	r8
    3912:	9f 92       	push	r9
    3914:	af 92       	push	r10
    3916:	cf 92       	push	r12
    3918:	ef 92       	push	r14
    391a:	0f 93       	push	r16
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	eb 01       	movw	r28, r22
    3922:	0f 2e       	mov	r0, r31
    3924:	fd e2       	ldi	r31, 0x2D	; 45
    3926:	8f 2e       	mov	r8, r31
    3928:	fc e1       	ldi	r31, 0x1C	; 28
    392a:	9f 2e       	mov	r9, r31
    392c:	f0 2d       	mov	r31, r0
    392e:	68 94       	set
    3930:	aa 24       	eor	r10, r10
    3932:	a4 f8       	bld	r10, 4
    3934:	68 94       	set
    3936:	cc 24       	eor	r12, r12
    3938:	c4 f8       	bld	r12, 4
    393a:	e1 2c       	mov	r14, r1
    393c:	00 e0       	ldi	r16, 0x00	; 0
    393e:	23 e0       	ldi	r18, 0x03	; 3
    3940:	40 e8       	ldi	r20, 0x80	; 128
    3942:	55 e2       	ldi	r21, 0x25	; 37
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	40 d0       	rcall	.+128    	; 0x39ca <serial_new_instance>
    394a:	90 93 d1 19 	sts	0x19D1, r25	; 0x8019d1 <_serial+0x1>
    394e:	80 93 d0 19 	sts	0x19D0, r24	; 0x8019d0 <_serial>
    3952:	d0 93 cc 19 	sts	0x19CC, r29	; 0x8019cc <_app_call_back+0x1>
    3956:	c0 93 cb 19 	sts	0x19CB, r28	; 0x8019cb <_app_call_back>
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	0f 91       	pop	r16
    3960:	ef 90       	pop	r14
    3962:	cf 90       	pop	r12
    3964:	af 90       	pop	r10
    3966:	9f 90       	pop	r9
    3968:	8f 90       	pop	r8
    396a:	08 95       	ret

0000396c <mh_z19_take_meassuring>:
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	29 97       	sbiw	r28, 0x09	; 9
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	89 e0       	ldi	r24, 0x09	; 9
    3982:	e1 e4       	ldi	r30, 0x41	; 65
    3984:	f2 e0       	ldi	r31, 0x02	; 2
    3986:	9e 01       	movw	r18, r28
    3988:	2f 5f       	subi	r18, 0xFF	; 255
    398a:	3f 4f       	sbci	r19, 0xFF	; 255
    398c:	d9 01       	movw	r26, r18
    398e:	01 90       	ld	r0, Z+
    3990:	0d 92       	st	X+, r0
    3992:	8a 95       	dec	r24
    3994:	e1 f7       	brne	.-8      	; 0x398e <mh_z19_take_meassuring+0x22>
    3996:	10 92 cf 19 	sts	0x19CF, r1	; 0x8019cf <_ppm+0x1>
    399a:	10 92 ce 19 	sts	0x19CE, r1	; 0x8019ce <_ppm>
    399e:	80 91 d0 19 	lds	r24, 0x19D0	; 0x8019d0 <_serial>
    39a2:	90 91 d1 19 	lds	r25, 0x19D1	; 0x8019d1 <_serial+0x1>
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	31 f0       	breq	.+12     	; 0x39b6 <mh_z19_take_meassuring+0x4a>
    39aa:	42 2f       	mov	r20, r18
    39ac:	53 2f       	mov	r21, r19
    39ae:	69 e0       	ldi	r22, 0x09	; 9
    39b0:	c7 d0       	rcall	.+398    	; 0x3b40 <serial_send_bytes>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	01 c0       	rjmp	.+2      	; 0x39b8 <mh_z19_take_meassuring+0x4c>
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	29 96       	adiw	r28, 0x09	; 9
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	08 95       	ret

000039ca <serial_new_instance>:
    39ca:	2f 92       	push	r2
    39cc:	3f 92       	push	r3
    39ce:	4f 92       	push	r4
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	cf 92       	push	r12
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	f8 2e       	mov	r15, r24
    39f0:	2a 01       	movw	r4, r20
    39f2:	3b 01       	movw	r6, r22
    39f4:	88 e0       	ldi	r24, 0x08	; 8
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9b d7       	rcall	.+3894   	; 0x4930 <malloc>
    39fa:	8c 01       	movw	r16, r24
    39fc:	8f 2d       	mov	r24, r15
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	fc 01       	movw	r30, r24
    3a06:	ee 52       	subi	r30, 0x2E	; 46
    3a08:	f6 4e       	sbci	r31, 0xE6	; 230
    3a0a:	11 83       	std	Z+1, r17	; 0x01
    3a0c:	00 83       	st	Z, r16
    3a0e:	fc 01       	movw	r30, r24
    3a10:	e6 5f       	subi	r30, 0xF6	; 246
    3a12:	fd 4f       	sbci	r31, 0xFD	; 253
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	d8 01       	movw	r26, r16
    3a1a:	8d 93       	st	X+, r24
    3a1c:	9c 93       	st	X, r25
    3a1e:	6c 2d       	mov	r22, r12
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	84 e0       	ldi	r24, 0x04	; 4
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	6a d7       	rcall	.+3796   	; 0x48fc <calloc>
    3a28:	1c 01       	movw	r2, r24
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	86 e0       	ldi	r24, 0x06	; 6
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	64 d7       	rcall	.+3784   	; 0x48fc <calloc>
    3a34:	7c 01       	movw	r14, r24
    3a36:	4c 2d       	mov	r20, r12
    3a38:	b1 01       	movw	r22, r2
    3a3a:	2b d5       	rcall	.+2646   	; 0x4492 <fifo_init>
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	f5 82       	std	Z+5, r15	; 0x05
    3a40:	e4 82       	std	Z+4, r14	; 0x04
    3a42:	6a 2d       	mov	r22, r10
    3a44:	70 e0       	ldi	r23, 0x00	; 0
    3a46:	84 e0       	ldi	r24, 0x04	; 4
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	58 d7       	rcall	.+3760   	; 0x48fc <calloc>
    3a4c:	1c 01       	movw	r2, r24
    3a4e:	61 e0       	ldi	r22, 0x01	; 1
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	86 e0       	ldi	r24, 0x06	; 6
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	52 d7       	rcall	.+3748   	; 0x48fc <calloc>
    3a58:	7c 01       	movw	r14, r24
    3a5a:	4a 2d       	mov	r20, r10
    3a5c:	b1 01       	movw	r22, r2
    3a5e:	19 d5       	rcall	.+2610   	; 0x4492 <fifo_init>
    3a60:	d8 01       	movw	r26, r16
    3a62:	13 96       	adiw	r26, 0x03	; 3
    3a64:	fc 92       	st	X, r15
    3a66:	ee 92       	st	-X, r14
    3a68:	12 97       	sbiw	r26, 0x02	; 2
    3a6a:	17 96       	adiw	r26, 0x07	; 7
    3a6c:	9c 92       	st	X, r9
    3a6e:	8e 92       	st	-X, r8
    3a70:	16 97       	sbiw	r26, 0x06	; 6
    3a72:	ff b6       	in	r15, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	ed 91       	ld	r30, X+
    3a78:	fc 91       	ld	r31, X
    3a7a:	11 97       	sbiw	r26, 0x01	; 1
    3a7c:	36 97       	sbiw	r30, 0x06	; 6
    3a7e:	80 81       	ld	r24, Z
    3a80:	82 60       	ori	r24, 0x02	; 2
    3a82:	80 83       	st	Z, r24
    3a84:	8d 90       	ld	r8, X+
    3a86:	9c 90       	ld	r9, X
    3a88:	c3 01       	movw	r24, r6
    3a8a:	b2 01       	movw	r22, r4
    3a8c:	1c d6       	rcall	.+3128   	; 0x46c6 <__floatunsisf>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	51 e4       	ldi	r21, 0x41	; 65
    3a96:	a5 d6       	rcall	.+3402   	; 0x47e2 <__mulsf3>
    3a98:	9b 01       	movw	r18, r22
    3a9a:	ac 01       	movw	r20, r24
    3a9c:	60 e0       	ldi	r22, 0x00	; 0
    3a9e:	74 e2       	ldi	r23, 0x24	; 36
    3aa0:	84 e7       	ldi	r24, 0x74	; 116
    3aa2:	9b e4       	ldi	r25, 0x4B	; 75
    3aa4:	77 d5       	rcall	.+2798   	; 0x4594 <__divsf3>
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0d d5       	rcall	.+2586   	; 0x44ca <__subsf3>
    3ab0:	de d5       	rcall	.+3004   	; 0x466e <__fixunssfsi>
    3ab2:	f4 01       	movw	r30, r8
    3ab4:	32 97       	sbiw	r30, 0x02	; 2
    3ab6:	60 83       	st	Z, r22
    3ab8:	d8 01       	movw	r26, r16
    3aba:	ed 91       	ld	r30, X+
    3abc:	fc 91       	ld	r31, X
    3abe:	11 97       	sbiw	r26, 0x01	; 1
    3ac0:	35 97       	sbiw	r30, 0x05	; 5
    3ac2:	88 e9       	ldi	r24, 0x98	; 152
    3ac4:	80 83       	st	Z, r24
    3ac6:	ed 91       	ld	r30, X+
    3ac8:	fc 91       	ld	r31, X
    3aca:	34 97       	sbiw	r30, 0x04	; 4
    3acc:	86 e0       	ldi	r24, 0x06	; 6
    3ace:	80 83       	st	Z, r24
    3ad0:	ff be       	out	0x3f, r15	; 63
    3ad2:	c8 01       	movw	r24, r16
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	ef 90       	pop	r14
    3ae0:	cf 90       	pop	r12
    3ae2:	af 90       	pop	r10
    3ae4:	9f 90       	pop	r9
    3ae6:	8f 90       	pop	r8
    3ae8:	7f 90       	pop	r7
    3aea:	6f 90       	pop	r6
    3aec:	5f 90       	pop	r5
    3aee:	4f 90       	pop	r4
    3af0:	3f 90       	pop	r3
    3af2:	2f 90       	pop	r2
    3af4:	08 95       	ret

00003af6 <serial_send_byte>:
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	ec 01       	movw	r28, r24
    3afc:	ea 81       	ldd	r30, Y+2	; 0x02
    3afe:	fb 81       	ldd	r31, Y+3	; 0x03
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	82 81       	ldd	r24, Z+2	; 0x02
    3b04:	25 81       	ldd	r18, Z+5	; 0x05
    3b06:	98 1b       	sub	r25, r24
    3b08:	92 23       	and	r25, r18
    3b0a:	84 81       	ldd	r24, Z+4	; 0x04
    3b0c:	98 17       	cp	r25, r24
    3b0e:	a1 f0       	breq	.+40     	; 0x3b38 <serial_send_byte+0x42>
    3b10:	93 81       	ldd	r25, Z+3	; 0x03
    3b12:	26 95       	lsr	r18
    3b14:	29 23       	and	r18, r25
    3b16:	a0 81       	ld	r26, Z
    3b18:	b1 81       	ldd	r27, Z+1	; 0x01
    3b1a:	a2 0f       	add	r26, r18
    3b1c:	b1 1d       	adc	r27, r1
    3b1e:	6c 93       	st	X, r22
    3b20:	9f 5f       	subi	r25, 0xFF	; 255
    3b22:	25 81       	ldd	r18, Z+5	; 0x05
    3b24:	92 23       	and	r25, r18
    3b26:	93 83       	std	Z+3, r25	; 0x03
    3b28:	e8 81       	ld	r30, Y
    3b2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b2c:	35 97       	sbiw	r30, 0x05	; 5
    3b2e:	80 81       	ld	r24, Z
    3b30:	80 62       	ori	r24, 0x20	; 32
    3b32:	80 83       	st	Z, r24
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	01 c0       	rjmp	.+2      	; 0x3b3a <serial_send_byte+0x44>
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <serial_send_bytes>:
    3b40:	ef 92       	push	r14
    3b42:	ff 92       	push	r15
    3b44:	0f 93       	push	r16
    3b46:	1f 93       	push	r17
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	7c 01       	movw	r14, r24
    3b4e:	dc 01       	movw	r26, r24
    3b50:	12 96       	adiw	r26, 0x02	; 2
    3b52:	ed 91       	ld	r30, X+
    3b54:	fc 91       	ld	r31, X
    3b56:	13 97       	sbiw	r26, 0x03	; 3
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	98 1b       	sub	r25, r24
    3b5e:	85 81       	ldd	r24, Z+5	; 0x05
    3b60:	98 23       	and	r25, r24
    3b62:	84 81       	ldd	r24, Z+4	; 0x04
    3b64:	89 1b       	sub	r24, r25
    3b66:	86 17       	cp	r24, r22
    3b68:	98 f1       	brcs	.+102    	; 0x3bd0 <serial_send_bytes+0x90>
    3b6a:	66 23       	and	r22, r22
    3b6c:	41 f1       	breq	.+80     	; 0x3bbe <serial_send_bytes+0x7e>
    3b6e:	84 2f       	mov	r24, r20
    3b70:	95 2f       	mov	r25, r21
    3b72:	dc 01       	movw	r26, r24
    3b74:	61 50       	subi	r22, 0x01	; 1
    3b76:	46 2f       	mov	r20, r22
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	4f 5f       	subi	r20, 0xFF	; 255
    3b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b7e:	48 0f       	add	r20, r24
    3b80:	59 1f       	adc	r21, r25
    3b82:	e7 01       	movw	r28, r14
    3b84:	ea 81       	ldd	r30, Y+2	; 0x02
    3b86:	fb 81       	ldd	r31, Y+3	; 0x03
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	82 81       	ldd	r24, Z+2	; 0x02
    3b8c:	25 81       	ldd	r18, Z+5	; 0x05
    3b8e:	98 1b       	sub	r25, r24
    3b90:	92 23       	and	r25, r18
    3b92:	84 81       	ldd	r24, Z+4	; 0x04
    3b94:	98 17       	cp	r25, r24
    3b96:	79 f0       	breq	.+30     	; 0x3bb6 <serial_send_bytes+0x76>
    3b98:	8c 91       	ld	r24, X
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	26 95       	lsr	r18
    3b9e:	29 23       	and	r18, r25
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	8b 01       	movw	r16, r22
    3ba6:	02 0f       	add	r16, r18
    3ba8:	11 1d       	adc	r17, r1
    3baa:	e8 01       	movw	r28, r16
    3bac:	88 83       	st	Y, r24
    3bae:	9f 5f       	subi	r25, 0xFF	; 255
    3bb0:	85 81       	ldd	r24, Z+5	; 0x05
    3bb2:	98 23       	and	r25, r24
    3bb4:	93 83       	std	Z+3, r25	; 0x03
    3bb6:	11 96       	adiw	r26, 0x01	; 1
    3bb8:	a4 17       	cp	r26, r20
    3bba:	b5 07       	cpc	r27, r21
    3bbc:	11 f7       	brne	.-60     	; 0x3b82 <serial_send_bytes+0x42>
    3bbe:	d7 01       	movw	r26, r14
    3bc0:	ed 91       	ld	r30, X+
    3bc2:	fc 91       	ld	r31, X
    3bc4:	35 97       	sbiw	r30, 0x05	; 5
    3bc6:	80 81       	ld	r24, Z
    3bc8:	80 62       	ori	r24, 0x20	; 32
    3bca:	80 83       	st	Z, r24
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <serial_send_bytes+0x92>
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	1f 91       	pop	r17
    3bd8:	0f 91       	pop	r16
    3bda:	ff 90       	pop	r15
    3bdc:	ef 90       	pop	r14
    3bde:	08 95       	ret

00003be0 <serial_get_byte>:
    3be0:	dc 01       	movw	r26, r24
    3be2:	14 96       	adiw	r26, 0x04	; 4
    3be4:	ed 91       	ld	r30, X+
    3be6:	fc 91       	ld	r31, X
    3be8:	15 97       	sbiw	r26, 0x05	; 5
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	98 17       	cp	r25, r24
    3bf0:	89 f0       	breq	.+34     	; 0x3c14 <serial_get_byte+0x34>
    3bf2:	92 81       	ldd	r25, Z+2	; 0x02
    3bf4:	85 81       	ldd	r24, Z+5	; 0x05
    3bf6:	86 95       	lsr	r24
    3bf8:	89 23       	and	r24, r25
    3bfa:	a0 81       	ld	r26, Z
    3bfc:	b1 81       	ldd	r27, Z+1	; 0x01
    3bfe:	a8 0f       	add	r26, r24
    3c00:	b1 1d       	adc	r27, r1
    3c02:	8c 91       	ld	r24, X
    3c04:	db 01       	movw	r26, r22
    3c06:	8c 93       	st	X, r24
    3c08:	9f 5f       	subi	r25, 0xFF	; 255
    3c0a:	85 81       	ldd	r24, Z+5	; 0x05
    3c0c:	98 23       	and	r25, r24
    3c0e:	92 83       	std	Z+2, r25	; 0x02
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	08 95       	ret
    3c14:	83 e0       	ldi	r24, 0x03	; 3
    3c16:	08 95       	ret

00003c18 <__vector_25>:
    3c18:	1f 92       	push	r1
    3c1a:	0f 92       	push	r0
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	0f 92       	push	r0
    3c20:	11 24       	eor	r1, r1
    3c22:	0b b6       	in	r0, 0x3b	; 59
    3c24:	0f 92       	push	r0
    3c26:	2f 93       	push	r18
    3c28:	3f 93       	push	r19
    3c2a:	4f 93       	push	r20
    3c2c:	5f 93       	push	r21
    3c2e:	6f 93       	push	r22
    3c30:	7f 93       	push	r23
    3c32:	8f 93       	push	r24
    3c34:	9f 93       	push	r25
    3c36:	af 93       	push	r26
    3c38:	bf 93       	push	r27
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
    3c3e:	ef 93       	push	r30
    3c40:	ff 93       	push	r31
    3c42:	a0 91 d2 19 	lds	r26, 0x19D2	; 0x8019d2 <_ser_handle>
    3c46:	b0 91 d3 19 	lds	r27, 0x19D3	; 0x8019d3 <_ser_handle+0x1>
    3c4a:	10 97       	sbiw	r26, 0x00	; 0
    3c4c:	11 f1       	breq	.+68     	; 0x3c92 <__vector_25+0x7a>
    3c4e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c52:	14 96       	adiw	r26, 0x04	; 4
    3c54:	ed 91       	ld	r30, X+
    3c56:	fc 91       	ld	r31, X
    3c58:	15 97       	sbiw	r26, 0x05	; 5
    3c5a:	93 81       	ldd	r25, Z+3	; 0x03
    3c5c:	82 81       	ldd	r24, Z+2	; 0x02
    3c5e:	25 81       	ldd	r18, Z+5	; 0x05
    3c60:	98 1b       	sub	r25, r24
    3c62:	92 23       	and	r25, r18
    3c64:	84 81       	ldd	r24, Z+4	; 0x04
    3c66:	98 17       	cp	r25, r24
    3c68:	61 f0       	breq	.+24     	; 0x3c82 <__vector_25+0x6a>
    3c6a:	83 81       	ldd	r24, Z+3	; 0x03
    3c6c:	26 95       	lsr	r18
    3c6e:	28 23       	and	r18, r24
    3c70:	c0 81       	ld	r28, Z
    3c72:	d1 81       	ldd	r29, Z+1	; 0x01
    3c74:	c2 0f       	add	r28, r18
    3c76:	d1 1d       	adc	r29, r1
    3c78:	68 83       	st	Y, r22
    3c7a:	8f 5f       	subi	r24, 0xFF	; 255
    3c7c:	95 81       	ldd	r25, Z+5	; 0x05
    3c7e:	89 23       	and	r24, r25
    3c80:	83 83       	std	Z+3, r24	; 0x03
    3c82:	16 96       	adiw	r26, 0x06	; 6
    3c84:	ed 91       	ld	r30, X+
    3c86:	fc 91       	ld	r31, X
    3c88:	17 97       	sbiw	r26, 0x07	; 7
    3c8a:	30 97       	sbiw	r30, 0x00	; 0
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <__vector_25+0x7a>
    3c8e:	cd 01       	movw	r24, r26
    3c90:	19 95       	eicall
    3c92:	ff 91       	pop	r31
    3c94:	ef 91       	pop	r30
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	7f 91       	pop	r23
    3ca4:	6f 91       	pop	r22
    3ca6:	5f 91       	pop	r21
    3ca8:	4f 91       	pop	r20
    3caa:	3f 91       	pop	r19
    3cac:	2f 91       	pop	r18
    3cae:	0f 90       	pop	r0
    3cb0:	0b be       	out	0x3b, r0	; 59
    3cb2:	0f 90       	pop	r0
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	0f 90       	pop	r0
    3cb8:	1f 90       	pop	r1
    3cba:	18 95       	reti

00003cbc <__vector_26>:
    3cbc:	1f 92       	push	r1
    3cbe:	0f 92       	push	r0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	0f 92       	push	r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	0b b6       	in	r0, 0x3b	; 59
    3cc8:	0f 92       	push	r0
    3cca:	2f 93       	push	r18
    3ccc:	8f 93       	push	r24
    3cce:	9f 93       	push	r25
    3cd0:	af 93       	push	r26
    3cd2:	bf 93       	push	r27
    3cd4:	ef 93       	push	r30
    3cd6:	ff 93       	push	r31
    3cd8:	e0 91 d2 19 	lds	r30, 0x19D2	; 0x8019d2 <_ser_handle>
    3cdc:	f0 91 d3 19 	lds	r31, 0x19D3	; 0x8019d3 <_ser_handle+0x1>
    3ce0:	30 97       	sbiw	r30, 0x00	; 0
    3ce2:	b9 f0       	breq	.+46     	; 0x3d12 <__vector_26+0x56>
    3ce4:	02 80       	ldd	r0, Z+2	; 0x02
    3ce6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ce8:	e0 2d       	mov	r30, r0
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	98 17       	cp	r25, r24
    3cf0:	b1 f0       	breq	.+44     	; 0x3d1e <__vector_26+0x62>
    3cf2:	92 81       	ldd	r25, Z+2	; 0x02
    3cf4:	85 81       	ldd	r24, Z+5	; 0x05
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	26 95       	lsr	r18
    3cfa:	29 23       	and	r18, r25
    3cfc:	a0 81       	ld	r26, Z
    3cfe:	b1 81       	ldd	r27, Z+1	; 0x01
    3d00:	a2 0f       	add	r26, r18
    3d02:	b1 1d       	adc	r27, r1
    3d04:	2c 91       	ld	r18, X
    3d06:	9f 5f       	subi	r25, 0xFF	; 255
    3d08:	89 23       	and	r24, r25
    3d0a:	82 83       	std	Z+2, r24	; 0x02
    3d0c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3d10:	0b c0       	rjmp	.+22     	; 0x3d28 <__vector_26+0x6c>
    3d12:	e1 ec       	ldi	r30, 0xC1	; 193
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	8f 7d       	andi	r24, 0xDF	; 223
    3d1a:	80 83       	st	Z, r24
    3d1c:	05 c0       	rjmp	.+10     	; 0x3d28 <__vector_26+0x6c>
    3d1e:	e1 ec       	ldi	r30, 0xC1	; 193
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	8f 7d       	andi	r24, 0xDF	; 223
    3d26:	80 83       	st	Z, r24
    3d28:	ff 91       	pop	r31
    3d2a:	ef 91       	pop	r30
    3d2c:	bf 91       	pop	r27
    3d2e:	af 91       	pop	r26
    3d30:	9f 91       	pop	r25
    3d32:	8f 91       	pop	r24
    3d34:	2f 91       	pop	r18
    3d36:	0f 90       	pop	r0
    3d38:	0b be       	out	0x3b, r0	; 59
    3d3a:	0f 90       	pop	r0
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	0f 90       	pop	r0
    3d40:	1f 90       	pop	r1
    3d42:	18 95       	reti

00003d44 <__vector_36>:
    3d44:	1f 92       	push	r1
    3d46:	0f 92       	push	r0
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	0f 92       	push	r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	0b b6       	in	r0, 0x3b	; 59
    3d50:	0f 92       	push	r0
    3d52:	2f 93       	push	r18
    3d54:	3f 93       	push	r19
    3d56:	4f 93       	push	r20
    3d58:	5f 93       	push	r21
    3d5a:	6f 93       	push	r22
    3d5c:	7f 93       	push	r23
    3d5e:	8f 93       	push	r24
    3d60:	9f 93       	push	r25
    3d62:	af 93       	push	r26
    3d64:	bf 93       	push	r27
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	ef 93       	push	r30
    3d6c:	ff 93       	push	r31
    3d6e:	a0 91 d4 19 	lds	r26, 0x19D4	; 0x8019d4 <_ser_handle+0x2>
    3d72:	b0 91 d5 19 	lds	r27, 0x19D5	; 0x8019d5 <_ser_handle+0x3>
    3d76:	10 97       	sbiw	r26, 0x00	; 0
    3d78:	11 f1       	breq	.+68     	; 0x3dbe <__vector_36+0x7a>
    3d7a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3d7e:	14 96       	adiw	r26, 0x04	; 4
    3d80:	ed 91       	ld	r30, X+
    3d82:	fc 91       	ld	r31, X
    3d84:	15 97       	sbiw	r26, 0x05	; 5
    3d86:	93 81       	ldd	r25, Z+3	; 0x03
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	25 81       	ldd	r18, Z+5	; 0x05
    3d8c:	98 1b       	sub	r25, r24
    3d8e:	92 23       	and	r25, r18
    3d90:	84 81       	ldd	r24, Z+4	; 0x04
    3d92:	98 17       	cp	r25, r24
    3d94:	61 f0       	breq	.+24     	; 0x3dae <__vector_36+0x6a>
    3d96:	83 81       	ldd	r24, Z+3	; 0x03
    3d98:	26 95       	lsr	r18
    3d9a:	28 23       	and	r18, r24
    3d9c:	c0 81       	ld	r28, Z
    3d9e:	d1 81       	ldd	r29, Z+1	; 0x01
    3da0:	c2 0f       	add	r28, r18
    3da2:	d1 1d       	adc	r29, r1
    3da4:	68 83       	st	Y, r22
    3da6:	8f 5f       	subi	r24, 0xFF	; 255
    3da8:	95 81       	ldd	r25, Z+5	; 0x05
    3daa:	89 23       	and	r24, r25
    3dac:	83 83       	std	Z+3, r24	; 0x03
    3dae:	16 96       	adiw	r26, 0x06	; 6
    3db0:	ed 91       	ld	r30, X+
    3db2:	fc 91       	ld	r31, X
    3db4:	17 97       	sbiw	r26, 0x07	; 7
    3db6:	30 97       	sbiw	r30, 0x00	; 0
    3db8:	11 f0       	breq	.+4      	; 0x3dbe <__vector_36+0x7a>
    3dba:	cd 01       	movw	r24, r26
    3dbc:	19 95       	eicall
    3dbe:	ff 91       	pop	r31
    3dc0:	ef 91       	pop	r30
    3dc2:	df 91       	pop	r29
    3dc4:	cf 91       	pop	r28
    3dc6:	bf 91       	pop	r27
    3dc8:	af 91       	pop	r26
    3dca:	9f 91       	pop	r25
    3dcc:	8f 91       	pop	r24
    3dce:	7f 91       	pop	r23
    3dd0:	6f 91       	pop	r22
    3dd2:	5f 91       	pop	r21
    3dd4:	4f 91       	pop	r20
    3dd6:	3f 91       	pop	r19
    3dd8:	2f 91       	pop	r18
    3dda:	0f 90       	pop	r0
    3ddc:	0b be       	out	0x3b, r0	; 59
    3dde:	0f 90       	pop	r0
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	0f 90       	pop	r0
    3de4:	1f 90       	pop	r1
    3de6:	18 95       	reti

00003de8 <__vector_37>:
    3de8:	1f 92       	push	r1
    3dea:	0f 92       	push	r0
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	0f 92       	push	r0
    3df0:	11 24       	eor	r1, r1
    3df2:	0b b6       	in	r0, 0x3b	; 59
    3df4:	0f 92       	push	r0
    3df6:	2f 93       	push	r18
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	ef 93       	push	r30
    3e02:	ff 93       	push	r31
    3e04:	e0 91 d4 19 	lds	r30, 0x19D4	; 0x8019d4 <_ser_handle+0x2>
    3e08:	f0 91 d5 19 	lds	r31, 0x19D5	; 0x8019d5 <_ser_handle+0x3>
    3e0c:	30 97       	sbiw	r30, 0x00	; 0
    3e0e:	b9 f0       	breq	.+46     	; 0x3e3e <__vector_37+0x56>
    3e10:	02 80       	ldd	r0, Z+2	; 0x02
    3e12:	f3 81       	ldd	r31, Z+3	; 0x03
    3e14:	e0 2d       	mov	r30, r0
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	82 81       	ldd	r24, Z+2	; 0x02
    3e1a:	98 17       	cp	r25, r24
    3e1c:	b1 f0       	breq	.+44     	; 0x3e4a <__vector_37+0x62>
    3e1e:	92 81       	ldd	r25, Z+2	; 0x02
    3e20:	85 81       	ldd	r24, Z+5	; 0x05
    3e22:	28 2f       	mov	r18, r24
    3e24:	26 95       	lsr	r18
    3e26:	29 23       	and	r18, r25
    3e28:	a0 81       	ld	r26, Z
    3e2a:	b1 81       	ldd	r27, Z+1	; 0x01
    3e2c:	a2 0f       	add	r26, r18
    3e2e:	b1 1d       	adc	r27, r1
    3e30:	2c 91       	ld	r18, X
    3e32:	9f 5f       	subi	r25, 0xFF	; 255
    3e34:	89 23       	and	r24, r25
    3e36:	82 83       	std	Z+2, r24	; 0x02
    3e38:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e3c:	0b c0       	rjmp	.+22     	; 0x3e54 <__vector_37+0x6c>
    3e3e:	e9 ec       	ldi	r30, 0xC9	; 201
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	8f 7d       	andi	r24, 0xDF	; 223
    3e46:	80 83       	st	Z, r24
    3e48:	05 c0       	rjmp	.+10     	; 0x3e54 <__vector_37+0x6c>
    3e4a:	e9 ec       	ldi	r30, 0xC9	; 201
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	8f 7d       	andi	r24, 0xDF	; 223
    3e52:	80 83       	st	Z, r24
    3e54:	ff 91       	pop	r31
    3e56:	ef 91       	pop	r30
    3e58:	bf 91       	pop	r27
    3e5a:	af 91       	pop	r26
    3e5c:	9f 91       	pop	r25
    3e5e:	8f 91       	pop	r24
    3e60:	2f 91       	pop	r18
    3e62:	0f 90       	pop	r0
    3e64:	0b be       	out	0x3b, r0	; 59
    3e66:	0f 90       	pop	r0
    3e68:	0f be       	out	0x3f, r0	; 63
    3e6a:	0f 90       	pop	r0
    3e6c:	1f 90       	pop	r1
    3e6e:	18 95       	reti

00003e70 <__vector_51>:
    3e70:	1f 92       	push	r1
    3e72:	0f 92       	push	r0
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	0f 92       	push	r0
    3e78:	11 24       	eor	r1, r1
    3e7a:	0b b6       	in	r0, 0x3b	; 59
    3e7c:	0f 92       	push	r0
    3e7e:	2f 93       	push	r18
    3e80:	3f 93       	push	r19
    3e82:	4f 93       	push	r20
    3e84:	5f 93       	push	r21
    3e86:	6f 93       	push	r22
    3e88:	7f 93       	push	r23
    3e8a:	8f 93       	push	r24
    3e8c:	9f 93       	push	r25
    3e8e:	af 93       	push	r26
    3e90:	bf 93       	push	r27
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	ef 93       	push	r30
    3e98:	ff 93       	push	r31
    3e9a:	a0 91 d6 19 	lds	r26, 0x19D6	; 0x8019d6 <_ser_handle+0x4>
    3e9e:	b0 91 d7 19 	lds	r27, 0x19D7	; 0x8019d7 <_ser_handle+0x5>
    3ea2:	10 97       	sbiw	r26, 0x00	; 0
    3ea4:	11 f1       	breq	.+68     	; 0x3eea <__vector_51+0x7a>
    3ea6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3eaa:	14 96       	adiw	r26, 0x04	; 4
    3eac:	ed 91       	ld	r30, X+
    3eae:	fc 91       	ld	r31, X
    3eb0:	15 97       	sbiw	r26, 0x05	; 5
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	25 81       	ldd	r18, Z+5	; 0x05
    3eb8:	98 1b       	sub	r25, r24
    3eba:	92 23       	and	r25, r18
    3ebc:	84 81       	ldd	r24, Z+4	; 0x04
    3ebe:	98 17       	cp	r25, r24
    3ec0:	61 f0       	breq	.+24     	; 0x3eda <__vector_51+0x6a>
    3ec2:	83 81       	ldd	r24, Z+3	; 0x03
    3ec4:	26 95       	lsr	r18
    3ec6:	28 23       	and	r18, r24
    3ec8:	c0 81       	ld	r28, Z
    3eca:	d1 81       	ldd	r29, Z+1	; 0x01
    3ecc:	c2 0f       	add	r28, r18
    3ece:	d1 1d       	adc	r29, r1
    3ed0:	68 83       	st	Y, r22
    3ed2:	8f 5f       	subi	r24, 0xFF	; 255
    3ed4:	95 81       	ldd	r25, Z+5	; 0x05
    3ed6:	89 23       	and	r24, r25
    3ed8:	83 83       	std	Z+3, r24	; 0x03
    3eda:	16 96       	adiw	r26, 0x06	; 6
    3edc:	ed 91       	ld	r30, X+
    3ede:	fc 91       	ld	r31, X
    3ee0:	17 97       	sbiw	r26, 0x07	; 7
    3ee2:	30 97       	sbiw	r30, 0x00	; 0
    3ee4:	11 f0       	breq	.+4      	; 0x3eea <__vector_51+0x7a>
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	19 95       	eicall
    3eea:	ff 91       	pop	r31
    3eec:	ef 91       	pop	r30
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	bf 91       	pop	r27
    3ef4:	af 91       	pop	r26
    3ef6:	9f 91       	pop	r25
    3ef8:	8f 91       	pop	r24
    3efa:	7f 91       	pop	r23
    3efc:	6f 91       	pop	r22
    3efe:	5f 91       	pop	r21
    3f00:	4f 91       	pop	r20
    3f02:	3f 91       	pop	r19
    3f04:	2f 91       	pop	r18
    3f06:	0f 90       	pop	r0
    3f08:	0b be       	out	0x3b, r0	; 59
    3f0a:	0f 90       	pop	r0
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	0f 90       	pop	r0
    3f10:	1f 90       	pop	r1
    3f12:	18 95       	reti

00003f14 <__vector_52>:
    3f14:	1f 92       	push	r1
    3f16:	0f 92       	push	r0
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	0f 92       	push	r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	0b b6       	in	r0, 0x3b	; 59
    3f20:	0f 92       	push	r0
    3f22:	2f 93       	push	r18
    3f24:	8f 93       	push	r24
    3f26:	9f 93       	push	r25
    3f28:	af 93       	push	r26
    3f2a:	bf 93       	push	r27
    3f2c:	ef 93       	push	r30
    3f2e:	ff 93       	push	r31
    3f30:	e0 91 d6 19 	lds	r30, 0x19D6	; 0x8019d6 <_ser_handle+0x4>
    3f34:	f0 91 d7 19 	lds	r31, 0x19D7	; 0x8019d7 <_ser_handle+0x5>
    3f38:	30 97       	sbiw	r30, 0x00	; 0
    3f3a:	b9 f0       	breq	.+46     	; 0x3f6a <__vector_52+0x56>
    3f3c:	02 80       	ldd	r0, Z+2	; 0x02
    3f3e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f40:	e0 2d       	mov	r30, r0
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	98 17       	cp	r25, r24
    3f48:	b1 f0       	breq	.+44     	; 0x3f76 <__vector_52+0x62>
    3f4a:	92 81       	ldd	r25, Z+2	; 0x02
    3f4c:	85 81       	ldd	r24, Z+5	; 0x05
    3f4e:	28 2f       	mov	r18, r24
    3f50:	26 95       	lsr	r18
    3f52:	29 23       	and	r18, r25
    3f54:	a0 81       	ld	r26, Z
    3f56:	b1 81       	ldd	r27, Z+1	; 0x01
    3f58:	a2 0f       	add	r26, r18
    3f5a:	b1 1d       	adc	r27, r1
    3f5c:	2c 91       	ld	r18, X
    3f5e:	9f 5f       	subi	r25, 0xFF	; 255
    3f60:	89 23       	and	r24, r25
    3f62:	82 83       	std	Z+2, r24	; 0x02
    3f64:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3f68:	0b c0       	rjmp	.+22     	; 0x3f80 <__vector_52+0x6c>
    3f6a:	e1 ed       	ldi	r30, 0xD1	; 209
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	80 81       	ld	r24, Z
    3f70:	8f 7d       	andi	r24, 0xDF	; 223
    3f72:	80 83       	st	Z, r24
    3f74:	05 c0       	rjmp	.+10     	; 0x3f80 <__vector_52+0x6c>
    3f76:	e1 ed       	ldi	r30, 0xD1	; 209
    3f78:	f0 e0       	ldi	r31, 0x00	; 0
    3f7a:	80 81       	ld	r24, Z
    3f7c:	8f 7d       	andi	r24, 0xDF	; 223
    3f7e:	80 83       	st	Z, r24
    3f80:	ff 91       	pop	r31
    3f82:	ef 91       	pop	r30
    3f84:	bf 91       	pop	r27
    3f86:	af 91       	pop	r26
    3f88:	9f 91       	pop	r25
    3f8a:	8f 91       	pop	r24
    3f8c:	2f 91       	pop	r18
    3f8e:	0f 90       	pop	r0
    3f90:	0b be       	out	0x3b, r0	; 59
    3f92:	0f 90       	pop	r0
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	0f 90       	pop	r0
    3f98:	1f 90       	pop	r1
    3f9a:	18 95       	reti

00003f9c <__vector_54>:
    3f9c:	1f 92       	push	r1
    3f9e:	0f 92       	push	r0
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	0f 92       	push	r0
    3fa4:	11 24       	eor	r1, r1
    3fa6:	0b b6       	in	r0, 0x3b	; 59
    3fa8:	0f 92       	push	r0
    3faa:	2f 93       	push	r18
    3fac:	3f 93       	push	r19
    3fae:	4f 93       	push	r20
    3fb0:	5f 93       	push	r21
    3fb2:	6f 93       	push	r22
    3fb4:	7f 93       	push	r23
    3fb6:	8f 93       	push	r24
    3fb8:	9f 93       	push	r25
    3fba:	af 93       	push	r26
    3fbc:	bf 93       	push	r27
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	ef 93       	push	r30
    3fc4:	ff 93       	push	r31
    3fc6:	a0 91 d8 19 	lds	r26, 0x19D8	; 0x8019d8 <_ser_handle+0x6>
    3fca:	b0 91 d9 19 	lds	r27, 0x19D9	; 0x8019d9 <_ser_handle+0x7>
    3fce:	10 97       	sbiw	r26, 0x00	; 0
    3fd0:	11 f1       	breq	.+68     	; 0x4016 <__vector_54+0x7a>
    3fd2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3fd6:	14 96       	adiw	r26, 0x04	; 4
    3fd8:	ed 91       	ld	r30, X+
    3fda:	fc 91       	ld	r31, X
    3fdc:	15 97       	sbiw	r26, 0x05	; 5
    3fde:	93 81       	ldd	r25, Z+3	; 0x03
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	25 81       	ldd	r18, Z+5	; 0x05
    3fe4:	98 1b       	sub	r25, r24
    3fe6:	92 23       	and	r25, r18
    3fe8:	84 81       	ldd	r24, Z+4	; 0x04
    3fea:	98 17       	cp	r25, r24
    3fec:	61 f0       	breq	.+24     	; 0x4006 <__vector_54+0x6a>
    3fee:	83 81       	ldd	r24, Z+3	; 0x03
    3ff0:	26 95       	lsr	r18
    3ff2:	28 23       	and	r18, r24
    3ff4:	c0 81       	ld	r28, Z
    3ff6:	d1 81       	ldd	r29, Z+1	; 0x01
    3ff8:	c2 0f       	add	r28, r18
    3ffa:	d1 1d       	adc	r29, r1
    3ffc:	68 83       	st	Y, r22
    3ffe:	8f 5f       	subi	r24, 0xFF	; 255
    4000:	95 81       	ldd	r25, Z+5	; 0x05
    4002:	89 23       	and	r24, r25
    4004:	83 83       	std	Z+3, r24	; 0x03
    4006:	16 96       	adiw	r26, 0x06	; 6
    4008:	ed 91       	ld	r30, X+
    400a:	fc 91       	ld	r31, X
    400c:	17 97       	sbiw	r26, 0x07	; 7
    400e:	30 97       	sbiw	r30, 0x00	; 0
    4010:	11 f0       	breq	.+4      	; 0x4016 <__vector_54+0x7a>
    4012:	cd 01       	movw	r24, r26
    4014:	19 95       	eicall
    4016:	ff 91       	pop	r31
    4018:	ef 91       	pop	r30
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	bf 91       	pop	r27
    4020:	af 91       	pop	r26
    4022:	9f 91       	pop	r25
    4024:	8f 91       	pop	r24
    4026:	7f 91       	pop	r23
    4028:	6f 91       	pop	r22
    402a:	5f 91       	pop	r21
    402c:	4f 91       	pop	r20
    402e:	3f 91       	pop	r19
    4030:	2f 91       	pop	r18
    4032:	0f 90       	pop	r0
    4034:	0b be       	out	0x3b, r0	; 59
    4036:	0f 90       	pop	r0
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	0f 90       	pop	r0
    403c:	1f 90       	pop	r1
    403e:	18 95       	reti

00004040 <__vector_55>:
    4040:	1f 92       	push	r1
    4042:	0f 92       	push	r0
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	0f 92       	push	r0
    4048:	11 24       	eor	r1, r1
    404a:	0b b6       	in	r0, 0x3b	; 59
    404c:	0f 92       	push	r0
    404e:	2f 93       	push	r18
    4050:	8f 93       	push	r24
    4052:	9f 93       	push	r25
    4054:	af 93       	push	r26
    4056:	bf 93       	push	r27
    4058:	ef 93       	push	r30
    405a:	ff 93       	push	r31
    405c:	e0 91 d8 19 	lds	r30, 0x19D8	; 0x8019d8 <_ser_handle+0x6>
    4060:	f0 91 d9 19 	lds	r31, 0x19D9	; 0x8019d9 <_ser_handle+0x7>
    4064:	30 97       	sbiw	r30, 0x00	; 0
    4066:	b9 f0       	breq	.+46     	; 0x4096 <__vector_55+0x56>
    4068:	02 80       	ldd	r0, Z+2	; 0x02
    406a:	f3 81       	ldd	r31, Z+3	; 0x03
    406c:	e0 2d       	mov	r30, r0
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	98 17       	cp	r25, r24
    4074:	b1 f0       	breq	.+44     	; 0x40a2 <__vector_55+0x62>
    4076:	92 81       	ldd	r25, Z+2	; 0x02
    4078:	85 81       	ldd	r24, Z+5	; 0x05
    407a:	28 2f       	mov	r18, r24
    407c:	26 95       	lsr	r18
    407e:	29 23       	and	r18, r25
    4080:	a0 81       	ld	r26, Z
    4082:	b1 81       	ldd	r27, Z+1	; 0x01
    4084:	a2 0f       	add	r26, r18
    4086:	b1 1d       	adc	r27, r1
    4088:	2c 91       	ld	r18, X
    408a:	9f 5f       	subi	r25, 0xFF	; 255
    408c:	89 23       	and	r24, r25
    408e:	82 83       	std	Z+2, r24	; 0x02
    4090:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4094:	0b c0       	rjmp	.+22     	; 0x40ac <__vector_55+0x6c>
    4096:	e1 e3       	ldi	r30, 0x31	; 49
    4098:	f1 e0       	ldi	r31, 0x01	; 1
    409a:	80 81       	ld	r24, Z
    409c:	8f 7d       	andi	r24, 0xDF	; 223
    409e:	80 83       	st	Z, r24
    40a0:	05 c0       	rjmp	.+10     	; 0x40ac <__vector_55+0x6c>
    40a2:	e1 e3       	ldi	r30, 0x31	; 49
    40a4:	f1 e0       	ldi	r31, 0x01	; 1
    40a6:	80 81       	ld	r24, Z
    40a8:	8f 7d       	andi	r24, 0xDF	; 223
    40aa:	80 83       	st	Z, r24
    40ac:	ff 91       	pop	r31
    40ae:	ef 91       	pop	r30
    40b0:	bf 91       	pop	r27
    40b2:	af 91       	pop	r26
    40b4:	9f 91       	pop	r25
    40b6:	8f 91       	pop	r24
    40b8:	2f 91       	pop	r18
    40ba:	0f 90       	pop	r0
    40bc:	0b be       	out	0x3b, r0	; 59
    40be:	0f 90       	pop	r0
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	0f 90       	pop	r0
    40c4:	1f 90       	pop	r1
    40c6:	18 95       	reti

000040c8 <usart_getchar>:
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	1f 92       	push	r1
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	be 01       	movw	r22, r28
    40d4:	6f 5f       	subi	r22, 0xFF	; 255
    40d6:	7f 4f       	sbci	r23, 0xFF	; 255
    40d8:	80 91 da 19 	lds	r24, 0x19DA	; 0x8019da <_com_serial_instance>
    40dc:	90 91 db 19 	lds	r25, 0x19DB	; 0x8019db <_com_serial_instance+0x1>
    40e0:	7f dd       	rcall	.-1282   	; 0x3be0 <serial_get_byte>
    40e2:	81 11       	cpse	r24, r1
    40e4:	f6 cf       	rjmp	.-20     	; 0x40d2 <usart_getchar+0xa>
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	0f 90       	pop	r0
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	08 95       	ret

000040f2 <usart_putchar>:
    40f2:	68 2f       	mov	r22, r24
    40f4:	80 91 da 19 	lds	r24, 0x19DA	; 0x8019da <_com_serial_instance>
    40f8:	90 91 db 19 	lds	r25, 0x19DB	; 0x8019db <_com_serial_instance+0x1>
    40fc:	fc dc       	rcall	.-1544   	; 0x3af6 <serial_send_byte>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	08 95       	ret

00004104 <stdioCreate>:
    4104:	8f 92       	push	r8
    4106:	9f 92       	push	r9
    4108:	af 92       	push	r10
    410a:	cf 92       	push	r12
    410c:	ef 92       	push	r14
    410e:	0f 93       	push	r16
    4110:	81 2c       	mov	r8, r1
    4112:	91 2c       	mov	r9, r1
    4114:	68 94       	set
    4116:	aa 24       	eor	r10, r10
    4118:	a7 f8       	bld	r10, 7
    411a:	68 94       	set
    411c:	cc 24       	eor	r12, r12
    411e:	c7 f8       	bld	r12, 7
    4120:	e1 2c       	mov	r14, r1
    4122:	00 e0       	ldi	r16, 0x00	; 0
    4124:	23 e0       	ldi	r18, 0x03	; 3
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	51 ee       	ldi	r21, 0xE1	; 225
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	4d dc       	rcall	.-1894   	; 0x39ca <serial_new_instance>
    4130:	90 93 db 19 	sts	0x19DB, r25	; 0x8019db <_com_serial_instance+0x1>
    4134:	80 93 da 19 	sts	0x19DA, r24	; 0x8019da <_com_serial_instance>
    4138:	e3 e1       	ldi	r30, 0x13	; 19
    413a:	fa e1       	ldi	r31, 0x1A	; 26
    413c:	82 e1       	ldi	r24, 0x12	; 18
    413e:	92 e0       	ldi	r25, 0x02	; 2
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	80 83       	st	Z, r24
    4144:	93 83       	std	Z+3, r25	; 0x03
    4146:	82 83       	std	Z+2, r24	; 0x02
    4148:	0f 91       	pop	r16
    414a:	ef 90       	pop	r14
    414c:	cf 90       	pop	r12
    414e:	af 90       	pop	r10
    4150:	9f 90       	pop	r9
    4152:	8f 90       	pop	r8
    4154:	08 95       	ret

00004156 <_initTwiInterface>:
    4156:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <_twiIsInitiated>
    415a:	81 11       	cpse	r24, r1
    415c:	0c c0       	rjmp	.+24     	; 0x4176 <_initTwiInterface+0x20>
    415e:	8c e0       	ldi	r24, 0x0C	; 12
    4160:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4164:	8f ef       	ldi	r24, 0xFF	; 255
    4166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    416a:	84 e0       	ldi	r24, 0x04	; 4
    416c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <_twiIsInitiated>
    4176:	08 95       	ret

00004178 <twiCreate>:
    4178:	af 92       	push	r10
    417a:	bf 92       	push	r11
    417c:	cf 92       	push	r12
    417e:	df 92       	push	r13
    4180:	ef 92       	push	r14
    4182:	ff 92       	push	r15
    4184:	0f 93       	push	r16
    4186:	1f 93       	push	r17
    4188:	cf 93       	push	r28
    418a:	df 93       	push	r29
    418c:	a8 2e       	mov	r10, r24
    418e:	b6 2e       	mov	r11, r22
    4190:	69 01       	movw	r12, r18
    4192:	7a 01       	movw	r14, r20
    4194:	84 e0       	ldi	r24, 0x04	; 4
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	cb d3       	rcall	.+1942   	; 0x4930 <malloc>
    419a:	ec 01       	movw	r28, r24
    419c:	89 2b       	or	r24, r25
    419e:	61 f1       	breq	.+88     	; 0x41f8 <twiCreate+0x80>
    41a0:	a8 82       	st	Y, r10
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	b8 12       	cpse	r11, r24
    41a6:	12 c0       	rjmp	.+36     	; 0x41cc <twiCreate+0x54>
    41a8:	c7 01       	movw	r24, r14
    41aa:	b6 01       	movw	r22, r12
    41ac:	20 ea       	ldi	r18, 0xA0	; 160
    41ae:	36 e8       	ldi	r19, 0x86	; 134
    41b0:	41 e0       	ldi	r20, 0x01	; 1
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	79 d3       	rcall	.+1778   	; 0x48a8 <__udivmodsi4>
    41b6:	da 01       	movw	r26, r20
    41b8:	c9 01       	movw	r24, r18
    41ba:	40 97       	sbiw	r24, 0x10	; 16
    41bc:	a1 09       	sbc	r26, r1
    41be:	b1 09       	sbc	r27, r1
    41c0:	b6 95       	lsr	r27
    41c2:	a7 95       	ror	r26
    41c4:	97 95       	ror	r25
    41c6:	87 95       	ror	r24
    41c8:	89 83       	std	Y+1, r24	; 0x01
    41ca:	11 c0       	rjmp	.+34     	; 0x41ee <twiCreate+0x76>
    41cc:	c7 01       	movw	r24, r14
    41ce:	b6 01       	movw	r22, r12
    41d0:	20 e8       	ldi	r18, 0x80	; 128
    41d2:	3a e1       	ldi	r19, 0x1A	; 26
    41d4:	46 e0       	ldi	r20, 0x06	; 6
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	67 d3       	rcall	.+1742   	; 0x48a8 <__udivmodsi4>
    41da:	da 01       	movw	r26, r20
    41dc:	c9 01       	movw	r24, r18
    41de:	40 97       	sbiw	r24, 0x10	; 16
    41e0:	a1 09       	sbc	r26, r1
    41e2:	b1 09       	sbc	r27, r1
    41e4:	b6 95       	lsr	r27
    41e6:	a7 95       	ror	r26
    41e8:	97 95       	ror	r25
    41ea:	87 95       	ror	r24
    41ec:	89 83       	std	Y+1, r24	; 0x01
    41ee:	1b 83       	std	Y+3, r17	; 0x03
    41f0:	0a 83       	std	Y+2, r16	; 0x02
    41f2:	8c 2f       	mov	r24, r28
    41f4:	9d 2f       	mov	r25, r29
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <twiCreate+0x84>
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	1f 91       	pop	r17
    4202:	0f 91       	pop	r16
    4204:	ff 90       	pop	r15
    4206:	ef 90       	pop	r14
    4208:	df 90       	pop	r13
    420a:	cf 90       	pop	r12
    420c:	bf 90       	pop	r11
    420e:	af 90       	pop	r10
    4210:	08 95       	ret

00004212 <twiIsBusy>:
    4212:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4216:	81 70       	andi	r24, 0x01	; 1
    4218:	08 95       	ret

0000421a <twiTransmit>:
    421a:	ff 92       	push	r15
    421c:	0f 93       	push	r16
    421e:	1f 93       	push	r17
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	d1 f1       	breq	.+116    	; 0x429c <twiTransmit+0x82>
    4228:	4a 30       	cpi	r20, 0x0A	; 10
    422a:	d0 f5       	brcc	.+116    	; 0x42a0 <twiTransmit+0x86>
    422c:	f4 2e       	mov	r15, r20
    422e:	8b 01       	movw	r16, r22
    4230:	ec 01       	movw	r28, r24
    4232:	ef df       	rcall	.-34     	; 0x4212 <twiIsBusy>
    4234:	81 11       	cpse	r24, r1
    4236:	36 c0       	rjmp	.+108    	; 0x42a4 <twiTransmit+0x8a>
    4238:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <_twiCurrentHandler>
    423c:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <_twiCurrentHandler+0x1>
    4240:	c8 17       	cp	r28, r24
    4242:	d9 07       	cpc	r29, r25
    4244:	41 f0       	breq	.+16     	; 0x4256 <twiTransmit+0x3c>
    4246:	87 df       	rcall	.-242    	; 0x4156 <_initTwiInterface>
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    424e:	d0 93 de 19 	sts	0x19DE, r29	; 0x8019de <_twiCurrentHandler+0x1>
    4252:	c0 93 dd 19 	sts	0x19DD, r28	; 0x8019dd <_twiCurrentHandler>
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	8f 0d       	add	r24, r15
    425a:	80 93 df 19 	sts	0x19DF, r24	; 0x8019df <_twiMessageLen>
    425e:	88 81       	ld	r24, Y
    4260:	88 0f       	add	r24, r24
    4262:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <_twiMessageBuffer>
    4266:	ff 20       	and	r15, r15
    4268:	89 f0       	breq	.+34     	; 0x428c <twiTransmit+0x72>
    426a:	f8 01       	movw	r30, r16
    426c:	a1 ee       	ldi	r26, 0xE1	; 225
    426e:	b9 e1       	ldi	r27, 0x19	; 25
    4270:	4f ef       	ldi	r20, 0xFF	; 255
    4272:	4f 0d       	add	r20, r15
    4274:	64 2f       	mov	r22, r20
    4276:	70 e0       	ldi	r23, 0x00	; 0
    4278:	cb 01       	movw	r24, r22
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	b8 01       	movw	r22, r16
    427e:	68 0f       	add	r22, r24
    4280:	79 1f       	adc	r23, r25
    4282:	81 91       	ld	r24, Z+
    4284:	8d 93       	st	X+, r24
    4286:	e6 17       	cp	r30, r22
    4288:	f7 07       	cpc	r31, r23
    428a:	d9 f7       	brne	.-10     	; 0x4282 <twiTransmit+0x68>
    428c:	88 ef       	ldi	r24, 0xF8	; 248
    428e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4292:	85 ea       	ldi	r24, 0xA5	; 165
    4294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4298:	84 e0       	ldi	r24, 0x04	; 4
    429a:	05 c0       	rjmp	.+10     	; 0x42a6 <twiTransmit+0x8c>
    429c:	86 e0       	ldi	r24, 0x06	; 6
    429e:	03 c0       	rjmp	.+6      	; 0x42a6 <twiTransmit+0x8c>
    42a0:	87 e0       	ldi	r24, 0x07	; 7
    42a2:	01 c0       	rjmp	.+2      	; 0x42a6 <twiTransmit+0x8c>
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	1f 91       	pop	r17
    42ac:	0f 91       	pop	r16
    42ae:	ff 90       	pop	r15
    42b0:	08 95       	ret

000042b2 <twiReceive>:
    42b2:	1f 93       	push	r17
    42b4:	cf 93       	push	r28
    42b6:	df 93       	push	r29
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	29 f1       	breq	.+74     	; 0x4306 <twiReceive+0x54>
    42bc:	6b 30       	cpi	r22, 0x0B	; 11
    42be:	28 f5       	brcc	.+74     	; 0x430a <twiReceive+0x58>
    42c0:	16 2f       	mov	r17, r22
    42c2:	ec 01       	movw	r28, r24
    42c4:	a6 df       	rcall	.-180    	; 0x4212 <twiIsBusy>
    42c6:	81 11       	cpse	r24, r1
    42c8:	22 c0       	rjmp	.+68     	; 0x430e <twiReceive+0x5c>
    42ca:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <_twiCurrentHandler>
    42ce:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <_twiCurrentHandler+0x1>
    42d2:	c8 17       	cp	r28, r24
    42d4:	d9 07       	cpc	r29, r25
    42d6:	41 f0       	breq	.+16     	; 0x42e8 <twiReceive+0x36>
    42d8:	3e df       	rcall	.-388    	; 0x4156 <_initTwiInterface>
    42da:	89 81       	ldd	r24, Y+1	; 0x01
    42dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    42e0:	d0 93 de 19 	sts	0x19DE, r29	; 0x8019de <_twiCurrentHandler+0x1>
    42e4:	c0 93 dd 19 	sts	0x19DD, r28	; 0x8019dd <_twiCurrentHandler>
    42e8:	10 93 df 19 	sts	0x19DF, r17	; 0x8019df <_twiMessageLen>
    42ec:	88 81       	ld	r24, Y
    42ee:	88 0f       	add	r24, r24
    42f0:	81 60       	ori	r24, 0x01	; 1
    42f2:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <_twiMessageBuffer>
    42f6:	88 ef       	ldi	r24, 0xF8	; 248
    42f8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    42fc:	85 ea       	ldi	r24, 0xA5	; 165
    42fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4302:	85 e0       	ldi	r24, 0x05	; 5
    4304:	05 c0       	rjmp	.+10     	; 0x4310 <twiReceive+0x5e>
    4306:	86 e0       	ldi	r24, 0x06	; 6
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <twiReceive+0x5e>
    430a:	87 e0       	ldi	r24, 0x07	; 7
    430c:	01 c0       	rjmp	.+2      	; 0x4310 <twiReceive+0x5e>
    430e:	82 e0       	ldi	r24, 0x02	; 2
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	1f 91       	pop	r17
    4316:	08 95       	ret

00004318 <__vector_39>:
    4318:	1f 92       	push	r1
    431a:	0f 92       	push	r0
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	0f 92       	push	r0
    4320:	11 24       	eor	r1, r1
    4322:	0b b6       	in	r0, 0x3b	; 59
    4324:	0f 92       	push	r0
    4326:	2f 93       	push	r18
    4328:	3f 93       	push	r19
    432a:	4f 93       	push	r20
    432c:	5f 93       	push	r21
    432e:	6f 93       	push	r22
    4330:	7f 93       	push	r23
    4332:	8f 93       	push	r24
    4334:	9f 93       	push	r25
    4336:	af 93       	push	r26
    4338:	bf 93       	push	r27
    433a:	ef 93       	push	r30
    433c:	ff 93       	push	r31
    433e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4342:	8e 2f       	mov	r24, r30
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	fc 01       	movw	r30, r24
    4348:	38 97       	sbiw	r30, 0x08	; 8
    434a:	e1 35       	cpi	r30, 0x51	; 81
    434c:	f1 05       	cpc	r31, r1
    434e:	08 f0       	brcs	.+2      	; 0x4352 <__vector_39+0x3a>
    4350:	75 c0       	rjmp	.+234    	; 0x443c <__vector_39+0x124>
    4352:	88 27       	eor	r24, r24
    4354:	e4 58       	subi	r30, 0x84	; 132
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	8f 4f       	sbci	r24, 0xFF	; 255
    435a:	c8 c2       	rjmp	.+1424   	; 0x48ec <__tablejump2__>
    435c:	10 92 dc 19 	sts	0x19DC, r1	; 0x8019dc <_index.1885>
    4360:	e0 91 dc 19 	lds	r30, 0x19DC	; 0x8019dc <_index.1885>
    4364:	80 91 df 19 	lds	r24, 0x19DF	; 0x8019df <_twiMessageLen>
    4368:	e8 17       	cp	r30, r24
    436a:	70 f4       	brcc	.+28     	; 0x4388 <__vector_39+0x70>
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	8e 0f       	add	r24, r30
    4370:	80 93 dc 19 	sts	0x19DC, r24	; 0x8019dc <_index.1885>
    4374:	f0 e0       	ldi	r31, 0x00	; 0
    4376:	e0 52       	subi	r30, 0x20	; 32
    4378:	f6 4e       	sbci	r31, 0xE6	; 230
    437a:	80 81       	ld	r24, Z
    437c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4380:	85 e8       	ldi	r24, 0x85	; 133
    4382:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4386:	72 c0       	rjmp	.+228    	; 0x446c <__vector_39+0x154>
    4388:	84 e9       	ldi	r24, 0x94	; 148
    438a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    438e:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <_twiCurrentHandler>
    4392:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <_twiCurrentHandler+0x1>
    4396:	dc 01       	movw	r26, r24
    4398:	12 96       	adiw	r26, 0x02	; 2
    439a:	ed 91       	ld	r30, X+
    439c:	fc 91       	ld	r31, X
    439e:	13 97       	sbiw	r26, 0x03	; 3
    43a0:	30 97       	sbiw	r30, 0x00	; 0
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <__vector_39+0x8e>
    43a4:	63 c0       	rjmp	.+198    	; 0x446c <__vector_39+0x154>
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	40 e0       	ldi	r20, 0x00	; 0
    43aa:	50 e0       	ldi	r21, 0x00	; 0
    43ac:	64 e0       	ldi	r22, 0x04	; 4
    43ae:	19 95       	eicall
    43b0:	5d c0       	rjmp	.+186    	; 0x446c <__vector_39+0x154>
    43b2:	e0 91 dc 19 	lds	r30, 0x19DC	; 0x8019dc <_index.1885>
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	8e 0f       	add	r24, r30
    43ba:	80 93 dc 19 	sts	0x19DC, r24	; 0x8019dc <_index.1885>
    43be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	e0 52       	subi	r30, 0x20	; 32
    43c6:	f6 4e       	sbci	r31, 0xE6	; 230
    43c8:	80 83       	st	Z, r24
    43ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    43ce:	80 34       	cpi	r24, 0x40	; 64
    43d0:	11 f4       	brne	.+4      	; 0x43d6 <__vector_39+0xbe>
    43d2:	10 92 dc 19 	sts	0x19DC, r1	; 0x8019dc <_index.1885>
    43d6:	20 91 dc 19 	lds	r18, 0x19DC	; 0x8019dc <_index.1885>
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	80 91 df 19 	lds	r24, 0x19DF	; 0x8019df <_twiMessageLen>
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	28 17       	cp	r18, r24
    43e6:	39 07       	cpc	r19, r25
    43e8:	24 f4       	brge	.+8      	; 0x43f2 <__vector_39+0xda>
    43ea:	85 ec       	ldi	r24, 0xC5	; 197
    43ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43f0:	3d c0       	rjmp	.+122    	; 0x446c <__vector_39+0x154>
    43f2:	85 e8       	ldi	r24, 0x85	; 133
    43f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43f8:	39 c0       	rjmp	.+114    	; 0x446c <__vector_39+0x154>
    43fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43fe:	e0 91 dc 19 	lds	r30, 0x19DC	; 0x8019dc <_index.1885>
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	e0 52       	subi	r30, 0x20	; 32
    4406:	f6 4e       	sbci	r31, 0xE6	; 230
    4408:	80 83       	st	Z, r24
    440a:	84 e9       	ldi	r24, 0x94	; 148
    440c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4410:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <_twiCurrentHandler>
    4414:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <_twiCurrentHandler+0x1>
    4418:	dc 01       	movw	r26, r24
    441a:	12 96       	adiw	r26, 0x02	; 2
    441c:	ed 91       	ld	r30, X+
    441e:	fc 91       	ld	r31, X
    4420:	13 97       	sbiw	r26, 0x03	; 3
    4422:	30 97       	sbiw	r30, 0x00	; 0
    4424:	19 f1       	breq	.+70     	; 0x446c <__vector_39+0x154>
    4426:	20 91 df 19 	lds	r18, 0x19DF	; 0x8019df <_twiMessageLen>
    442a:	40 ee       	ldi	r20, 0xE0	; 224
    442c:	59 e1       	ldi	r21, 0x19	; 25
    442e:	65 e0       	ldi	r22, 0x05	; 5
    4430:	19 95       	eicall
    4432:	1c c0       	rjmp	.+56     	; 0x446c <__vector_39+0x154>
    4434:	85 ea       	ldi	r24, 0xA5	; 165
    4436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    443a:	18 c0       	rjmp	.+48     	; 0x446c <__vector_39+0x154>
    443c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4440:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4444:	84 e0       	ldi	r24, 0x04	; 4
    4446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    444a:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <_twiCurrentHandler>
    444e:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <_twiCurrentHandler+0x1>
    4452:	dc 01       	movw	r26, r24
    4454:	12 96       	adiw	r26, 0x02	; 2
    4456:	ed 91       	ld	r30, X+
    4458:	fc 91       	ld	r31, X
    445a:	13 97       	sbiw	r26, 0x03	; 3
    445c:	30 97       	sbiw	r30, 0x00	; 0
    445e:	31 f0       	breq	.+12     	; 0x446c <__vector_39+0x154>
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	40 e0       	ldi	r20, 0x00	; 0
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    446a:	19 95       	eicall
    446c:	ff 91       	pop	r31
    446e:	ef 91       	pop	r30
    4470:	bf 91       	pop	r27
    4472:	af 91       	pop	r26
    4474:	9f 91       	pop	r25
    4476:	8f 91       	pop	r24
    4478:	7f 91       	pop	r23
    447a:	6f 91       	pop	r22
    447c:	5f 91       	pop	r21
    447e:	4f 91       	pop	r20
    4480:	3f 91       	pop	r19
    4482:	2f 91       	pop	r18
    4484:	0f 90       	pop	r0
    4486:	0b be       	out	0x3b, r0	; 59
    4488:	0f 90       	pop	r0
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	0f 90       	pop	r0
    448e:	1f 90       	pop	r1
    4490:	18 95       	reti

00004492 <fifo_init>:
    4492:	fc 01       	movw	r30, r24
    4494:	41 11       	cpse	r20, r1
    4496:	01 c0       	rjmp	.+2      	; 0x449a <fifo_init+0x8>
    4498:	6c d3       	rcall	.+1752   	; 0x4b72 <abort>
    449a:	84 2f       	mov	r24, r20
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 01       	movw	r18, r24
    44a0:	21 50       	subi	r18, 0x01	; 1
    44a2:	31 09       	sbc	r19, r1
    44a4:	82 23       	and	r24, r18
    44a6:	93 23       	and	r25, r19
    44a8:	89 2b       	or	r24, r25
    44aa:	09 f0       	breq	.+2      	; 0x44ae <fifo_init+0x1c>
    44ac:	62 d3       	rcall	.+1732   	; 0x4b72 <abort>
    44ae:	41 38       	cpi	r20, 0x81	; 129
    44b0:	08 f0       	brcs	.+2      	; 0x44b4 <fifo_init+0x22>
    44b2:	5f d3       	rcall	.+1726   	; 0x4b72 <abort>
    44b4:	12 82       	std	Z+2, r1	; 0x02
    44b6:	13 82       	std	Z+3, r1	; 0x03
    44b8:	44 83       	std	Z+4, r20	; 0x04
    44ba:	44 0f       	add	r20, r20
    44bc:	41 50       	subi	r20, 0x01	; 1
    44be:	45 83       	std	Z+5, r20	; 0x05
    44c0:	71 83       	std	Z+1, r23	; 0x01
    44c2:	60 83       	st	Z, r22
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	08 95       	ret

000044ca <__subsf3>:
    44ca:	50 58       	subi	r21, 0x80	; 128

000044cc <__addsf3>:
    44cc:	bb 27       	eor	r27, r27
    44ce:	aa 27       	eor	r26, r26
    44d0:	0e d0       	rcall	.+28     	; 0x44ee <__addsf3x>
    44d2:	4d c1       	rjmp	.+666    	; 0x476e <__fp_round>
    44d4:	3e d1       	rcall	.+636    	; 0x4752 <__fp_pscA>
    44d6:	30 f0       	brcs	.+12     	; 0x44e4 <__addsf3+0x18>
    44d8:	43 d1       	rcall	.+646    	; 0x4760 <__fp_pscB>
    44da:	20 f0       	brcs	.+8      	; 0x44e4 <__addsf3+0x18>
    44dc:	31 f4       	brne	.+12     	; 0x44ea <__addsf3+0x1e>
    44de:	9f 3f       	cpi	r25, 0xFF	; 255
    44e0:	11 f4       	brne	.+4      	; 0x44e6 <__addsf3+0x1a>
    44e2:	1e f4       	brtc	.+6      	; 0x44ea <__addsf3+0x1e>
    44e4:	33 c1       	rjmp	.+614    	; 0x474c <__fp_nan>
    44e6:	0e f4       	brtc	.+2      	; 0x44ea <__addsf3+0x1e>
    44e8:	e0 95       	com	r30
    44ea:	e7 fb       	bst	r30, 7
    44ec:	29 c1       	rjmp	.+594    	; 0x4740 <__fp_inf>

000044ee <__addsf3x>:
    44ee:	e9 2f       	mov	r30, r25
    44f0:	4f d1       	rcall	.+670    	; 0x4790 <__fp_split3>
    44f2:	80 f3       	brcs	.-32     	; 0x44d4 <__addsf3+0x8>
    44f4:	ba 17       	cp	r27, r26
    44f6:	62 07       	cpc	r22, r18
    44f8:	73 07       	cpc	r23, r19
    44fa:	84 07       	cpc	r24, r20
    44fc:	95 07       	cpc	r25, r21
    44fe:	18 f0       	brcs	.+6      	; 0x4506 <__addsf3x+0x18>
    4500:	71 f4       	brne	.+28     	; 0x451e <__addsf3x+0x30>
    4502:	9e f5       	brtc	.+102    	; 0x456a <__addsf3x+0x7c>
    4504:	67 c1       	rjmp	.+718    	; 0x47d4 <__fp_zero>
    4506:	0e f4       	brtc	.+2      	; 0x450a <__addsf3x+0x1c>
    4508:	e0 95       	com	r30
    450a:	0b 2e       	mov	r0, r27
    450c:	ba 2f       	mov	r27, r26
    450e:	a0 2d       	mov	r26, r0
    4510:	0b 01       	movw	r0, r22
    4512:	b9 01       	movw	r22, r18
    4514:	90 01       	movw	r18, r0
    4516:	0c 01       	movw	r0, r24
    4518:	ca 01       	movw	r24, r20
    451a:	a0 01       	movw	r20, r0
    451c:	11 24       	eor	r1, r1
    451e:	ff 27       	eor	r31, r31
    4520:	59 1b       	sub	r21, r25
    4522:	99 f0       	breq	.+38     	; 0x454a <__addsf3x+0x5c>
    4524:	59 3f       	cpi	r21, 0xF9	; 249
    4526:	50 f4       	brcc	.+20     	; 0x453c <__addsf3x+0x4e>
    4528:	50 3e       	cpi	r21, 0xE0	; 224
    452a:	68 f1       	brcs	.+90     	; 0x4586 <__addsf3x+0x98>
    452c:	1a 16       	cp	r1, r26
    452e:	f0 40       	sbci	r31, 0x00	; 0
    4530:	a2 2f       	mov	r26, r18
    4532:	23 2f       	mov	r18, r19
    4534:	34 2f       	mov	r19, r20
    4536:	44 27       	eor	r20, r20
    4538:	58 5f       	subi	r21, 0xF8	; 248
    453a:	f3 cf       	rjmp	.-26     	; 0x4522 <__addsf3x+0x34>
    453c:	46 95       	lsr	r20
    453e:	37 95       	ror	r19
    4540:	27 95       	ror	r18
    4542:	a7 95       	ror	r26
    4544:	f0 40       	sbci	r31, 0x00	; 0
    4546:	53 95       	inc	r21
    4548:	c9 f7       	brne	.-14     	; 0x453c <__addsf3x+0x4e>
    454a:	7e f4       	brtc	.+30     	; 0x456a <__addsf3x+0x7c>
    454c:	1f 16       	cp	r1, r31
    454e:	ba 0b       	sbc	r27, r26
    4550:	62 0b       	sbc	r22, r18
    4552:	73 0b       	sbc	r23, r19
    4554:	84 0b       	sbc	r24, r20
    4556:	ba f0       	brmi	.+46     	; 0x4586 <__addsf3x+0x98>
    4558:	91 50       	subi	r25, 0x01	; 1
    455a:	a1 f0       	breq	.+40     	; 0x4584 <__addsf3x+0x96>
    455c:	ff 0f       	add	r31, r31
    455e:	bb 1f       	adc	r27, r27
    4560:	66 1f       	adc	r22, r22
    4562:	77 1f       	adc	r23, r23
    4564:	88 1f       	adc	r24, r24
    4566:	c2 f7       	brpl	.-16     	; 0x4558 <__addsf3x+0x6a>
    4568:	0e c0       	rjmp	.+28     	; 0x4586 <__addsf3x+0x98>
    456a:	ba 0f       	add	r27, r26
    456c:	62 1f       	adc	r22, r18
    456e:	73 1f       	adc	r23, r19
    4570:	84 1f       	adc	r24, r20
    4572:	48 f4       	brcc	.+18     	; 0x4586 <__addsf3x+0x98>
    4574:	87 95       	ror	r24
    4576:	77 95       	ror	r23
    4578:	67 95       	ror	r22
    457a:	b7 95       	ror	r27
    457c:	f7 95       	ror	r31
    457e:	9e 3f       	cpi	r25, 0xFE	; 254
    4580:	08 f0       	brcs	.+2      	; 0x4584 <__addsf3x+0x96>
    4582:	b3 cf       	rjmp	.-154    	; 0x44ea <__addsf3+0x1e>
    4584:	93 95       	inc	r25
    4586:	88 0f       	add	r24, r24
    4588:	08 f0       	brcs	.+2      	; 0x458c <__addsf3x+0x9e>
    458a:	99 27       	eor	r25, r25
    458c:	ee 0f       	add	r30, r30
    458e:	97 95       	ror	r25
    4590:	87 95       	ror	r24
    4592:	08 95       	ret

00004594 <__divsf3>:
    4594:	0c d0       	rcall	.+24     	; 0x45ae <__divsf3x>
    4596:	eb c0       	rjmp	.+470    	; 0x476e <__fp_round>
    4598:	e3 d0       	rcall	.+454    	; 0x4760 <__fp_pscB>
    459a:	40 f0       	brcs	.+16     	; 0x45ac <__divsf3+0x18>
    459c:	da d0       	rcall	.+436    	; 0x4752 <__fp_pscA>
    459e:	30 f0       	brcs	.+12     	; 0x45ac <__divsf3+0x18>
    45a0:	21 f4       	brne	.+8      	; 0x45aa <__divsf3+0x16>
    45a2:	5f 3f       	cpi	r21, 0xFF	; 255
    45a4:	19 f0       	breq	.+6      	; 0x45ac <__divsf3+0x18>
    45a6:	cc c0       	rjmp	.+408    	; 0x4740 <__fp_inf>
    45a8:	51 11       	cpse	r21, r1
    45aa:	15 c1       	rjmp	.+554    	; 0x47d6 <__fp_szero>
    45ac:	cf c0       	rjmp	.+414    	; 0x474c <__fp_nan>

000045ae <__divsf3x>:
    45ae:	f0 d0       	rcall	.+480    	; 0x4790 <__fp_split3>
    45b0:	98 f3       	brcs	.-26     	; 0x4598 <__divsf3+0x4>

000045b2 <__divsf3_pse>:
    45b2:	99 23       	and	r25, r25
    45b4:	c9 f3       	breq	.-14     	; 0x45a8 <__divsf3+0x14>
    45b6:	55 23       	and	r21, r21
    45b8:	b1 f3       	breq	.-20     	; 0x45a6 <__divsf3+0x12>
    45ba:	95 1b       	sub	r25, r21
    45bc:	55 0b       	sbc	r21, r21
    45be:	bb 27       	eor	r27, r27
    45c0:	aa 27       	eor	r26, r26
    45c2:	62 17       	cp	r22, r18
    45c4:	73 07       	cpc	r23, r19
    45c6:	84 07       	cpc	r24, r20
    45c8:	38 f0       	brcs	.+14     	; 0x45d8 <__divsf3_pse+0x26>
    45ca:	9f 5f       	subi	r25, 0xFF	; 255
    45cc:	5f 4f       	sbci	r21, 0xFF	; 255
    45ce:	22 0f       	add	r18, r18
    45d0:	33 1f       	adc	r19, r19
    45d2:	44 1f       	adc	r20, r20
    45d4:	aa 1f       	adc	r26, r26
    45d6:	a9 f3       	breq	.-22     	; 0x45c2 <__divsf3_pse+0x10>
    45d8:	33 d0       	rcall	.+102    	; 0x4640 <__divsf3_pse+0x8e>
    45da:	0e 2e       	mov	r0, r30
    45dc:	3a f0       	brmi	.+14     	; 0x45ec <__divsf3_pse+0x3a>
    45de:	e0 e8       	ldi	r30, 0x80	; 128
    45e0:	30 d0       	rcall	.+96     	; 0x4642 <__divsf3_pse+0x90>
    45e2:	91 50       	subi	r25, 0x01	; 1
    45e4:	50 40       	sbci	r21, 0x00	; 0
    45e6:	e6 95       	lsr	r30
    45e8:	00 1c       	adc	r0, r0
    45ea:	ca f7       	brpl	.-14     	; 0x45de <__divsf3_pse+0x2c>
    45ec:	29 d0       	rcall	.+82     	; 0x4640 <__divsf3_pse+0x8e>
    45ee:	fe 2f       	mov	r31, r30
    45f0:	27 d0       	rcall	.+78     	; 0x4640 <__divsf3_pse+0x8e>
    45f2:	66 0f       	add	r22, r22
    45f4:	77 1f       	adc	r23, r23
    45f6:	88 1f       	adc	r24, r24
    45f8:	bb 1f       	adc	r27, r27
    45fa:	26 17       	cp	r18, r22
    45fc:	37 07       	cpc	r19, r23
    45fe:	48 07       	cpc	r20, r24
    4600:	ab 07       	cpc	r26, r27
    4602:	b0 e8       	ldi	r27, 0x80	; 128
    4604:	09 f0       	breq	.+2      	; 0x4608 <__divsf3_pse+0x56>
    4606:	bb 0b       	sbc	r27, r27
    4608:	80 2d       	mov	r24, r0
    460a:	bf 01       	movw	r22, r30
    460c:	ff 27       	eor	r31, r31
    460e:	93 58       	subi	r25, 0x83	; 131
    4610:	5f 4f       	sbci	r21, 0xFF	; 255
    4612:	2a f0       	brmi	.+10     	; 0x461e <__divsf3_pse+0x6c>
    4614:	9e 3f       	cpi	r25, 0xFE	; 254
    4616:	51 05       	cpc	r21, r1
    4618:	68 f0       	brcs	.+26     	; 0x4634 <__divsf3_pse+0x82>
    461a:	92 c0       	rjmp	.+292    	; 0x4740 <__fp_inf>
    461c:	dc c0       	rjmp	.+440    	; 0x47d6 <__fp_szero>
    461e:	5f 3f       	cpi	r21, 0xFF	; 255
    4620:	ec f3       	brlt	.-6      	; 0x461c <__divsf3_pse+0x6a>
    4622:	98 3e       	cpi	r25, 0xE8	; 232
    4624:	dc f3       	brlt	.-10     	; 0x461c <__divsf3_pse+0x6a>
    4626:	86 95       	lsr	r24
    4628:	77 95       	ror	r23
    462a:	67 95       	ror	r22
    462c:	b7 95       	ror	r27
    462e:	f7 95       	ror	r31
    4630:	9f 5f       	subi	r25, 0xFF	; 255
    4632:	c9 f7       	brne	.-14     	; 0x4626 <__divsf3_pse+0x74>
    4634:	88 0f       	add	r24, r24
    4636:	91 1d       	adc	r25, r1
    4638:	96 95       	lsr	r25
    463a:	87 95       	ror	r24
    463c:	97 f9       	bld	r25, 7
    463e:	08 95       	ret
    4640:	e1 e0       	ldi	r30, 0x01	; 1
    4642:	66 0f       	add	r22, r22
    4644:	77 1f       	adc	r23, r23
    4646:	88 1f       	adc	r24, r24
    4648:	bb 1f       	adc	r27, r27
    464a:	62 17       	cp	r22, r18
    464c:	73 07       	cpc	r23, r19
    464e:	84 07       	cpc	r24, r20
    4650:	ba 07       	cpc	r27, r26
    4652:	20 f0       	brcs	.+8      	; 0x465c <__divsf3_pse+0xaa>
    4654:	62 1b       	sub	r22, r18
    4656:	73 0b       	sbc	r23, r19
    4658:	84 0b       	sbc	r24, r20
    465a:	ba 0b       	sbc	r27, r26
    465c:	ee 1f       	adc	r30, r30
    465e:	88 f7       	brcc	.-30     	; 0x4642 <__divsf3_pse+0x90>
    4660:	e0 95       	com	r30
    4662:	08 95       	ret

00004664 <__fixsfsi>:
    4664:	04 d0       	rcall	.+8      	; 0x466e <__fixunssfsi>
    4666:	68 94       	set
    4668:	b1 11       	cpse	r27, r1
    466a:	b5 c0       	rjmp	.+362    	; 0x47d6 <__fp_szero>
    466c:	08 95       	ret

0000466e <__fixunssfsi>:
    466e:	98 d0       	rcall	.+304    	; 0x47a0 <__fp_splitA>
    4670:	88 f0       	brcs	.+34     	; 0x4694 <__fixunssfsi+0x26>
    4672:	9f 57       	subi	r25, 0x7F	; 127
    4674:	90 f0       	brcs	.+36     	; 0x469a <__fixunssfsi+0x2c>
    4676:	b9 2f       	mov	r27, r25
    4678:	99 27       	eor	r25, r25
    467a:	b7 51       	subi	r27, 0x17	; 23
    467c:	a0 f0       	brcs	.+40     	; 0x46a6 <__fixunssfsi+0x38>
    467e:	d1 f0       	breq	.+52     	; 0x46b4 <__fixunssfsi+0x46>
    4680:	66 0f       	add	r22, r22
    4682:	77 1f       	adc	r23, r23
    4684:	88 1f       	adc	r24, r24
    4686:	99 1f       	adc	r25, r25
    4688:	1a f0       	brmi	.+6      	; 0x4690 <__fixunssfsi+0x22>
    468a:	ba 95       	dec	r27
    468c:	c9 f7       	brne	.-14     	; 0x4680 <__fixunssfsi+0x12>
    468e:	12 c0       	rjmp	.+36     	; 0x46b4 <__fixunssfsi+0x46>
    4690:	b1 30       	cpi	r27, 0x01	; 1
    4692:	81 f0       	breq	.+32     	; 0x46b4 <__fixunssfsi+0x46>
    4694:	9f d0       	rcall	.+318    	; 0x47d4 <__fp_zero>
    4696:	b1 e0       	ldi	r27, 0x01	; 1
    4698:	08 95       	ret
    469a:	9c c0       	rjmp	.+312    	; 0x47d4 <__fp_zero>
    469c:	67 2f       	mov	r22, r23
    469e:	78 2f       	mov	r23, r24
    46a0:	88 27       	eor	r24, r24
    46a2:	b8 5f       	subi	r27, 0xF8	; 248
    46a4:	39 f0       	breq	.+14     	; 0x46b4 <__fixunssfsi+0x46>
    46a6:	b9 3f       	cpi	r27, 0xF9	; 249
    46a8:	cc f3       	brlt	.-14     	; 0x469c <__fixunssfsi+0x2e>
    46aa:	86 95       	lsr	r24
    46ac:	77 95       	ror	r23
    46ae:	67 95       	ror	r22
    46b0:	b3 95       	inc	r27
    46b2:	d9 f7       	brne	.-10     	; 0x46aa <__fixunssfsi+0x3c>
    46b4:	3e f4       	brtc	.+14     	; 0x46c4 <__fixunssfsi+0x56>
    46b6:	90 95       	com	r25
    46b8:	80 95       	com	r24
    46ba:	70 95       	com	r23
    46bc:	61 95       	neg	r22
    46be:	7f 4f       	sbci	r23, 0xFF	; 255
    46c0:	8f 4f       	sbci	r24, 0xFF	; 255
    46c2:	9f 4f       	sbci	r25, 0xFF	; 255
    46c4:	08 95       	ret

000046c6 <__floatunsisf>:
    46c6:	e8 94       	clt
    46c8:	09 c0       	rjmp	.+18     	; 0x46dc <__floatsisf+0x12>

000046ca <__floatsisf>:
    46ca:	97 fb       	bst	r25, 7
    46cc:	3e f4       	brtc	.+14     	; 0x46dc <__floatsisf+0x12>
    46ce:	90 95       	com	r25
    46d0:	80 95       	com	r24
    46d2:	70 95       	com	r23
    46d4:	61 95       	neg	r22
    46d6:	7f 4f       	sbci	r23, 0xFF	; 255
    46d8:	8f 4f       	sbci	r24, 0xFF	; 255
    46da:	9f 4f       	sbci	r25, 0xFF	; 255
    46dc:	99 23       	and	r25, r25
    46de:	a9 f0       	breq	.+42     	; 0x470a <__floatsisf+0x40>
    46e0:	f9 2f       	mov	r31, r25
    46e2:	96 e9       	ldi	r25, 0x96	; 150
    46e4:	bb 27       	eor	r27, r27
    46e6:	93 95       	inc	r25
    46e8:	f6 95       	lsr	r31
    46ea:	87 95       	ror	r24
    46ec:	77 95       	ror	r23
    46ee:	67 95       	ror	r22
    46f0:	b7 95       	ror	r27
    46f2:	f1 11       	cpse	r31, r1
    46f4:	f8 cf       	rjmp	.-16     	; 0x46e6 <__floatsisf+0x1c>
    46f6:	fa f4       	brpl	.+62     	; 0x4736 <__floatsisf+0x6c>
    46f8:	bb 0f       	add	r27, r27
    46fa:	11 f4       	brne	.+4      	; 0x4700 <__floatsisf+0x36>
    46fc:	60 ff       	sbrs	r22, 0
    46fe:	1b c0       	rjmp	.+54     	; 0x4736 <__floatsisf+0x6c>
    4700:	6f 5f       	subi	r22, 0xFF	; 255
    4702:	7f 4f       	sbci	r23, 0xFF	; 255
    4704:	8f 4f       	sbci	r24, 0xFF	; 255
    4706:	9f 4f       	sbci	r25, 0xFF	; 255
    4708:	16 c0       	rjmp	.+44     	; 0x4736 <__floatsisf+0x6c>
    470a:	88 23       	and	r24, r24
    470c:	11 f0       	breq	.+4      	; 0x4712 <__floatsisf+0x48>
    470e:	96 e9       	ldi	r25, 0x96	; 150
    4710:	11 c0       	rjmp	.+34     	; 0x4734 <__floatsisf+0x6a>
    4712:	77 23       	and	r23, r23
    4714:	21 f0       	breq	.+8      	; 0x471e <__floatsisf+0x54>
    4716:	9e e8       	ldi	r25, 0x8E	; 142
    4718:	87 2f       	mov	r24, r23
    471a:	76 2f       	mov	r23, r22
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <__floatsisf+0x5e>
    471e:	66 23       	and	r22, r22
    4720:	71 f0       	breq	.+28     	; 0x473e <__floatsisf+0x74>
    4722:	96 e8       	ldi	r25, 0x86	; 134
    4724:	86 2f       	mov	r24, r22
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	2a f0       	brmi	.+10     	; 0x4736 <__floatsisf+0x6c>
    472c:	9a 95       	dec	r25
    472e:	66 0f       	add	r22, r22
    4730:	77 1f       	adc	r23, r23
    4732:	88 1f       	adc	r24, r24
    4734:	da f7       	brpl	.-10     	; 0x472c <__floatsisf+0x62>
    4736:	88 0f       	add	r24, r24
    4738:	96 95       	lsr	r25
    473a:	87 95       	ror	r24
    473c:	97 f9       	bld	r25, 7
    473e:	08 95       	ret

00004740 <__fp_inf>:
    4740:	97 f9       	bld	r25, 7
    4742:	9f 67       	ori	r25, 0x7F	; 127
    4744:	80 e8       	ldi	r24, 0x80	; 128
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	08 95       	ret

0000474c <__fp_nan>:
    474c:	9f ef       	ldi	r25, 0xFF	; 255
    474e:	80 ec       	ldi	r24, 0xC0	; 192
    4750:	08 95       	ret

00004752 <__fp_pscA>:
    4752:	00 24       	eor	r0, r0
    4754:	0a 94       	dec	r0
    4756:	16 16       	cp	r1, r22
    4758:	17 06       	cpc	r1, r23
    475a:	18 06       	cpc	r1, r24
    475c:	09 06       	cpc	r0, r25
    475e:	08 95       	ret

00004760 <__fp_pscB>:
    4760:	00 24       	eor	r0, r0
    4762:	0a 94       	dec	r0
    4764:	12 16       	cp	r1, r18
    4766:	13 06       	cpc	r1, r19
    4768:	14 06       	cpc	r1, r20
    476a:	05 06       	cpc	r0, r21
    476c:	08 95       	ret

0000476e <__fp_round>:
    476e:	09 2e       	mov	r0, r25
    4770:	03 94       	inc	r0
    4772:	00 0c       	add	r0, r0
    4774:	11 f4       	brne	.+4      	; 0x477a <__fp_round+0xc>
    4776:	88 23       	and	r24, r24
    4778:	52 f0       	brmi	.+20     	; 0x478e <__fp_round+0x20>
    477a:	bb 0f       	add	r27, r27
    477c:	40 f4       	brcc	.+16     	; 0x478e <__fp_round+0x20>
    477e:	bf 2b       	or	r27, r31
    4780:	11 f4       	brne	.+4      	; 0x4786 <__fp_round+0x18>
    4782:	60 ff       	sbrs	r22, 0
    4784:	04 c0       	rjmp	.+8      	; 0x478e <__fp_round+0x20>
    4786:	6f 5f       	subi	r22, 0xFF	; 255
    4788:	7f 4f       	sbci	r23, 0xFF	; 255
    478a:	8f 4f       	sbci	r24, 0xFF	; 255
    478c:	9f 4f       	sbci	r25, 0xFF	; 255
    478e:	08 95       	ret

00004790 <__fp_split3>:
    4790:	57 fd       	sbrc	r21, 7
    4792:	90 58       	subi	r25, 0x80	; 128
    4794:	44 0f       	add	r20, r20
    4796:	55 1f       	adc	r21, r21
    4798:	59 f0       	breq	.+22     	; 0x47b0 <__fp_splitA+0x10>
    479a:	5f 3f       	cpi	r21, 0xFF	; 255
    479c:	71 f0       	breq	.+28     	; 0x47ba <__fp_splitA+0x1a>
    479e:	47 95       	ror	r20

000047a0 <__fp_splitA>:
    47a0:	88 0f       	add	r24, r24
    47a2:	97 fb       	bst	r25, 7
    47a4:	99 1f       	adc	r25, r25
    47a6:	61 f0       	breq	.+24     	; 0x47c0 <__fp_splitA+0x20>
    47a8:	9f 3f       	cpi	r25, 0xFF	; 255
    47aa:	79 f0       	breq	.+30     	; 0x47ca <__fp_splitA+0x2a>
    47ac:	87 95       	ror	r24
    47ae:	08 95       	ret
    47b0:	12 16       	cp	r1, r18
    47b2:	13 06       	cpc	r1, r19
    47b4:	14 06       	cpc	r1, r20
    47b6:	55 1f       	adc	r21, r21
    47b8:	f2 cf       	rjmp	.-28     	; 0x479e <__fp_split3+0xe>
    47ba:	46 95       	lsr	r20
    47bc:	f1 df       	rcall	.-30     	; 0x47a0 <__fp_splitA>
    47be:	08 c0       	rjmp	.+16     	; 0x47d0 <__fp_splitA+0x30>
    47c0:	16 16       	cp	r1, r22
    47c2:	17 06       	cpc	r1, r23
    47c4:	18 06       	cpc	r1, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	f1 cf       	rjmp	.-30     	; 0x47ac <__fp_splitA+0xc>
    47ca:	86 95       	lsr	r24
    47cc:	71 05       	cpc	r23, r1
    47ce:	61 05       	cpc	r22, r1
    47d0:	08 94       	sec
    47d2:	08 95       	ret

000047d4 <__fp_zero>:
    47d4:	e8 94       	clt

000047d6 <__fp_szero>:
    47d6:	bb 27       	eor	r27, r27
    47d8:	66 27       	eor	r22, r22
    47da:	77 27       	eor	r23, r23
    47dc:	cb 01       	movw	r24, r22
    47de:	97 f9       	bld	r25, 7
    47e0:	08 95       	ret

000047e2 <__mulsf3>:
    47e2:	0b d0       	rcall	.+22     	; 0x47fa <__mulsf3x>
    47e4:	c4 cf       	rjmp	.-120    	; 0x476e <__fp_round>
    47e6:	b5 df       	rcall	.-150    	; 0x4752 <__fp_pscA>
    47e8:	28 f0       	brcs	.+10     	; 0x47f4 <__mulsf3+0x12>
    47ea:	ba df       	rcall	.-140    	; 0x4760 <__fp_pscB>
    47ec:	18 f0       	brcs	.+6      	; 0x47f4 <__mulsf3+0x12>
    47ee:	95 23       	and	r25, r21
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <__mulsf3+0x12>
    47f2:	a6 cf       	rjmp	.-180    	; 0x4740 <__fp_inf>
    47f4:	ab cf       	rjmp	.-170    	; 0x474c <__fp_nan>
    47f6:	11 24       	eor	r1, r1
    47f8:	ee cf       	rjmp	.-36     	; 0x47d6 <__fp_szero>

000047fa <__mulsf3x>:
    47fa:	ca df       	rcall	.-108    	; 0x4790 <__fp_split3>
    47fc:	a0 f3       	brcs	.-24     	; 0x47e6 <__mulsf3+0x4>

000047fe <__mulsf3_pse>:
    47fe:	95 9f       	mul	r25, r21
    4800:	d1 f3       	breq	.-12     	; 0x47f6 <__mulsf3+0x14>
    4802:	95 0f       	add	r25, r21
    4804:	50 e0       	ldi	r21, 0x00	; 0
    4806:	55 1f       	adc	r21, r21
    4808:	62 9f       	mul	r22, r18
    480a:	f0 01       	movw	r30, r0
    480c:	72 9f       	mul	r23, r18
    480e:	bb 27       	eor	r27, r27
    4810:	f0 0d       	add	r31, r0
    4812:	b1 1d       	adc	r27, r1
    4814:	63 9f       	mul	r22, r19
    4816:	aa 27       	eor	r26, r26
    4818:	f0 0d       	add	r31, r0
    481a:	b1 1d       	adc	r27, r1
    481c:	aa 1f       	adc	r26, r26
    481e:	64 9f       	mul	r22, r20
    4820:	66 27       	eor	r22, r22
    4822:	b0 0d       	add	r27, r0
    4824:	a1 1d       	adc	r26, r1
    4826:	66 1f       	adc	r22, r22
    4828:	82 9f       	mul	r24, r18
    482a:	22 27       	eor	r18, r18
    482c:	b0 0d       	add	r27, r0
    482e:	a1 1d       	adc	r26, r1
    4830:	62 1f       	adc	r22, r18
    4832:	73 9f       	mul	r23, r19
    4834:	b0 0d       	add	r27, r0
    4836:	a1 1d       	adc	r26, r1
    4838:	62 1f       	adc	r22, r18
    483a:	83 9f       	mul	r24, r19
    483c:	a0 0d       	add	r26, r0
    483e:	61 1d       	adc	r22, r1
    4840:	22 1f       	adc	r18, r18
    4842:	74 9f       	mul	r23, r20
    4844:	33 27       	eor	r19, r19
    4846:	a0 0d       	add	r26, r0
    4848:	61 1d       	adc	r22, r1
    484a:	23 1f       	adc	r18, r19
    484c:	84 9f       	mul	r24, r20
    484e:	60 0d       	add	r22, r0
    4850:	21 1d       	adc	r18, r1
    4852:	82 2f       	mov	r24, r18
    4854:	76 2f       	mov	r23, r22
    4856:	6a 2f       	mov	r22, r26
    4858:	11 24       	eor	r1, r1
    485a:	9f 57       	subi	r25, 0x7F	; 127
    485c:	50 40       	sbci	r21, 0x00	; 0
    485e:	8a f0       	brmi	.+34     	; 0x4882 <__mulsf3_pse+0x84>
    4860:	e1 f0       	breq	.+56     	; 0x489a <__mulsf3_pse+0x9c>
    4862:	88 23       	and	r24, r24
    4864:	4a f0       	brmi	.+18     	; 0x4878 <__mulsf3_pse+0x7a>
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	bb 1f       	adc	r27, r27
    486c:	66 1f       	adc	r22, r22
    486e:	77 1f       	adc	r23, r23
    4870:	88 1f       	adc	r24, r24
    4872:	91 50       	subi	r25, 0x01	; 1
    4874:	50 40       	sbci	r21, 0x00	; 0
    4876:	a9 f7       	brne	.-22     	; 0x4862 <__mulsf3_pse+0x64>
    4878:	9e 3f       	cpi	r25, 0xFE	; 254
    487a:	51 05       	cpc	r21, r1
    487c:	70 f0       	brcs	.+28     	; 0x489a <__mulsf3_pse+0x9c>
    487e:	60 cf       	rjmp	.-320    	; 0x4740 <__fp_inf>
    4880:	aa cf       	rjmp	.-172    	; 0x47d6 <__fp_szero>
    4882:	5f 3f       	cpi	r21, 0xFF	; 255
    4884:	ec f3       	brlt	.-6      	; 0x4880 <__mulsf3_pse+0x82>
    4886:	98 3e       	cpi	r25, 0xE8	; 232
    4888:	dc f3       	brlt	.-10     	; 0x4880 <__mulsf3_pse+0x82>
    488a:	86 95       	lsr	r24
    488c:	77 95       	ror	r23
    488e:	67 95       	ror	r22
    4890:	b7 95       	ror	r27
    4892:	f7 95       	ror	r31
    4894:	e7 95       	ror	r30
    4896:	9f 5f       	subi	r25, 0xFF	; 255
    4898:	c1 f7       	brne	.-16     	; 0x488a <__mulsf3_pse+0x8c>
    489a:	fe 2b       	or	r31, r30
    489c:	88 0f       	add	r24, r24
    489e:	91 1d       	adc	r25, r1
    48a0:	96 95       	lsr	r25
    48a2:	87 95       	ror	r24
    48a4:	97 f9       	bld	r25, 7
    48a6:	08 95       	ret

000048a8 <__udivmodsi4>:
    48a8:	a1 e2       	ldi	r26, 0x21	; 33
    48aa:	1a 2e       	mov	r1, r26
    48ac:	aa 1b       	sub	r26, r26
    48ae:	bb 1b       	sub	r27, r27
    48b0:	fd 01       	movw	r30, r26
    48b2:	0d c0       	rjmp	.+26     	; 0x48ce <__udivmodsi4_ep>

000048b4 <__udivmodsi4_loop>:
    48b4:	aa 1f       	adc	r26, r26
    48b6:	bb 1f       	adc	r27, r27
    48b8:	ee 1f       	adc	r30, r30
    48ba:	ff 1f       	adc	r31, r31
    48bc:	a2 17       	cp	r26, r18
    48be:	b3 07       	cpc	r27, r19
    48c0:	e4 07       	cpc	r30, r20
    48c2:	f5 07       	cpc	r31, r21
    48c4:	20 f0       	brcs	.+8      	; 0x48ce <__udivmodsi4_ep>
    48c6:	a2 1b       	sub	r26, r18
    48c8:	b3 0b       	sbc	r27, r19
    48ca:	e4 0b       	sbc	r30, r20
    48cc:	f5 0b       	sbc	r31, r21

000048ce <__udivmodsi4_ep>:
    48ce:	66 1f       	adc	r22, r22
    48d0:	77 1f       	adc	r23, r23
    48d2:	88 1f       	adc	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	1a 94       	dec	r1
    48d8:	69 f7       	brne	.-38     	; 0x48b4 <__udivmodsi4_loop>
    48da:	60 95       	com	r22
    48dc:	70 95       	com	r23
    48de:	80 95       	com	r24
    48e0:	90 95       	com	r25
    48e2:	9b 01       	movw	r18, r22
    48e4:	ac 01       	movw	r20, r24
    48e6:	bd 01       	movw	r22, r26
    48e8:	cf 01       	movw	r24, r30
    48ea:	08 95       	ret

000048ec <__tablejump2__>:
    48ec:	ee 0f       	add	r30, r30
    48ee:	ff 1f       	adc	r31, r31
    48f0:	88 1f       	adc	r24, r24
    48f2:	8b bf       	out	0x3b, r24	; 59
    48f4:	07 90       	elpm	r0, Z+
    48f6:	f6 91       	elpm	r31, Z
    48f8:	e0 2d       	mov	r30, r0
    48fa:	19 94       	eijmp

000048fc <calloc>:
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	86 9f       	mul	r24, r22
    4906:	80 01       	movw	r16, r0
    4908:	87 9f       	mul	r24, r23
    490a:	10 0d       	add	r17, r0
    490c:	96 9f       	mul	r25, r22
    490e:	10 0d       	add	r17, r0
    4910:	11 24       	eor	r1, r1
    4912:	c8 01       	movw	r24, r16
    4914:	0d d0       	rcall	.+26     	; 0x4930 <malloc>
    4916:	ec 01       	movw	r28, r24
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	21 f0       	breq	.+8      	; 0x4924 <calloc+0x28>
    491c:	a8 01       	movw	r20, r16
    491e:	60 e0       	ldi	r22, 0x00	; 0
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	34 d1       	rcall	.+616    	; 0x4b8c <memset>
    4924:	ce 01       	movw	r24, r28
    4926:	df 91       	pop	r29
    4928:	cf 91       	pop	r28
    492a:	1f 91       	pop	r17
    492c:	0f 91       	pop	r16
    492e:	08 95       	ret

00004930 <malloc>:
    4930:	0f 93       	push	r16
    4932:	1f 93       	push	r17
    4934:	cf 93       	push	r28
    4936:	df 93       	push	r29
    4938:	82 30       	cpi	r24, 0x02	; 2
    493a:	91 05       	cpc	r25, r1
    493c:	10 f4       	brcc	.+4      	; 0x4942 <malloc+0x12>
    493e:	82 e0       	ldi	r24, 0x02	; 2
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	e0 91 11 1a 	lds	r30, 0x1A11	; 0x801a11 <__flp>
    4946:	f0 91 12 1a 	lds	r31, 0x1A12	; 0x801a12 <__flp+0x1>
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	a0 e0       	ldi	r26, 0x00	; 0
    4950:	b0 e0       	ldi	r27, 0x00	; 0
    4952:	30 97       	sbiw	r30, 0x00	; 0
    4954:	19 f1       	breq	.+70     	; 0x499c <malloc+0x6c>
    4956:	40 81       	ld	r20, Z
    4958:	51 81       	ldd	r21, Z+1	; 0x01
    495a:	02 81       	ldd	r16, Z+2	; 0x02
    495c:	13 81       	ldd	r17, Z+3	; 0x03
    495e:	48 17       	cp	r20, r24
    4960:	59 07       	cpc	r21, r25
    4962:	c8 f0       	brcs	.+50     	; 0x4996 <malloc+0x66>
    4964:	84 17       	cp	r24, r20
    4966:	95 07       	cpc	r25, r21
    4968:	69 f4       	brne	.+26     	; 0x4984 <malloc+0x54>
    496a:	10 97       	sbiw	r26, 0x00	; 0
    496c:	31 f0       	breq	.+12     	; 0x497a <malloc+0x4a>
    496e:	12 96       	adiw	r26, 0x02	; 2
    4970:	0c 93       	st	X, r16
    4972:	12 97       	sbiw	r26, 0x02	; 2
    4974:	13 96       	adiw	r26, 0x03	; 3
    4976:	1c 93       	st	X, r17
    4978:	27 c0       	rjmp	.+78     	; 0x49c8 <malloc+0x98>
    497a:	00 93 11 1a 	sts	0x1A11, r16	; 0x801a11 <__flp>
    497e:	10 93 12 1a 	sts	0x1A12, r17	; 0x801a12 <__flp+0x1>
    4982:	22 c0       	rjmp	.+68     	; 0x49c8 <malloc+0x98>
    4984:	21 15       	cp	r18, r1
    4986:	31 05       	cpc	r19, r1
    4988:	19 f0       	breq	.+6      	; 0x4990 <malloc+0x60>
    498a:	42 17       	cp	r20, r18
    498c:	53 07       	cpc	r21, r19
    498e:	18 f4       	brcc	.+6      	; 0x4996 <malloc+0x66>
    4990:	9a 01       	movw	r18, r20
    4992:	bd 01       	movw	r22, r26
    4994:	ef 01       	movw	r28, r30
    4996:	df 01       	movw	r26, r30
    4998:	f8 01       	movw	r30, r16
    499a:	db cf       	rjmp	.-74     	; 0x4952 <malloc+0x22>
    499c:	21 15       	cp	r18, r1
    499e:	31 05       	cpc	r19, r1
    49a0:	f9 f0       	breq	.+62     	; 0x49e0 <malloc+0xb0>
    49a2:	28 1b       	sub	r18, r24
    49a4:	39 0b       	sbc	r19, r25
    49a6:	24 30       	cpi	r18, 0x04	; 4
    49a8:	31 05       	cpc	r19, r1
    49aa:	80 f4       	brcc	.+32     	; 0x49cc <malloc+0x9c>
    49ac:	8a 81       	ldd	r24, Y+2	; 0x02
    49ae:	9b 81       	ldd	r25, Y+3	; 0x03
    49b0:	61 15       	cp	r22, r1
    49b2:	71 05       	cpc	r23, r1
    49b4:	21 f0       	breq	.+8      	; 0x49be <malloc+0x8e>
    49b6:	fb 01       	movw	r30, r22
    49b8:	93 83       	std	Z+3, r25	; 0x03
    49ba:	82 83       	std	Z+2, r24	; 0x02
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <malloc+0x96>
    49be:	90 93 12 1a 	sts	0x1A12, r25	; 0x801a12 <__flp+0x1>
    49c2:	80 93 11 1a 	sts	0x1A11, r24	; 0x801a11 <__flp>
    49c6:	fe 01       	movw	r30, r28
    49c8:	32 96       	adiw	r30, 0x02	; 2
    49ca:	44 c0       	rjmp	.+136    	; 0x4a54 <malloc+0x124>
    49cc:	fe 01       	movw	r30, r28
    49ce:	e2 0f       	add	r30, r18
    49d0:	f3 1f       	adc	r31, r19
    49d2:	81 93       	st	Z+, r24
    49d4:	91 93       	st	Z+, r25
    49d6:	22 50       	subi	r18, 0x02	; 2
    49d8:	31 09       	sbc	r19, r1
    49da:	39 83       	std	Y+1, r19	; 0x01
    49dc:	28 83       	st	Y, r18
    49de:	3a c0       	rjmp	.+116    	; 0x4a54 <malloc+0x124>
    49e0:	20 91 0f 1a 	lds	r18, 0x1A0F	; 0x801a0f <__brkval>
    49e4:	30 91 10 1a 	lds	r19, 0x1A10	; 0x801a10 <__brkval+0x1>
    49e8:	23 2b       	or	r18, r19
    49ea:	41 f4       	brne	.+16     	; 0x49fc <malloc+0xcc>
    49ec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    49f0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    49f4:	30 93 10 1a 	sts	0x1A10, r19	; 0x801a10 <__brkval+0x1>
    49f8:	20 93 0f 1a 	sts	0x1A0F, r18	; 0x801a0f <__brkval>
    49fc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4a00:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4a04:	21 15       	cp	r18, r1
    4a06:	31 05       	cpc	r19, r1
    4a08:	41 f4       	brne	.+16     	; 0x4a1a <malloc+0xea>
    4a0a:	2d b7       	in	r18, 0x3d	; 61
    4a0c:	3e b7       	in	r19, 0x3e	; 62
    4a0e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a12:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a16:	24 1b       	sub	r18, r20
    4a18:	35 0b       	sbc	r19, r21
    4a1a:	e0 91 0f 1a 	lds	r30, 0x1A0F	; 0x801a0f <__brkval>
    4a1e:	f0 91 10 1a 	lds	r31, 0x1A10	; 0x801a10 <__brkval+0x1>
    4a22:	e2 17       	cp	r30, r18
    4a24:	f3 07       	cpc	r31, r19
    4a26:	a0 f4       	brcc	.+40     	; 0x4a50 <malloc+0x120>
    4a28:	2e 1b       	sub	r18, r30
    4a2a:	3f 0b       	sbc	r19, r31
    4a2c:	28 17       	cp	r18, r24
    4a2e:	39 07       	cpc	r19, r25
    4a30:	78 f0       	brcs	.+30     	; 0x4a50 <malloc+0x120>
    4a32:	ac 01       	movw	r20, r24
    4a34:	4e 5f       	subi	r20, 0xFE	; 254
    4a36:	5f 4f       	sbci	r21, 0xFF	; 255
    4a38:	24 17       	cp	r18, r20
    4a3a:	35 07       	cpc	r19, r21
    4a3c:	48 f0       	brcs	.+18     	; 0x4a50 <malloc+0x120>
    4a3e:	4e 0f       	add	r20, r30
    4a40:	5f 1f       	adc	r21, r31
    4a42:	50 93 10 1a 	sts	0x1A10, r21	; 0x801a10 <__brkval+0x1>
    4a46:	40 93 0f 1a 	sts	0x1A0F, r20	; 0x801a0f <__brkval>
    4a4a:	81 93       	st	Z+, r24
    4a4c:	91 93       	st	Z+, r25
    4a4e:	02 c0       	rjmp	.+4      	; 0x4a54 <malloc+0x124>
    4a50:	e0 e0       	ldi	r30, 0x00	; 0
    4a52:	f0 e0       	ldi	r31, 0x00	; 0
    4a54:	cf 01       	movw	r24, r30
    4a56:	df 91       	pop	r29
    4a58:	cf 91       	pop	r28
    4a5a:	1f 91       	pop	r17
    4a5c:	0f 91       	pop	r16
    4a5e:	08 95       	ret

00004a60 <free>:
    4a60:	cf 93       	push	r28
    4a62:	df 93       	push	r29
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	09 f4       	brne	.+2      	; 0x4a6a <free+0xa>
    4a68:	81 c0       	rjmp	.+258    	; 0x4b6c <free+0x10c>
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	32 97       	sbiw	r30, 0x02	; 2
    4a6e:	13 82       	std	Z+3, r1	; 0x03
    4a70:	12 82       	std	Z+2, r1	; 0x02
    4a72:	a0 91 11 1a 	lds	r26, 0x1A11	; 0x801a11 <__flp>
    4a76:	b0 91 12 1a 	lds	r27, 0x1A12	; 0x801a12 <__flp+0x1>
    4a7a:	10 97       	sbiw	r26, 0x00	; 0
    4a7c:	81 f4       	brne	.+32     	; 0x4a9e <free+0x3e>
    4a7e:	20 81       	ld	r18, Z
    4a80:	31 81       	ldd	r19, Z+1	; 0x01
    4a82:	82 0f       	add	r24, r18
    4a84:	93 1f       	adc	r25, r19
    4a86:	20 91 0f 1a 	lds	r18, 0x1A0F	; 0x801a0f <__brkval>
    4a8a:	30 91 10 1a 	lds	r19, 0x1A10	; 0x801a10 <__brkval+0x1>
    4a8e:	28 17       	cp	r18, r24
    4a90:	39 07       	cpc	r19, r25
    4a92:	51 f5       	brne	.+84     	; 0x4ae8 <free+0x88>
    4a94:	f0 93 10 1a 	sts	0x1A10, r31	; 0x801a10 <__brkval+0x1>
    4a98:	e0 93 0f 1a 	sts	0x1A0F, r30	; 0x801a0f <__brkval>
    4a9c:	67 c0       	rjmp	.+206    	; 0x4b6c <free+0x10c>
    4a9e:	ed 01       	movw	r28, r26
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	ce 17       	cp	r28, r30
    4aa6:	df 07       	cpc	r29, r31
    4aa8:	40 f4       	brcc	.+16     	; 0x4aba <free+0x5a>
    4aaa:	4a 81       	ldd	r20, Y+2	; 0x02
    4aac:	5b 81       	ldd	r21, Y+3	; 0x03
    4aae:	9e 01       	movw	r18, r28
    4ab0:	41 15       	cp	r20, r1
    4ab2:	51 05       	cpc	r21, r1
    4ab4:	f1 f0       	breq	.+60     	; 0x4af2 <free+0x92>
    4ab6:	ea 01       	movw	r28, r20
    4ab8:	f5 cf       	rjmp	.-22     	; 0x4aa4 <free+0x44>
    4aba:	d3 83       	std	Z+3, r29	; 0x03
    4abc:	c2 83       	std	Z+2, r28	; 0x02
    4abe:	40 81       	ld	r20, Z
    4ac0:	51 81       	ldd	r21, Z+1	; 0x01
    4ac2:	84 0f       	add	r24, r20
    4ac4:	95 1f       	adc	r25, r21
    4ac6:	c8 17       	cp	r28, r24
    4ac8:	d9 07       	cpc	r29, r25
    4aca:	59 f4       	brne	.+22     	; 0x4ae2 <free+0x82>
    4acc:	88 81       	ld	r24, Y
    4ace:	99 81       	ldd	r25, Y+1	; 0x01
    4ad0:	84 0f       	add	r24, r20
    4ad2:	95 1f       	adc	r25, r21
    4ad4:	02 96       	adiw	r24, 0x02	; 2
    4ad6:	91 83       	std	Z+1, r25	; 0x01
    4ad8:	80 83       	st	Z, r24
    4ada:	8a 81       	ldd	r24, Y+2	; 0x02
    4adc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ade:	93 83       	std	Z+3, r25	; 0x03
    4ae0:	82 83       	std	Z+2, r24	; 0x02
    4ae2:	21 15       	cp	r18, r1
    4ae4:	31 05       	cpc	r19, r1
    4ae6:	29 f4       	brne	.+10     	; 0x4af2 <free+0x92>
    4ae8:	f0 93 12 1a 	sts	0x1A12, r31	; 0x801a12 <__flp+0x1>
    4aec:	e0 93 11 1a 	sts	0x1A11, r30	; 0x801a11 <__flp>
    4af0:	3d c0       	rjmp	.+122    	; 0x4b6c <free+0x10c>
    4af2:	e9 01       	movw	r28, r18
    4af4:	fb 83       	std	Y+3, r31	; 0x03
    4af6:	ea 83       	std	Y+2, r30	; 0x02
    4af8:	49 91       	ld	r20, Y+
    4afa:	59 91       	ld	r21, Y+
    4afc:	c4 0f       	add	r28, r20
    4afe:	d5 1f       	adc	r29, r21
    4b00:	ec 17       	cp	r30, r28
    4b02:	fd 07       	cpc	r31, r29
    4b04:	61 f4       	brne	.+24     	; 0x4b1e <free+0xbe>
    4b06:	80 81       	ld	r24, Z
    4b08:	91 81       	ldd	r25, Z+1	; 0x01
    4b0a:	84 0f       	add	r24, r20
    4b0c:	95 1f       	adc	r25, r21
    4b0e:	02 96       	adiw	r24, 0x02	; 2
    4b10:	e9 01       	movw	r28, r18
    4b12:	99 83       	std	Y+1, r25	; 0x01
    4b14:	88 83       	st	Y, r24
    4b16:	82 81       	ldd	r24, Z+2	; 0x02
    4b18:	93 81       	ldd	r25, Z+3	; 0x03
    4b1a:	9b 83       	std	Y+3, r25	; 0x03
    4b1c:	8a 83       	std	Y+2, r24	; 0x02
    4b1e:	e0 e0       	ldi	r30, 0x00	; 0
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	12 96       	adiw	r26, 0x02	; 2
    4b24:	8d 91       	ld	r24, X+
    4b26:	9c 91       	ld	r25, X
    4b28:	13 97       	sbiw	r26, 0x03	; 3
    4b2a:	00 97       	sbiw	r24, 0x00	; 0
    4b2c:	19 f0       	breq	.+6      	; 0x4b34 <free+0xd4>
    4b2e:	fd 01       	movw	r30, r26
    4b30:	dc 01       	movw	r26, r24
    4b32:	f7 cf       	rjmp	.-18     	; 0x4b22 <free+0xc2>
    4b34:	8d 91       	ld	r24, X+
    4b36:	9c 91       	ld	r25, X
    4b38:	11 97       	sbiw	r26, 0x01	; 1
    4b3a:	9d 01       	movw	r18, r26
    4b3c:	2e 5f       	subi	r18, 0xFE	; 254
    4b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b40:	82 0f       	add	r24, r18
    4b42:	93 1f       	adc	r25, r19
    4b44:	20 91 0f 1a 	lds	r18, 0x1A0F	; 0x801a0f <__brkval>
    4b48:	30 91 10 1a 	lds	r19, 0x1A10	; 0x801a10 <__brkval+0x1>
    4b4c:	28 17       	cp	r18, r24
    4b4e:	39 07       	cpc	r19, r25
    4b50:	69 f4       	brne	.+26     	; 0x4b6c <free+0x10c>
    4b52:	30 97       	sbiw	r30, 0x00	; 0
    4b54:	29 f4       	brne	.+10     	; 0x4b60 <free+0x100>
    4b56:	10 92 12 1a 	sts	0x1A12, r1	; 0x801a12 <__flp+0x1>
    4b5a:	10 92 11 1a 	sts	0x1A11, r1	; 0x801a11 <__flp>
    4b5e:	02 c0       	rjmp	.+4      	; 0x4b64 <free+0x104>
    4b60:	13 82       	std	Z+3, r1	; 0x03
    4b62:	12 82       	std	Z+2, r1	; 0x02
    4b64:	b0 93 10 1a 	sts	0x1A10, r27	; 0x801a10 <__brkval+0x1>
    4b68:	a0 93 0f 1a 	sts	0x1A0F, r26	; 0x801a0f <__brkval>
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	08 95       	ret

00004b72 <abort>:
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	f8 94       	cli
    4b78:	58 c3       	rjmp	.+1712   	; 0x522a <_exit>

00004b7a <memcpy>:
    4b7a:	fb 01       	movw	r30, r22
    4b7c:	dc 01       	movw	r26, r24
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <memcpy+0xa>
    4b80:	01 90       	ld	r0, Z+
    4b82:	0d 92       	st	X+, r0
    4b84:	41 50       	subi	r20, 0x01	; 1
    4b86:	50 40       	sbci	r21, 0x00	; 0
    4b88:	d8 f7       	brcc	.-10     	; 0x4b80 <memcpy+0x6>
    4b8a:	08 95       	ret

00004b8c <memset>:
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	01 c0       	rjmp	.+2      	; 0x4b92 <memset+0x6>
    4b90:	6d 93       	st	X+, r22
    4b92:	41 50       	subi	r20, 0x01	; 1
    4b94:	50 40       	sbci	r21, 0x00	; 0
    4b96:	e0 f7       	brcc	.-8      	; 0x4b90 <memset+0x4>
    4b98:	08 95       	ret

00004b9a <strcat>:
    4b9a:	fb 01       	movw	r30, r22
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	0d 90       	ld	r0, X+
    4ba0:	00 20       	and	r0, r0
    4ba2:	e9 f7       	brne	.-6      	; 0x4b9e <strcat+0x4>
    4ba4:	11 97       	sbiw	r26, 0x01	; 1
    4ba6:	01 90       	ld	r0, Z+
    4ba8:	0d 92       	st	X+, r0
    4baa:	00 20       	and	r0, r0
    4bac:	e1 f7       	brne	.-8      	; 0x4ba6 <strcat+0xc>
    4bae:	08 95       	ret

00004bb0 <strcpy>:
    4bb0:	fb 01       	movw	r30, r22
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	01 90       	ld	r0, Z+
    4bb6:	0d 92       	st	X+, r0
    4bb8:	00 20       	and	r0, r0
    4bba:	e1 f7       	brne	.-8      	; 0x4bb4 <strcpy+0x4>
    4bbc:	08 95       	ret

00004bbe <strncasecmp>:
    4bbe:	fb 01       	movw	r30, r22
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	41 50       	subi	r20, 0x01	; 1
    4bc4:	50 40       	sbci	r21, 0x00	; 0
    4bc6:	88 f0       	brcs	.+34     	; 0x4bea <strncasecmp+0x2c>
    4bc8:	8d 91       	ld	r24, X+
    4bca:	81 34       	cpi	r24, 0x41	; 65
    4bcc:	1c f0       	brlt	.+6      	; 0x4bd4 <strncasecmp+0x16>
    4bce:	8b 35       	cpi	r24, 0x5B	; 91
    4bd0:	0c f4       	brge	.+2      	; 0x4bd4 <strncasecmp+0x16>
    4bd2:	80 5e       	subi	r24, 0xE0	; 224
    4bd4:	61 91       	ld	r22, Z+
    4bd6:	61 34       	cpi	r22, 0x41	; 65
    4bd8:	1c f0       	brlt	.+6      	; 0x4be0 <strncasecmp+0x22>
    4bda:	6b 35       	cpi	r22, 0x5B	; 91
    4bdc:	0c f4       	brge	.+2      	; 0x4be0 <strncasecmp+0x22>
    4bde:	60 5e       	subi	r22, 0xE0	; 224
    4be0:	86 1b       	sub	r24, r22
    4be2:	61 11       	cpse	r22, r1
    4be4:	71 f3       	breq	.-36     	; 0x4bc2 <strncasecmp+0x4>
    4be6:	99 0b       	sbc	r25, r25
    4be8:	08 95       	ret
    4bea:	88 1b       	sub	r24, r24
    4bec:	fc cf       	rjmp	.-8      	; 0x4be6 <strncasecmp+0x28>

00004bee <printf>:
    4bee:	cf 93       	push	r28
    4bf0:	df 93       	push	r29
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
    4bf6:	ae 01       	movw	r20, r28
    4bf8:	4a 5f       	subi	r20, 0xFA	; 250
    4bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bfc:	fa 01       	movw	r30, r20
    4bfe:	61 91       	ld	r22, Z+
    4c00:	71 91       	ld	r23, Z+
    4c02:	af 01       	movw	r20, r30
    4c04:	80 91 15 1a 	lds	r24, 0x1A15	; 0x801a15 <__iob+0x2>
    4c08:	90 91 16 1a 	lds	r25, 0x1A16	; 0x801a16 <__iob+0x3>
    4c0c:	61 d0       	rcall	.+194    	; 0x4cd0 <vfprintf>
    4c0e:	df 91       	pop	r29
    4c10:	cf 91       	pop	r28
    4c12:	08 95       	ret

00004c14 <puts>:
    4c14:	0f 93       	push	r16
    4c16:	1f 93       	push	r17
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	e0 91 15 1a 	lds	r30, 0x1A15	; 0x801a15 <__iob+0x2>
    4c20:	f0 91 16 1a 	lds	r31, 0x1A16	; 0x801a16 <__iob+0x3>
    4c24:	23 81       	ldd	r18, Z+3	; 0x03
    4c26:	21 ff       	sbrs	r18, 1
    4c28:	1b c0       	rjmp	.+54     	; 0x4c60 <puts+0x4c>
    4c2a:	8c 01       	movw	r16, r24
    4c2c:	d0 e0       	ldi	r29, 0x00	; 0
    4c2e:	c0 e0       	ldi	r28, 0x00	; 0
    4c30:	f8 01       	movw	r30, r16
    4c32:	81 91       	ld	r24, Z+
    4c34:	8f 01       	movw	r16, r30
    4c36:	60 91 15 1a 	lds	r22, 0x1A15	; 0x801a15 <__iob+0x2>
    4c3a:	70 91 16 1a 	lds	r23, 0x1A16	; 0x801a16 <__iob+0x3>
    4c3e:	db 01       	movw	r26, r22
    4c40:	18 96       	adiw	r26, 0x08	; 8
    4c42:	ed 91       	ld	r30, X+
    4c44:	fc 91       	ld	r31, X
    4c46:	19 97       	sbiw	r26, 0x09	; 9
    4c48:	88 23       	and	r24, r24
    4c4a:	31 f0       	breq	.+12     	; 0x4c58 <puts+0x44>
    4c4c:	19 95       	eicall
    4c4e:	89 2b       	or	r24, r25
    4c50:	79 f3       	breq	.-34     	; 0x4c30 <puts+0x1c>
    4c52:	df ef       	ldi	r29, 0xFF	; 255
    4c54:	cf ef       	ldi	r28, 0xFF	; 255
    4c56:	ec cf       	rjmp	.-40     	; 0x4c30 <puts+0x1c>
    4c58:	8a e0       	ldi	r24, 0x0A	; 10
    4c5a:	19 95       	eicall
    4c5c:	89 2b       	or	r24, r25
    4c5e:	19 f0       	breq	.+6      	; 0x4c66 <puts+0x52>
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	9f ef       	ldi	r25, 0xFF	; 255
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <puts+0x56>
    4c66:	8d 2f       	mov	r24, r29
    4c68:	9c 2f       	mov	r25, r28
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	1f 91       	pop	r17
    4c70:	0f 91       	pop	r16
    4c72:	08 95       	ret

00004c74 <sprintf>:
    4c74:	0f 93       	push	r16
    4c76:	1f 93       	push	r17
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    4c80:	2e 97       	sbiw	r28, 0x0e	; 14
    4c82:	0f b6       	in	r0, 0x3f	; 63
    4c84:	f8 94       	cli
    4c86:	de bf       	out	0x3e, r29	; 62
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	cd bf       	out	0x3d, r28	; 61
    4c8c:	0e 89       	ldd	r16, Y+22	; 0x16
    4c8e:	1f 89       	ldd	r17, Y+23	; 0x17
    4c90:	86 e0       	ldi	r24, 0x06	; 6
    4c92:	8c 83       	std	Y+4, r24	; 0x04
    4c94:	1a 83       	std	Y+2, r17	; 0x02
    4c96:	09 83       	std	Y+1, r16	; 0x01
    4c98:	8f ef       	ldi	r24, 0xFF	; 255
    4c9a:	9f e7       	ldi	r25, 0x7F	; 127
    4c9c:	9e 83       	std	Y+6, r25	; 0x06
    4c9e:	8d 83       	std	Y+5, r24	; 0x05
    4ca0:	ae 01       	movw	r20, r28
    4ca2:	46 5e       	subi	r20, 0xE6	; 230
    4ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca6:	68 8d       	ldd	r22, Y+24	; 0x18
    4ca8:	79 8d       	ldd	r23, Y+25	; 0x19
    4caa:	ce 01       	movw	r24, r28
    4cac:	01 96       	adiw	r24, 0x01	; 1
    4cae:	10 d0       	rcall	.+32     	; 0x4cd0 <vfprintf>
    4cb0:	ef 81       	ldd	r30, Y+7	; 0x07
    4cb2:	f8 85       	ldd	r31, Y+8	; 0x08
    4cb4:	e0 0f       	add	r30, r16
    4cb6:	f1 1f       	adc	r31, r17
    4cb8:	10 82       	st	Z, r1
    4cba:	2e 96       	adiw	r28, 0x0e	; 14
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	1f 91       	pop	r17
    4ccc:	0f 91       	pop	r16
    4cce:	08 95       	ret

00004cd0 <vfprintf>:
    4cd0:	2f 92       	push	r2
    4cd2:	3f 92       	push	r3
    4cd4:	4f 92       	push	r4
    4cd6:	5f 92       	push	r5
    4cd8:	6f 92       	push	r6
    4cda:	7f 92       	push	r7
    4cdc:	8f 92       	push	r8
    4cde:	9f 92       	push	r9
    4ce0:	af 92       	push	r10
    4ce2:	bf 92       	push	r11
    4ce4:	cf 92       	push	r12
    4ce6:	df 92       	push	r13
    4ce8:	ef 92       	push	r14
    4cea:	ff 92       	push	r15
    4cec:	0f 93       	push	r16
    4cee:	1f 93       	push	r17
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	cd b7       	in	r28, 0x3d	; 61
    4cf6:	de b7       	in	r29, 0x3e	; 62
    4cf8:	2b 97       	sbiw	r28, 0x0b	; 11
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	de bf       	out	0x3e, r29	; 62
    4d00:	0f be       	out	0x3f, r0	; 63
    4d02:	cd bf       	out	0x3d, r28	; 61
    4d04:	6c 01       	movw	r12, r24
    4d06:	7b 01       	movw	r14, r22
    4d08:	8a 01       	movw	r16, r20
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	17 82       	std	Z+7, r1	; 0x07
    4d0e:	16 82       	std	Z+6, r1	; 0x06
    4d10:	83 81       	ldd	r24, Z+3	; 0x03
    4d12:	81 ff       	sbrs	r24, 1
    4d14:	bf c1       	rjmp	.+894    	; 0x5094 <vfprintf+0x3c4>
    4d16:	ce 01       	movw	r24, r28
    4d18:	01 96       	adiw	r24, 0x01	; 1
    4d1a:	3c 01       	movw	r6, r24
    4d1c:	f6 01       	movw	r30, r12
    4d1e:	93 81       	ldd	r25, Z+3	; 0x03
    4d20:	f7 01       	movw	r30, r14
    4d22:	93 fd       	sbrc	r25, 3
    4d24:	85 91       	lpm	r24, Z+
    4d26:	93 ff       	sbrs	r25, 3
    4d28:	81 91       	ld	r24, Z+
    4d2a:	7f 01       	movw	r14, r30
    4d2c:	88 23       	and	r24, r24
    4d2e:	09 f4       	brne	.+2      	; 0x4d32 <vfprintf+0x62>
    4d30:	ad c1       	rjmp	.+858    	; 0x508c <vfprintf+0x3bc>
    4d32:	85 32       	cpi	r24, 0x25	; 37
    4d34:	39 f4       	brne	.+14     	; 0x4d44 <vfprintf+0x74>
    4d36:	93 fd       	sbrc	r25, 3
    4d38:	85 91       	lpm	r24, Z+
    4d3a:	93 ff       	sbrs	r25, 3
    4d3c:	81 91       	ld	r24, Z+
    4d3e:	7f 01       	movw	r14, r30
    4d40:	85 32       	cpi	r24, 0x25	; 37
    4d42:	21 f4       	brne	.+8      	; 0x4d4c <vfprintf+0x7c>
    4d44:	b6 01       	movw	r22, r12
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	d6 d1       	rcall	.+940    	; 0x50f6 <fputc>
    4d4a:	e8 cf       	rjmp	.-48     	; 0x4d1c <vfprintf+0x4c>
    4d4c:	91 2c       	mov	r9, r1
    4d4e:	21 2c       	mov	r2, r1
    4d50:	31 2c       	mov	r3, r1
    4d52:	ff e1       	ldi	r31, 0x1F	; 31
    4d54:	f3 15       	cp	r31, r3
    4d56:	d8 f0       	brcs	.+54     	; 0x4d8e <vfprintf+0xbe>
    4d58:	8b 32       	cpi	r24, 0x2B	; 43
    4d5a:	79 f0       	breq	.+30     	; 0x4d7a <vfprintf+0xaa>
    4d5c:	38 f4       	brcc	.+14     	; 0x4d6c <vfprintf+0x9c>
    4d5e:	80 32       	cpi	r24, 0x20	; 32
    4d60:	79 f0       	breq	.+30     	; 0x4d80 <vfprintf+0xb0>
    4d62:	83 32       	cpi	r24, 0x23	; 35
    4d64:	a1 f4       	brne	.+40     	; 0x4d8e <vfprintf+0xbe>
    4d66:	23 2d       	mov	r18, r3
    4d68:	20 61       	ori	r18, 0x10	; 16
    4d6a:	1d c0       	rjmp	.+58     	; 0x4da6 <vfprintf+0xd6>
    4d6c:	8d 32       	cpi	r24, 0x2D	; 45
    4d6e:	61 f0       	breq	.+24     	; 0x4d88 <vfprintf+0xb8>
    4d70:	80 33       	cpi	r24, 0x30	; 48
    4d72:	69 f4       	brne	.+26     	; 0x4d8e <vfprintf+0xbe>
    4d74:	23 2d       	mov	r18, r3
    4d76:	21 60       	ori	r18, 0x01	; 1
    4d78:	16 c0       	rjmp	.+44     	; 0x4da6 <vfprintf+0xd6>
    4d7a:	83 2d       	mov	r24, r3
    4d7c:	82 60       	ori	r24, 0x02	; 2
    4d7e:	38 2e       	mov	r3, r24
    4d80:	e3 2d       	mov	r30, r3
    4d82:	e4 60       	ori	r30, 0x04	; 4
    4d84:	3e 2e       	mov	r3, r30
    4d86:	2a c0       	rjmp	.+84     	; 0x4ddc <vfprintf+0x10c>
    4d88:	f3 2d       	mov	r31, r3
    4d8a:	f8 60       	ori	r31, 0x08	; 8
    4d8c:	1d c0       	rjmp	.+58     	; 0x4dc8 <vfprintf+0xf8>
    4d8e:	37 fc       	sbrc	r3, 7
    4d90:	2d c0       	rjmp	.+90     	; 0x4dec <vfprintf+0x11c>
    4d92:	20 ed       	ldi	r18, 0xD0	; 208
    4d94:	28 0f       	add	r18, r24
    4d96:	2a 30       	cpi	r18, 0x0A	; 10
    4d98:	40 f0       	brcs	.+16     	; 0x4daa <vfprintf+0xda>
    4d9a:	8e 32       	cpi	r24, 0x2E	; 46
    4d9c:	b9 f4       	brne	.+46     	; 0x4dcc <vfprintf+0xfc>
    4d9e:	36 fc       	sbrc	r3, 6
    4da0:	75 c1       	rjmp	.+746    	; 0x508c <vfprintf+0x3bc>
    4da2:	23 2d       	mov	r18, r3
    4da4:	20 64       	ori	r18, 0x40	; 64
    4da6:	32 2e       	mov	r3, r18
    4da8:	19 c0       	rjmp	.+50     	; 0x4ddc <vfprintf+0x10c>
    4daa:	36 fe       	sbrs	r3, 6
    4dac:	06 c0       	rjmp	.+12     	; 0x4dba <vfprintf+0xea>
    4dae:	8a e0       	ldi	r24, 0x0A	; 10
    4db0:	98 9e       	mul	r9, r24
    4db2:	20 0d       	add	r18, r0
    4db4:	11 24       	eor	r1, r1
    4db6:	92 2e       	mov	r9, r18
    4db8:	11 c0       	rjmp	.+34     	; 0x4ddc <vfprintf+0x10c>
    4dba:	ea e0       	ldi	r30, 0x0A	; 10
    4dbc:	2e 9e       	mul	r2, r30
    4dbe:	20 0d       	add	r18, r0
    4dc0:	11 24       	eor	r1, r1
    4dc2:	22 2e       	mov	r2, r18
    4dc4:	f3 2d       	mov	r31, r3
    4dc6:	f0 62       	ori	r31, 0x20	; 32
    4dc8:	3f 2e       	mov	r3, r31
    4dca:	08 c0       	rjmp	.+16     	; 0x4ddc <vfprintf+0x10c>
    4dcc:	8c 36       	cpi	r24, 0x6C	; 108
    4dce:	21 f4       	brne	.+8      	; 0x4dd8 <vfprintf+0x108>
    4dd0:	83 2d       	mov	r24, r3
    4dd2:	80 68       	ori	r24, 0x80	; 128
    4dd4:	38 2e       	mov	r3, r24
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <vfprintf+0x10c>
    4dd8:	88 36       	cpi	r24, 0x68	; 104
    4dda:	41 f4       	brne	.+16     	; 0x4dec <vfprintf+0x11c>
    4ddc:	f7 01       	movw	r30, r14
    4dde:	93 fd       	sbrc	r25, 3
    4de0:	85 91       	lpm	r24, Z+
    4de2:	93 ff       	sbrs	r25, 3
    4de4:	81 91       	ld	r24, Z+
    4de6:	7f 01       	movw	r14, r30
    4de8:	81 11       	cpse	r24, r1
    4dea:	b3 cf       	rjmp	.-154    	; 0x4d52 <vfprintf+0x82>
    4dec:	98 2f       	mov	r25, r24
    4dee:	9f 7d       	andi	r25, 0xDF	; 223
    4df0:	95 54       	subi	r25, 0x45	; 69
    4df2:	93 30       	cpi	r25, 0x03	; 3
    4df4:	28 f4       	brcc	.+10     	; 0x4e00 <vfprintf+0x130>
    4df6:	0c 5f       	subi	r16, 0xFC	; 252
    4df8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dfa:	9f e3       	ldi	r25, 0x3F	; 63
    4dfc:	99 83       	std	Y+1, r25	; 0x01
    4dfe:	0d c0       	rjmp	.+26     	; 0x4e1a <vfprintf+0x14a>
    4e00:	83 36       	cpi	r24, 0x63	; 99
    4e02:	31 f0       	breq	.+12     	; 0x4e10 <vfprintf+0x140>
    4e04:	83 37       	cpi	r24, 0x73	; 115
    4e06:	71 f0       	breq	.+28     	; 0x4e24 <vfprintf+0x154>
    4e08:	83 35       	cpi	r24, 0x53	; 83
    4e0a:	09 f0       	breq	.+2      	; 0x4e0e <vfprintf+0x13e>
    4e0c:	55 c0       	rjmp	.+170    	; 0x4eb8 <vfprintf+0x1e8>
    4e0e:	20 c0       	rjmp	.+64     	; 0x4e50 <vfprintf+0x180>
    4e10:	f8 01       	movw	r30, r16
    4e12:	80 81       	ld	r24, Z
    4e14:	89 83       	std	Y+1, r24	; 0x01
    4e16:	0e 5f       	subi	r16, 0xFE	; 254
    4e18:	1f 4f       	sbci	r17, 0xFF	; 255
    4e1a:	88 24       	eor	r8, r8
    4e1c:	83 94       	inc	r8
    4e1e:	91 2c       	mov	r9, r1
    4e20:	53 01       	movw	r10, r6
    4e22:	12 c0       	rjmp	.+36     	; 0x4e48 <vfprintf+0x178>
    4e24:	28 01       	movw	r4, r16
    4e26:	f2 e0       	ldi	r31, 0x02	; 2
    4e28:	4f 0e       	add	r4, r31
    4e2a:	51 1c       	adc	r5, r1
    4e2c:	f8 01       	movw	r30, r16
    4e2e:	a0 80       	ld	r10, Z
    4e30:	b1 80       	ldd	r11, Z+1	; 0x01
    4e32:	36 fe       	sbrs	r3, 6
    4e34:	03 c0       	rjmp	.+6      	; 0x4e3c <vfprintf+0x16c>
    4e36:	69 2d       	mov	r22, r9
    4e38:	70 e0       	ldi	r23, 0x00	; 0
    4e3a:	02 c0       	rjmp	.+4      	; 0x4e40 <vfprintf+0x170>
    4e3c:	6f ef       	ldi	r22, 0xFF	; 255
    4e3e:	7f ef       	ldi	r23, 0xFF	; 255
    4e40:	c5 01       	movw	r24, r10
    4e42:	4e d1       	rcall	.+668    	; 0x50e0 <strnlen>
    4e44:	4c 01       	movw	r8, r24
    4e46:	82 01       	movw	r16, r4
    4e48:	f3 2d       	mov	r31, r3
    4e4a:	ff 77       	andi	r31, 0x7F	; 127
    4e4c:	3f 2e       	mov	r3, r31
    4e4e:	15 c0       	rjmp	.+42     	; 0x4e7a <vfprintf+0x1aa>
    4e50:	28 01       	movw	r4, r16
    4e52:	22 e0       	ldi	r18, 0x02	; 2
    4e54:	42 0e       	add	r4, r18
    4e56:	51 1c       	adc	r5, r1
    4e58:	f8 01       	movw	r30, r16
    4e5a:	a0 80       	ld	r10, Z
    4e5c:	b1 80       	ldd	r11, Z+1	; 0x01
    4e5e:	36 fe       	sbrs	r3, 6
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <vfprintf+0x198>
    4e62:	69 2d       	mov	r22, r9
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <vfprintf+0x19c>
    4e68:	6f ef       	ldi	r22, 0xFF	; 255
    4e6a:	7f ef       	ldi	r23, 0xFF	; 255
    4e6c:	c5 01       	movw	r24, r10
    4e6e:	2d d1       	rcall	.+602    	; 0x50ca <strnlen_P>
    4e70:	4c 01       	movw	r8, r24
    4e72:	f3 2d       	mov	r31, r3
    4e74:	f0 68       	ori	r31, 0x80	; 128
    4e76:	3f 2e       	mov	r3, r31
    4e78:	82 01       	movw	r16, r4
    4e7a:	33 fc       	sbrc	r3, 3
    4e7c:	19 c0       	rjmp	.+50     	; 0x4eb0 <vfprintf+0x1e0>
    4e7e:	82 2d       	mov	r24, r2
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	88 16       	cp	r8, r24
    4e84:	99 06       	cpc	r9, r25
    4e86:	a0 f4       	brcc	.+40     	; 0x4eb0 <vfprintf+0x1e0>
    4e88:	b6 01       	movw	r22, r12
    4e8a:	80 e2       	ldi	r24, 0x20	; 32
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	33 d1       	rcall	.+614    	; 0x50f6 <fputc>
    4e90:	2a 94       	dec	r2
    4e92:	f5 cf       	rjmp	.-22     	; 0x4e7e <vfprintf+0x1ae>
    4e94:	f5 01       	movw	r30, r10
    4e96:	37 fc       	sbrc	r3, 7
    4e98:	85 91       	lpm	r24, Z+
    4e9a:	37 fe       	sbrs	r3, 7
    4e9c:	81 91       	ld	r24, Z+
    4e9e:	5f 01       	movw	r10, r30
    4ea0:	b6 01       	movw	r22, r12
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	28 d1       	rcall	.+592    	; 0x50f6 <fputc>
    4ea6:	21 10       	cpse	r2, r1
    4ea8:	2a 94       	dec	r2
    4eaa:	21 e0       	ldi	r18, 0x01	; 1
    4eac:	82 1a       	sub	r8, r18
    4eae:	91 08       	sbc	r9, r1
    4eb0:	81 14       	cp	r8, r1
    4eb2:	91 04       	cpc	r9, r1
    4eb4:	79 f7       	brne	.-34     	; 0x4e94 <vfprintf+0x1c4>
    4eb6:	e1 c0       	rjmp	.+450    	; 0x507a <vfprintf+0x3aa>
    4eb8:	84 36       	cpi	r24, 0x64	; 100
    4eba:	11 f0       	breq	.+4      	; 0x4ec0 <vfprintf+0x1f0>
    4ebc:	89 36       	cpi	r24, 0x69	; 105
    4ebe:	39 f5       	brne	.+78     	; 0x4f0e <vfprintf+0x23e>
    4ec0:	f8 01       	movw	r30, r16
    4ec2:	37 fe       	sbrs	r3, 7
    4ec4:	07 c0       	rjmp	.+14     	; 0x4ed4 <vfprintf+0x204>
    4ec6:	60 81       	ld	r22, Z
    4ec8:	71 81       	ldd	r23, Z+1	; 0x01
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	93 81       	ldd	r25, Z+3	; 0x03
    4ece:	0c 5f       	subi	r16, 0xFC	; 252
    4ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed2:	08 c0       	rjmp	.+16     	; 0x4ee4 <vfprintf+0x214>
    4ed4:	60 81       	ld	r22, Z
    4ed6:	71 81       	ldd	r23, Z+1	; 0x01
    4ed8:	07 2e       	mov	r0, r23
    4eda:	00 0c       	add	r0, r0
    4edc:	88 0b       	sbc	r24, r24
    4ede:	99 0b       	sbc	r25, r25
    4ee0:	0e 5f       	subi	r16, 0xFE	; 254
    4ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee4:	f3 2d       	mov	r31, r3
    4ee6:	ff 76       	andi	r31, 0x6F	; 111
    4ee8:	3f 2e       	mov	r3, r31
    4eea:	97 ff       	sbrs	r25, 7
    4eec:	09 c0       	rjmp	.+18     	; 0x4f00 <vfprintf+0x230>
    4eee:	90 95       	com	r25
    4ef0:	80 95       	com	r24
    4ef2:	70 95       	com	r23
    4ef4:	61 95       	neg	r22
    4ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    4efa:	9f 4f       	sbci	r25, 0xFF	; 255
    4efc:	f0 68       	ori	r31, 0x80	; 128
    4efe:	3f 2e       	mov	r3, r31
    4f00:	2a e0       	ldi	r18, 0x0A	; 10
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	a3 01       	movw	r20, r6
    4f06:	33 d1       	rcall	.+614    	; 0x516e <__ultoa_invert>
    4f08:	88 2e       	mov	r8, r24
    4f0a:	86 18       	sub	r8, r6
    4f0c:	44 c0       	rjmp	.+136    	; 0x4f96 <vfprintf+0x2c6>
    4f0e:	85 37       	cpi	r24, 0x75	; 117
    4f10:	31 f4       	brne	.+12     	; 0x4f1e <vfprintf+0x24e>
    4f12:	23 2d       	mov	r18, r3
    4f14:	2f 7e       	andi	r18, 0xEF	; 239
    4f16:	b2 2e       	mov	r11, r18
    4f18:	2a e0       	ldi	r18, 0x0A	; 10
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	25 c0       	rjmp	.+74     	; 0x4f68 <vfprintf+0x298>
    4f1e:	93 2d       	mov	r25, r3
    4f20:	99 7f       	andi	r25, 0xF9	; 249
    4f22:	b9 2e       	mov	r11, r25
    4f24:	8f 36       	cpi	r24, 0x6F	; 111
    4f26:	c1 f0       	breq	.+48     	; 0x4f58 <vfprintf+0x288>
    4f28:	18 f4       	brcc	.+6      	; 0x4f30 <vfprintf+0x260>
    4f2a:	88 35       	cpi	r24, 0x58	; 88
    4f2c:	79 f0       	breq	.+30     	; 0x4f4c <vfprintf+0x27c>
    4f2e:	ae c0       	rjmp	.+348    	; 0x508c <vfprintf+0x3bc>
    4f30:	80 37       	cpi	r24, 0x70	; 112
    4f32:	19 f0       	breq	.+6      	; 0x4f3a <vfprintf+0x26a>
    4f34:	88 37       	cpi	r24, 0x78	; 120
    4f36:	21 f0       	breq	.+8      	; 0x4f40 <vfprintf+0x270>
    4f38:	a9 c0       	rjmp	.+338    	; 0x508c <vfprintf+0x3bc>
    4f3a:	e9 2f       	mov	r30, r25
    4f3c:	e0 61       	ori	r30, 0x10	; 16
    4f3e:	be 2e       	mov	r11, r30
    4f40:	b4 fe       	sbrs	r11, 4
    4f42:	0d c0       	rjmp	.+26     	; 0x4f5e <vfprintf+0x28e>
    4f44:	fb 2d       	mov	r31, r11
    4f46:	f4 60       	ori	r31, 0x04	; 4
    4f48:	bf 2e       	mov	r11, r31
    4f4a:	09 c0       	rjmp	.+18     	; 0x4f5e <vfprintf+0x28e>
    4f4c:	34 fe       	sbrs	r3, 4
    4f4e:	0a c0       	rjmp	.+20     	; 0x4f64 <vfprintf+0x294>
    4f50:	29 2f       	mov	r18, r25
    4f52:	26 60       	ori	r18, 0x06	; 6
    4f54:	b2 2e       	mov	r11, r18
    4f56:	06 c0       	rjmp	.+12     	; 0x4f64 <vfprintf+0x294>
    4f58:	28 e0       	ldi	r18, 0x08	; 8
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	05 c0       	rjmp	.+10     	; 0x4f68 <vfprintf+0x298>
    4f5e:	20 e1       	ldi	r18, 0x10	; 16
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	02 c0       	rjmp	.+4      	; 0x4f68 <vfprintf+0x298>
    4f64:	20 e1       	ldi	r18, 0x10	; 16
    4f66:	32 e0       	ldi	r19, 0x02	; 2
    4f68:	f8 01       	movw	r30, r16
    4f6a:	b7 fe       	sbrs	r11, 7
    4f6c:	07 c0       	rjmp	.+14     	; 0x4f7c <vfprintf+0x2ac>
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	0c 5f       	subi	r16, 0xFC	; 252
    4f78:	1f 4f       	sbci	r17, 0xFF	; 255
    4f7a:	06 c0       	rjmp	.+12     	; 0x4f88 <vfprintf+0x2b8>
    4f7c:	60 81       	ld	r22, Z
    4f7e:	71 81       	ldd	r23, Z+1	; 0x01
    4f80:	80 e0       	ldi	r24, 0x00	; 0
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	0e 5f       	subi	r16, 0xFE	; 254
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	a3 01       	movw	r20, r6
    4f8a:	f1 d0       	rcall	.+482    	; 0x516e <__ultoa_invert>
    4f8c:	88 2e       	mov	r8, r24
    4f8e:	86 18       	sub	r8, r6
    4f90:	fb 2d       	mov	r31, r11
    4f92:	ff 77       	andi	r31, 0x7F	; 127
    4f94:	3f 2e       	mov	r3, r31
    4f96:	36 fe       	sbrs	r3, 6
    4f98:	0d c0       	rjmp	.+26     	; 0x4fb4 <vfprintf+0x2e4>
    4f9a:	23 2d       	mov	r18, r3
    4f9c:	2e 7f       	andi	r18, 0xFE	; 254
    4f9e:	a2 2e       	mov	r10, r18
    4fa0:	89 14       	cp	r8, r9
    4fa2:	58 f4       	brcc	.+22     	; 0x4fba <vfprintf+0x2ea>
    4fa4:	34 fe       	sbrs	r3, 4
    4fa6:	0b c0       	rjmp	.+22     	; 0x4fbe <vfprintf+0x2ee>
    4fa8:	32 fc       	sbrc	r3, 2
    4faa:	09 c0       	rjmp	.+18     	; 0x4fbe <vfprintf+0x2ee>
    4fac:	83 2d       	mov	r24, r3
    4fae:	8e 7e       	andi	r24, 0xEE	; 238
    4fb0:	a8 2e       	mov	r10, r24
    4fb2:	05 c0       	rjmp	.+10     	; 0x4fbe <vfprintf+0x2ee>
    4fb4:	b8 2c       	mov	r11, r8
    4fb6:	a3 2c       	mov	r10, r3
    4fb8:	03 c0       	rjmp	.+6      	; 0x4fc0 <vfprintf+0x2f0>
    4fba:	b8 2c       	mov	r11, r8
    4fbc:	01 c0       	rjmp	.+2      	; 0x4fc0 <vfprintf+0x2f0>
    4fbe:	b9 2c       	mov	r11, r9
    4fc0:	a4 fe       	sbrs	r10, 4
    4fc2:	0f c0       	rjmp	.+30     	; 0x4fe2 <vfprintf+0x312>
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e8 0d       	add	r30, r8
    4fc8:	f1 1d       	adc	r31, r1
    4fca:	80 81       	ld	r24, Z
    4fcc:	80 33       	cpi	r24, 0x30	; 48
    4fce:	21 f4       	brne	.+8      	; 0x4fd8 <vfprintf+0x308>
    4fd0:	9a 2d       	mov	r25, r10
    4fd2:	99 7e       	andi	r25, 0xE9	; 233
    4fd4:	a9 2e       	mov	r10, r25
    4fd6:	09 c0       	rjmp	.+18     	; 0x4fea <vfprintf+0x31a>
    4fd8:	a2 fe       	sbrs	r10, 2
    4fda:	06 c0       	rjmp	.+12     	; 0x4fe8 <vfprintf+0x318>
    4fdc:	b3 94       	inc	r11
    4fde:	b3 94       	inc	r11
    4fe0:	04 c0       	rjmp	.+8      	; 0x4fea <vfprintf+0x31a>
    4fe2:	8a 2d       	mov	r24, r10
    4fe4:	86 78       	andi	r24, 0x86	; 134
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <vfprintf+0x31a>
    4fe8:	b3 94       	inc	r11
    4fea:	a3 fc       	sbrc	r10, 3
    4fec:	10 c0       	rjmp	.+32     	; 0x500e <vfprintf+0x33e>
    4fee:	a0 fe       	sbrs	r10, 0
    4ff0:	06 c0       	rjmp	.+12     	; 0x4ffe <vfprintf+0x32e>
    4ff2:	b2 14       	cp	r11, r2
    4ff4:	80 f4       	brcc	.+32     	; 0x5016 <vfprintf+0x346>
    4ff6:	28 0c       	add	r2, r8
    4ff8:	92 2c       	mov	r9, r2
    4ffa:	9b 18       	sub	r9, r11
    4ffc:	0d c0       	rjmp	.+26     	; 0x5018 <vfprintf+0x348>
    4ffe:	b2 14       	cp	r11, r2
    5000:	58 f4       	brcc	.+22     	; 0x5018 <vfprintf+0x348>
    5002:	b6 01       	movw	r22, r12
    5004:	80 e2       	ldi	r24, 0x20	; 32
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	76 d0       	rcall	.+236    	; 0x50f6 <fputc>
    500a:	b3 94       	inc	r11
    500c:	f8 cf       	rjmp	.-16     	; 0x4ffe <vfprintf+0x32e>
    500e:	b2 14       	cp	r11, r2
    5010:	18 f4       	brcc	.+6      	; 0x5018 <vfprintf+0x348>
    5012:	2b 18       	sub	r2, r11
    5014:	02 c0       	rjmp	.+4      	; 0x501a <vfprintf+0x34a>
    5016:	98 2c       	mov	r9, r8
    5018:	21 2c       	mov	r2, r1
    501a:	a4 fe       	sbrs	r10, 4
    501c:	0f c0       	rjmp	.+30     	; 0x503c <vfprintf+0x36c>
    501e:	b6 01       	movw	r22, r12
    5020:	80 e3       	ldi	r24, 0x30	; 48
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	68 d0       	rcall	.+208    	; 0x50f6 <fputc>
    5026:	a2 fe       	sbrs	r10, 2
    5028:	16 c0       	rjmp	.+44     	; 0x5056 <vfprintf+0x386>
    502a:	a1 fc       	sbrc	r10, 1
    502c:	03 c0       	rjmp	.+6      	; 0x5034 <vfprintf+0x364>
    502e:	88 e7       	ldi	r24, 0x78	; 120
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	02 c0       	rjmp	.+4      	; 0x5038 <vfprintf+0x368>
    5034:	88 e5       	ldi	r24, 0x58	; 88
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	b6 01       	movw	r22, r12
    503a:	0c c0       	rjmp	.+24     	; 0x5054 <vfprintf+0x384>
    503c:	8a 2d       	mov	r24, r10
    503e:	86 78       	andi	r24, 0x86	; 134
    5040:	51 f0       	breq	.+20     	; 0x5056 <vfprintf+0x386>
    5042:	a1 fe       	sbrs	r10, 1
    5044:	02 c0       	rjmp	.+4      	; 0x504a <vfprintf+0x37a>
    5046:	8b e2       	ldi	r24, 0x2B	; 43
    5048:	01 c0       	rjmp	.+2      	; 0x504c <vfprintf+0x37c>
    504a:	80 e2       	ldi	r24, 0x20	; 32
    504c:	a7 fc       	sbrc	r10, 7
    504e:	8d e2       	ldi	r24, 0x2D	; 45
    5050:	b6 01       	movw	r22, r12
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	50 d0       	rcall	.+160    	; 0x50f6 <fputc>
    5056:	89 14       	cp	r8, r9
    5058:	30 f4       	brcc	.+12     	; 0x5066 <vfprintf+0x396>
    505a:	b6 01       	movw	r22, r12
    505c:	80 e3       	ldi	r24, 0x30	; 48
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	4a d0       	rcall	.+148    	; 0x50f6 <fputc>
    5062:	9a 94       	dec	r9
    5064:	f8 cf       	rjmp	.-16     	; 0x5056 <vfprintf+0x386>
    5066:	8a 94       	dec	r8
    5068:	f3 01       	movw	r30, r6
    506a:	e8 0d       	add	r30, r8
    506c:	f1 1d       	adc	r31, r1
    506e:	80 81       	ld	r24, Z
    5070:	b6 01       	movw	r22, r12
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	40 d0       	rcall	.+128    	; 0x50f6 <fputc>
    5076:	81 10       	cpse	r8, r1
    5078:	f6 cf       	rjmp	.-20     	; 0x5066 <vfprintf+0x396>
    507a:	22 20       	and	r2, r2
    507c:	09 f4       	brne	.+2      	; 0x5080 <vfprintf+0x3b0>
    507e:	4e ce       	rjmp	.-868    	; 0x4d1c <vfprintf+0x4c>
    5080:	b6 01       	movw	r22, r12
    5082:	80 e2       	ldi	r24, 0x20	; 32
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	37 d0       	rcall	.+110    	; 0x50f6 <fputc>
    5088:	2a 94       	dec	r2
    508a:	f7 cf       	rjmp	.-18     	; 0x507a <vfprintf+0x3aa>
    508c:	f6 01       	movw	r30, r12
    508e:	86 81       	ldd	r24, Z+6	; 0x06
    5090:	97 81       	ldd	r25, Z+7	; 0x07
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <vfprintf+0x3c8>
    5094:	8f ef       	ldi	r24, 0xFF	; 255
    5096:	9f ef       	ldi	r25, 0xFF	; 255
    5098:	2b 96       	adiw	r28, 0x0b	; 11
    509a:	0f b6       	in	r0, 0x3f	; 63
    509c:	f8 94       	cli
    509e:	de bf       	out	0x3e, r29	; 62
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	cd bf       	out	0x3d, r28	; 61
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	ff 90       	pop	r15
    50ae:	ef 90       	pop	r14
    50b0:	df 90       	pop	r13
    50b2:	cf 90       	pop	r12
    50b4:	bf 90       	pop	r11
    50b6:	af 90       	pop	r10
    50b8:	9f 90       	pop	r9
    50ba:	8f 90       	pop	r8
    50bc:	7f 90       	pop	r7
    50be:	6f 90       	pop	r6
    50c0:	5f 90       	pop	r5
    50c2:	4f 90       	pop	r4
    50c4:	3f 90       	pop	r3
    50c6:	2f 90       	pop	r2
    50c8:	08 95       	ret

000050ca <strnlen_P>:
    50ca:	fc 01       	movw	r30, r24
    50cc:	05 90       	lpm	r0, Z+
    50ce:	61 50       	subi	r22, 0x01	; 1
    50d0:	70 40       	sbci	r23, 0x00	; 0
    50d2:	01 10       	cpse	r0, r1
    50d4:	d8 f7       	brcc	.-10     	; 0x50cc <strnlen_P+0x2>
    50d6:	80 95       	com	r24
    50d8:	90 95       	com	r25
    50da:	8e 0f       	add	r24, r30
    50dc:	9f 1f       	adc	r25, r31
    50de:	08 95       	ret

000050e0 <strnlen>:
    50e0:	fc 01       	movw	r30, r24
    50e2:	61 50       	subi	r22, 0x01	; 1
    50e4:	70 40       	sbci	r23, 0x00	; 0
    50e6:	01 90       	ld	r0, Z+
    50e8:	01 10       	cpse	r0, r1
    50ea:	d8 f7       	brcc	.-10     	; 0x50e2 <strnlen+0x2>
    50ec:	80 95       	com	r24
    50ee:	90 95       	com	r25
    50f0:	8e 0f       	add	r24, r30
    50f2:	9f 1f       	adc	r25, r31
    50f4:	08 95       	ret

000050f6 <fputc>:
    50f6:	0f 93       	push	r16
    50f8:	1f 93       	push	r17
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	fb 01       	movw	r30, r22
    5100:	23 81       	ldd	r18, Z+3	; 0x03
    5102:	21 fd       	sbrc	r18, 1
    5104:	03 c0       	rjmp	.+6      	; 0x510c <fputc+0x16>
    5106:	8f ef       	ldi	r24, 0xFF	; 255
    5108:	9f ef       	ldi	r25, 0xFF	; 255
    510a:	2c c0       	rjmp	.+88     	; 0x5164 <fputc+0x6e>
    510c:	22 ff       	sbrs	r18, 2
    510e:	16 c0       	rjmp	.+44     	; 0x513c <fputc+0x46>
    5110:	46 81       	ldd	r20, Z+6	; 0x06
    5112:	57 81       	ldd	r21, Z+7	; 0x07
    5114:	24 81       	ldd	r18, Z+4	; 0x04
    5116:	35 81       	ldd	r19, Z+5	; 0x05
    5118:	42 17       	cp	r20, r18
    511a:	53 07       	cpc	r21, r19
    511c:	44 f4       	brge	.+16     	; 0x512e <fputc+0x38>
    511e:	a0 81       	ld	r26, Z
    5120:	b1 81       	ldd	r27, Z+1	; 0x01
    5122:	9d 01       	movw	r18, r26
    5124:	2f 5f       	subi	r18, 0xFF	; 255
    5126:	3f 4f       	sbci	r19, 0xFF	; 255
    5128:	31 83       	std	Z+1, r19	; 0x01
    512a:	20 83       	st	Z, r18
    512c:	8c 93       	st	X, r24
    512e:	26 81       	ldd	r18, Z+6	; 0x06
    5130:	37 81       	ldd	r19, Z+7	; 0x07
    5132:	2f 5f       	subi	r18, 0xFF	; 255
    5134:	3f 4f       	sbci	r19, 0xFF	; 255
    5136:	37 83       	std	Z+7, r19	; 0x07
    5138:	26 83       	std	Z+6, r18	; 0x06
    513a:	14 c0       	rjmp	.+40     	; 0x5164 <fputc+0x6e>
    513c:	8b 01       	movw	r16, r22
    513e:	ec 01       	movw	r28, r24
    5140:	fb 01       	movw	r30, r22
    5142:	00 84       	ldd	r0, Z+8	; 0x08
    5144:	f1 85       	ldd	r31, Z+9	; 0x09
    5146:	e0 2d       	mov	r30, r0
    5148:	19 95       	eicall
    514a:	89 2b       	or	r24, r25
    514c:	e1 f6       	brne	.-72     	; 0x5106 <fputc+0x10>
    514e:	d8 01       	movw	r26, r16
    5150:	16 96       	adiw	r26, 0x06	; 6
    5152:	8d 91       	ld	r24, X+
    5154:	9c 91       	ld	r25, X
    5156:	17 97       	sbiw	r26, 0x07	; 7
    5158:	01 96       	adiw	r24, 0x01	; 1
    515a:	17 96       	adiw	r26, 0x07	; 7
    515c:	9c 93       	st	X, r25
    515e:	8e 93       	st	-X, r24
    5160:	16 97       	sbiw	r26, 0x06	; 6
    5162:	ce 01       	movw	r24, r28
    5164:	df 91       	pop	r29
    5166:	cf 91       	pop	r28
    5168:	1f 91       	pop	r17
    516a:	0f 91       	pop	r16
    516c:	08 95       	ret

0000516e <__ultoa_invert>:
    516e:	fa 01       	movw	r30, r20
    5170:	aa 27       	eor	r26, r26
    5172:	28 30       	cpi	r18, 0x08	; 8
    5174:	51 f1       	breq	.+84     	; 0x51ca <__ultoa_invert+0x5c>
    5176:	20 31       	cpi	r18, 0x10	; 16
    5178:	81 f1       	breq	.+96     	; 0x51da <__ultoa_invert+0x6c>
    517a:	e8 94       	clt
    517c:	6f 93       	push	r22
    517e:	6e 7f       	andi	r22, 0xFE	; 254
    5180:	6e 5f       	subi	r22, 0xFE	; 254
    5182:	7f 4f       	sbci	r23, 0xFF	; 255
    5184:	8f 4f       	sbci	r24, 0xFF	; 255
    5186:	9f 4f       	sbci	r25, 0xFF	; 255
    5188:	af 4f       	sbci	r26, 0xFF	; 255
    518a:	b1 e0       	ldi	r27, 0x01	; 1
    518c:	3e d0       	rcall	.+124    	; 0x520a <__ultoa_invert+0x9c>
    518e:	b4 e0       	ldi	r27, 0x04	; 4
    5190:	3c d0       	rcall	.+120    	; 0x520a <__ultoa_invert+0x9c>
    5192:	67 0f       	add	r22, r23
    5194:	78 1f       	adc	r23, r24
    5196:	89 1f       	adc	r24, r25
    5198:	9a 1f       	adc	r25, r26
    519a:	a1 1d       	adc	r26, r1
    519c:	68 0f       	add	r22, r24
    519e:	79 1f       	adc	r23, r25
    51a0:	8a 1f       	adc	r24, r26
    51a2:	91 1d       	adc	r25, r1
    51a4:	a1 1d       	adc	r26, r1
    51a6:	6a 0f       	add	r22, r26
    51a8:	71 1d       	adc	r23, r1
    51aa:	81 1d       	adc	r24, r1
    51ac:	91 1d       	adc	r25, r1
    51ae:	a1 1d       	adc	r26, r1
    51b0:	20 d0       	rcall	.+64     	; 0x51f2 <__ultoa_invert+0x84>
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <__ultoa_invert+0x48>
    51b4:	68 94       	set
    51b6:	3f 91       	pop	r19
    51b8:	2a e0       	ldi	r18, 0x0A	; 10
    51ba:	26 9f       	mul	r18, r22
    51bc:	11 24       	eor	r1, r1
    51be:	30 19       	sub	r19, r0
    51c0:	30 5d       	subi	r19, 0xD0	; 208
    51c2:	31 93       	st	Z+, r19
    51c4:	de f6       	brtc	.-74     	; 0x517c <__ultoa_invert+0xe>
    51c6:	cf 01       	movw	r24, r30
    51c8:	08 95       	ret
    51ca:	46 2f       	mov	r20, r22
    51cc:	47 70       	andi	r20, 0x07	; 7
    51ce:	40 5d       	subi	r20, 0xD0	; 208
    51d0:	41 93       	st	Z+, r20
    51d2:	b3 e0       	ldi	r27, 0x03	; 3
    51d4:	0f d0       	rcall	.+30     	; 0x51f4 <__ultoa_invert+0x86>
    51d6:	c9 f7       	brne	.-14     	; 0x51ca <__ultoa_invert+0x5c>
    51d8:	f6 cf       	rjmp	.-20     	; 0x51c6 <__ultoa_invert+0x58>
    51da:	46 2f       	mov	r20, r22
    51dc:	4f 70       	andi	r20, 0x0F	; 15
    51de:	40 5d       	subi	r20, 0xD0	; 208
    51e0:	4a 33       	cpi	r20, 0x3A	; 58
    51e2:	18 f0       	brcs	.+6      	; 0x51ea <__ultoa_invert+0x7c>
    51e4:	49 5d       	subi	r20, 0xD9	; 217
    51e6:	31 fd       	sbrc	r19, 1
    51e8:	40 52       	subi	r20, 0x20	; 32
    51ea:	41 93       	st	Z+, r20
    51ec:	02 d0       	rcall	.+4      	; 0x51f2 <__ultoa_invert+0x84>
    51ee:	a9 f7       	brne	.-22     	; 0x51da <__ultoa_invert+0x6c>
    51f0:	ea cf       	rjmp	.-44     	; 0x51c6 <__ultoa_invert+0x58>
    51f2:	b4 e0       	ldi	r27, 0x04	; 4
    51f4:	a6 95       	lsr	r26
    51f6:	97 95       	ror	r25
    51f8:	87 95       	ror	r24
    51fa:	77 95       	ror	r23
    51fc:	67 95       	ror	r22
    51fe:	ba 95       	dec	r27
    5200:	c9 f7       	brne	.-14     	; 0x51f4 <__ultoa_invert+0x86>
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	61 05       	cpc	r22, r1
    5206:	71 05       	cpc	r23, r1
    5208:	08 95       	ret
    520a:	9b 01       	movw	r18, r22
    520c:	ac 01       	movw	r20, r24
    520e:	0a 2e       	mov	r0, r26
    5210:	06 94       	lsr	r0
    5212:	57 95       	ror	r21
    5214:	47 95       	ror	r20
    5216:	37 95       	ror	r19
    5218:	27 95       	ror	r18
    521a:	ba 95       	dec	r27
    521c:	c9 f7       	brne	.-14     	; 0x5210 <__ultoa_invert+0xa2>
    521e:	62 0f       	add	r22, r18
    5220:	73 1f       	adc	r23, r19
    5222:	84 1f       	adc	r24, r20
    5224:	95 1f       	adc	r25, r21
    5226:	a0 1d       	adc	r26, r0
    5228:	08 95       	ret

0000522a <_exit>:
    522a:	f8 94       	cli

0000522c <__stop_program>:
    522c:	ff cf       	rjmp	.-2      	; 0x522c <__stop_program>
