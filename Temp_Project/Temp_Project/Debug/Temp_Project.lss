
Temp_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000067e  00800200  00005240  000052d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000011d3  0080087e  0080087e  00005952  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae8  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d8b6  00000000  00000000  00006508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003917  00000000  00000000  00013dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a9c  00000000  00000000  000176d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021bc  00000000  00000000  0001e174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040c8  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b57d  00000000  00000000  000243f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  0002f975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c2       	rjmp	.+1038   	; 0x410 <__ctors_end>
       2:	00 00       	nop
       4:	25 c2       	rjmp	.+1098   	; 0x450 <__bad_interrupt>
       6:	00 00       	nop
       8:	23 c2       	rjmp	.+1094   	; 0x450 <__bad_interrupt>
       a:	00 00       	nop
       c:	21 c2       	rjmp	.+1090   	; 0x450 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c2       	rjmp	.+1086   	; 0x450 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c2       	rjmp	.+1082   	; 0x450 <__bad_interrupt>
      16:	00 00       	nop
      18:	1b c2       	rjmp	.+1078   	; 0x450 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	19 c2       	rjmp	.+1074   	; 0x450 <__bad_interrupt>
      1e:	00 00       	nop
      20:	17 c2       	rjmp	.+1070   	; 0x450 <__bad_interrupt>
      22:	00 00       	nop
      24:	15 c2       	rjmp	.+1066   	; 0x450 <__bad_interrupt>
      26:	00 00       	nop
      28:	13 c2       	rjmp	.+1062   	; 0x450 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c2       	rjmp	.+1058   	; 0x450 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e1 c7       	rjmp	.+4034   	; 0xff4 <__vector_12>
      32:	00 00       	nop
      34:	0d c2       	rjmp	.+1050   	; 0x450 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c2       	rjmp	.+1046   	; 0x450 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c2       	rjmp	.+1042   	; 0x450 <__bad_interrupt>
      3e:	00 00       	nop
      40:	07 c2       	rjmp	.+1038   	; 0x450 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c2       	rjmp	.+1034   	; 0x450 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c2       	rjmp	.+1030   	; 0x450 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c2       	rjmp	.+1026   	; 0x450 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c1       	rjmp	.+1022   	; 0x450 <__bad_interrupt>
      52:	00 00       	nop
      54:	fd c1       	rjmp	.+1018   	; 0x450 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c1       	rjmp	.+1014   	; 0x450 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f9 c1       	rjmp	.+1010   	; 0x450 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f7 c1       	rjmp	.+1006   	; 0x450 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_25>
      68:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__vector_26>
      6c:	f1 c1       	rjmp	.+994    	; 0x450 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ef c1       	rjmp	.+990    	; 0x450 <__bad_interrupt>
      72:	00 00       	nop
      74:	ed c1       	rjmp	.+986    	; 0x450 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c1       	rjmp	.+982    	; 0x450 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c1       	rjmp	.+978    	; 0x450 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e7 c1       	rjmp	.+974    	; 0x450 <__bad_interrupt>
      82:	00 00       	nop
      84:	e5 c1       	rjmp	.+970    	; 0x450 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c1       	rjmp	.+966    	; 0x450 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 c1       	rjmp	.+962    	; 0x450 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__vector_36>
      94:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__vector_37>
      98:	db c1       	rjmp	.+950    	; 0x450 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 95 21 	jmp	0x432a	; 0x432a <__vector_39>
      a0:	d7 c1       	rjmp	.+942    	; 0x450 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d5 c1       	rjmp	.+938    	; 0x450 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d3 c1       	rjmp	.+934    	; 0x450 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d1 c1       	rjmp	.+930    	; 0x450 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cf c1       	rjmp	.+926    	; 0x450 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cd c1       	rjmp	.+922    	; 0x450 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cb c1       	rjmp	.+918    	; 0x450 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c9 c1       	rjmp	.+914    	; 0x450 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c7 c1       	rjmp	.+910    	; 0x450 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c5 c1       	rjmp	.+906    	; 0x450 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c3 c1       	rjmp	.+902    	; 0x450 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__vector_51>
      d0:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__vector_52>
      d4:	bd c1       	rjmp	.+890    	; 0x450 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__vector_54>
      dc:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__vector_55>
      e0:	b7 c1       	rjmp	.+878    	; 0x450 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	b7 21       	and	r27, r7
      fa:	27 22       	and	r2, r23
      fc:	27 22       	and	r2, r23
      fe:	27 22       	and	r2, r23
     100:	27 22       	and	r2, r23
     102:	27 22       	and	r2, r23
     104:	27 22       	and	r2, r23
     106:	27 22       	and	r2, r23
     108:	b7 21       	and	r27, r7
     10a:	27 22       	and	r2, r23
     10c:	27 22       	and	r2, r23
     10e:	27 22       	and	r2, r23
     110:	27 22       	and	r2, r23
     112:	27 22       	and	r2, r23
     114:	27 22       	and	r2, r23
     116:	27 22       	and	r2, r23
     118:	b9 21       	and	r27, r9
     11a:	27 22       	and	r2, r23
     11c:	27 22       	and	r2, r23
     11e:	27 22       	and	r2, r23
     120:	27 22       	and	r2, r23
     122:	27 22       	and	r2, r23
     124:	27 22       	and	r2, r23
     126:	27 22       	and	r2, r23
     128:	27 22       	and	r2, r23
     12a:	27 22       	and	r2, r23
     12c:	27 22       	and	r2, r23
     12e:	27 22       	and	r2, r23
     130:	27 22       	and	r2, r23
     132:	27 22       	and	r2, r23
     134:	27 22       	and	r2, r23
     136:	27 22       	and	r2, r23
     138:	b9 21       	and	r27, r9
     13a:	27 22       	and	r2, r23
     13c:	27 22       	and	r2, r23
     13e:	27 22       	and	r2, r23
     140:	27 22       	and	r2, r23
     142:	27 22       	and	r2, r23
     144:	27 22       	and	r2, r23
     146:	27 22       	and	r2, r23
     148:	27 22       	and	r2, r23
     14a:	27 22       	and	r2, r23
     14c:	27 22       	and	r2, r23
     14e:	27 22       	and	r2, r23
     150:	27 22       	and	r2, r23
     152:	27 22       	and	r2, r23
     154:	27 22       	and	r2, r23
     156:	27 22       	and	r2, r23
     158:	23 22       	and	r2, r19
     15a:	27 22       	and	r2, r23
     15c:	27 22       	and	r2, r23
     15e:	27 22       	and	r2, r23
     160:	27 22       	and	r2, r23
     162:	27 22       	and	r2, r23
     164:	27 22       	and	r2, r23
     166:	27 22       	and	r2, r23
     168:	ee 21       	and	r30, r14
     16a:	27 22       	and	r2, r23
     16c:	27 22       	and	r2, r23
     16e:	27 22       	and	r2, r23
     170:	27 22       	and	r2, r23
     172:	27 22       	and	r2, r23
     174:	27 22       	and	r2, r23
     176:	27 22       	and	r2, r23
     178:	27 22       	and	r2, r23
     17a:	27 22       	and	r2, r23
     17c:	27 22       	and	r2, r23
     17e:	27 22       	and	r2, r23
     180:	27 22       	and	r2, r23
     182:	27 22       	and	r2, r23
     184:	27 22       	and	r2, r23
     186:	27 22       	and	r2, r23
     188:	e2 21       	and	r30, r2
     18a:	27 22       	and	r2, r23
     18c:	27 22       	and	r2, r23
     18e:	27 22       	and	r2, r23
     190:	27 22       	and	r2, r23
     192:	27 22       	and	r2, r23
     194:	27 22       	and	r2, r23
     196:	27 22       	and	r2, r23
     198:	06 22       	and	r0, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	03 e5       	ldi	r16, 0x53	; 83
     19c:	18 e1       	ldi	r17, 0x18	; 24
     19e:	0f 2e       	mov	r0, r31
     1a0:	fb e7       	ldi	r31, 0x7B	; 123
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e1       	ldi	r31, 0x18	; 24
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	7a d5       	rcall	.+2804   	; 0xcc0 <uxListRemove>
     1cc:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 48 18 	sts	0x1848, r24	; 0x801848 <uxCurrentNumberOfTasks>
     1d6:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	d6 d4       	rcall	.+2476   	; 0xb96 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	d4 d4       	rcall	.+2472   	; 0xb96 <vPortFree>
     1ee:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	35 d6       	rcall	.+3178   	; 0xe6a <vPortYield>
     200:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <pxCurrentTimerList>
     22a:	f0 91 aa 18 	lds	r31, 0x18AA	; 0x8018aa <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d9 c0       	rjmp	.+434    	; 0x3e8 <prvTimerTask+0x1e2>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
     25c:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <pxCurrentTimerList>
     260:	f0 91 aa 18 	lds	r31, 0x18AA	; 0x8018aa <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	26 d5       	rcall	.+2636   	; 0xcc0 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 c6 14 	call	0x298c	; 0x298c <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
     2d0:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
     2d4:	0e 94 4f 0b 	call	0x169e	; 0x169e <vQueueWaitForMessageRestricted>
     2d8:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	c4 d5       	rcall	.+2952   	; 0xe6a <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	dd d4       	rcall	.+2490   	; 0xcc0 <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 c6 14 	call	0x298c	; 0x298c <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 c6 14 	call	0x298c	; 0x298c <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	e8 d3       	rcall	.+2000   	; 0xb96 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
     3da:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
     3de:	0e 94 0a 0a 	call	0x1414	; 0x1414 <xQueueReceive>
     3e2:	81 11       	cpse	r24, r1
     3e4:	82 cf       	rjmp	.-252    	; 0x2ea <prvTimerTask+0xe4>
     3e6:	1f cf       	rjmp	.-450    	; 0x226 <prvTimerTask+0x20>
     3e8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskSuspendAll>
     3ec:	c4 01       	movw	r24, r8
     3ee:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <prvSampleTimeNow>
     3f2:	8c 01       	movw	r16, r24
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	81 11       	cpse	r24, r1
     3f8:	75 cf       	rjmp	.-278    	; 0x2e4 <prvTimerTask+0xde>
     3fa:	e0 91 a7 18 	lds	r30, 0x18A7	; 0x8018a7 <pxOverflowTimerList>
     3fe:	f0 91 a8 18 	lds	r31, 0x18A8	; 0x8018a8 <pxOverflowTimerList+0x1>
     402:	80 81       	ld	r24, Z
     404:	44 2d       	mov	r20, r4
     406:	81 11       	cpse	r24, r1
     408:	45 2d       	mov	r20, r5
     40a:	ae 2c       	mov	r10, r14
     40c:	bf 2c       	mov	r11, r15
     40e:	5b cf       	rjmp	.-330    	; 0x2c6 <prvTimerTask+0xc0>

00000410 <__ctors_end>:
     410:	11 24       	eor	r1, r1
     412:	1f be       	out	0x3f, r1	; 63
     414:	cf ef       	ldi	r28, 0xFF	; 255
     416:	d1 e2       	ldi	r29, 0x21	; 33
     418:	de bf       	out	0x3e, r29	; 62
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	00 e0       	ldi	r16, 0x00	; 0
     41e:	0c bf       	out	0x3c, r16	; 60

00000420 <__do_copy_data>:
     420:	18 e0       	ldi	r17, 0x08	; 8
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b2 e0       	ldi	r27, 0x02	; 2
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f2 e5       	ldi	r31, 0x52	; 82
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	0b bf       	out	0x3b, r16	; 59
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__do_copy_data+0x14>
     430:	07 90       	elpm	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	ae 37       	cpi	r26, 0x7E	; 126
     436:	b1 07       	cpc	r27, r17
     438:	d9 f7       	brne	.-10     	; 0x430 <__do_copy_data+0x10>

0000043a <__do_clear_bss>:
     43a:	2a e1       	ldi	r18, 0x1A	; 26
     43c:	ae e7       	ldi	r26, 0x7E	; 126
     43e:	b8 e0       	ldi	r27, 0x08	; 8
     440:	01 c0       	rjmp	.+2      	; 0x444 <.do_clear_bss_start>

00000442 <.do_clear_bss_loop>:
     442:	1d 92       	st	X+, r1

00000444 <.do_clear_bss_start>:
     444:	a1 35       	cpi	r26, 0x51	; 81
     446:	b2 07       	cpc	r27, r18
     448:	e1 f7       	brne	.-8      	; 0x442 <.do_clear_bss_loop>
     44a:	02 d2       	rcall	.+1028   	; 0x850 <main>
     44c:	0c 94 1e 29 	jmp	0x523c	; 0x523c <_exit>

00000450 <__bad_interrupt>:
     450:	d7 cd       	rjmp	.-1106   	; 0x0 <__vectors>

00000452 <allTasks>:

}

void allTasks()
{
	lorawanDevStart();
     452:	4f d1       	rcall	.+670    	; 0x6f2 <lorawanDevStart>
	
	for (;;)
	{
		
		vTaskDelay(5000/ portTICK_PERIOD_MS);
     454:	88 e3       	ldi	r24, 0x38	; 56
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
		xSemaphoreGive(co2Semaphore);
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <co2Semaphore>
     46a:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <co2Semaphore+0x1>
     46e:	06 d7       	rcall	.+3596   	; 0x127c <xQueueGenericSend>
		vTaskDelay(5000/ portTICK_PERIOD_MS);
     470:	88 e3       	ldi	r24, 0x38	; 56
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
		xSemaphoreGive(temperatureHumiditySemaphore);
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <temperatureHumiditySemaphore>
     486:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <temperatureHumiditySemaphore+0x1>
     48a:	f8 d6       	rcall	.+3568   	; 0x127c <xQueueGenericSend>
		vTaskDelay(5000/ portTICK_PERIOD_MS);
     48c:	88 e3       	ldi	r24, 0x38	; 56
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
		xSemaphoreGive(fillPayloadQueueSemaphore);
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <fillPayloadQueueSemaphore>
     4a2:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <fillPayloadQueueSemaphore+0x1>
     4a6:	ea d6       	rcall	.+3540   	; 0x127c <xQueueGenericSend>
		vTaskDelay(5000/ portTICK_PERIOD_MS);
     4a8:	88 e3       	ldi	r24, 0x38	; 56
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
		xSemaphoreGive(lorawanSemaphore);
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <lorawanSemaphore>
     4be:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <lorawanSemaphore+0x1>
     4c2:	dc d6       	rcall	.+3512   	; 0x127c <xQueueGenericSend>
		vTaskDelay(280000 / portTICK_PERIOD_MS);
     4c4:	8c e5       	ldi	r24, 0x5C	; 92
     4c6:	94 e4       	ldi	r25, 0x44	; 68
     4c8:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
     4cc:	c3 cf       	rjmp	.-122    	; 0x454 <allTasks+0x2>

000004ce <getTemperatureHumidity_Task>:
	{
		if (xSemaphoreTake(temperatureHumiditySemaphore,portMAX_DELAY))
		{
			temperatureHumidity_measure();
			
			temperature.data_type = 0;
     4ce:	0b e2       	ldi	r16, 0x2B	; 43
     4d0:	1a e1       	ldi	r17, 0x1A	; 26
			temperature.value = temperatureGetValue();
			
			humidity.data_type = 1;
     4d2:	ce e2       	ldi	r28, 0x2E	; 46
     4d4:	da e1       	ldi	r29, 0x1A	; 26
     4d6:	bb 24       	eor	r11, r11
     4d8:	b3 94       	inc	r11
			humidity.value = humidityGetValue();
			
			printf("temperature = %d \n", temperature.value);
     4da:	0f 2e       	mov	r0, r31
     4dc:	fe e6       	ldi	r31, 0x6E	; 110
     4de:	cf 2e       	mov	r12, r31
     4e0:	f2 e0       	ldi	r31, 0x02	; 2
     4e2:	df 2e       	mov	r13, r31
     4e4:	f0 2d       	mov	r31, r0
			printf("humidity = %d \n", humidity.value);
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f1 e8       	ldi	r31, 0x81	; 129
     4ea:	ef 2e       	mov	r14, r31
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	ff 2e       	mov	r15, r31
     4f0:	f0 2d       	mov	r31, r0
void getTemperatureHumidity_Task(void *pvParameters)
{
    
	for( ;; )
	{
		if (xSemaphoreTake(temperatureHumiditySemaphore,portMAX_DELAY))
     4f2:	6f ef       	ldi	r22, 0xFF	; 255
     4f4:	7f ef       	ldi	r23, 0xFF	; 255
     4f6:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <temperatureHumiditySemaphore>
     4fa:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <temperatureHumiditySemaphore+0x1>
     4fe:	0e 94 93 0a 	call	0x1526	; 0x1526 <xQueueSemaphoreTake>
     502:	88 23       	and	r24, r24
     504:	29 f1       	breq	.+74     	; 0x550 <getTemperatureHumidity_Task+0x82>
		{
			temperatureHumidity_measure();
     506:	02 d2       	rcall	.+1028   	; 0x90c <temperatureHumidity_measure>
			
			temperature.data_type = 0;
     508:	f8 01       	movw	r30, r16
			temperature.value = temperatureGetValue();
     50a:	10 82       	st	Z, r1
     50c:	22 d2       	rcall	.+1092   	; 0x952 <temperatureGetValue>
     50e:	f8 01       	movw	r30, r16
     510:	92 83       	std	Z+2, r25	; 0x02
			
			humidity.data_type = 1;
     512:	81 83       	std	Z+1, r24	; 0x01
			humidity.value = humidityGetValue();
     514:	b8 82       	st	Y, r11
     516:	20 d2       	rcall	.+1088   	; 0x958 <humidityGetValue>
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	89 83       	std	Y+1, r24	; 0x01
			
			printf("temperature = %d \n", temperature.value);
     51c:	f8 01       	movw	r30, r16
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	8f 93       	push	r24
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	8f 93       	push	r24
     526:	df 92       	push	r13
     528:	cf 92       	push	r12
     52a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <printf>
			printf("humidity = %d \n", humidity.value);
     52e:	8a 81       	ldd	r24, Y+2	; 0x02
     530:	8f 93       	push	r24
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	8f 93       	push	r24
     536:	ff 92       	push	r15
     538:	ef 92       	push	r14
     53a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <printf>
     53e:	8d b7       	in	r24, 0x3d	; 61
     540:	9e b7       	in	r25, 0x3e	; 62
     542:	08 96       	adiw	r24, 0x08	; 8
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	9e bf       	out	0x3e, r25	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	d1 cf       	rjmp	.-94     	; 0x4f2 <getTemperatureHumidity_Task+0x24>
		}
		
		else
		{
			printf("temperatureHumidity_task failed to get temperature\n");
     550:	81 e9       	ldi	r24, 0x91	; 145
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     558:	cc cf       	rjmp	.-104    	; 0x4f2 <getTemperatureHumidity_Task+0x24>

0000055a <fillPayloadQueue_Task>:
void fillPayloadQueue_Task(void *pvParameters)
{

	for( ;; )
	{
		if (xSemaphoreTake(fillPayloadQueueSemaphore,portMAX_DELAY))
     55a:	6f ef       	ldi	r22, 0xFF	; 255
     55c:	7f ef       	ldi	r23, 0xFF	; 255
     55e:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <fillPayloadQueueSemaphore>
     562:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <fillPayloadQueueSemaphore+0x1>
     566:	df d7       	rcall	.+4030   	; 0x1526 <xQueueSemaphoreTake>
     568:	88 23       	and	r24, r24
     56a:	f9 f0       	breq	.+62     	; 0x5aa <fillPayloadQueue_Task+0x50>
		{
			
			
			
			xQueueSend(
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	4f ef       	ldi	r20, 0xFF	; 255
     570:	5f ef       	ldi	r21, 0xFF	; 255
     572:	6b e2       	ldi	r22, 0x2B	; 43
     574:	7a e1       	ldi	r23, 0x1A	; 26
     576:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <payloadQueue>
     57a:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <payloadQueue+0x1>
     57e:	7e d6       	rcall	.+3324   	; 0x127c <xQueueGenericSend>
			payloadQueue, //queue handle
			(void*) &temperature,	//pointer to the temp
			portMAX_DELAY);
			
			xQueueSend(
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	5f ef       	ldi	r21, 0xFF	; 255
     586:	6e e2       	ldi	r22, 0x2E	; 46
     588:	7a e1       	ldi	r23, 0x1A	; 26
     58a:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <payloadQueue>
     58e:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <payloadQueue+0x1>
     592:	74 d6       	rcall	.+3304   	; 0x127c <xQueueGenericSend>
			payloadQueue, //queue handle
			(void*) &humidity,	//pointer to the temp
			portMAX_DELAY);
			
			xQueueSend(
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	4f ef       	ldi	r20, 0xFF	; 255
     598:	5f ef       	ldi	r21, 0xFF	; 255
     59a:	68 e2       	ldi	r22, 0x28	; 40
     59c:	7a e1       	ldi	r23, 0x1A	; 26
     59e:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <payloadQueue>
     5a2:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <payloadQueue+0x1>
     5a6:	6a d6       	rcall	.+3284   	; 0x127c <xQueueGenericSend>
     5a8:	d8 cf       	rjmp	.-80     	; 0x55a <fillPayloadQueue_Task>
			(void*) &co2,	//pointer to the temp
			portMAX_DELAY);
		}
		else
		{
			printf("fillPayloadQueue_task failed to get temperature\n");
     5aa:	84 ec       	ldi	r24, 0xC4	; 196
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     5b2:	d3 cf       	rjmp	.-90     	; 0x55a <fillPayloadQueue_Task>

000005b4 <getCo2_Task>:
	for( ;; )
	{
		if (xSemaphoreTake(co2Semaphore,portMAX_DELAY))
		{
			co2Sensor_measure();
			co2.data_type = 2;
     5b4:	c8 e2       	ldi	r28, 0x28	; 40
     5b6:	da e1       	ldi	r29, 0x1A	; 26
     5b8:	68 94       	set
     5ba:	ff 24       	eor	r15, r15
     5bc:	f1 f8       	bld	r15, 1
			co2.value = co2Sensor_getValue();

			printf("co2 = %d \n", co2.value);
     5be:	04 ef       	ldi	r16, 0xF4	; 244
     5c0:	12 e0       	ldi	r17, 0x02	; 2
{

	
	for( ;; )
	{
		if (xSemaphoreTake(co2Semaphore,portMAX_DELAY))
     5c2:	6f ef       	ldi	r22, 0xFF	; 255
     5c4:	7f ef       	ldi	r23, 0xFF	; 255
     5c6:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <co2Semaphore>
     5ca:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <co2Semaphore+0x1>
     5ce:	ab d7       	rcall	.+3926   	; 0x1526 <xQueueSemaphoreTake>
     5d0:	88 23       	and	r24, r24
     5d2:	81 f0       	breq	.+32     	; 0x5f4 <getCo2_Task+0x40>
		{
			co2Sensor_measure();
     5d4:	6f d0       	rcall	.+222    	; 0x6b4 <co2Sensor_measure>
			co2.data_type = 2;
     5d6:	f8 82       	st	Y, r15
			co2.value = co2Sensor_getValue();
     5d8:	80 d0       	rcall	.+256    	; 0x6da <co2Sensor_getValue>
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	9a 83       	std	Y+2, r25	; 0x02
     5de:	9f 93       	push	r25

			printf("co2 = %d \n", co2.value);
     5e0:	8f 93       	push	r24
     5e2:	1f 93       	push	r17
     5e4:	0f 93       	push	r16
     5e6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <printf>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <getCo2_Task+0xe>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		
		else
		{
			printf("co2_task failed to get co2Value\n");
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     5fc:	e2 cf       	rjmp	.-60     	; 0x5c2 <getCo2_Task+0xe>

000005fe <lorawanSend_Task>:
     5fe:	6f ef       	ldi	r22, 0xFF	; 255
{
	
	
	for( ;; )
	{
		if (xSemaphoreTake(lorawanSemaphore,portMAX_DELAY))
     600:	7f ef       	ldi	r23, 0xFF	; 255
     602:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <lorawanSemaphore>
     606:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <lorawanSemaphore+0x1>
     60a:	8d d7       	rcall	.+3866   	; 0x1526 <xQueueSemaphoreTake>
     60c:	88 23       	and	r24, r24
     60e:	31 f0       	breq	.+12     	; 0x61c <lorawanSend_Task+0x1e>
		{
			lorawanDevSend_data();
     610:	bd d0       	rcall	.+378    	; 0x78c <lorawanDevSend_data>
     612:	8f e1       	ldi	r24, 0x1F	; 31
			printf("Data sent to Loriot!\n");
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     61a:	f1 cf       	rjmp	.-30     	; 0x5fe <lorawanSend_Task>
     61c:	84 e3       	ldi	r24, 0x34	; 52
		}
		
		else
		{
			printf("lorawanSend_task failed to send data\n");
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     624:	ec cf       	rjmp	.-40     	; 0x5fe <lorawanSend_Task>

00000626 <tasks_init>:
     626:	ef 92       	push	r14
#include "Header/myQueues.h"



void tasks_init()
{
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
	
	xTaskCreate(
     62c:	e1 2c       	mov	r14, r1
     62e:	f1 2c       	mov	r15, r1
     630:	02 e0       	ldi	r16, 0x02	; 2
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 ec       	ldi	r20, 0xC0	; 192
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	69 e5       	ldi	r22, 0x59	; 89
     63c:	73 e0       	ldi	r23, 0x03	; 3
     63e:	87 e6       	ldi	r24, 0x67	; 103
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 2,
	NULL);
	
	xTaskCreate(
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 ec       	ldi	r20, 0xC0	; 192
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	69 e7       	ldi	r22, 0x79	; 121
     650:	73 e0       	ldi	r23, 0x03	; 3
     652:	8a ed       	ldi	r24, 0xDA	; 218
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 2,
	NULL);
	
	xTaskCreate(
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 ec       	ldi	r20, 0xC0	; 192
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	61 e9       	ldi	r22, 0x91	; 145
     664:	73 e0       	ldi	r23, 0x03	; 3
     666:	8d ea       	ldi	r24, 0xAD	; 173
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
	( void * ) 1,
	configMAX_PRIORITIES - 2,
	NULL);
	
	
	xTaskCreate(
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 ec       	ldi	r20, 0xC0	; 192
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	69 ea       	ldi	r22, 0xA9	; 169
     678:	73 e0       	ldi	r23, 0x03	; 3
     67a:	89 e2       	ldi	r24, 0x29	; 41
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 2,
	NULL);
	
	xTaskCreate(
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 ec       	ldi	r20, 0xC0	; 192
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	6f eb       	ldi	r22, 0xBF	; 191
     68c:	73 e0       	ldi	r23, 0x03	; 3
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
	configMAX_PRIORITIES - 2,
	NULL);
	
	

}
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	08 95       	ret

0000069e <co2Sensor_callback>:
	
}

void co2Sensor_callback(uint16_t ppm)
{
	co2PPM = ppm;
     69e:	90 93 27 1a 	sts	0x1A27, r25	; 0x801a27 <co2PPM+0x1>
     6a2:	80 93 26 1a 	sts	0x1A26, r24	; 0x801a26 <co2PPM>
     6a6:	08 95       	ret

000006a8 <co2Sensor_init>:
mh_z19_return_code_t rc;
uint16_t ppm;

void co2Sensor_init()
{
	mh_z19_create(ser_USART3, co2Sensor_callback);
     6a8:	6f e4       	ldi	r22, 0x4F	; 79
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <mh_z19_create>
     6b2:	08 95       	ret

000006b4 <co2Sensor_measure>:

void co2Sensor_measure()
{
	
	
	rc = mh_z19_take_meassuring();
     6b4:	0e 94 bf 1c 	call	0x397e	; 0x397e <mh_z19_take_meassuring>
     6b8:	80 93 23 1a 	sts	0x1A23, r24	; 0x801a23 <rc>
	if (rc != MHZ19_OK)
     6bc:	88 23       	and	r24, r24
     6be:	61 f0       	breq	.+24     	; 0x6d8 <co2Sensor_measure+0x24>
	{
		
		printf("Something Wrong");
     6c0:	8c ed       	ldi	r24, 0xDC	; 220
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	0e 94 00 26 	call	0x4c00	; 0x4c00 <printf>
		vTaskDelay(1000 / portTICK_PERIOD_MS);		
     6cc:	8e e3       	ldi	r24, 0x3E	; 62
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	08 95       	ret

000006da <co2Sensor_getValue>:
}

uint16_t co2Sensor_getValue()
{
	return co2PPM;
     6da:	80 91 26 1a 	lds	r24, 0x1A26	; 0x801a26 <co2PPM>
     6de:	90 91 27 1a 	lds	r25, 0x1A27	; 0x801a27 <co2PPM+0x1>
     6e2:	08 95       	ret

000006e4 <lorawanDev_init>:


#define LORA_INIT_TASK_PRIORITY 7
void lorawanDev_init()
{
	hal_create(LORA_INIT_TASK_PRIORITY+1);
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <hal_create>
	lora_driver_create(ser_USART1);
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <lora_driver_create>
     6f0:	08 95       	ret

000006f2 <lorawanDevStart>:
	
}

void lorawanDevStart()
{
     6f2:	cf 93       	push	r28
	e_LoRa_return_code_t rc;
	lora_driver_reset_rn2483(1);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 34 19 	call	0x3268	; 0x3268 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
	lora_driver_reset_rn2483(0);
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 34 19 	call	0x3268	; 0x3268 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     708:	86 e9       	ldi	r24, 0x96	; 150
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
	lora_driver_flush_buffers();
     710:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <lora_driver_flush_buffers>
	
	if (lora_driver_rn2483_factory_reset() != LoRA_OK)
     714:	0e 94 48 19 	call	0x3290	; 0x3290 <lora_driver_rn2483_factory_reset>
     718:	88 23       	and	r24, r24
     71a:	21 f0       	breq	.+8      	; 0x724 <lorawanDevStart+0x32>
	{
		printf("FACTORY RESET ERROR\n");
     71c:	8c ee       	ldi	r24, 0xEC	; 236
     71e:	93 e0       	ldi	r25, 0x03	; 3
     720:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	}
	
	if (lora_driver_configure_to_eu868() != LoRA_OK)
     724:	0e 94 75 1a 	call	0x34ea	; 0x34ea <lora_driver_configure_to_eu868>
     728:	88 23       	and	r24, r24
     72a:	21 f0       	breq	.+8      	; 0x734 <lorawanDevStart+0x42>
	{
		printf("lora_Configure error\n");
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	}
	
	static char dev_eui[17];
	if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
     734:	8e e7       	ldi	r24, 0x7E	; 126
     736:	98 e0       	ldi	r25, 0x08	; 8
     738:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <lora_driver_get_rn2483_hweui>
     73c:	88 23       	and	r24, r24
     73e:	21 f0       	breq	.+8      	; 0x748 <lorawanDevStart+0x56>
	{
		printf("lora_driver_get_rn2483_hweui error\n");
     740:	85 e1       	ldi	r24, 0x15	; 21
     742:	94 e0       	ldi	r25, 0x04	; 4
     744:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	}
	
	if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
     748:	4e e7       	ldi	r20, 0x7E	; 126
     74a:	58 e0       	ldi	r21, 0x08	; 8
     74c:	68 e3       	ldi	r22, 0x38	; 56
     74e:	74 e0       	ldi	r23, 0x04	; 4
     750:	89 e5       	ldi	r24, 0x59	; 89
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <lora_driver_set_otaa_identity>
     758:	88 23       	and	r24, r24
     75a:	21 f0       	breq	.+8      	; 0x764 <lorawanDevStart+0x72>
	{
		printf("lora_driver_set_otaa_identity error\n");
     75c:	8a e6       	ldi	r24, 0x6A	; 106
     75e:	94 e0       	ldi	r25, 0x04	; 4
     760:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	}
	
	while(rc != LoRa_ACCEPTED)
	{
		printf("LORAWAN device is not connected\n");
     764:	8e e8       	ldi	r24, 0x8E	; 142
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
		rc = lora_driver_join(LoRa_OTAA);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 af 19 	call	0x335e	; 0x335e <lora_driver_join>
     772:	c8 2f       	mov	r28, r24
		vTaskDelay(2000 / portTICK_PERIOD_MS);
     774:	8d e7       	ldi	r24, 0x7D	; 125
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 a6 10 	call	0x214c	; 0x214c <vTaskDelay>
	if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
	{
		printf("lora_driver_set_otaa_identity error\n");
	}
	
	while(rc != LoRa_ACCEPTED)
     77c:	c8 30       	cpi	r28, 0x08	; 8
     77e:	91 f7       	brne	.-28     	; 0x764 <lorawanDevStart+0x72>
		printf("LORAWAN device is not connected\n");
		rc = lora_driver_join(LoRa_OTAA);
		vTaskDelay(2000 / portTICK_PERIOD_MS);
	}
	
	printf("LORAWAN device is connected \n");
     780:	8e ea       	ldi	r24, 0xAE	; 174
     782:	94 e0       	ldi	r25, 0x04	; 4
     784:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	
	
}
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <lorawanDevSend_data>:

void lorawanDevSend_data()
{
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	69 97       	sbiw	r28, 0x19	; 25
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	03 e0       	ldi	r16, 0x03	; 3
     7b2:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t tTemperature = 0; 
	uint16_t tCO2 = 0; 
	uint16_t tHumidity = 0;
     7b4:	b1 2c       	mov	r11, r1
     7b6:	a1 2c       	mov	r10, r1
}

void lorawanDevSend_data()
{
	uint16_t tTemperature = 0; 
	uint16_t tCO2 = 0; 
     7b8:	d1 2c       	mov	r13, r1
     7ba:	c1 2c       	mov	r12, r1
	
}

void lorawanDevSend_data()
{
	uint16_t tTemperature = 0; 
     7bc:	f1 2c       	mov	r15, r1
     7be:	e1 2c       	mov	r14, r1
	
	
	for (int i = 0; i < 3; i++)
	{
			
		xQueueReceive(payloadQueue, // queue handle
     7c0:	4f ef       	ldi	r20, 0xFF	; 255
     7c2:	5f ef       	ldi	r21, 0xFF	; 255
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <payloadQueue>
     7ce:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <payloadQueue+0x1>
     7d2:	20 d6       	rcall	.+3136   	; 0x1414 <xQueueReceive>
									  &received, // address of temperature placeholder
									  portMAX_DELAY);
									  
		if (received.data_type == 0)
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	81 11       	cpse	r24, r1
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <lorawanDevSend_data+0x54>
		{
			tTemperature = received.value;
     7da:	fa 80       	ldd	r15, Y+2	; 0x02
     7dc:	eb 80       	ldd	r14, Y+3	; 0x03
     7de:	07 c0       	rjmp	.+14     	; 0x7ee <lorawanDevSend_data+0x62>
		}
		else if (received.data_type == 1)
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	19 f4       	brne	.+6      	; 0x7ea <lorawanDevSend_data+0x5e>
		{
			tHumidity = received.value;	
     7e4:	ba 80       	ldd	r11, Y+2	; 0x02
     7e6:	ab 80       	ldd	r10, Y+3	; 0x03
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <lorawanDevSend_data+0x62>
		}
		else
		{
			tCO2 = received.value;
     7ea:	da 80       	ldd	r13, Y+2	; 0x02
     7ec:	cb 80       	ldd	r12, Y+3	; 0x03
     7ee:	01 50       	subi	r16, 0x01	; 1
     7f0:	11 09       	sbc	r17, r1
	uint16_t tHumidity = 0;
	
	data_t received;
	
	
	for (int i = 0; i < 3; i++)
     7f2:	31 f7       	brne	.-52     	; 0x7c0 <lorawanDevSend_data+0x34>
	
	}

	lora_payload_t uplink_payload;
	
	uplink_payload.len = 6; // Length of the actual payload
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	8d 83       	std	Y+5, r24	; 0x05
	uplink_payload.port_no = 1; // The LoRaWAN port no to sent the message to
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	8c 83       	std	Y+4, r24	; 0x04
	uplink_payload.bytes[0] = tHumidity >> 8;
     7fc:	ae 82       	std	Y+6, r10	; 0x06
	uplink_payload.bytes[1] = tHumidity & 0xFF;
     7fe:	bf 82       	std	Y+7, r11	; 0x07
	uplink_payload.bytes[2] = tTemperature >> 8;
     800:	e8 86       	std	Y+8, r14	; 0x08
	uplink_payload.bytes[3] = tTemperature & 0xFF;
     802:	f9 86       	std	Y+9, r15	; 0x09
	uplink_payload.bytes[4] = tCO2 >> 8;
     804:	ca 86       	std	Y+10, r12	; 0x0a
	uplink_payload.bytes[5] = tCO2 & 0xFF;
     806:	db 86       	std	Y+11, r13	; 0x0b
	
	e_LoRa_return_code_t rc;
	if ((rc = lora_driver_sent_upload_message(false, &uplink_payload)) == LoRa_MAC_TX_OK )
     808:	be 01       	movw	r22, r28
     80a:	6c 5f       	subi	r22, 0xFC	; 252
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <lora_driver_sent_upload_message>
     814:	8d 30       	cpi	r24, 0x0D	; 13
     816:	29 f4       	brne	.+10     	; 0x822 <lorawanDevSend_data+0x96>
	{
		// The uplink message is sent and there is no downlink message received
		printf("The uplink message is sent and there is no downlink message received\n");
     818:	8b ec       	ldi	r24, 0xCB	; 203
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     820:	06 c0       	rjmp	.+12     	; 0x82e <lorawanDevSend_data+0xa2>
	}
	else if (rc == LoRa_MAC_RX_OK)
     822:	8e 30       	cpi	r24, 0x0E	; 14
     824:	21 f4       	brne	.+8      	; 0x82e <lorawanDevSend_data+0xa2>
	{
		// The uplink message is sent and a downlink message is received
		printf("The uplink message is sent and a downlink message is received\n");
     826:	80 e1       	ldi	r24, 0x10	; 16
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	}
	
	 
     82e:	69 96       	adiw	r28, 0x19	; 25
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	08 95       	ret

00000850 <main>:
 data_t humidity;
 data_t co2;

int main(void)
{
	trace_init();
     850:	86 d0       	rcall	.+268    	; 0x95e <trace_init>
	stdioCreate(0);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 8b 20 	call	0x4116	; 0x4116 <stdioCreate>
	sei();


	semaphore_init();
     858:	78 94       	sei
	queue_create();
     85a:	16 d0       	rcall	.+44     	; 0x888 <semaphore_init>
	temperatureHumiditySensor_init();
     85c:	0c d0       	rcall	.+24     	; 0x876 <queue_create>
    co2Sensor_init();
     85e:	4d d0       	rcall	.+154    	; 0x8fa <temperatureHumiditySensor_init>
     860:	23 df       	rcall	.-442    	; 0x6a8 <co2Sensor_init>
	co2Sensor_measure();
     862:	28 df       	rcall	.-432    	; 0x6b4 <co2Sensor_measure>
	lorawanDev_init();
     864:	3f df       	rcall	.-386    	; 0x6e4 <lorawanDev_init>
     866:	8e e4       	ldi	r24, 0x4E	; 78
	
	
	
	printf("Program start\n");
     868:	95 e0       	ldi	r25, 0x05	; 5
     86a:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     86e:	db de       	rcall	.-586    	; 0x626 <tasks_init>
	
	
	tasks_init();
     870:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <vTaskStartScheduler>
	
	
	vTaskStartScheduler();
     874:	ff cf       	rjmp	.-2      	; 0x874 <main+0x24>

00000876 <queue_create>:
#include "Header/myQueues.h"


 void queue_create()
 {
	 payloadQueue = xQueueCreate(3, sizeof(data_t));
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	d1 d4       	rcall	.+2466   	; 0x1220 <xQueueGenericCreate>
     87e:	90 93 18 1a 	sts	0x1A18, r25	; 0x801a18 <payloadQueue+0x1>
     882:	80 93 17 1a 	sts	0x1A17, r24	; 0x801a17 <payloadQueue>
     886:	08 95       	ret

00000888 <semaphore_init>:

#include "Header/semaphores.h"

void semaphore_init() 
{
	if (temperatureHumiditySemaphore == NULL)
     888:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <temperatureHumiditySemaphore>
     88c:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <temperatureHumiditySemaphore+0x1>
     890:	89 2b       	or	r24, r25
     892:	41 f4       	brne	.+16     	; 0x8a4 <semaphore_init+0x1c>
	{
		temperatureHumiditySemaphore = xSemaphoreCreateBinary();
     894:	43 e0       	ldi	r20, 0x03	; 3
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	c2 d4       	rcall	.+2436   	; 0x1220 <xQueueGenericCreate>
     89c:	90 93 1c 1a 	sts	0x1A1C, r25	; 0x801a1c <temperatureHumiditySemaphore+0x1>
     8a0:	80 93 1b 1a 	sts	0x1A1B, r24	; 0x801a1b <temperatureHumiditySemaphore>
	}
	
	if (co2Semaphore == NULL)
     8a4:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <co2Semaphore>
     8a8:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <co2Semaphore+0x1>
     8ac:	89 2b       	or	r24, r25
     8ae:	41 f4       	brne	.+16     	; 0x8c0 <semaphore_init+0x38>
	{
		co2Semaphore = xSemaphoreCreateBinary();
     8b0:	43 e0       	ldi	r20, 0x03	; 3
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	b4 d4       	rcall	.+2408   	; 0x1220 <xQueueGenericCreate>
     8b8:	90 93 20 1a 	sts	0x1A20, r25	; 0x801a20 <co2Semaphore+0x1>
     8bc:	80 93 1f 1a 	sts	0x1A1F, r24	; 0x801a1f <co2Semaphore>
	}
	
	if (fillPayloadQueueSemaphore == NULL)
     8c0:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <fillPayloadQueueSemaphore>
     8c4:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <fillPayloadQueueSemaphore+0x1>
     8c8:	89 2b       	or	r24, r25
     8ca:	41 f4       	brne	.+16     	; 0x8dc <semaphore_init+0x54>
	{
		fillPayloadQueueSemaphore = xSemaphoreCreateBinary();
     8cc:	43 e0       	ldi	r20, 0x03	; 3
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	a6 d4       	rcall	.+2380   	; 0x1220 <xQueueGenericCreate>
     8d4:	90 93 1e 1a 	sts	0x1A1E, r25	; 0x801a1e <fillPayloadQueueSemaphore+0x1>
     8d8:	80 93 1d 1a 	sts	0x1A1D, r24	; 0x801a1d <fillPayloadQueueSemaphore>
	}
	
	if (lorawanSemaphore == NULL)
     8dc:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <lorawanSemaphore>
     8e0:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <lorawanSemaphore+0x1>
     8e4:	89 2b       	or	r24, r25
     8e6:	41 f4       	brne	.+16     	; 0x8f8 <semaphore_init+0x70>
	{
		lorawanSemaphore = xSemaphoreCreateBinary();
     8e8:	43 e0       	ldi	r20, 0x03	; 3
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	98 d4       	rcall	.+2352   	; 0x1220 <xQueueGenericCreate>
     8f0:	90 93 1a 1a 	sts	0x1A1A, r25	; 0x801a1a <lorawanSemaphore+0x1>
     8f4:	80 93 19 1a 	sts	0x1A19, r24	; 0x801a19 <lorawanSemaphore>
     8f8:	08 95       	ret

000008fa <temperatureHumiditySensor_init>:
 
 
 //initialise the driver:
 void temperatureHumiditySensor_init()
 {
	 if ( HIH8120_OK == hih8120Create())
     8fa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <hih8120Create>
     8fe:	81 11       	cpse	r24, r1
     900:	04 c0       	rjmp	.+8      	; 0x90a <temperatureHumiditySensor_init+0x10>
	 {
		 printf("Initialization of hum temp sensors\n");
     902:	8c e5       	ldi	r24, 0x5C	; 92
     904:	95 e0       	ldi	r25, 0x05	; 5
     906:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <puts>
     90a:	08 95       	ret

0000090c <temperatureHumidity_measure>:
 //float temperature = 0.0;
 
 
 void temperatureHumidity_measure()
 {
	 if (HIH8120_OK != hih8120Wakeup())
     90c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <hih8120Wakeup>
     910:	88 23       	and	r24, r24
     912:	21 f0       	breq	.+8      	; 0x91c <temperatureHumidity_measure+0x10>
	 {
		printf("ERROR Wakeup\n"); 
     914:	8f e7       	ldi	r24, 0x7F	; 127
     916:	95 e0       	ldi	r25, 0x05	; 5
     918:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	80 e7       	ldi	r24, 0x70	; 112
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <temperatureHumidity_measure+0x16>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <temperatureHumidity_measure+0x20>
     92c:	00 00       	nop
	 }
	 _delay_ms(50);
	 
	 if (HIH8120_OK != hih8120Meassure())
     92e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <hih8120Meassure>
     932:	88 23       	and	r24, r24
     934:	21 f0       	breq	.+8      	; 0x93e <temperatureHumidity_measure+0x32>
	 {
		 printf("ERROR meassure\n");
     936:	8c e8       	ldi	r24, 0x8C	; 140
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	80 e7       	ldi	r24, 0x70	; 112
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	21 50       	subi	r18, 0x01	; 1
     946:	80 40       	sbci	r24, 0x00	; 0
     948:	90 40       	sbci	r25, 0x00	; 0
     94a:	e1 f7       	brne	.-8      	; 0x944 <temperatureHumidity_measure+0x38>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <temperatureHumidity_measure+0x42>
     94e:	00 00       	nop
     950:	08 95       	ret

00000952 <temperatureGetValue>:
	 _delay_ms(50);
 }
 
uint16_t temperatureGetValue()
 {
	return hih8120GetTemperature_x10();
     952:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <hih8120GetTemperature_x10>
 }
     956:	08 95       	ret

00000958 <humidityGetValue>:
 
uint16_t humidityGetValue()
 {
	 return hih8120GetHumidityPercent_x10();
     958:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <hih8120GetHumidityPercent_x10>
 }
     95c:	08 95       	ret

0000095e <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     95e:	e7 e0       	ldi	r30, 0x07	; 7
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	80 81       	ld	r24, Z
     964:	8f 60       	ori	r24, 0x0F	; 15
     966:	80 83       	st	Z, r24
     968:	08 95       	ret

0000096a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     96a:	e8 e0       	ldi	r30, 0x08	; 8
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	90 81       	ld	r25, Z
     970:	90 7f       	andi	r25, 0xF0	; 240
     972:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     974:	90 81       	ld	r25, Z
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	98 2b       	or	r25, r24
     97a:	90 83       	st	Z, r25
     97c:	08 95       	ret

0000097e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     97e:	e8 e0       	ldi	r30, 0x08	; 8
     980:	f1 e0       	ldi	r31, 0x01	; 1
     982:	80 81       	ld	r24, Z
     984:	80 7f       	andi	r24, 0xF0	; 240
     986:	80 83       	st	Z, r24
     988:	08 95       	ret

0000098a <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     990:	e7 e9       	ldi	r30, 0x97	; 151
     992:	f8 e0       	ldi	r31, 0x08	; 8
     994:	01 c0       	rjmp	.+2      	; 0x998 <prvInsertBlockIntoFreeList+0xe>
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	31 81       	ldd	r19, Z+1	; 0x01
     99c:	2a 17       	cp	r18, r26
     99e:	3b 07       	cpc	r19, r27
     9a0:	d0 f3       	brcs	.-12     	; 0x996 <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	af 01       	movw	r20, r30
     9a8:	48 0f       	add	r20, r24
     9aa:	59 1f       	adc	r21, r25
     9ac:	a4 17       	cp	r26, r20
     9ae:	b5 07       	cpc	r27, r21
     9b0:	49 f4       	brne	.+18     	; 0x9c4 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     9b2:	12 96       	adiw	r26, 0x02	; 2
     9b4:	4d 91       	ld	r20, X+
     9b6:	5c 91       	ld	r21, X
     9b8:	13 97       	sbiw	r26, 0x03	; 3
     9ba:	84 0f       	add	r24, r20
     9bc:	95 1f       	adc	r25, r21
     9be:	93 83       	std	Z+3, r25	; 0x03
     9c0:	82 83       	std	Z+2, r24	; 0x02
     9c2:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	8d 91       	ld	r24, X+
     9c8:	9c 91       	ld	r25, X
     9ca:	13 97       	sbiw	r26, 0x03	; 3
     9cc:	ed 01       	movw	r28, r26
     9ce:	c8 0f       	add	r28, r24
     9d0:	d9 1f       	adc	r29, r25
     9d2:	2c 17       	cp	r18, r28
     9d4:	3d 07       	cpc	r19, r29
     9d6:	d9 f4       	brne	.+54     	; 0xa0e <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     9d8:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <pxEnd>
     9dc:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <pxEnd+0x1>
     9e0:	c2 17       	cp	r28, r18
     9e2:	d3 07       	cpc	r29, r19
     9e4:	81 f0       	breq	.+32     	; 0xa06 <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9e6:	2a 81       	ldd	r18, Y+2	; 0x02
     9e8:	3b 81       	ldd	r19, Y+3	; 0x03
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9f6:	c0 81       	ld	r28, Z
     9f8:	d1 81       	ldd	r29, Z+1	; 0x01
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	11 96       	adiw	r26, 0x01	; 1
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     a06:	11 96       	adiw	r26, 0x01	; 1
     a08:	dc 93       	st	X, r29
     a0a:	ce 93       	st	-X, r28
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	3c 93       	st	X, r19
     a12:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     a14:	ae 17       	cp	r26, r30
     a16:	bf 07       	cpc	r27, r31
     a18:	11 f0       	breq	.+4      	; 0xa1e <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     a1a:	b1 83       	std	Z+1, r27	; 0x01
     a1c:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     a36:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     a3a:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <pxEnd>
     a3e:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <pxEnd+0x1>
     a42:	89 2b       	or	r24, r25
     a44:	41 f5       	brne	.+80     	; 0xa96 <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     a46:	e7 e9       	ldi	r30, 0x97	; 151
     a48:	f8 e0       	ldi	r31, 0x08	; 8
     a4a:	ab e9       	ldi	r26, 0x9B	; 155
     a4c:	b8 e0       	ldi	r27, 0x08	; 8
     a4e:	b1 83       	std	Z+1, r27	; 0x01
     a50:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     a52:	13 82       	std	Z+3, r1	; 0x03
     a54:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     a56:	e7 e3       	ldi	r30, 0x37	; 55
     a58:	f8 e1       	ldi	r31, 0x18	; 24
     a5a:	f0 93 96 08 	sts	0x0896, r31	; 0x800896 <pxEnd+0x1>
     a5e:	e0 93 95 08 	sts	0x0895, r30	; 0x800895 <pxEnd>
	pxEnd->xBlockSize = 0;
     a62:	13 82       	std	Z+3, r1	; 0x03
     a64:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     a6a:	8c e9       	ldi	r24, 0x9C	; 156
     a6c:	9f e0       	ldi	r25, 0x0F	; 15
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	9c 93       	st	X, r25
     a72:	8e 93       	st	-X, r24
     a74:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a76:	ed 93       	st	X+, r30
     a78:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a7a:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <xMinimumEverFreeBytesRemaining+0x1>
     a7e:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a82:	90 93 94 08 	sts	0x0894, r25	; 0x800894 <xFreeBytesRemaining+0x1>
     a86:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e8       	ldi	r25, 0x80	; 128
     a8e:	90 93 90 08 	sts	0x0890, r25	; 0x800890 <xBlockAllocatedBit+0x1>
     a92:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a96:	e0 90 8f 08 	lds	r14, 0x088F	; 0x80088f <xBlockAllocatedBit>
     a9a:	f0 90 90 08 	lds	r15, 0x0890	; 0x800890 <xBlockAllocatedBit+0x1>
     a9e:	c7 01       	movw	r24, r14
     aa0:	8c 23       	and	r24, r28
     aa2:	9d 23       	and	r25, r29
     aa4:	89 2b       	or	r24, r25
     aa6:	09 f0       	breq	.+2      	; 0xaaa <pvPortMalloc+0x86>
     aa8:	66 c0       	rjmp	.+204    	; 0xb76 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     aaa:	20 97       	sbiw	r28, 0x00	; 0
     aac:	09 f4       	brne	.+2      	; 0xab0 <pvPortMalloc+0x8c>
     aae:	66 c0       	rjmp	.+204    	; 0xb7c <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     ab0:	ae 01       	movw	r20, r28
     ab2:	4c 5f       	subi	r20, 0xFC	; 252
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     ab6:	09 f4       	brne	.+2      	; 0xaba <pvPortMalloc+0x96>
     ab8:	5e c0       	rjmp	.+188    	; 0xb76 <pvPortMalloc+0x152>
     aba:	00 91 93 08 	lds	r16, 0x0893	; 0x800893 <xFreeBytesRemaining>
     abe:	10 91 94 08 	lds	r17, 0x0894	; 0x800894 <xFreeBytesRemaining+0x1>
     ac2:	04 17       	cp	r16, r20
     ac4:	15 07       	cpc	r17, r21
     ac6:	08 f4       	brcc	.+2      	; 0xaca <pvPortMalloc+0xa6>
     ac8:	56 c0       	rjmp	.+172    	; 0xb76 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     aca:	c0 91 97 08 	lds	r28, 0x0897	; 0x800897 <xStart>
     ace:	d0 91 98 08 	lds	r29, 0x0898	; 0x800898 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     ad2:	e7 e9       	ldi	r30, 0x97	; 151
     ad4:	f8 e0       	ldi	r31, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <pvPortMalloc+0xb8>
     ad8:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     ada:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     adc:	2a 81       	ldd	r18, Y+2	; 0x02
     ade:	3b 81       	ldd	r19, Y+3	; 0x03
     ae0:	24 17       	cp	r18, r20
     ae2:	35 07       	cpc	r19, r21
     ae4:	28 f4       	brcc	.+10     	; 0xaf0 <pvPortMalloc+0xcc>
     ae6:	28 81       	ld	r18, Y
     ae8:	39 81       	ldd	r19, Y+1	; 0x01
     aea:	21 15       	cp	r18, r1
     aec:	31 05       	cpc	r19, r1
     aee:	a1 f7       	brne	.-24     	; 0xad8 <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     af0:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <pxEnd>
     af4:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <pxEnd+0x1>
     af8:	c8 17       	cp	r28, r24
     afa:	d9 07       	cpc	r29, r25
     afc:	e1 f1       	breq	.+120    	; 0xb76 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     afe:	c0 80       	ld	r12, Z
     b00:	d1 80       	ldd	r13, Z+1	; 0x01
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	c8 0e       	add	r12, r24
     b06:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     b08:	88 81       	ld	r24, Y
     b0a:	99 81       	ldd	r25, Y+1	; 0x01
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	24 1b       	sub	r18, r20
     b16:	35 0b       	sbc	r19, r21
     b18:	29 30       	cpi	r18, 0x09	; 9
     b1a:	31 05       	cpc	r19, r1
     b1c:	48 f0       	brcs	.+18     	; 0xb30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     b1e:	ce 01       	movw	r24, r28
     b20:	84 0f       	add	r24, r20
     b22:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     b24:	fc 01       	movw	r30, r24
     b26:	33 83       	std	Z+3, r19	; 0x03
     b28:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     b2a:	5b 83       	std	Y+3, r21	; 0x03
     b2c:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     b2e:	2d df       	rcall	.-422    	; 0x98a <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	08 1b       	sub	r16, r24
     b36:	19 0b       	sbc	r17, r25
     b38:	10 93 94 08 	sts	0x0894, r17	; 0x800894 <xFreeBytesRemaining+0x1>
     b3c:	00 93 93 08 	sts	0x0893, r16	; 0x800893 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     b40:	20 91 91 08 	lds	r18, 0x0891	; 0x800891 <xMinimumEverFreeBytesRemaining>
     b44:	30 91 92 08 	lds	r19, 0x0892	; 0x800892 <xMinimumEverFreeBytesRemaining+0x1>
     b48:	02 17       	cp	r16, r18
     b4a:	13 07       	cpc	r17, r19
     b4c:	20 f4       	brcc	.+8      	; 0xb56 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     b4e:	10 93 92 08 	sts	0x0892, r17	; 0x800892 <xMinimumEverFreeBytesRemaining+0x1>
     b52:	00 93 91 08 	sts	0x0891, r16	; 0x800891 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     b56:	e8 2a       	or	r14, r24
     b58:	f9 2a       	or	r15, r25
     b5a:	fb 82       	std	Y+3, r15	; 0x03
     b5c:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b62:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     b66:	c1 14       	cp	r12, r1
     b68:	d1 04       	cpc	r13, r1
     b6a:	59 f4       	brne	.+22     	; 0xb82 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     b6c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <vApplicationMallocFailedHook>
     b70:	c1 2c       	mov	r12, r1
     b72:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b76:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
     b7a:	f8 cf       	rjmp	.-16     	; 0xb6c <pvPortMalloc+0x148>
     b7c:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
     b80:	f5 cf       	rjmp	.-22     	; 0xb6c <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     b82:	c6 01       	movw	r24, r12
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret

00000b96 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	51 f1       	breq	.+84     	; 0xbf2 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b9e:	fc 01       	movw	r30, r24
     ba0:	34 97       	sbiw	r30, 0x04	; 4
     ba2:	22 81       	ldd	r18, Z+2	; 0x02
     ba4:	33 81       	ldd	r19, Z+3	; 0x03
     ba6:	40 91 8f 08 	lds	r20, 0x088F	; 0x80088f <xBlockAllocatedBit>
     baa:	50 91 90 08 	lds	r21, 0x0890	; 0x800890 <xBlockAllocatedBit+0x1>
     bae:	b9 01       	movw	r22, r18
     bb0:	64 23       	and	r22, r20
     bb2:	75 23       	and	r23, r21
     bb4:	67 2b       	or	r22, r23
     bb6:	e9 f0       	breq	.+58     	; 0xbf2 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     bb8:	60 81       	ld	r22, Z
     bba:	71 81       	ldd	r23, Z+1	; 0x01
     bbc:	67 2b       	or	r22, r23
     bbe:	c9 f4       	brne	.+50     	; 0xbf2 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     bc0:	ef 01       	movw	r28, r30
     bc2:	40 95       	com	r20
     bc4:	50 95       	com	r21
     bc6:	24 23       	and	r18, r20
     bc8:	35 23       	and	r19, r21
     bca:	33 83       	std	Z+3, r19	; 0x03
     bcc:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     bce:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     bd2:	20 91 93 08 	lds	r18, 0x0893	; 0x800893 <xFreeBytesRemaining>
     bd6:	30 91 94 08 	lds	r19, 0x0894	; 0x800894 <xFreeBytesRemaining+0x1>
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	90 93 94 08 	sts	0x0894, r25	; 0x800894 <xFreeBytesRemaining+0x1>
     be6:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     bea:	ce 01       	movw	r24, r28
     bec:	ce de       	rcall	.-612    	; 0x98a <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     bee:	0e 94 29 10 	call	0x2052	; 0x2052 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bf8:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bfa:	03 96       	adiw	r24, 0x03	; 3
     bfc:	92 83       	std	Z+2, r25	; 0x02
     bfe:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     c00:	2f ef       	ldi	r18, 0xFF	; 255
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	34 83       	std	Z+4, r19	; 0x04
     c06:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c08:	96 83       	std	Z+6, r25	; 0x06
     c0a:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c0c:	90 87       	std	Z+8, r25	; 0x08
     c0e:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c10:	10 82       	st	Z, r1
     c12:	08 95       	ret

00000c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     c14:	fc 01       	movw	r30, r24
     c16:	11 86       	std	Z+9, r1	; 0x09
     c18:	10 86       	std	Z+8, r1	; 0x08
     c1a:	08 95       	ret

00000c1c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	9c 01       	movw	r18, r24
     c22:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     c24:	dc 01       	movw	r26, r24
     c26:	11 96       	adiw	r26, 0x01	; 1
     c28:	cd 91       	ld	r28, X+
     c2a:	dc 91       	ld	r29, X
     c2c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     c2e:	d3 83       	std	Z+3, r29	; 0x03
     c30:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	9d 81       	ldd	r25, Y+5	; 0x05
     c36:	95 83       	std	Z+5, r25	; 0x05
     c38:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     c3a:	8c 81       	ldd	r24, Y+4	; 0x04
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	dc 01       	movw	r26, r24
     c40:	13 96       	adiw	r26, 0x03	; 3
     c42:	7c 93       	st	X, r23
     c44:	6e 93       	st	-X, r22
     c46:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     c48:	7d 83       	std	Y+5, r23	; 0x05
     c4a:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     c4c:	31 87       	std	Z+9, r19	; 0x09
     c4e:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     c50:	f9 01       	movw	r30, r18
     c52:	80 81       	ld	r24, Z
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	80 83       	st	Z, r24
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c64:	48 81       	ld	r20, Y
     c66:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c68:	4f 3f       	cpi	r20, 0xFF	; 255
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	52 07       	cpc	r21, r18
     c6e:	21 f4       	brne	.+8      	; 0xc78 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c70:	fc 01       	movw	r30, r24
     c72:	a7 81       	ldd	r26, Z+7	; 0x07
     c74:	b0 85       	ldd	r27, Z+8	; 0x08
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c78:	dc 01       	movw	r26, r24
     c7a:	13 96       	adiw	r26, 0x03	; 3
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vListInsert+0x22>
     c7e:	df 01       	movw	r26, r30
     c80:	12 96       	adiw	r26, 0x02	; 2
     c82:	ed 91       	ld	r30, X+
     c84:	fc 91       	ld	r31, X
     c86:	13 97       	sbiw	r26, 0x03	; 3
     c88:	20 81       	ld	r18, Z
     c8a:	31 81       	ldd	r19, Z+1	; 0x01
     c8c:	42 17       	cp	r20, r18
     c8e:	53 07       	cpc	r21, r19
     c90:	b0 f7       	brcc	.-20     	; 0xc7e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c92:	12 96       	adiw	r26, 0x02	; 2
     c94:	ed 91       	ld	r30, X+
     c96:	fc 91       	ld	r31, X
     c98:	13 97       	sbiw	r26, 0x03	; 3
     c9a:	fb 83       	std	Y+3, r31	; 0x03
     c9c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c9e:	d5 83       	std	Z+5, r29	; 0x05
     ca0:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     ca2:	bd 83       	std	Y+5, r27	; 0x05
     ca4:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	dc 93       	st	X, r29
     caa:	ce 93       	st	-X, r28
     cac:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     cae:	99 87       	std	Y+9, r25	; 0x09
     cb0:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 81       	ld	r18, Z
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	20 83       	st	Z, r18
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     cc6:	a0 85       	ldd	r26, Z+8	; 0x08
     cc8:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cca:	c2 81       	ldd	r28, Z+2	; 0x02
     ccc:	d3 81       	ldd	r29, Z+3	; 0x03
     cce:	84 81       	ldd	r24, Z+4	; 0x04
     cd0:	95 81       	ldd	r25, Z+5	; 0x05
     cd2:	9d 83       	std	Y+5, r25	; 0x05
     cd4:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     cd6:	c4 81       	ldd	r28, Z+4	; 0x04
     cd8:	d5 81       	ldd	r29, Z+5	; 0x05
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	9b 83       	std	Y+3, r25	; 0x03
     ce0:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	8d 91       	ld	r24, X+
     ce6:	9c 91       	ld	r25, X
     ce8:	12 97       	sbiw	r26, 0x02	; 2
     cea:	e8 17       	cp	r30, r24
     cec:	f9 07       	cpc	r31, r25
     cee:	31 f4       	brne	.+12     	; 0xcfc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cf0:	84 81       	ldd	r24, Z+4	; 0x04
     cf2:	95 81       	ldd	r25, Z+5	; 0x05
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     cfc:	11 86       	std	Z+9, r1	; 0x09
     cfe:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     d00:	8c 91       	ld	r24, X
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     d06:	8c 91       	ld	r24, X
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     d0e:	31 e1       	ldi	r19, 0x11	; 17
     d10:	fc 01       	movw	r30, r24
     d12:	30 83       	st	Z, r19
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	22 e2       	ldi	r18, 0x22	; 34
     d18:	20 83       	st	Z, r18
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	a3 e3       	ldi	r26, 0x33	; 51
     d1e:	a0 83       	st	Z, r26
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	60 83       	st	Z, r22
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	70 83       	st	Z, r23
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	10 82       	st	Z, r1
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	10 82       	st	Z, r1
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	60 e8       	ldi	r22, 0x80	; 128
     d34:	60 83       	st	Z, r22
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	10 82       	st	Z, r1
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	10 82       	st	Z, r1
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	10 82       	st	Z, r1
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	60 83       	st	Z, r22
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	60 83       	st	Z, r22
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	64 e0       	ldi	r22, 0x04	; 4
     d52:	60 83       	st	Z, r22
     d54:	31 97       	sbiw	r30, 0x01	; 1
     d56:	65 e0       	ldi	r22, 0x05	; 5
     d58:	60 83       	st	Z, r22
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	66 e0       	ldi	r22, 0x06	; 6
     d5e:	60 83       	st	Z, r22
     d60:	31 97       	sbiw	r30, 0x01	; 1
     d62:	67 e0       	ldi	r22, 0x07	; 7
     d64:	60 83       	st	Z, r22
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	68 e0       	ldi	r22, 0x08	; 8
     d6a:	60 83       	st	Z, r22
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	69 e0       	ldi	r22, 0x09	; 9
     d70:	60 83       	st	Z, r22
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	60 e1       	ldi	r22, 0x10	; 16
     d76:	60 83       	st	Z, r22
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	30 83       	st	Z, r19
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	32 e1       	ldi	r19, 0x12	; 18
     d80:	30 83       	st	Z, r19
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	33 e1       	ldi	r19, 0x13	; 19
     d86:	30 83       	st	Z, r19
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	34 e1       	ldi	r19, 0x14	; 20
     d8c:	30 83       	st	Z, r19
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	35 e1       	ldi	r19, 0x15	; 21
     d92:	30 83       	st	Z, r19
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	36 e1       	ldi	r19, 0x16	; 22
     d98:	30 83       	st	Z, r19
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	37 e1       	ldi	r19, 0x17	; 23
     d9e:	30 83       	st	Z, r19
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	38 e1       	ldi	r19, 0x18	; 24
     da4:	30 83       	st	Z, r19
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	39 e1       	ldi	r19, 0x19	; 25
     daa:	30 83       	st	Z, r19
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	30 e2       	ldi	r19, 0x20	; 32
     db0:	30 83       	st	Z, r19
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	31 e2       	ldi	r19, 0x21	; 33
     db6:	30 83       	st	Z, r19
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	20 83       	st	Z, r18
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	23 e2       	ldi	r18, 0x23	; 35
     dc0:	20 83       	st	Z, r18
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	40 83       	st	Z, r20
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	50 83       	st	Z, r21
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	26 e2       	ldi	r18, 0x26	; 38
     dce:	20 83       	st	Z, r18
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	27 e2       	ldi	r18, 0x27	; 39
     dd4:	20 83       	st	Z, r18
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	28 e2       	ldi	r18, 0x28	; 40
     dda:	20 83       	st	Z, r18
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	29 e2       	ldi	r18, 0x29	; 41
     de0:	20 83       	st	Z, r18
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	20 e3       	ldi	r18, 0x30	; 48
     de6:	20 83       	st	Z, r18
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	21 e3       	ldi	r18, 0x31	; 49
     dec:	20 83       	st	Z, r18
     dee:	89 97       	sbiw	r24, 0x29	; 41
     df0:	08 95       	ret

00000df2 <xPortStartScheduler>:
     df2:	a8 95       	wdr
     df4:	90 ec       	ldi	r25, 0xC0	; 192
     df6:	88 e1       	ldi	r24, 0x18	; 24
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	a8 95       	wdr
     dfe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     e08:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
     e0c:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
     e10:	cd 91       	ld	r28, X+
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	dd 91       	ld	r29, X+
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	7f 90       	pop	r7
     e4a:	6f 90       	pop	r6
     e4c:	5f 90       	pop	r5
     e4e:	4f 90       	pop	r4
     e50:	3f 90       	pop	r3
     e52:	2f 90       	pop	r2
     e54:	1f 90       	pop	r1
     e56:	0f 90       	pop	r0
     e58:	0c be       	out	0x3c, r0	; 60
     e5a:	0f 90       	pop	r0
     e5c:	0b be       	out	0x3b, r0	; 59
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	08 95       	ret
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	08 95       	ret

00000e6a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	0f 92       	push	r0
     e72:	0b b6       	in	r0, 0x3b	; 59
     e74:	0f 92       	push	r0
     e76:	0c b6       	in	r0, 0x3c	; 60
     e78:	0f 92       	push	r0
     e7a:	1f 92       	push	r1
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 92       	push	r2
     e80:	3f 92       	push	r3
     e82:	4f 92       	push	r4
     e84:	5f 92       	push	r5
     e86:	6f 92       	push	r6
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
     ebe:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
     ec2:	0d b6       	in	r0, 0x3d	; 61
     ec4:	0d 92       	st	X+, r0
     ec6:	0e b6       	in	r0, 0x3e	; 62
     ec8:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     eca:	0e 94 b7 10 	call	0x216e	; 0x216e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     ece:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
     ed2:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
     ed6:	cd 91       	ld	r28, X+
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	dd 91       	ld	r29, X+
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	cf 90       	pop	r12
     f06:	bf 90       	pop	r11
     f08:	af 90       	pop	r10
     f0a:	9f 90       	pop	r9
     f0c:	8f 90       	pop	r8
     f0e:	7f 90       	pop	r7
     f10:	6f 90       	pop	r6
     f12:	5f 90       	pop	r5
     f14:	4f 90       	pop	r4
     f16:	3f 90       	pop	r3
     f18:	2f 90       	pop	r2
     f1a:	1f 90       	pop	r1
     f1c:	0f 90       	pop	r0
     f1e:	0c be       	out	0x3c, r0	; 60
     f20:	0f 90       	pop	r0
     f22:	0b be       	out	0x3b, r0	; 59
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f2a:	08 95       	ret

00000f2c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	0f 92       	push	r0
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	0c b6       	in	r0, 0x3c	; 60
     f3a:	0f 92       	push	r0
     f3c:	1f 92       	push	r1
     f3e:	11 24       	eor	r1, r1
     f40:	2f 92       	push	r2
     f42:	3f 92       	push	r3
     f44:	4f 92       	push	r4
     f46:	5f 92       	push	r5
     f48:	6f 92       	push	r6
     f4a:	7f 92       	push	r7
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31
     f7c:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
     f80:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
     f84:	0d b6       	in	r0, 0x3d	; 61
     f86:	0d 92       	st	X+, r0
     f88:	0e b6       	in	r0, 0x3e	; 62
     f8a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     f8c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     f8e:	a7 d7       	rcall	.+3918   	; 0x1ede <xTaskIncrementTick>
     f90:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f92:	0e 94 b7 10 	call	0x216e	; 0x216e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     f96:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
     f9a:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
     f9e:	cd 91       	ld	r28, X+
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	dd 91       	ld	r29, X+
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	3f 90       	pop	r3
     fe0:	2f 90       	pop	r2
     fe2:	1f 90       	pop	r1
     fe4:	0f 90       	pop	r0
     fe6:	0c be       	out	0x3c, r0	; 60
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ff2:	08 95       	ret

00000ff4 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ff4:	9b df       	rcall	.-202    	; 0xf2c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ff6:	18 95       	reti

00000ff8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	0f 92       	push	r0
     ffe:	fc 01       	movw	r30, r24
    1000:	92 8d       	ldd	r25, Z+26	; 0x1a
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	91 11       	cpse	r25, r1
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret

0000100e <prvCopyDataToQueue>:
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	04 2f       	mov	r16, r20
    101a:	1a 8d       	ldd	r17, Y+26	; 0x1a
    101c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    101e:	41 11       	cpse	r20, r1
    1020:	0c c0       	rjmp	.+24     	; 0x103a <prvCopyDataToQueue+0x2c>
    1022:	88 81       	ld	r24, Y
    1024:	99 81       	ldd	r25, Y+1	; 0x01
    1026:	89 2b       	or	r24, r25
    1028:	09 f0       	breq	.+2      	; 0x102c <prvCopyDataToQueue+0x1e>
    102a:	42 c0       	rjmp	.+132    	; 0x10b0 <prvCopyDataToQueue+0xa2>
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	0e 94 7f 12 	call	0x24fe	; 0x24fe <xTaskPriorityDisinherit>
    1034:	1d 82       	std	Y+5, r1	; 0x05
    1036:	1c 82       	std	Y+4, r1	; 0x04
    1038:	42 c0       	rjmp	.+132    	; 0x10be <prvCopyDataToQueue+0xb0>
    103a:	01 11       	cpse	r16, r1
    103c:	17 c0       	rjmp	.+46     	; 0x106c <prvCopyDataToQueue+0x5e>
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    1048:	2c 8d       	ldd	r18, Y+28	; 0x1c
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	82 0f       	add	r24, r18
    1050:	91 1d       	adc	r25, r1
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	3d 81       	ldd	r19, Y+5	; 0x05
    105a:	82 17       	cp	r24, r18
    105c:	93 07       	cpc	r25, r19
    105e:	50 f1       	brcs	.+84     	; 0x10b4 <prvCopyDataToQueue+0xa6>
    1060:	88 81       	ld	r24, Y
    1062:	99 81       	ldd	r25, Y+1	; 0x01
    1064:	9b 83       	std	Y+3, r25	; 0x03
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	29 c0       	rjmp	.+82     	; 0x10be <prvCopyDataToQueue+0xb0>
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    1076:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	91 95       	neg	r25
    107c:	81 95       	neg	r24
    107e:	91 09       	sbc	r25, r1
    1080:	2e 81       	ldd	r18, Y+6	; 0x06
    1082:	3f 81       	ldd	r19, Y+7	; 0x07
    1084:	28 0f       	add	r18, r24
    1086:	39 1f       	adc	r19, r25
    1088:	3f 83       	std	Y+7, r19	; 0x07
    108a:	2e 83       	std	Y+6, r18	; 0x06
    108c:	48 81       	ld	r20, Y
    108e:	59 81       	ldd	r21, Y+1	; 0x01
    1090:	24 17       	cp	r18, r20
    1092:	35 07       	cpc	r19, r21
    1094:	30 f4       	brcc	.+12     	; 0x10a2 <prvCopyDataToQueue+0x94>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	82 0f       	add	r24, r18
    109c:	93 1f       	adc	r25, r19
    109e:	9f 83       	std	Y+7, r25	; 0x07
    10a0:	8e 83       	std	Y+6, r24	; 0x06
    10a2:	02 30       	cpi	r16, 0x02	; 2
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <prvCopyDataToQueue+0xaa>
    10a6:	11 23       	and	r17, r17
    10a8:	49 f0       	breq	.+18     	; 0x10bc <prvCopyDataToQueue+0xae>
    10aa:	11 50       	subi	r17, 0x01	; 1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <prvCopyDataToQueue+0xb0>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <prvCopyDataToQueue+0xb0>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <prvCopyDataToQueue+0xb0>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <prvCopyDataToQueue+0xb0>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	1f 5f       	subi	r17, 0xFF	; 255
    10c0:	1a 8f       	std	Y+26, r17	; 0x1a
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	08 95       	ret

000010cc <prvCopyDataFromQueue>:
    10cc:	fc 01       	movw	r30, r24
    10ce:	44 8d       	ldd	r20, Z+28	; 0x1c
    10d0:	44 23       	and	r20, r20
    10d2:	a9 f0       	breq	.+42     	; 0x10fe <prvCopyDataFromQueue+0x32>
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	26 81       	ldd	r18, Z+6	; 0x06
    10d8:	37 81       	ldd	r19, Z+7	; 0x07
    10da:	24 0f       	add	r18, r20
    10dc:	35 1f       	adc	r19, r21
    10de:	37 83       	std	Z+7, r19	; 0x07
    10e0:	26 83       	std	Z+6, r18	; 0x06
    10e2:	84 81       	ldd	r24, Z+4	; 0x04
    10e4:	95 81       	ldd	r25, Z+5	; 0x05
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <prvCopyDataFromQueue+0x28>
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	97 83       	std	Z+7, r25	; 0x07
    10f2:	86 83       	std	Z+6, r24	; 0x06
    10f4:	cb 01       	movw	r24, r22
    10f6:	66 81       	ldd	r22, Z+6	; 0x06
    10f8:	77 81       	ldd	r23, Z+7	; 0x07
    10fa:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <memcpy>
    10fe:	08 95       	ret

00001100 <prvUnlockQueue>:
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	8c 01       	movw	r16, r24
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	0f 92       	push	r0
    1112:	fc 01       	movw	r30, r24
    1114:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1116:	1c 16       	cp	r1, r28
    1118:	ac f4       	brge	.+42     	; 0x1144 <prvUnlockQueue+0x44>
    111a:	81 89       	ldd	r24, Z+17	; 0x11
    111c:	81 11       	cpse	r24, r1
    111e:	06 c0       	rjmp	.+12     	; 0x112c <prvUnlockQueue+0x2c>
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <prvUnlockQueue+0x44>
    1122:	f8 01       	movw	r30, r16
    1124:	81 89       	ldd	r24, Z+17	; 0x11
    1126:	81 11       	cpse	r24, r1
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <prvUnlockQueue+0x34>
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <prvUnlockQueue+0x44>
    112c:	78 01       	movw	r14, r16
    112e:	f1 e1       	ldi	r31, 0x11	; 17
    1130:	ef 0e       	add	r14, r31
    1132:	f1 1c       	adc	r15, r1
    1134:	c7 01       	movw	r24, r14
    1136:	0e 94 6e 11 	call	0x22dc	; 0x22dc <xTaskRemoveFromEventList>
    113a:	81 11       	cpse	r24, r1
    113c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vTaskMissedYield>
    1140:	c1 50       	subi	r28, 0x01	; 1
    1142:	79 f7       	brne	.-34     	; 0x1122 <prvUnlockQueue+0x22>
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	f8 01       	movw	r30, r16
    1148:	86 8f       	std	Z+30, r24	; 0x1e
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	0f 92       	push	r0
    1154:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1156:	1c 16       	cp	r1, r28
    1158:	ac f4       	brge	.+42     	; 0x1184 <prvUnlockQueue+0x84>
    115a:	80 85       	ldd	r24, Z+8	; 0x08
    115c:	81 11       	cpse	r24, r1
    115e:	06 c0       	rjmp	.+12     	; 0x116c <prvUnlockQueue+0x6c>
    1160:	11 c0       	rjmp	.+34     	; 0x1184 <prvUnlockQueue+0x84>
    1162:	f8 01       	movw	r30, r16
    1164:	80 85       	ldd	r24, Z+8	; 0x08
    1166:	81 11       	cpse	r24, r1
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <prvUnlockQueue+0x74>
    116a:	0c c0       	rjmp	.+24     	; 0x1184 <prvUnlockQueue+0x84>
    116c:	78 01       	movw	r14, r16
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	ef 0e       	add	r14, r31
    1172:	f1 1c       	adc	r15, r1
    1174:	c7 01       	movw	r24, r14
    1176:	0e 94 6e 11 	call	0x22dc	; 0x22dc <xTaskRemoveFromEventList>
    117a:	81 11       	cpse	r24, r1
    117c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vTaskMissedYield>
    1180:	c1 50       	subi	r28, 0x01	; 1
    1182:	79 f7       	brne	.-34     	; 0x1162 <prvUnlockQueue+0x62>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	f8 01       	movw	r30, r16
    1188:	85 8f       	std	Z+29, r24	; 0x1d
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	08 95       	ret

0000119a <xQueueGenericReset>:
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	ec 01       	movw	r28, r24
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	0f 92       	push	r0
    11a6:	e8 81       	ld	r30, Y
    11a8:	f9 81       	ldd	r31, Y+1	; 0x01
    11aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	82 9f       	mul	r24, r18
    11b4:	a0 01       	movw	r20, r0
    11b6:	83 9f       	mul	r24, r19
    11b8:	50 0d       	add	r21, r0
    11ba:	92 9f       	mul	r25, r18
    11bc:	50 0d       	add	r21, r0
    11be:	11 24       	eor	r1, r1
    11c0:	4e 0f       	add	r20, r30
    11c2:	5f 1f       	adc	r21, r31
    11c4:	5d 83       	std	Y+5, r21	; 0x05
    11c6:	4c 83       	std	Y+4, r20	; 0x04
    11c8:	1a 8e       	std	Y+26, r1	; 0x1a
    11ca:	fb 83       	std	Y+3, r31	; 0x03
    11cc:	ea 83       	std	Y+2, r30	; 0x02
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	82 9f       	mul	r24, r18
    11d2:	a0 01       	movw	r20, r0
    11d4:	83 9f       	mul	r24, r19
    11d6:	50 0d       	add	r21, r0
    11d8:	92 9f       	mul	r25, r18
    11da:	50 0d       	add	r21, r0
    11dc:	11 24       	eor	r1, r1
    11de:	cf 01       	movw	r24, r30
    11e0:	84 0f       	add	r24, r20
    11e2:	95 1f       	adc	r25, r21
    11e4:	9f 83       	std	Y+7, r25	; 0x07
    11e6:	8e 83       	std	Y+6, r24	; 0x06
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	8d 8f       	std	Y+29, r24	; 0x1d
    11ec:	8e 8f       	std	Y+30, r24	; 0x1e
    11ee:	61 11       	cpse	r22, r1
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <xQueueGenericReset+0x6e>
    11f2:	88 85       	ldd	r24, Y+8	; 0x08
    11f4:	88 23       	and	r24, r24
    11f6:	71 f0       	breq	.+28     	; 0x1214 <xQueueGenericReset+0x7a>
    11f8:	ce 01       	movw	r24, r28
    11fa:	08 96       	adiw	r24, 0x08	; 8
    11fc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <xTaskRemoveFromEventList>
    1200:	88 23       	and	r24, r24
    1202:	41 f0       	breq	.+16     	; 0x1214 <xQueueGenericReset+0x7a>
    1204:	32 de       	rcall	.-924    	; 0xe6a <vPortYield>
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <xQueueGenericReset+0x7a>
    1208:	ce 01       	movw	r24, r28
    120a:	08 96       	adiw	r24, 0x08	; 8
    120c:	f5 dc       	rcall	.-1558   	; 0xbf8 <vListInitialise>
    120e:	ce 01       	movw	r24, r28
    1210:	41 96       	adiw	r24, 0x11	; 17
    1212:	f2 dc       	rcall	.-1564   	; 0xbf8 <vListInitialise>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <xQueueGenericCreate>:
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	08 2f       	mov	r16, r24
    122c:	16 2f       	mov	r17, r22
    122e:	f4 2e       	mov	r15, r20
    1230:	66 23       	and	r22, r22
    1232:	b9 f0       	breq	.+46     	; 0x1262 <xQueueGenericCreate+0x42>
    1234:	86 9f       	mul	r24, r22
    1236:	c0 01       	movw	r24, r0
    1238:	11 24       	eor	r1, r1
    123a:	81 96       	adiw	r24, 0x21	; 33
    123c:	f3 db       	rcall	.-2074   	; 0xa24 <pvPortMalloc>
    123e:	ec 01       	movw	r28, r24
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	41 f4       	brne	.+16     	; 0x1254 <xQueueGenericCreate+0x34>
    1244:	14 c0       	rjmp	.+40     	; 0x126e <xQueueGenericCreate+0x4e>
    1246:	0b 8f       	std	Y+27, r16	; 0x1b
    1248:	1c 8f       	std	Y+28, r17	; 0x1c
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	ce 01       	movw	r24, r28
    124e:	a5 df       	rcall	.-182    	; 0x119a <xQueueGenericReset>
    1250:	f8 a2       	std	Y+32, r15	; 0x20
    1252:	0d c0       	rjmp	.+26     	; 0x126e <xQueueGenericCreate+0x4e>
    1254:	81 96       	adiw	r24, 0x21	; 33
    1256:	99 83       	std	Y+1, r25	; 0x01
    1258:	88 83       	st	Y, r24
    125a:	f5 cf       	rjmp	.-22     	; 0x1246 <xQueueGenericCreate+0x26>
    125c:	d9 83       	std	Y+1, r29	; 0x01
    125e:	c8 83       	st	Y, r28
    1260:	f2 cf       	rjmp	.-28     	; 0x1246 <xQueueGenericCreate+0x26>
    1262:	81 e2       	ldi	r24, 0x21	; 33
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	de db       	rcall	.-2116   	; 0xa24 <pvPortMalloc>
    1268:	ec 01       	movw	r28, r24
    126a:	89 2b       	or	r24, r25
    126c:	b9 f7       	brne	.-18     	; 0x125c <xQueueGenericCreate+0x3c>
    126e:	ce 01       	movw	r24, r28
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	08 95       	ret

0000127c <xQueueGenericSend>:
    127c:	9f 92       	push	r9
    127e:	af 92       	push	r10
    1280:	bf 92       	push	r11
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 d0       	rcall	.+0      	; 0x1294 <xQueueGenericSend+0x18>
    1294:	1f 92       	push	r1
    1296:	1f 92       	push	r1
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8c 01       	movw	r16, r24
    129e:	6b 01       	movw	r12, r22
    12a0:	5d 83       	std	Y+5, r21	; 0x05
    12a2:	4c 83       	std	Y+4, r20	; 0x04
    12a4:	a2 2e       	mov	r10, r18
    12a6:	b1 2c       	mov	r11, r1
    12a8:	99 24       	eor	r9, r9
    12aa:	93 94       	inc	r9
    12ac:	7c 01       	movw	r14, r24
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	e8 0e       	add	r14, r24
    12b2:	f1 1c       	adc	r15, r1
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	0f 92       	push	r0
    12ba:	f8 01       	movw	r30, r16
    12bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    12be:	83 8d       	ldd	r24, Z+27	; 0x1b
    12c0:	98 17       	cp	r25, r24
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <xQueueGenericSend+0x4e>
    12c4:	f2 e0       	ldi	r31, 0x02	; 2
    12c6:	af 12       	cpse	r10, r31
    12c8:	15 c0       	rjmp	.+42     	; 0x12f4 <xQueueGenericSend+0x78>
    12ca:	4a 2d       	mov	r20, r10
    12cc:	b6 01       	movw	r22, r12
    12ce:	c8 01       	movw	r24, r16
    12d0:	9e de       	rcall	.-708    	; 0x100e <prvCopyDataToQueue>
    12d2:	f8 01       	movw	r30, r16
    12d4:	91 89       	ldd	r25, Z+17	; 0x11
    12d6:	99 23       	and	r25, r25
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <xQueueGenericSend+0x6c>
    12da:	c8 01       	movw	r24, r16
    12dc:	41 96       	adiw	r24, 0x11	; 17
    12de:	fe d7       	rcall	.+4092   	; 0x22dc <xTaskRemoveFromEventList>
    12e0:	88 23       	and	r24, r24
    12e2:	21 f0       	breq	.+8      	; 0x12ec <xQueueGenericSend+0x70>
    12e4:	c2 dd       	rcall	.-1148   	; 0xe6a <vPortYield>
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <xQueueGenericSend+0x70>
    12e8:	81 11       	cpse	r24, r1
    12ea:	bf dd       	rcall	.-1154   	; 0xe6a <vPortYield>
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	47 c0       	rjmp	.+142    	; 0x1382 <xQueueGenericSend+0x106>
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	89 2b       	or	r24, r25
    12fa:	21 f4       	brne	.+8      	; 0x1304 <xQueueGenericSend+0x88>
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <xQueueGenericSend+0x106>
    1304:	b1 10       	cpse	r11, r1
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <xQueueGenericSend+0x96>
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 b6 11 	call	0x236c	; 0x236c <vTaskInternalSetTimeOutState>
    1310:	b9 2c       	mov	r11, r9
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	d3 d5       	rcall	.+2982   	; 0x1ebe <vTaskSuspendAll>
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	0f 92       	push	r0
    131e:	f8 01       	movw	r30, r16
    1320:	85 8d       	ldd	r24, Z+29	; 0x1d
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	09 f4       	brne	.+2      	; 0x1328 <xQueueGenericSend+0xac>
    1326:	15 8e       	std	Z+29, r1	; 0x1d
    1328:	f8 01       	movw	r30, r16
    132a:	86 8d       	ldd	r24, Z+30	; 0x1e
    132c:	8f 3f       	cpi	r24, 0xFF	; 255
    132e:	09 f4       	brne	.+2      	; 0x1332 <xQueueGenericSend+0xb6>
    1330:	16 8e       	std	Z+30, r1	; 0x1e
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	be 01       	movw	r22, r28
    1338:	6c 5f       	subi	r22, 0xFC	; 252
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskCheckForTimeOut>
    1344:	81 11       	cpse	r24, r1
    1346:	19 c0       	rjmp	.+50     	; 0x137a <xQueueGenericSend+0xfe>
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	0f 92       	push	r0
    134e:	f8 01       	movw	r30, r16
    1350:	92 8d       	ldd	r25, Z+26	; 0x1a
    1352:	83 8d       	ldd	r24, Z+27	; 0x1b
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	98 13       	cpse	r25, r24
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <xQueueGenericSend+0xf6>
    135c:	6c 81       	ldd	r22, Y+4	; 0x04
    135e:	7d 81       	ldd	r23, Y+5	; 0x05
    1360:	c7 01       	movw	r24, r14
    1362:	93 d7       	rcall	.+3878   	; 0x228a <vTaskPlaceOnEventList>
    1364:	c8 01       	movw	r24, r16
    1366:	cc de       	rcall	.-616    	; 0x1100 <prvUnlockQueue>
    1368:	74 d6       	rcall	.+3304   	; 0x2052 <xTaskResumeAll>
    136a:	81 11       	cpse	r24, r1
    136c:	a3 cf       	rjmp	.-186    	; 0x12b4 <xQueueGenericSend+0x38>
    136e:	7d dd       	rcall	.-1286   	; 0xe6a <vPortYield>
    1370:	a1 cf       	rjmp	.-190    	; 0x12b4 <xQueueGenericSend+0x38>
    1372:	c8 01       	movw	r24, r16
    1374:	c5 de       	rcall	.-630    	; 0x1100 <prvUnlockQueue>
    1376:	6d d6       	rcall	.+3290   	; 0x2052 <xTaskResumeAll>
    1378:	9d cf       	rjmp	.-198    	; 0x12b4 <xQueueGenericSend+0x38>
    137a:	c8 01       	movw	r24, r16
    137c:	c1 de       	rcall	.-638    	; 0x1100 <prvUnlockQueue>
    137e:	69 d6       	rcall	.+3282   	; 0x2052 <xTaskResumeAll>
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	08 95       	ret

000013a4 <xQueueGenericSendFromISR>:
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	8a 01       	movw	r16, r20
    13b2:	fc 01       	movw	r30, r24
    13b4:	52 8d       	ldd	r21, Z+26	; 0x1a
    13b6:	33 8d       	ldd	r19, Z+27	; 0x1b
    13b8:	53 17       	cp	r21, r19
    13ba:	10 f0       	brcs	.+4      	; 0x13c0 <xQueueGenericSendFromISR+0x1c>
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	e1 f4       	brne	.+56     	; 0x13f8 <xQueueGenericSendFromISR+0x54>
    13c0:	42 2f       	mov	r20, r18
    13c2:	78 01       	movw	r14, r16
    13c4:	ec 01       	movw	r28, r24
    13c6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    13c8:	22 de       	rcall	.-956    	; 0x100e <prvCopyDataToQueue>
    13ca:	1f 3f       	cpi	r17, 0xFF	; 255
    13cc:	79 f4       	brne	.+30     	; 0x13ec <xQueueGenericSendFromISR+0x48>
    13ce:	89 89       	ldd	r24, Y+17	; 0x11
    13d0:	88 23       	and	r24, r24
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <xQueueGenericSendFromISR+0x58>
    13d4:	ce 01       	movw	r24, r28
    13d6:	41 96       	adiw	r24, 0x11	; 17
    13d8:	81 d7       	rcall	.+3842   	; 0x22dc <xTaskRemoveFromEventList>
    13da:	88 23       	and	r24, r24
    13dc:	89 f0       	breq	.+34     	; 0x1400 <xQueueGenericSendFromISR+0x5c>
    13de:	e1 14       	cp	r14, r1
    13e0:	f1 04       	cpc	r15, r1
    13e2:	81 f0       	breq	.+32     	; 0x1404 <xQueueGenericSendFromISR+0x60>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	f7 01       	movw	r30, r14
    13e8:	80 83       	st	Z, r24
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <xQueueGenericSendFromISR+0x62>
    13ec:	ff 24       	eor	r15, r15
    13ee:	f3 94       	inc	r15
    13f0:	f1 0e       	add	r15, r17
    13f2:	fe 8e       	std	Y+30, r15	; 0x1e
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <xQueueGenericSendFromISR+0x62>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <xQueueGenericSendFromISR+0x62>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <xQueueGenericSendFromISR+0x62>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <xQueueGenericSendFromISR+0x62>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	08 95       	ret

00001414 <xQueueReceive>:
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 d0       	rcall	.+0      	; 0x142c <xQueueReceive+0x18>
    142c:	1f 92       	push	r1
    142e:	1f 92       	push	r1
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	8c 01       	movw	r16, r24
    1436:	5b 01       	movw	r10, r22
    1438:	5d 83       	std	Y+5, r21	; 0x05
    143a:	4c 83       	std	Y+4, r20	; 0x04
    143c:	e1 2c       	mov	r14, r1
    143e:	99 24       	eor	r9, r9
    1440:	93 94       	inc	r9
    1442:	6c 01       	movw	r12, r24
    1444:	81 e1       	ldi	r24, 0x11	; 17
    1446:	c8 0e       	add	r12, r24
    1448:	d1 1c       	adc	r13, r1
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	0f 92       	push	r0
    1450:	f8 01       	movw	r30, r16
    1452:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1454:	ff 20       	and	r15, r15
    1456:	91 f0       	breq	.+36     	; 0x147c <xQueueReceive+0x68>
    1458:	b5 01       	movw	r22, r10
    145a:	c8 01       	movw	r24, r16
    145c:	37 de       	rcall	.-914    	; 0x10cc <prvCopyDataFromQueue>
    145e:	fa 94       	dec	r15
    1460:	f8 01       	movw	r30, r16
    1462:	f2 8e       	std	Z+26, r15	; 0x1a
    1464:	80 85       	ldd	r24, Z+8	; 0x08
    1466:	88 23       	and	r24, r24
    1468:	29 f0       	breq	.+10     	; 0x1474 <xQueueReceive+0x60>
    146a:	c8 01       	movw	r24, r16
    146c:	08 96       	adiw	r24, 0x08	; 8
    146e:	36 d7       	rcall	.+3692   	; 0x22dc <xTaskRemoveFromEventList>
    1470:	81 11       	cpse	r24, r1
    1472:	fb dc       	rcall	.-1546   	; 0xe6a <vPortYield>
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	44 c0       	rjmp	.+136    	; 0x1504 <xQueueReceive+0xf0>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	89 2b       	or	r24, r25
    1482:	21 f4       	brne	.+8      	; 0x148c <xQueueReceive+0x78>
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	3c c0       	rjmp	.+120    	; 0x1504 <xQueueReceive+0xf0>
    148c:	e1 10       	cpse	r14, r1
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <xQueueReceive+0x84>
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	6b d7       	rcall	.+3798   	; 0x236c <vTaskInternalSetTimeOutState>
    1496:	e9 2c       	mov	r14, r9
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	10 d5       	rcall	.+2592   	; 0x1ebe <vTaskSuspendAll>
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	0f 92       	push	r0
    14a4:	f8 01       	movw	r30, r16
    14a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    14a8:	8f 3f       	cpi	r24, 0xFF	; 255
    14aa:	09 f4       	brne	.+2      	; 0x14ae <xQueueReceive+0x9a>
    14ac:	15 8e       	std	Z+29, r1	; 0x1d
    14ae:	f8 01       	movw	r30, r16
    14b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b2:	8f 3f       	cpi	r24, 0xFF	; 255
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <xQueueReceive+0xa4>
    14b6:	16 8e       	std	Z+30, r1	; 0x1e
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	be 01       	movw	r22, r28
    14be:	6c 5f       	subi	r22, 0xFC	; 252
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	5d d7       	rcall	.+3770   	; 0x2382 <xTaskCheckForTimeOut>
    14c8:	81 11       	cpse	r24, r1
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <xQueueReceive+0xde>
    14cc:	c8 01       	movw	r24, r16
    14ce:	94 dd       	rcall	.-1240   	; 0xff8 <prvIsQueueEmpty>
    14d0:	88 23       	and	r24, r24
    14d2:	59 f0       	breq	.+22     	; 0x14ea <xQueueReceive+0xd6>
    14d4:	6c 81       	ldd	r22, Y+4	; 0x04
    14d6:	7d 81       	ldd	r23, Y+5	; 0x05
    14d8:	c6 01       	movw	r24, r12
    14da:	d7 d6       	rcall	.+3502   	; 0x228a <vTaskPlaceOnEventList>
    14dc:	c8 01       	movw	r24, r16
    14de:	10 de       	rcall	.-992    	; 0x1100 <prvUnlockQueue>
    14e0:	b8 d5       	rcall	.+2928   	; 0x2052 <xTaskResumeAll>
    14e2:	81 11       	cpse	r24, r1
    14e4:	b2 cf       	rjmp	.-156    	; 0x144a <xQueueReceive+0x36>
    14e6:	c1 dc       	rcall	.-1662   	; 0xe6a <vPortYield>
    14e8:	b0 cf       	rjmp	.-160    	; 0x144a <xQueueReceive+0x36>
    14ea:	c8 01       	movw	r24, r16
    14ec:	09 de       	rcall	.-1006   	; 0x1100 <prvUnlockQueue>
    14ee:	b1 d5       	rcall	.+2914   	; 0x2052 <xTaskResumeAll>
    14f0:	ac cf       	rjmp	.-168    	; 0x144a <xQueueReceive+0x36>
    14f2:	c8 01       	movw	r24, r16
    14f4:	05 de       	rcall	.-1014   	; 0x1100 <prvUnlockQueue>
    14f6:	ad d5       	rcall	.+2906   	; 0x2052 <xTaskResumeAll>
    14f8:	c8 01       	movw	r24, r16
    14fa:	7e dd       	rcall	.-1284   	; 0xff8 <prvIsQueueEmpty>
    14fc:	88 23       	and	r24, r24
    14fe:	09 f4       	brne	.+2      	; 0x1502 <xQueueReceive+0xee>
    1500:	a4 cf       	rjmp	.-184    	; 0x144a <xQueueReceive+0x36>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	08 95       	ret

00001526 <xQueueSemaphoreTake>:
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	00 d0       	rcall	.+0      	; 0x153a <xQueueSemaphoreTake+0x14>
    153a:	1f 92       	push	r1
    153c:	1f 92       	push	r1
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8c 01       	movw	r16, r24
    1544:	7d 83       	std	Y+5, r23	; 0x05
    1546:	6c 83       	std	Y+4, r22	; 0x04
    1548:	b1 2c       	mov	r11, r1
    154a:	d1 2c       	mov	r13, r1
    154c:	cc 24       	eor	r12, r12
    154e:	c3 94       	inc	r12
    1550:	7c 01       	movw	r14, r24
    1552:	81 e1       	ldi	r24, 0x11	; 17
    1554:	e8 0e       	add	r14, r24
    1556:	f1 1c       	adc	r15, r1
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	0f 92       	push	r0
    155e:	d8 01       	movw	r26, r16
    1560:	5a 96       	adiw	r26, 0x1a	; 26
    1562:	8c 91       	ld	r24, X
    1564:	5a 97       	sbiw	r26, 0x1a	; 26
    1566:	88 23       	and	r24, r24
    1568:	d9 f0       	breq	.+54     	; 0x15a0 <xQueueSemaphoreTake+0x7a>
    156a:	81 50       	subi	r24, 0x01	; 1
    156c:	5a 96       	adiw	r26, 0x1a	; 26
    156e:	8c 93       	st	X, r24
    1570:	5a 97       	sbiw	r26, 0x1a	; 26
    1572:	8d 91       	ld	r24, X+
    1574:	9c 91       	ld	r25, X
    1576:	89 2b       	or	r24, r25
    1578:	29 f4       	brne	.+10     	; 0x1584 <xQueueSemaphoreTake+0x5e>
    157a:	0e 94 0f 13 	call	0x261e	; 0x261e <pvTaskIncrementMutexHeldCount>
    157e:	f8 01       	movw	r30, r16
    1580:	95 83       	std	Z+5, r25	; 0x05
    1582:	84 83       	std	Z+4, r24	; 0x04
    1584:	d8 01       	movw	r26, r16
    1586:	18 96       	adiw	r26, 0x08	; 8
    1588:	8c 91       	ld	r24, X
    158a:	88 23       	and	r24, r24
    158c:	29 f0       	breq	.+10     	; 0x1598 <xQueueSemaphoreTake+0x72>
    158e:	c8 01       	movw	r24, r16
    1590:	08 96       	adiw	r24, 0x08	; 8
    1592:	a4 d6       	rcall	.+3400   	; 0x22dc <xTaskRemoveFromEventList>
    1594:	81 11       	cpse	r24, r1
    1596:	69 dc       	rcall	.-1838   	; 0xe6a <vPortYield>
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	70 c0       	rjmp	.+224    	; 0x1680 <xQueueSemaphoreTake+0x15a>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	89 2b       	or	r24, r25
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <xQueueSemaphoreTake+0x8a>
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	68 c0       	rjmp	.+208    	; 0x1680 <xQueueSemaphoreTake+0x15a>
    15b0:	d1 10       	cpse	r13, r1
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <xQueueSemaphoreTake+0x96>
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	d9 d6       	rcall	.+3506   	; 0x236c <vTaskInternalSetTimeOutState>
    15ba:	dc 2c       	mov	r13, r12
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	7e d4       	rcall	.+2300   	; 0x1ebe <vTaskSuspendAll>
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	0f 92       	push	r0
    15c8:	f8 01       	movw	r30, r16
    15ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    15cc:	8f 3f       	cpi	r24, 0xFF	; 255
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <xQueueSemaphoreTake+0xac>
    15d0:	15 8e       	std	Z+29, r1	; 0x1d
    15d2:	d8 01       	movw	r26, r16
    15d4:	5e 96       	adiw	r26, 0x1e	; 30
    15d6:	8c 91       	ld	r24, X
    15d8:	5e 97       	sbiw	r26, 0x1e	; 30
    15da:	8f 3f       	cpi	r24, 0xFF	; 255
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <xQueueSemaphoreTake+0xbc>
    15de:	5e 96       	adiw	r26, 0x1e	; 30
    15e0:	1c 92       	st	X, r1
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	be 01       	movw	r22, r28
    15e8:	6c 5f       	subi	r22, 0xFC	; 252
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	c8 d6       	rcall	.+3472   	; 0x2382 <xTaskCheckForTimeOut>
    15f2:	81 11       	cpse	r24, r1
    15f4:	21 c0       	rjmp	.+66     	; 0x1638 <xQueueSemaphoreTake+0x112>
    15f6:	c8 01       	movw	r24, r16
    15f8:	ff dc       	rcall	.-1538   	; 0xff8 <prvIsQueueEmpty>
    15fa:	88 23       	and	r24, r24
    15fc:	c9 f0       	breq	.+50     	; 0x1630 <xQueueSemaphoreTake+0x10a>
    15fe:	f8 01       	movw	r30, r16
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	89 2b       	or	r24, r25
    1606:	49 f4       	brne	.+18     	; 0x161a <xQueueSemaphoreTake+0xf4>
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	0f 92       	push	r0
    160e:	84 81       	ldd	r24, Z+4	; 0x04
    1610:	95 81       	ldd	r25, Z+5	; 0x05
    1612:	03 d7       	rcall	.+3590   	; 0x241a <xTaskPriorityInherit>
    1614:	b8 2e       	mov	r11, r24
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	6c 81       	ldd	r22, Y+4	; 0x04
    161c:	7d 81       	ldd	r23, Y+5	; 0x05
    161e:	c7 01       	movw	r24, r14
    1620:	34 d6       	rcall	.+3176   	; 0x228a <vTaskPlaceOnEventList>
    1622:	c8 01       	movw	r24, r16
    1624:	6d dd       	rcall	.-1318   	; 0x1100 <prvUnlockQueue>
    1626:	15 d5       	rcall	.+2602   	; 0x2052 <xTaskResumeAll>
    1628:	81 11       	cpse	r24, r1
    162a:	96 cf       	rjmp	.-212    	; 0x1558 <xQueueSemaphoreTake+0x32>
    162c:	1e dc       	rcall	.-1988   	; 0xe6a <vPortYield>
    162e:	94 cf       	rjmp	.-216    	; 0x1558 <xQueueSemaphoreTake+0x32>
    1630:	c8 01       	movw	r24, r16
    1632:	66 dd       	rcall	.-1332   	; 0x1100 <prvUnlockQueue>
    1634:	0e d5       	rcall	.+2588   	; 0x2052 <xTaskResumeAll>
    1636:	90 cf       	rjmp	.-224    	; 0x1558 <xQueueSemaphoreTake+0x32>
    1638:	c8 01       	movw	r24, r16
    163a:	62 dd       	rcall	.-1340   	; 0x1100 <prvUnlockQueue>
    163c:	0a d5       	rcall	.+2580   	; 0x2052 <xTaskResumeAll>
    163e:	c8 01       	movw	r24, r16
    1640:	db dc       	rcall	.-1610   	; 0xff8 <prvIsQueueEmpty>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <xQueueSemaphoreTake+0x122>
    1646:	88 cf       	rjmp	.-240    	; 0x1558 <xQueueSemaphoreTake+0x32>
    1648:	bb 20       	and	r11, r11
    164a:	c9 f0       	breq	.+50     	; 0x167e <xQueueSemaphoreTake+0x158>
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	0f 92       	push	r0
    1652:	f8 01       	movw	r30, r16
    1654:	81 89       	ldd	r24, Z+17	; 0x11
    1656:	88 23       	and	r24, r24
    1658:	39 f0       	breq	.+14     	; 0x1668 <xQueueSemaphoreTake+0x142>
    165a:	06 88       	ldd	r0, Z+22	; 0x16
    165c:	f7 89       	ldd	r31, Z+23	; 0x17
    165e:	e0 2d       	mov	r30, r0
    1660:	80 81       	ld	r24, Z
    1662:	64 e0       	ldi	r22, 0x04	; 4
    1664:	68 1b       	sub	r22, r24
    1666:	01 c0       	rjmp	.+2      	; 0x166a <xQueueSemaphoreTake+0x144>
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	d8 01       	movw	r26, r16
    166c:	14 96       	adiw	r26, 0x04	; 4
    166e:	8d 91       	ld	r24, X+
    1670:	9c 91       	ld	r25, X
    1672:	15 97       	sbiw	r26, 0x05	; 5
    1674:	84 d7       	rcall	.+3848   	; 0x257e <vTaskPriorityDisinheritAfterTimeout>
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	01 c0       	rjmp	.+2      	; 0x1680 <xQueueSemaphoreTake+0x15a>
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	08 95       	ret

0000169e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
    16aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ac:	8f 3f       	cpi	r24, 0xFF	; 255
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <vQueueWaitForMessageRestricted+0x14>
    16b0:	1d 8e       	std	Y+29, r1	; 0x1d
    16b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b4:	8f 3f       	cpi	r24, 0xFF	; 255
    16b6:	09 f4       	brne	.+2      	; 0x16ba <vQueueWaitForMessageRestricted+0x1c>
    16b8:	1e 8e       	std	Y+30, r1	; 0x1e
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c0:	81 11       	cpse	r24, r1
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16c4:	ce 01       	movw	r24, r28
    16c6:	41 96       	adiw	r24, 0x11	; 17
    16c8:	f1 d5       	rcall	.+3042   	; 0x22ac <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    16ca:	ce 01       	movw	r24, r28
    16cc:	19 dd       	rcall	.-1486   	; 0x1100 <prvUnlockQueue>
    }
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    16d4:	fc 01       	movw	r30, r24
    16d6:	44 81       	ldd	r20, Z+4	; 0x04
    16d8:	55 81       	ldd	r21, Z+5	; 0x05
    16da:	22 81       	ldd	r18, Z+2	; 0x02
    16dc:	33 81       	ldd	r19, Z+3	; 0x03
    16de:	24 0f       	add	r18, r20
    16e0:	35 1f       	adc	r19, r21
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	b9 01       	movw	r22, r18
    16e8:	68 1b       	sub	r22, r24
    16ea:	79 0b       	sbc	r23, r25
    16ec:	cb 01       	movw	r24, r22
    16ee:	64 17       	cp	r22, r20
    16f0:	75 07       	cpc	r23, r21
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <prvBytesInBuffer+0x24>
    16f4:	84 1b       	sub	r24, r20
    16f6:	95 0b       	sbc	r25, r21
    16f8:	08 95       	ret

000016fa <prvWriteBytesToBuffer>:
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	6c 01       	movw	r12, r24
    1710:	5b 01       	movw	r10, r22
    1712:	7a 01       	movw	r14, r20
    1714:	fc 01       	movw	r30, r24
    1716:	c2 81       	ldd	r28, Z+2	; 0x02
    1718:	d3 81       	ldd	r29, Z+3	; 0x03
    171a:	04 81       	ldd	r16, Z+4	; 0x04
    171c:	15 81       	ldd	r17, Z+5	; 0x05
    171e:	0c 1b       	sub	r16, r28
    1720:	1d 0b       	sbc	r17, r29
    1722:	40 17       	cp	r20, r16
    1724:	51 07       	cpc	r21, r17
    1726:	08 f4       	brcc	.+2      	; 0x172a <prvWriteBytesToBuffer+0x30>
    1728:	8a 01       	movw	r16, r20
    172a:	f6 01       	movw	r30, r12
    172c:	84 85       	ldd	r24, Z+12	; 0x0c
    172e:	95 85       	ldd	r25, Z+13	; 0x0d
    1730:	a8 01       	movw	r20, r16
    1732:	b5 01       	movw	r22, r10
    1734:	8c 0f       	add	r24, r28
    1736:	9d 1f       	adc	r25, r29
    1738:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    173c:	0e 15       	cp	r16, r14
    173e:	1f 05       	cpc	r17, r15
    1740:	58 f4       	brcc	.+22     	; 0x1758 <prvWriteBytesToBuffer+0x5e>
    1742:	a7 01       	movw	r20, r14
    1744:	40 1b       	sub	r20, r16
    1746:	51 0b       	sbc	r21, r17
    1748:	b5 01       	movw	r22, r10
    174a:	60 0f       	add	r22, r16
    174c:	71 1f       	adc	r23, r17
    174e:	f6 01       	movw	r30, r12
    1750:	84 85       	ldd	r24, Z+12	; 0x0c
    1752:	95 85       	ldd	r25, Z+13	; 0x0d
    1754:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    1758:	ce 01       	movw	r24, r28
    175a:	8e 0d       	add	r24, r14
    175c:	9f 1d       	adc	r25, r15
    175e:	f6 01       	movw	r30, r12
    1760:	24 81       	ldd	r18, Z+4	; 0x04
    1762:	35 81       	ldd	r19, Z+5	; 0x05
    1764:	82 17       	cp	r24, r18
    1766:	93 07       	cpc	r25, r19
    1768:	10 f0       	brcs	.+4      	; 0x176e <prvWriteBytesToBuffer+0x74>
    176a:	82 1b       	sub	r24, r18
    176c:	93 0b       	sbc	r25, r19
    176e:	f6 01       	movw	r30, r12
    1770:	93 83       	std	Z+3, r25	; 0x03
    1772:	82 83       	std	Z+2, r24	; 0x02
    1774:	c7 01       	movw	r24, r14
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	08 95       	ret

0000178c <prvWriteMessageToBuffer>:
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	1f 92       	push	r1
    179e:	1f 92       	push	r1
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	5a 83       	std	Y+2, r21	; 0x02
    17a6:	49 83       	std	Y+1, r20	; 0x01
    17a8:	21 15       	cp	r18, r1
    17aa:	31 05       	cpc	r19, r1
    17ac:	c9 f0       	breq	.+50     	; 0x17e0 <prvWriteMessageToBuffer+0x54>
    17ae:	6b 01       	movw	r12, r22
    17b0:	7c 01       	movw	r14, r24
    17b2:	fc 01       	movw	r30, r24
    17b4:	86 85       	ldd	r24, Z+14	; 0x0e
    17b6:	80 fd       	sbrc	r24, 0
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <prvWriteMessageToBuffer+0x3e>
    17ba:	ca 01       	movw	r24, r20
    17bc:	24 17       	cp	r18, r20
    17be:	35 07       	cpc	r19, r21
    17c0:	08 f4       	brcc	.+2      	; 0x17c4 <prvWriteMessageToBuffer+0x38>
    17c2:	c9 01       	movw	r24, r18
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	11 c0       	rjmp	.+34     	; 0x17ec <prvWriteMessageToBuffer+0x60>
    17ca:	20 17       	cp	r18, r16
    17cc:	31 07       	cpc	r19, r17
    17ce:	58 f0       	brcs	.+22     	; 0x17e6 <prvWriteMessageToBuffer+0x5a>
    17d0:	42 e0       	ldi	r20, 0x02	; 2
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	be 01       	movw	r22, r28
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	c7 01       	movw	r24, r14
    17dc:	8e df       	rcall	.-228    	; 0x16fa <prvWriteBytesToBuffer>
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <prvWriteMessageToBuffer+0x60>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <prvWriteMessageToBuffer+0x6a>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <prvWriteMessageToBuffer+0x6a>
    17ec:	49 81       	ldd	r20, Y+1	; 0x01
    17ee:	5a 81       	ldd	r21, Y+2	; 0x02
    17f0:	b6 01       	movw	r22, r12
    17f2:	c7 01       	movw	r24, r14
    17f4:	82 df       	rcall	.-252    	; 0x16fa <prvWriteBytesToBuffer>
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	08 95       	ret

0000180c <prvReadBytesFromBuffer>:
    180c:	af 92       	push	r10
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	7c 01       	movw	r14, r24
    1822:	5b 01       	movw	r10, r22
    1824:	e9 01       	movw	r28, r18
    1826:	42 17       	cp	r20, r18
    1828:	53 07       	cpc	r21, r19
    182a:	08 f4       	brcc	.+2      	; 0x182e <prvReadBytesFromBuffer+0x22>
    182c:	ea 01       	movw	r28, r20
    182e:	20 97       	sbiw	r28, 0x00	; 0
    1830:	79 f1       	breq	.+94     	; 0x1890 <prvReadBytesFromBuffer+0x84>
    1832:	f7 01       	movw	r30, r14
    1834:	00 81       	ld	r16, Z
    1836:	11 81       	ldd	r17, Z+1	; 0x01
    1838:	c4 80       	ldd	r12, Z+4	; 0x04
    183a:	d5 80       	ldd	r13, Z+5	; 0x05
    183c:	c0 1a       	sub	r12, r16
    183e:	d1 0a       	sbc	r13, r17
    1840:	cc 15       	cp	r28, r12
    1842:	dd 05       	cpc	r29, r13
    1844:	08 f4       	brcc	.+2      	; 0x1848 <prvReadBytesFromBuffer+0x3c>
    1846:	6e 01       	movw	r12, r28
    1848:	f7 01       	movw	r30, r14
    184a:	64 85       	ldd	r22, Z+12	; 0x0c
    184c:	75 85       	ldd	r23, Z+13	; 0x0d
    184e:	60 0f       	add	r22, r16
    1850:	71 1f       	adc	r23, r17
    1852:	a6 01       	movw	r20, r12
    1854:	c5 01       	movw	r24, r10
    1856:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    185a:	cc 16       	cp	r12, r28
    185c:	dd 06       	cpc	r13, r29
    185e:	58 f4       	brcc	.+22     	; 0x1876 <prvReadBytesFromBuffer+0x6a>
    1860:	ae 01       	movw	r20, r28
    1862:	4c 19       	sub	r20, r12
    1864:	5d 09       	sbc	r21, r13
    1866:	f7 01       	movw	r30, r14
    1868:	64 85       	ldd	r22, Z+12	; 0x0c
    186a:	75 85       	ldd	r23, Z+13	; 0x0d
    186c:	c5 01       	movw	r24, r10
    186e:	8c 0d       	add	r24, r12
    1870:	9d 1d       	adc	r25, r13
    1872:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <memcpy>
    1876:	0c 0f       	add	r16, r28
    1878:	1d 1f       	adc	r17, r29
    187a:	f7 01       	movw	r30, r14
    187c:	84 81       	ldd	r24, Z+4	; 0x04
    187e:	95 81       	ldd	r25, Z+5	; 0x05
    1880:	08 17       	cp	r16, r24
    1882:	19 07       	cpc	r17, r25
    1884:	10 f0       	brcs	.+4      	; 0x188a <prvReadBytesFromBuffer+0x7e>
    1886:	08 1b       	sub	r16, r24
    1888:	19 0b       	sbc	r17, r25
    188a:	f7 01       	movw	r30, r14
    188c:	11 83       	std	Z+1, r17	; 0x01
    188e:	00 83       	st	Z, r16
    1890:	ce 01       	movw	r24, r28
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	08 95       	ret

000018a8 <xStreamBufferGenericCreate>:
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	eb 01       	movw	r28, r22
    18b4:	11 e0       	ldi	r17, 0x01	; 1
    18b6:	41 30       	cpi	r20, 0x01	; 1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <xStreamBufferGenericCreate+0x14>
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	20 97       	sbiw	r28, 0x00	; 0
    18be:	11 f4       	brne	.+4      	; 0x18c4 <xStreamBufferGenericCreate+0x1c>
    18c0:	c1 e0       	ldi	r28, 0x01	; 1
    18c2:	d0 e0       	ldi	r29, 0x00	; 0
    18c4:	7c 01       	movw	r14, r24
    18c6:	2f ef       	ldi	r18, 0xFF	; 255
    18c8:	e2 1a       	sub	r14, r18
    18ca:	f2 0a       	sbc	r15, r18
    18cc:	41 96       	adiw	r24, 0x11	; 17
    18ce:	aa d8       	rcall	.-3756   	; 0xa24 <pvPortMalloc>
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	81 f0       	breq	.+32     	; 0x18f4 <xStreamBufferGenericCreate+0x4c>
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	fc 01       	movw	r30, r24
    18d8:	11 92       	st	Z+, r1
    18da:	2a 95       	dec	r18
    18dc:	e9 f7       	brne	.-6      	; 0x18d8 <xStreamBufferGenericCreate+0x30>
    18de:	9c 01       	movw	r18, r24
    18e0:	20 5f       	subi	r18, 0xF0	; 240
    18e2:	3f 4f       	sbci	r19, 0xFF	; 255
    18e4:	fc 01       	movw	r30, r24
    18e6:	35 87       	std	Z+13, r19	; 0x0d
    18e8:	24 87       	std	Z+12, r18	; 0x0c
    18ea:	f5 82       	std	Z+5, r15	; 0x05
    18ec:	e4 82       	std	Z+4, r14	; 0x04
    18ee:	d7 83       	std	Z+7, r29	; 0x07
    18f0:	c6 83       	std	Z+6, r28	; 0x06
    18f2:	16 87       	std	Z+14, r17	; 0x0e
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	08 95       	ret

00001900 <xStreamBufferReset>:
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	fc 01       	movw	r30, r24
    1906:	27 85       	ldd	r18, Z+15	; 0x0f
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	0f 92       	push	r0
    190e:	80 85       	ldd	r24, Z+8	; 0x08
    1910:	91 85       	ldd	r25, Z+9	; 0x09
    1912:	89 2b       	or	r24, r25
    1914:	d1 f4       	brne	.+52     	; 0x194a <xStreamBufferReset+0x4a>
    1916:	82 85       	ldd	r24, Z+10	; 0x0a
    1918:	93 85       	ldd	r25, Z+11	; 0x0b
    191a:	89 2b       	or	r24, r25
    191c:	c1 f4       	brne	.+48     	; 0x194e <xStreamBufferReset+0x4e>
    191e:	86 85       	ldd	r24, Z+14	; 0x0e
    1920:	46 81       	ldd	r20, Z+6	; 0x06
    1922:	57 81       	ldd	r21, Z+7	; 0x07
    1924:	64 81       	ldd	r22, Z+4	; 0x04
    1926:	75 81       	ldd	r23, Z+5	; 0x05
    1928:	a4 85       	ldd	r26, Z+12	; 0x0c
    192a:	b5 85       	ldd	r27, Z+13	; 0x0d
    192c:	90 e1       	ldi	r25, 0x10	; 16
    192e:	ef 01       	movw	r28, r30
    1930:	19 92       	st	Y+, r1
    1932:	9a 95       	dec	r25
    1934:	e9 f7       	brne	.-6      	; 0x1930 <xStreamBufferReset+0x30>
    1936:	b5 87       	std	Z+13, r27	; 0x0d
    1938:	a4 87       	std	Z+12, r26	; 0x0c
    193a:	75 83       	std	Z+5, r23	; 0x05
    193c:	64 83       	std	Z+4, r22	; 0x04
    193e:	57 83       	std	Z+7, r21	; 0x07
    1940:	46 83       	std	Z+6, r20	; 0x06
    1942:	86 87       	std	Z+14, r24	; 0x0e
    1944:	27 87       	std	Z+15, r18	; 0x0f
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <xStreamBufferReset+0x50>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <xStreamBufferReset+0x50>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	08 95       	ret

0000195a <xStreamBufferSpacesAvailable>:
    195a:	fc 01       	movw	r30, r24
    195c:	24 81       	ldd	r18, Z+4	; 0x04
    195e:	35 81       	ldd	r19, Z+5	; 0x05
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	42 81       	ldd	r20, Z+2	; 0x02
    1966:	53 81       	ldd	r21, Z+3	; 0x03
    1968:	82 0f       	add	r24, r18
    196a:	93 1f       	adc	r25, r19
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	84 1b       	sub	r24, r20
    1970:	95 0b       	sbc	r25, r21
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	10 f0       	brcs	.+4      	; 0x197c <xStreamBufferSpacesAvailable+0x22>
    1978:	82 1b       	sub	r24, r18
    197a:	93 0b       	sbc	r25, r19
    197c:	08 95       	ret

0000197e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
    1994:	5b 01       	movw	r10, r22
    1996:	6a 01       	movw	r12, r20
    1998:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    199a:	8e 85       	ldd	r24, Y+14	; 0x0e
    199c:	80 ff       	sbrs	r24, 0
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19a0:	8a 01       	movw	r16, r20
    19a2:	0e 5f       	subi	r16, 0xFE	; 254
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    19a8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19aa:	ce 01       	movw	r24, r28
    19ac:	d6 df       	rcall	.-84     	; 0x195a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    19ae:	9c 01       	movw	r18, r24
    19b0:	a6 01       	movw	r20, r12
    19b2:	b5 01       	movw	r22, r10
    19b4:	ce 01       	movw	r24, r28
    19b6:	ea de       	rcall	.-556    	; 0x178c <prvWriteMessageToBuffer>
    19b8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    19ba:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19bc:	b1 f0       	breq	.+44     	; 0x19ea <xStreamBufferSendFromISR+0x6c>
    19be:	ce 01       	movw	r24, r28
    19c0:	89 de       	rcall	.-750    	; 0x16d4 <prvBytesInBuffer>
    19c2:	2e 81       	ldd	r18, Y+6	; 0x06
    19c4:	3f 81       	ldd	r19, Y+7	; 0x07
    19c6:	82 17       	cp	r24, r18
    19c8:	93 07       	cpc	r25, r19
    19ca:	78 f0       	brcs	.+30     	; 0x19ea <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    19cc:	88 85       	ldd	r24, Y+8	; 0x08
    19ce:	99 85       	ldd	r25, Y+9	; 0x09
    19d0:	89 2b       	or	r24, r25
    19d2:	59 f0       	breq	.+22     	; 0x19ea <xStreamBufferSendFromISR+0x6c>
    19d4:	88 85       	ldd	r24, Y+8	; 0x08
    19d6:	99 85       	ldd	r25, Y+9	; 0x09
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	10 e0       	ldi	r17, 0x00	; 0
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	ba 01       	movw	r22, r20
    19e4:	2f d7       	rcall	.+3678   	; 0x2844 <xTaskGenericNotifyFromISR>
    19e6:	19 86       	std	Y+9, r1	; 0x09
    19e8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    19ea:	c6 01       	movw	r24, r12
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	08 95       	ret

00001a02 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1a02:	6f 92       	push	r6
    1a04:	7f 92       	push	r7
    1a06:	8f 92       	push	r8
    1a08:	9f 92       	push	r9
    1a0a:	af 92       	push	r10
    1a0c:	bf 92       	push	r11
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	1f 92       	push	r1
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	6c 01       	movw	r12, r24
    1a28:	3b 01       	movw	r6, r22
    1a2a:	4a 01       	movw	r8, r20
    1a2c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a2e:	fc 01       	movw	r30, r24
    1a30:	86 85       	ldd	r24, Z+14	; 0x0e
    1a32:	80 fd       	sbrc	r24, 0
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a36:	a1 2c       	mov	r10, r1
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	04 c0       	rjmp	.+8      	; 0x1a44 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a3c:	68 94       	set
    1a3e:	aa 24       	eor	r10, r10
    1a40:	a1 f8       	bld	r10, 1
    1a42:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a44:	e1 14       	cp	r14, r1
    1a46:	f1 04       	cpc	r15, r1
    1a48:	29 f1       	breq	.+74     	; 0x1a94 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a50:	c6 01       	movw	r24, r12
    1a52:	40 de       	rcall	.-896    	; 0x16d4 <prvBytesInBuffer>
    1a54:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a56:	a8 16       	cp	r10, r24
    1a58:	b9 06       	cpc	r11, r25
    1a5a:	38 f0       	brcs	.+14     	; 0x1a6a <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a60:	81 d7       	rcall	.+3842   	; 0x2964 <xTaskNotifyStateClear>
    1a62:	c8 d4       	rcall	.+2448   	; 0x23f4 <xTaskGetCurrentTaskHandle>
    1a64:	f6 01       	movw	r30, r12
    1a66:	91 87       	std	Z+9, r25	; 0x09
    1a68:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a6e:	a0 16       	cp	r10, r16
    1a70:	b1 06       	cpc	r11, r17
    1a72:	b0 f0       	brcs	.+44     	; 0x1aa0 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a74:	00 e0       	ldi	r16, 0x00	; 0
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	cb 01       	movw	r24, r22
    1a84:	de d5       	rcall	.+3004   	; 0x2642 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a86:	f6 01       	movw	r30, r12
    1a88:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a8a:	10 86       	std	Z+8, r1	; 0x08
    1a8c:	c6 01       	movw	r24, r12
    1a8e:	22 de       	rcall	.-956    	; 0x16d4 <prvBytesInBuffer>
    1a90:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <xStreamBufferReceive+0x98>
    1a94:	c6 01       	movw	r24, r12
    1a96:	1e de       	rcall	.-964    	; 0x16d4 <prvBytesInBuffer>
    1a98:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a9a:	a0 16       	cp	r10, r16
    1a9c:	b1 06       	cpc	r11, r17
    1a9e:	b8 f5       	brcc	.+110    	; 0x1b0e <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1aa0:	a1 14       	cp	r10, r1
    1aa2:	b1 04       	cpc	r11, r1
    1aa4:	c1 f0       	breq	.+48     	; 0x1ad6 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	e0 80       	ld	r14, Z
    1aaa:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1aac:	98 01       	movw	r18, r16
    1aae:	a5 01       	movw	r20, r10
    1ab0:	be 01       	movw	r22, r28
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	a9 de       	rcall	.-686    	; 0x180c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1abe:	0a 19       	sub	r16, r10
    1ac0:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1ac2:	88 16       	cp	r8, r24
    1ac4:	99 06       	cpc	r9, r25
    1ac6:	30 f4       	brcc	.+12     	; 0x1ad4 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1ac8:	f6 01       	movw	r30, r12
    1aca:	f1 82       	std	Z+1, r15	; 0x01
    1acc:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1ace:	81 2c       	mov	r8, r1
    1ad0:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1ad4:	4c 01       	movw	r8, r24
    1ad6:	98 01       	movw	r18, r16
    1ad8:	a4 01       	movw	r20, r8
    1ada:	b3 01       	movw	r22, r6
    1adc:	c6 01       	movw	r24, r12
    1ade:	96 de       	rcall	.-724    	; 0x180c <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ae4:	b1 f0       	breq	.+44     	; 0x1b12 <xStreamBufferReceive+0x110>
    1ae6:	eb d1       	rcall	.+982    	; 0x1ebe <vTaskSuspendAll>
    1ae8:	f6 01       	movw	r30, r12
    1aea:	82 85       	ldd	r24, Z+10	; 0x0a
    1aec:	93 85       	ldd	r25, Z+11	; 0x0b
    1aee:	89 2b       	or	r24, r25
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <xStreamBufferReceive+0x108>
    1af2:	82 85       	ldd	r24, Z+10	; 0x0a
    1af4:	93 85       	ldd	r25, Z+11	; 0x0b
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	10 e0       	ldi	r17, 0x00	; 0
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	ba 01       	movw	r22, r20
    1b02:	22 d6       	rcall	.+3140   	; 0x2748 <xTaskGenericNotify>
    1b04:	f6 01       	movw	r30, r12
    1b06:	13 86       	std	Z+11, r1	; 0x0b
    1b08:	12 86       	std	Z+10, r1	; 0x0a
    1b0a:	a3 d2       	rcall	.+1350   	; 0x2052 <xTaskResumeAll>
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b0e:	e1 2c       	mov	r14, r1
    1b10:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b12:	c7 01       	movw	r24, r14
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	df 90       	pop	r13
    1b26:	cf 90       	pop	r12
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	7f 90       	pop	r7
    1b32:	6f 90       	pop	r6
    1b34:	08 95       	ret

00001b36 <prvResetNextTaskUnblockTime>:
    1b36:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <pxDelayedTaskList>
    1b3a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1b3e:	80 81       	ld	r24, Z
    1b40:	81 11       	cpse	r24, r1
    1b42:	07 c0       	rjmp	.+14     	; 0x1b52 <prvResetNextTaskUnblockTime+0x1c>
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xNextTaskUnblockTime+0x1>
    1b4c:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNextTaskUnblockTime>
    1b50:	08 95       	ret
    1b52:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <pxDelayedTaskList>
    1b56:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1b5a:	05 80       	ldd	r0, Z+5	; 0x05
    1b5c:	f6 81       	ldd	r31, Z+6	; 0x06
    1b5e:	e0 2d       	mov	r30, r0
    1b60:	06 80       	ldd	r0, Z+6	; 0x06
    1b62:	f7 81       	ldd	r31, Z+7	; 0x07
    1b64:	e0 2d       	mov	r30, r0
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xNextTaskUnblockTime+0x1>
    1b6e:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNextTaskUnblockTime>
    1b72:	08 95       	ret

00001b74 <prvAddCurrentTaskToDelayedList>:
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	f6 2e       	mov	r15, r22
    1b82:	00 91 46 18 	lds	r16, 0x1846	; 0x801846 <xTickCount>
    1b86:	10 91 47 18 	lds	r17, 0x1847	; 0x801847 <xTickCount+0x1>
    1b8a:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    1b8e:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1b92:	02 96       	adiw	r24, 0x02	; 2
    1b94:	95 d8       	rcall	.-3798   	; 0xcc0 <uxListRemove>
    1b96:	cf 3f       	cpi	r28, 0xFF	; 255
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	d8 07       	cpc	r29, r24
    1b9c:	61 f4       	brne	.+24     	; 0x1bb6 <prvAddCurrentTaskToDelayedList+0x42>
    1b9e:	ff 20       	and	r15, r15
    1ba0:	51 f0       	breq	.+20     	; 0x1bb6 <prvAddCurrentTaskToDelayedList+0x42>
    1ba2:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    1ba6:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1baa:	6e 5f       	subi	r22, 0xFE	; 254
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	89 e4       	ldi	r24, 0x49	; 73
    1bb0:	98 e1       	ldi	r25, 0x18	; 24
    1bb2:	34 d8       	rcall	.-3992   	; 0xc1c <vListInsertEnd>
    1bb4:	2d c0       	rjmp	.+90     	; 0x1c10 <prvAddCurrentTaskToDelayedList+0x9c>
    1bb6:	c0 0f       	add	r28, r16
    1bb8:	d1 1f       	adc	r29, r17
    1bba:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1bbe:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1bc2:	d3 83       	std	Z+3, r29	; 0x03
    1bc4:	c2 83       	std	Z+2, r28	; 0x02
    1bc6:	c0 17       	cp	r28, r16
    1bc8:	d1 07       	cpc	r29, r17
    1bca:	60 f4       	brcc	.+24     	; 0x1be4 <prvAddCurrentTaskToDelayedList+0x70>
    1bcc:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    1bd0:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1bd4:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <pxOverflowDelayedTaskList>
    1bd8:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <pxOverflowDelayedTaskList+0x1>
    1bdc:	6e 5f       	subi	r22, 0xFE	; 254
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	3e d8       	rcall	.-3972   	; 0xc5e <vListInsert>
    1be2:	16 c0       	rjmp	.+44     	; 0x1c10 <prvAddCurrentTaskToDelayedList+0x9c>
    1be4:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    1be8:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1bec:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <pxDelayedTaskList>
    1bf0:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1bf4:	6e 5f       	subi	r22, 0xFE	; 254
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	32 d8       	rcall	.-3996   	; 0xc5e <vListInsert>
    1bfa:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xNextTaskUnblockTime>
    1bfe:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x1>
    1c02:	c8 17       	cp	r28, r24
    1c04:	d9 07       	cpc	r29, r25
    1c06:	20 f4       	brcc	.+8      	; 0x1c10 <prvAddCurrentTaskToDelayedList+0x9c>
    1c08:	d0 93 3f 18 	sts	0x183F, r29	; 0x80183f <xNextTaskUnblockTime+0x1>
    1c0c:	c0 93 3e 18 	sts	0x183E, r28	; 0x80183e <xNextTaskUnblockTime>
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	08 95       	ret

00001c1c <xTaskCreate>:
    1c1c:	4f 92       	push	r4
    1c1e:	5f 92       	push	r5
    1c20:	6f 92       	push	r6
    1c22:	7f 92       	push	r7
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	4c 01       	movw	r8, r24
    1c3c:	6b 01       	movw	r12, r22
    1c3e:	5a 01       	movw	r10, r20
    1c40:	29 01       	movw	r4, r18
    1c42:	ca 01       	movw	r24, r20
    1c44:	0e 94 12 05 	call	0xa24	; 0xa24 <pvPortMalloc>
    1c48:	3c 01       	movw	r6, r24
    1c4a:	89 2b       	or	r24, r25
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <xTaskCreate+0x34>
    1c4e:	f3 c0       	rjmp	.+486    	; 0x1e36 <xTaskCreate+0x21a>
    1c50:	8c e2       	ldi	r24, 0x2C	; 44
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 12 05 	call	0xa24	; 0xa24 <pvPortMalloc>
    1c58:	ec 01       	movw	r28, r24
    1c5a:	89 2b       	or	r24, r25
    1c5c:	99 f0       	breq	.+38     	; 0x1c84 <xTaskCreate+0x68>
    1c5e:	78 8e       	std	Y+24, r7	; 0x18
    1c60:	6f 8a       	std	Y+23, r6	; 0x17
    1c62:	a5 01       	movw	r20, r10
    1c64:	65 ea       	ldi	r22, 0xA5	; 165
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	c3 01       	movw	r24, r6
    1c6a:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <memset>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	a8 1a       	sub	r10, r24
    1c72:	b1 08       	sbc	r11, r1
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	a8 0e       	add	r10, r24
    1c7a:	b9 1e       	adc	r11, r25
    1c7c:	c1 14       	cp	r12, r1
    1c7e:	d1 04       	cpc	r13, r1
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <xTaskCreate+0x70>
    1c82:	20 c0       	rjmp	.+64     	; 0x1cc4 <xTaskCreate+0xa8>
    1c84:	c3 01       	movw	r24, r6
    1c86:	0e 94 cb 05 	call	0xb96	; 0xb96 <vPortFree>
    1c8a:	d5 c0       	rjmp	.+426    	; 0x1e36 <xTaskCreate+0x21a>
    1c8c:	d6 01       	movw	r26, r12
    1c8e:	8c 91       	ld	r24, X
    1c90:	89 8f       	std	Y+25, r24	; 0x19
    1c92:	8c 91       	ld	r24, X
    1c94:	88 23       	and	r24, r24
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <xTaskCreate+0xa4>
    1c98:	ae 01       	movw	r20, r28
    1c9a:	46 5e       	subi	r20, 0xE6	; 230
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	31 96       	adiw	r30, 0x01	; 1
    1ca2:	b8 e0       	ldi	r27, 0x08	; 8
    1ca4:	cb 0e       	add	r12, r27
    1ca6:	d1 1c       	adc	r13, r1
    1ca8:	cf 01       	movw	r24, r30
    1caa:	21 91       	ld	r18, Z+
    1cac:	da 01       	movw	r26, r20
    1cae:	2d 93       	st	X+, r18
    1cb0:	ad 01       	movw	r20, r26
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	8c 91       	ld	r24, X
    1cb6:	88 23       	and	r24, r24
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <xTaskCreate+0xa4>
    1cba:	ec 15       	cp	r30, r12
    1cbc:	fd 05       	cpc	r31, r13
    1cbe:	a1 f7       	brne	.-24     	; 0x1ca8 <xTaskCreate+0x8c>
    1cc0:	18 a2       	std	Y+32, r1	; 0x20
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <xTaskCreate+0xaa>
    1cc4:	19 8e       	std	Y+25, r1	; 0x19
    1cc6:	04 30       	cpi	r16, 0x04	; 4
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <xTaskCreate+0xb0>
    1cca:	03 e0       	ldi	r16, 0x03	; 3
    1ccc:	0e 8b       	std	Y+22, r16	; 0x16
    1cce:	0b a3       	std	Y+35, r16	; 0x23
    1cd0:	1c a2       	std	Y+36, r1	; 0x24
    1cd2:	6e 01       	movw	r12, r28
    1cd4:	b2 e0       	ldi	r27, 0x02	; 2
    1cd6:	cb 0e       	add	r12, r27
    1cd8:	d1 1c       	adc	r13, r1
    1cda:	c6 01       	movw	r24, r12
    1cdc:	0e 94 0a 06 	call	0xc14	; 0xc14 <vListInitialiseItem>
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	0c 96       	adiw	r24, 0x0c	; 12
    1ce4:	0e 94 0a 06 	call	0xc14	; 0xc14 <vListInitialiseItem>
    1ce8:	d9 87       	std	Y+9, r29	; 0x09
    1cea:	c8 87       	std	Y+8, r28	; 0x08
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	80 1b       	sub	r24, r16
    1cf2:	91 09       	sbc	r25, r1
    1cf4:	9d 87       	std	Y+13, r25	; 0x0d
    1cf6:	8c 87       	std	Y+12, r24	; 0x0c
    1cf8:	db 8b       	std	Y+19, r29	; 0x13
    1cfa:	ca 8b       	std	Y+18, r28	; 0x12
    1cfc:	1e a2       	std	Y+38, r1	; 0x26
    1cfe:	1d a2       	std	Y+37, r1	; 0x25
    1d00:	1f a2       	std	Y+39, r1	; 0x27
    1d02:	18 a6       	std	Y+40, r1	; 0x28
    1d04:	19 a6       	std	Y+41, r1	; 0x29
    1d06:	1a a6       	std	Y+42, r1	; 0x2a
    1d08:	1b a6       	std	Y+43, r1	; 0x2b
    1d0a:	a2 01       	movw	r20, r4
    1d0c:	b4 01       	movw	r22, r8
    1d0e:	c5 01       	movw	r24, r10
    1d10:	0e 94 87 06 	call	0xd0e	; 0xd0e <pxPortInitialiseStack>
    1d14:	99 83       	std	Y+1, r25	; 0x01
    1d16:	88 83       	st	Y, r24
    1d18:	e1 14       	cp	r14, r1
    1d1a:	f1 04       	cpc	r15, r1
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <xTaskCreate+0x108>
    1d1e:	f7 01       	movw	r30, r14
    1d20:	d1 83       	std	Z+1, r29	; 0x01
    1d22:	c0 83       	st	Z, r28
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	0f 92       	push	r0
    1d2a:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <uxCurrentNumberOfTasks>
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	80 93 48 18 	sts	0x1848, r24	; 0x801848 <uxCurrentNumberOfTasks>
    1d34:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    1d38:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1d3c:	89 2b       	or	r24, r25
    1d3e:	d1 f5       	brne	.+116    	; 0x1db4 <xTaskCreate+0x198>
    1d40:	d0 93 a0 18 	sts	0x18A0, r29	; 0x8018a0 <pxCurrentTCB+0x1>
    1d44:	c0 93 9f 18 	sts	0x189F, r28	; 0x80189f <pxCurrentTCB>
    1d48:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <uxCurrentNumberOfTasks>
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <xTaskCreate+0x136>
    1d50:	41 c0       	rjmp	.+130    	; 0x1dd4 <xTaskCreate+0x1b8>
    1d52:	8b e7       	ldi	r24, 0x7B	; 123
    1d54:	98 e1       	ldi	r25, 0x18	; 24
    1d56:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d5a:	84 e8       	ldi	r24, 0x84	; 132
    1d5c:	98 e1       	ldi	r25, 0x18	; 24
    1d5e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d62:	8d e8       	ldi	r24, 0x8D	; 141
    1d64:	98 e1       	ldi	r25, 0x18	; 24
    1d66:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d6a:	86 e9       	ldi	r24, 0x96	; 150
    1d6c:	98 e1       	ldi	r25, 0x18	; 24
    1d6e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d72:	82 e7       	ldi	r24, 0x72	; 114
    1d74:	98 e1       	ldi	r25, 0x18	; 24
    1d76:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d7a:	89 e6       	ldi	r24, 0x69	; 105
    1d7c:	98 e1       	ldi	r25, 0x18	; 24
    1d7e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d82:	8c e5       	ldi	r24, 0x5C	; 92
    1d84:	98 e1       	ldi	r25, 0x18	; 24
    1d86:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d8a:	83 e5       	ldi	r24, 0x53	; 83
    1d8c:	98 e1       	ldi	r25, 0x18	; 24
    1d8e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d92:	89 e4       	ldi	r24, 0x49	; 73
    1d94:	98 e1       	ldi	r25, 0x18	; 24
    1d96:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    1d9a:	82 e7       	ldi	r24, 0x72	; 114
    1d9c:	98 e1       	ldi	r25, 0x18	; 24
    1d9e:	90 93 68 18 	sts	0x1868, r25	; 0x801868 <pxDelayedTaskList+0x1>
    1da2:	80 93 67 18 	sts	0x1867, r24	; 0x801867 <pxDelayedTaskList>
    1da6:	89 e6       	ldi	r24, 0x69	; 105
    1da8:	98 e1       	ldi	r25, 0x18	; 24
    1daa:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <pxOverflowDelayedTaskList+0x1>
    1dae:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <pxOverflowDelayedTaskList>
    1db2:	10 c0       	rjmp	.+32     	; 0x1dd4 <xTaskCreate+0x1b8>
    1db4:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    1db8:	81 11       	cpse	r24, r1
    1dba:	0c c0       	rjmp	.+24     	; 0x1dd4 <xTaskCreate+0x1b8>
    1dbc:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1dc0:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1dc4:	96 89       	ldd	r25, Z+22	; 0x16
    1dc6:	8e 89       	ldd	r24, Y+22	; 0x16
    1dc8:	89 17       	cp	r24, r25
    1dca:	20 f0       	brcs	.+8      	; 0x1dd4 <xTaskCreate+0x1b8>
    1dcc:	d0 93 a0 18 	sts	0x18A0, r29	; 0x8018a0 <pxCurrentTCB+0x1>
    1dd0:	c0 93 9f 18 	sts	0x189F, r28	; 0x80189f <pxCurrentTCB>
    1dd4:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <uxTaskNumber>
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <uxTaskNumber>
    1dde:	89 a3       	std	Y+33, r24	; 0x21
    1de0:	8e 89       	ldd	r24, Y+22	; 0x16
    1de2:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    1de6:	98 17       	cp	r25, r24
    1de8:	10 f4       	brcc	.+4      	; 0x1dee <xTaskCreate+0x1d2>
    1dea:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 01       	movw	r18, r24
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	b6 01       	movw	r22, r12
    1e04:	85 58       	subi	r24, 0x85	; 133
    1e06:	97 4e       	sbci	r25, 0xE7	; 231
    1e08:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    1e14:	88 23       	and	r24, r24
    1e16:	59 f0       	breq	.+22     	; 0x1e2e <xTaskCreate+0x212>
    1e18:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1e1c:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1e20:	96 89       	ldd	r25, Z+22	; 0x16
    1e22:	8e 89       	ldd	r24, Y+22	; 0x16
    1e24:	98 17       	cp	r25, r24
    1e26:	28 f4       	brcc	.+10     	; 0x1e32 <xTaskCreate+0x216>
    1e28:	20 d8       	rcall	.-4032   	; 0xe6a <vPortYield>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <xTaskCreate+0x21c>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <xTaskCreate+0x21c>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <xTaskCreate+0x21c>
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	7f 90       	pop	r7
    1e50:	6f 90       	pop	r6
    1e52:	5f 90       	pop	r5
    1e54:	4f 90       	pop	r4
    1e56:	08 95       	ret

00001e58 <vTaskStartScheduler>:
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	0f 2e       	mov	r0, r31
    1e60:	fc e3       	ldi	r31, 0x3C	; 60
    1e62:	ef 2e       	mov	r14, r31
    1e64:	f8 e1       	ldi	r31, 0x18	; 24
    1e66:	ff 2e       	mov	r15, r31
    1e68:	f0 2d       	mov	r31, r0
    1e6a:	00 e0       	ldi	r16, 0x00	; 0
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 ec       	ldi	r20, 0xC0	; 192
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	6b e9       	ldi	r22, 0x9B	; 155
    1e76:	75 e0       	ldi	r23, 0x05	; 5
    1e78:	8d ec       	ldi	r24, 0xCD	; 205
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	cf de       	rcall	.-610    	; 0x1c1c <xTaskCreate>
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	d1 f4       	brne	.+52     	; 0x1eb6 <vTaskStartScheduler+0x5e>
    1e82:	dc d5       	rcall	.+3000   	; 0x2a3c <xTimerCreateTimerTask>
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	b9 f4       	brne	.+46     	; 0x1eb6 <vTaskStartScheduler+0x5e>
    1e88:	f8 94       	cli
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	9f ef       	ldi	r25, 0xFF	; 255
    1e8e:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xNextTaskUnblockTime+0x1>
    1e92:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNextTaskUnblockTime>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    1e9c:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    1ea0:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    1ea4:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1ea8:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1eac:	85 a1       	ldd	r24, Z+37	; 0x25
    1eae:	0e 94 b5 04 	call	0x96a	; 0x96a <task_switch_in>
    1eb2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xPortStartScheduler>
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	08 95       	ret

00001ebe <vTaskSuspendAll>:
    1ebe:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <uxSchedulerSuspended>
    1ec8:	08 95       	ret

00001eca <xTaskGetTickCount>:
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	0f 92       	push	r0
    1ed0:	80 91 46 18 	lds	r24, 0x1846	; 0x801846 <xTickCount>
    1ed4:	90 91 47 18 	lds	r25, 0x1847	; 0x801847 <xTickCount+0x1>
    1ed8:	0f 90       	pop	r0
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	08 95       	ret

00001ede <xTaskIncrementTick>:
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	98 c0       	rjmp	.+304    	; 0x2026 <xTaskIncrementTick+0x148>
    1ef6:	e0 90 46 18 	lds	r14, 0x1846	; 0x801846 <xTickCount>
    1efa:	f0 90 47 18 	lds	r15, 0x1847	; 0x801847 <xTickCount+0x1>
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	e8 1a       	sub	r14, r24
    1f02:	f8 0a       	sbc	r15, r24
    1f04:	f0 92 47 18 	sts	0x1847, r15	; 0x801847 <xTickCount+0x1>
    1f08:	e0 92 46 18 	sts	0x1846, r14	; 0x801846 <xTickCount>
    1f0c:	e1 14       	cp	r14, r1
    1f0e:	f1 04       	cpc	r15, r1
    1f10:	b1 f4       	brne	.+44     	; 0x1f3e <xTaskIncrementTick+0x60>
    1f12:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <pxDelayedTaskList>
    1f16:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1f1a:	20 91 65 18 	lds	r18, 0x1865	; 0x801865 <pxOverflowDelayedTaskList>
    1f1e:	30 91 66 18 	lds	r19, 0x1866	; 0x801866 <pxOverflowDelayedTaskList+0x1>
    1f22:	30 93 68 18 	sts	0x1868, r19	; 0x801868 <pxDelayedTaskList+0x1>
    1f26:	20 93 67 18 	sts	0x1867, r18	; 0x801867 <pxDelayedTaskList>
    1f2a:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <pxOverflowDelayedTaskList+0x1>
    1f2e:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <pxOverflowDelayedTaskList>
    1f32:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <xNumOfOverflows>
    1f36:	8f 5f       	subi	r24, 0xFF	; 255
    1f38:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <xNumOfOverflows>
    1f3c:	fc dd       	rcall	.-1032   	; 0x1b36 <prvResetNextTaskUnblockTime>
    1f3e:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xNextTaskUnblockTime>
    1f42:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xNextTaskUnblockTime+0x1>
    1f46:	e8 16       	cp	r14, r24
    1f48:	f9 06       	cpc	r15, r25
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <xTaskIncrementTick+0x72>
    1f4c:	d1 2c       	mov	r13, r1
    1f4e:	53 c0       	rjmp	.+166    	; 0x1ff6 <xTaskIncrementTick+0x118>
    1f50:	d1 2c       	mov	r13, r1
    1f52:	cc 24       	eor	r12, r12
    1f54:	c3 94       	inc	r12
    1f56:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <pxDelayedTaskList>
    1f5a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1f5e:	80 81       	ld	r24, Z
    1f60:	81 11       	cpse	r24, r1
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <xTaskIncrementTick+0x94>
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xNextTaskUnblockTime+0x1>
    1f6c:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNextTaskUnblockTime>
    1f70:	42 c0       	rjmp	.+132    	; 0x1ff6 <xTaskIncrementTick+0x118>
    1f72:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <pxDelayedTaskList>
    1f76:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <pxDelayedTaskList+0x1>
    1f7a:	05 80       	ldd	r0, Z+5	; 0x05
    1f7c:	f6 81       	ldd	r31, Z+6	; 0x06
    1f7e:	e0 2d       	mov	r30, r0
    1f80:	c6 81       	ldd	r28, Z+6	; 0x06
    1f82:	d7 81       	ldd	r29, Z+7	; 0x07
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	e8 16       	cp	r14, r24
    1f8a:	f9 06       	cpc	r15, r25
    1f8c:	28 f4       	brcc	.+10     	; 0x1f98 <xTaskIncrementTick+0xba>
    1f8e:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xNextTaskUnblockTime+0x1>
    1f92:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNextTaskUnblockTime>
    1f96:	2f c0       	rjmp	.+94     	; 0x1ff6 <xTaskIncrementTick+0x118>
    1f98:	8e 01       	movw	r16, r28
    1f9a:	0e 5f       	subi	r16, 0xFE	; 254
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    1fa4:	8c 89       	ldd	r24, Y+20	; 0x14
    1fa6:	9d 89       	ldd	r25, Y+21	; 0x15
    1fa8:	89 2b       	or	r24, r25
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <xTaskIncrementTick+0xd6>
    1fac:	ce 01       	movw	r24, r28
    1fae:	0c 96       	adiw	r24, 0x0c	; 12
    1fb0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    1fb4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fb6:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    1fba:	98 17       	cp	r25, r24
    1fbc:	10 f4       	brcc	.+4      	; 0x1fc2 <xTaskIncrementTick+0xe4>
    1fbe:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9c 01       	movw	r18, r24
    1fc6:	22 0f       	add	r18, r18
    1fc8:	33 1f       	adc	r19, r19
    1fca:	22 0f       	add	r18, r18
    1fcc:	33 1f       	adc	r19, r19
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	b8 01       	movw	r22, r16
    1fd8:	85 58       	subi	r24, 0x85	; 133
    1fda:	97 4e       	sbci	r25, 0xE7	; 231
    1fdc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    1fe0:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1fe4:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1fe8:	9e 89       	ldd	r25, Y+22	; 0x16
    1fea:	86 89       	ldd	r24, Z+22	; 0x16
    1fec:	98 17       	cp	r25, r24
    1fee:	08 f4       	brcc	.+2      	; 0x1ff2 <xTaskIncrementTick+0x114>
    1ff0:	b2 cf       	rjmp	.-156    	; 0x1f56 <xTaskIncrementTick+0x78>
    1ff2:	dc 2c       	mov	r13, r12
    1ff4:	b0 cf       	rjmp	.-160    	; 0x1f56 <xTaskIncrementTick+0x78>
    1ff6:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    1ffa:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    1ffe:	86 89       	ldd	r24, Z+22	; 0x16
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	ee 0f       	add	r30, r30
    200e:	ff 1f       	adc	r31, r31
    2010:	8e 0f       	add	r24, r30
    2012:	9f 1f       	adc	r25, r31
    2014:	fc 01       	movw	r30, r24
    2016:	e5 58       	subi	r30, 0x85	; 133
    2018:	f7 4e       	sbci	r31, 0xE7	; 231
    201a:	80 81       	ld	r24, Z
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	48 f0       	brcs	.+18     	; 0x2032 <xTaskIncrementTick+0x154>
    2020:	dd 24       	eor	r13, r13
    2022:	d3 94       	inc	r13
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <xTaskIncrementTick+0x154>
    2026:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <uxPendedTicks>
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <uxPendedTicks>
    2030:	d1 2c       	mov	r13, r1
    2032:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2036:	88 23       	and	r24, r24
    2038:	11 f0       	breq	.+4      	; 0x203e <xTaskIncrementTick+0x160>
    203a:	dd 24       	eor	r13, r13
    203c:	d3 94       	inc	r13
    203e:	8d 2d       	mov	r24, r13
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	08 95       	ret

00002052 <xTaskResumeAll>:
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	0f 92       	push	r0
    2066:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    206a:	81 50       	subi	r24, 0x01	; 1
    206c:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <uxSchedulerSuspended>
    2070:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    2074:	81 11       	cpse	r24, r1
    2076:	5d c0       	rjmp	.+186    	; 0x2132 <xTaskResumeAll+0xe0>
    2078:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <uxCurrentNumberOfTasks>
    207c:	81 11       	cpse	r24, r1
    207e:	33 c0       	rjmp	.+102    	; 0x20e6 <xTaskResumeAll+0x94>
    2080:	5b c0       	rjmp	.+182    	; 0x2138 <xTaskResumeAll+0xe6>
    2082:	d7 01       	movw	r26, r14
    2084:	15 96       	adiw	r26, 0x05	; 5
    2086:	ed 91       	ld	r30, X+
    2088:	fc 91       	ld	r31, X
    208a:	16 97       	sbiw	r26, 0x06	; 6
    208c:	c6 81       	ldd	r28, Z+6	; 0x06
    208e:	d7 81       	ldd	r29, Z+7	; 0x07
    2090:	ce 01       	movw	r24, r28
    2092:	0c 96       	adiw	r24, 0x0c	; 12
    2094:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    2098:	8e 01       	movw	r16, r28
    209a:	0e 5f       	subi	r16, 0xFE	; 254
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	c8 01       	movw	r24, r16
    20a0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    20a4:	8e 89       	ldd	r24, Y+22	; 0x16
    20a6:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    20aa:	98 17       	cp	r25, r24
    20ac:	10 f4       	brcc	.+4      	; 0x20b2 <xTaskResumeAll+0x60>
    20ae:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9c 01       	movw	r18, r24
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	b8 01       	movw	r22, r16
    20c8:	85 58       	subi	r24, 0x85	; 133
    20ca:	97 4e       	sbci	r25, 0xE7	; 231
    20cc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    20d0:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    20d4:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    20d8:	9e 89       	ldd	r25, Y+22	; 0x16
    20da:	86 89       	ldd	r24, Z+22	; 0x16
    20dc:	98 17       	cp	r25, r24
    20de:	68 f0       	brcs	.+26     	; 0x20fa <xTaskResumeAll+0xa8>
    20e0:	d0 92 42 18 	sts	0x1842, r13	; 0x801842 <xYieldPending>
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <xTaskResumeAll+0xa8>
    20e6:	c0 e0       	ldi	r28, 0x00	; 0
    20e8:	d0 e0       	ldi	r29, 0x00	; 0
    20ea:	0f 2e       	mov	r0, r31
    20ec:	fc e5       	ldi	r31, 0x5C	; 92
    20ee:	ef 2e       	mov	r14, r31
    20f0:	f8 e1       	ldi	r31, 0x18	; 24
    20f2:	ff 2e       	mov	r15, r31
    20f4:	f0 2d       	mov	r31, r0
    20f6:	dd 24       	eor	r13, r13
    20f8:	d3 94       	inc	r13
    20fa:	f7 01       	movw	r30, r14
    20fc:	80 81       	ld	r24, Z
    20fe:	81 11       	cpse	r24, r1
    2100:	c0 cf       	rjmp	.-128    	; 0x2082 <xTaskResumeAll+0x30>
    2102:	cd 2b       	or	r28, r29
    2104:	09 f0       	breq	.+2      	; 0x2108 <xTaskResumeAll+0xb6>
    2106:	17 dd       	rcall	.-1490   	; 0x1b36 <prvResetNextTaskUnblockTime>
    2108:	c0 91 43 18 	lds	r28, 0x1843	; 0x801843 <uxPendedTicks>
    210c:	cc 23       	and	r28, r28
    210e:	49 f0       	breq	.+18     	; 0x2122 <xTaskResumeAll+0xd0>
    2110:	d1 e0       	ldi	r29, 0x01	; 1
    2112:	e5 de       	rcall	.-566    	; 0x1ede <xTaskIncrementTick>
    2114:	81 11       	cpse	r24, r1
    2116:	d0 93 42 18 	sts	0x1842, r29	; 0x801842 <xYieldPending>
    211a:	c1 50       	subi	r28, 0x01	; 1
    211c:	d1 f7       	brne	.-12     	; 0x2112 <xTaskResumeAll+0xc0>
    211e:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <uxPendedTicks>
    2122:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <xYieldPending>
    2126:	88 23       	and	r24, r24
    2128:	31 f0       	breq	.+12     	; 0x2136 <xTaskResumeAll+0xe4>
    212a:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortYield>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <xTaskResumeAll+0xe6>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <xTaskResumeAll+0xe6>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	ff 90       	pop	r15
    2146:	ef 90       	pop	r14
    2148:	df 90       	pop	r13
    214a:	08 95       	ret

0000214c <vTaskDelay>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	89 2b       	or	r24, r25
    2154:	39 f0       	breq	.+14     	; 0x2164 <vTaskDelay+0x18>
    2156:	b3 de       	rcall	.-666    	; 0x1ebe <vTaskSuspendAll>
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	ce 01       	movw	r24, r28
    215c:	0b dd       	rcall	.-1514   	; 0x1b74 <prvAddCurrentTaskToDelayedList>
    215e:	79 df       	rcall	.-270    	; 0x2052 <xTaskResumeAll>
    2160:	81 11       	cpse	r24, r1
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <vTaskDelay+0x1c>
    2164:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortYield>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <vTaskSwitchContext>:
    216e:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    2172:	88 23       	and	r24, r24
    2174:	21 f0       	breq	.+8      	; 0x217e <vTaskSwitchContext+0x10>
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    217c:	08 95       	ret
    217e:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xYieldPending>
    2182:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2186:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    218a:	85 a1       	ldd	r24, Z+37	; 0x25
    218c:	0e 94 bf 04 	call	0x97e	; 0x97e <task_switch_out>
    2190:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
    2194:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2198:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    219c:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    21a0:	2d 91       	ld	r18, X+
    21a2:	3c 91       	ld	r19, X
    21a4:	87 89       	ldd	r24, Z+23	; 0x17
    21a6:	90 8d       	ldd	r25, Z+24	; 0x18
    21a8:	82 17       	cp	r24, r18
    21aa:	93 07       	cpc	r25, r19
    21ac:	58 f0       	brcs	.+22     	; 0x21c4 <vTaskSwitchContext+0x56>
    21ae:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    21b2:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    21b6:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    21ba:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    21be:	67 5e       	subi	r22, 0xE7	; 231
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	1f d5       	rcall	.+2622   	; 0x2c02 <vApplicationStackOverflowHook>
    21c4:	20 91 45 18 	lds	r18, 0x1845	; 0x801845 <uxTopReadyPriority>
    21c8:	82 2f       	mov	r24, r18
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	fc 01       	movw	r30, r24
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e8 0f       	add	r30, r24
    21dc:	f9 1f       	adc	r31, r25
    21de:	e5 58       	subi	r30, 0x85	; 133
    21e0:	f7 4e       	sbci	r31, 0xE7	; 231
    21e2:	30 81       	ld	r19, Z
    21e4:	31 11       	cpse	r19, r1
    21e6:	11 c0       	rjmp	.+34     	; 0x220a <__stack+0xb>
    21e8:	21 50       	subi	r18, 0x01	; 1
    21ea:	82 2f       	mov	r24, r18
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	fc 01       	movw	r30, r24
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	e8 0f       	add	r30, r24
    21fe:	f9 1f       	adc	r31, r25
    2200:	e5 58       	subi	r30, 0x85	; 133
    2202:	f7 4e       	sbci	r31, 0xE7	; 231
    2204:	30 81       	ld	r19, Z
    2206:	33 23       	and	r19, r19
    2208:	79 f3       	breq	.-34     	; 0x21e8 <vTaskSwitchContext+0x7a>
    220a:	ac 01       	movw	r20, r24
    220c:	44 0f       	add	r20, r20
    220e:	55 1f       	adc	r21, r21
    2210:	44 0f       	add	r20, r20
    2212:	55 1f       	adc	r21, r21
    2214:	44 0f       	add	r20, r20
    2216:	55 1f       	adc	r21, r21
    2218:	48 0f       	add	r20, r24
    221a:	59 1f       	adc	r21, r25
    221c:	da 01       	movw	r26, r20
    221e:	a5 58       	subi	r26, 0x85	; 133
    2220:	b7 4e       	sbci	r27, 0xE7	; 231
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	ed 91       	ld	r30, X+
    2226:	fc 91       	ld	r31, X
    2228:	12 97       	sbiw	r26, 0x02	; 2
    222a:	02 80       	ldd	r0, Z+2	; 0x02
    222c:	f3 81       	ldd	r31, Z+3	; 0x03
    222e:	e0 2d       	mov	r30, r0
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	fc 93       	st	X, r31
    2234:	ee 93       	st	-X, r30
    2236:	11 97       	sbiw	r26, 0x01	; 1
    2238:	42 58       	subi	r20, 0x82	; 130
    223a:	57 4e       	sbci	r21, 0xE7	; 231
    223c:	e4 17       	cp	r30, r20
    223e:	f5 07       	cpc	r31, r21
    2240:	29 f4       	brne	.+10     	; 0x224c <__stack+0x4d>
    2242:	42 81       	ldd	r20, Z+2	; 0x02
    2244:	53 81       	ldd	r21, Z+3	; 0x03
    2246:	fd 01       	movw	r30, r26
    2248:	52 83       	std	Z+2, r21	; 0x02
    224a:	41 83       	std	Z+1, r20	; 0x01
    224c:	fc 01       	movw	r30, r24
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	8e 0f       	add	r24, r30
    225c:	9f 1f       	adc	r25, r31
    225e:	fc 01       	movw	r30, r24
    2260:	e5 58       	subi	r30, 0x85	; 133
    2262:	f7 4e       	sbci	r31, 0xE7	; 231
    2264:	01 80       	ldd	r0, Z+1	; 0x01
    2266:	f2 81       	ldd	r31, Z+2	; 0x02
    2268:	e0 2d       	mov	r30, r0
    226a:	86 81       	ldd	r24, Z+6	; 0x06
    226c:	97 81       	ldd	r25, Z+7	; 0x07
    226e:	90 93 a0 18 	sts	0x18A0, r25	; 0x8018a0 <pxCurrentTCB+0x1>
    2272:	80 93 9f 18 	sts	0x189F, r24	; 0x80189f <pxCurrentTCB>
    2276:	20 93 45 18 	sts	0x1845, r18	; 0x801845 <uxTopReadyPriority>
    227a:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    227e:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2282:	85 a1       	ldd	r24, Z+37	; 0x25
    2284:	0c 94 b5 04 	jmp	0x96a	; 0x96a <task_switch_in>
    2288:	08 95       	ret

0000228a <vTaskPlaceOnEventList>:
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	eb 01       	movw	r28, r22
    2290:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    2294:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2298:	64 5f       	subi	r22, 0xF4	; 244
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vListInsert>
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	ce 01       	movw	r24, r28
    22a4:	67 dc       	rcall	.-1842   	; 0x1b74 <prvAddCurrentTaskToDelayedList>
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <vTaskPlaceOnEventListRestricted>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	8b 01       	movw	r16, r22
    22b4:	c4 2f       	mov	r28, r20
    22b6:	60 91 9f 18 	lds	r22, 0x189F	; 0x80189f <pxCurrentTCB>
    22ba:	70 91 a0 18 	lds	r23, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    22be:	64 5f       	subi	r22, 0xF4	; 244
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    22c6:	cc 23       	and	r28, r28
    22c8:	11 f0       	breq	.+4      	; 0x22ce <vTaskPlaceOnEventListRestricted+0x22>
    22ca:	0f ef       	ldi	r16, 0xFF	; 255
    22cc:	1f ef       	ldi	r17, 0xFF	; 255
    22ce:	6c 2f       	mov	r22, r28
    22d0:	c8 01       	movw	r24, r16
    22d2:	50 dc       	rcall	.-1888   	; 0x1b74 <prvAddCurrentTaskToDelayedList>
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <xTaskRemoveFromEventList>:
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	dc 01       	movw	r26, r24
    22e6:	15 96       	adiw	r26, 0x05	; 5
    22e8:	ed 91       	ld	r30, X+
    22ea:	fc 91       	ld	r31, X
    22ec:	16 97       	sbiw	r26, 0x06	; 6
    22ee:	c6 81       	ldd	r28, Z+6	; 0x06
    22f0:	d7 81       	ldd	r29, Z+7	; 0x07
    22f2:	8e 01       	movw	r16, r28
    22f4:	04 5f       	subi	r16, 0xF4	; 244
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    22fe:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    2302:	81 11       	cpse	r24, r1
    2304:	1c c0       	rjmp	.+56     	; 0x233e <xTaskRemoveFromEventList+0x62>
    2306:	0a 50       	subi	r16, 0x0A	; 10
    2308:	11 09       	sbc	r17, r1
    230a:	c8 01       	movw	r24, r16
    230c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    2310:	8e 89       	ldd	r24, Y+22	; 0x16
    2312:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2316:	98 17       	cp	r25, r24
    2318:	10 f4       	brcc	.+4      	; 0x231e <xTaskRemoveFromEventList+0x42>
    231a:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 01       	movw	r18, r24
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	b8 01       	movw	r22, r16
    2334:	85 58       	subi	r24, 0x85	; 133
    2336:	97 4e       	sbci	r25, 0xE7	; 231
    2338:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    233c:	05 c0       	rjmp	.+10     	; 0x2348 <xTaskRemoveFromEventList+0x6c>
    233e:	b8 01       	movw	r22, r16
    2340:	8c e5       	ldi	r24, 0x5C	; 92
    2342:	98 e1       	ldi	r25, 0x18	; 24
    2344:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2348:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    234c:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2350:	9e 89       	ldd	r25, Y+22	; 0x16
    2352:	86 89       	ldd	r24, Z+22	; 0x16
    2354:	89 17       	cp	r24, r25
    2356:	20 f4       	brcc	.+8      	; 0x2360 <xTaskRemoveFromEventList+0x84>
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <xTaskRemoveFromEventList+0x86>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	08 95       	ret

0000236c <vTaskInternalSetTimeOutState>:
    236c:	20 91 41 18 	lds	r18, 0x1841	; 0x801841 <xNumOfOverflows>
    2370:	fc 01       	movw	r30, r24
    2372:	20 83       	st	Z, r18
    2374:	20 91 46 18 	lds	r18, 0x1846	; 0x801846 <xTickCount>
    2378:	30 91 47 18 	lds	r19, 0x1847	; 0x801847 <xTickCount+0x1>
    237c:	32 83       	std	Z+2, r19	; 0x02
    237e:	21 83       	std	Z+1, r18	; 0x01
    2380:	08 95       	ret

00002382 <xTaskCheckForTimeOut>:
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	0f 92       	push	r0
    238c:	20 91 46 18 	lds	r18, 0x1846	; 0x801846 <xTickCount>
    2390:	30 91 47 18 	lds	r19, 0x1847	; 0x801847 <xTickCount+0x1>
    2394:	db 01       	movw	r26, r22
    2396:	4d 91       	ld	r20, X+
    2398:	5c 91       	ld	r21, X
    239a:	4f 3f       	cpi	r20, 0xFF	; 255
    239c:	bf ef       	ldi	r27, 0xFF	; 255
    239e:	5b 07       	cpc	r21, r27
    23a0:	e9 f0       	breq	.+58     	; 0x23dc <xTaskCheckForTimeOut+0x5a>
    23a2:	ec 01       	movw	r28, r24
    23a4:	e9 81       	ldd	r30, Y+1	; 0x01
    23a6:	fa 81       	ldd	r31, Y+2	; 0x02
    23a8:	a0 91 41 18 	lds	r26, 0x1841	; 0x801841 <xNumOfOverflows>
    23ac:	b8 81       	ld	r27, Y
    23ae:	ba 17       	cp	r27, r26
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <xTaskCheckForTimeOut+0x36>
    23b2:	2e 17       	cp	r18, r30
    23b4:	3f 07       	cpc	r19, r31
    23b6:	a0 f4       	brcc	.+40     	; 0x23e0 <xTaskCheckForTimeOut+0x5e>
    23b8:	2e 1b       	sub	r18, r30
    23ba:	3f 0b       	sbc	r19, r31
    23bc:	24 17       	cp	r18, r20
    23be:	35 07       	cpc	r19, r21
    23c0:	40 f4       	brcc	.+16     	; 0x23d2 <xTaskCheckForTimeOut+0x50>
    23c2:	fb 01       	movw	r30, r22
    23c4:	42 1b       	sub	r20, r18
    23c6:	53 0b       	sbc	r21, r19
    23c8:	51 83       	std	Z+1, r21	; 0x01
    23ca:	40 83       	st	Z, r20
    23cc:	cf df       	rcall	.-98     	; 0x236c <vTaskInternalSetTimeOutState>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	08 c0       	rjmp	.+16     	; 0x23e2 <xTaskCheckForTimeOut+0x60>
    23d2:	fb 01       	movw	r30, r22
    23d4:	11 82       	std	Z+1, r1	; 0x01
    23d6:	10 82       	st	Z, r1
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <xTaskCheckForTimeOut+0x60>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <xTaskCheckForTimeOut+0x60>
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <vTaskMissedYield>:
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    23f2:	08 95       	ret

000023f4 <xTaskGetCurrentTaskHandle>:
    23f4:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    23f8:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    23fc:	08 95       	ret

000023fe <xTaskGetSchedulerState>:
    23fe:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    2402:	88 23       	and	r24, r24
    2404:	31 f0       	breq	.+12     	; 0x2412 <xTaskGetSchedulerState+0x14>
    2406:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    240a:	88 23       	and	r24, r24
    240c:	21 f0       	breq	.+8      	; 0x2416 <xTaskGetSchedulerState+0x18>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	08 95       	ret
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	08 95       	ret
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	08 95       	ret

0000241a <xTaskPriorityInherit>:
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	fc 01       	movw	r30, r24
    2424:	89 2b       	or	r24, r25
    2426:	09 f4       	brne	.+2      	; 0x242a <xTaskPriorityInherit+0x10>
    2428:	64 c0       	rjmp	.+200    	; 0x24f2 <xTaskPriorityInherit+0xd8>
    242a:	26 89       	ldd	r18, Z+22	; 0x16
    242c:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
    2430:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2434:	56 96       	adiw	r26, 0x16	; 22
    2436:	8c 91       	ld	r24, X
    2438:	28 17       	cp	r18, r24
    243a:	08 f0       	brcs	.+2      	; 0x243e <xTaskPriorityInherit+0x24>
    243c:	4e c0       	rjmp	.+156    	; 0x24da <xTaskPriorityInherit+0xc0>
    243e:	84 85       	ldd	r24, Z+12	; 0x0c
    2440:	95 85       	ldd	r25, Z+13	; 0x0d
    2442:	99 23       	and	r25, r25
    2444:	64 f0       	brlt	.+24     	; 0x245e <xTaskPriorityInherit+0x44>
    2446:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
    244a:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    244e:	56 96       	adiw	r26, 0x16	; 22
    2450:	3c 91       	ld	r19, X
    2452:	84 e0       	ldi	r24, 0x04	; 4
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	83 1b       	sub	r24, r19
    2458:	91 09       	sbc	r25, r1
    245a:	95 87       	std	Z+13, r25	; 0x0d
    245c:	84 87       	std	Z+12, r24	; 0x0c
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	c9 01       	movw	r24, r18
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	28 0f       	add	r18, r24
    2470:	39 1f       	adc	r19, r25
    2472:	25 58       	subi	r18, 0x85	; 133
    2474:	37 4e       	sbci	r19, 0xE7	; 231
    2476:	82 85       	ldd	r24, Z+10	; 0x0a
    2478:	93 85       	ldd	r25, Z+11	; 0x0b
    247a:	82 17       	cp	r24, r18
    247c:	93 07       	cpc	r25, r19
    247e:	21 f5       	brne	.+72     	; 0x24c8 <xTaskPriorityInherit+0xae>
    2480:	8f 01       	movw	r16, r30
    2482:	ef 01       	movw	r28, r30
    2484:	22 96       	adiw	r28, 0x02	; 2
    2486:	ce 01       	movw	r24, r28
    2488:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    248c:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2490:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2494:	86 89       	ldd	r24, Z+22	; 0x16
    2496:	f8 01       	movw	r30, r16
    2498:	86 8b       	std	Z+22, r24	; 0x16
    249a:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    249e:	98 17       	cp	r25, r24
    24a0:	10 f4       	brcc	.+4      	; 0x24a6 <xTaskPriorityInherit+0x8c>
    24a2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 01       	movw	r18, r24
    24aa:	22 0f       	add	r18, r18
    24ac:	33 1f       	adc	r19, r19
    24ae:	22 0f       	add	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	82 0f       	add	r24, r18
    24b8:	93 1f       	adc	r25, r19
    24ba:	be 01       	movw	r22, r28
    24bc:	85 58       	subi	r24, 0x85	; 133
    24be:	97 4e       	sbci	r25, 0xE7	; 231
    24c0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	16 c0       	rjmp	.+44     	; 0x24f4 <xTaskPriorityInherit+0xda>
    24c8:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
    24cc:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    24d0:	56 96       	adiw	r26, 0x16	; 22
    24d2:	8c 91       	ld	r24, X
    24d4:	86 8b       	std	Z+22, r24	; 0x16
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0d c0       	rjmp	.+26     	; 0x24f4 <xTaskPriorityInherit+0xda>
    24da:	a0 91 9f 18 	lds	r26, 0x189F	; 0x80189f <pxCurrentTCB>
    24de:	b0 91 a0 18 	lds	r27, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	23 a1       	ldd	r18, Z+35	; 0x23
    24e6:	56 96       	adiw	r26, 0x16	; 22
    24e8:	9c 91       	ld	r25, X
    24ea:	29 17       	cp	r18, r25
    24ec:	18 f0       	brcs	.+6      	; 0x24f4 <xTaskPriorityInherit+0xda>
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <xTaskPriorityInherit+0xda>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	08 95       	ret

000024fe <xTaskPriorityDisinherit>:
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	fc 01       	movw	r30, r24
    2508:	89 2b       	or	r24, r25
    250a:	79 f1       	breq	.+94     	; 0x256a <xTaskPriorityDisinherit+0x6c>
    250c:	84 a1       	ldd	r24, Z+36	; 0x24
    250e:	81 50       	subi	r24, 0x01	; 1
    2510:	84 a3       	std	Z+36, r24	; 0x24
    2512:	26 89       	ldd	r18, Z+22	; 0x16
    2514:	93 a1       	ldd	r25, Z+35	; 0x23
    2516:	29 17       	cp	r18, r25
    2518:	51 f1       	breq	.+84     	; 0x256e <xTaskPriorityDisinherit+0x70>
    251a:	81 11       	cpse	r24, r1
    251c:	2a c0       	rjmp	.+84     	; 0x2572 <xTaskPriorityDisinherit+0x74>
    251e:	ef 01       	movw	r28, r30
    2520:	8f 01       	movw	r16, r30
    2522:	0e 5f       	subi	r16, 0xFE	; 254
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	c8 01       	movw	r24, r16
    2528:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    252c:	8b a1       	ldd	r24, Y+35	; 0x23
    252e:	8e 8b       	std	Y+22, r24	; 0x16
    2530:	24 e0       	ldi	r18, 0x04	; 4
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	28 1b       	sub	r18, r24
    2536:	31 09       	sbc	r19, r1
    2538:	3d 87       	std	Y+13, r19	; 0x0d
    253a:	2c 87       	std	Y+12, r18	; 0x0c
    253c:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2540:	98 17       	cp	r25, r24
    2542:	10 f4       	brcc	.+4      	; 0x2548 <xTaskPriorityDisinherit+0x4a>
    2544:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9c 01       	movw	r18, r24
    254c:	22 0f       	add	r18, r18
    254e:	33 1f       	adc	r19, r19
    2550:	22 0f       	add	r18, r18
    2552:	33 1f       	adc	r19, r19
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	b8 01       	movw	r22, r16
    255e:	85 58       	subi	r24, 0x85	; 133
    2560:	97 4e       	sbci	r25, 0xE7	; 231
    2562:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <xTaskPriorityDisinherit+0x76>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <xTaskPriorityDisinherit+0x76>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <xTaskPriorityDisinherit+0x76>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	08 95       	ret

0000257e <vTaskPriorityDisinheritAfterTimeout>:
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	fc 01       	movw	r30, r24
    2588:	89 2b       	or	r24, r25
    258a:	09 f4       	brne	.+2      	; 0x258e <vTaskPriorityDisinheritAfterTimeout+0x10>
    258c:	43 c0       	rjmp	.+134    	; 0x2614 <vTaskPriorityDisinheritAfterTimeout+0x96>
    258e:	93 a1       	ldd	r25, Z+35	; 0x23
    2590:	96 17       	cp	r25, r22
    2592:	08 f4       	brcc	.+2      	; 0x2596 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2594:	96 2f       	mov	r25, r22
    2596:	86 89       	ldd	r24, Z+22	; 0x16
    2598:	89 17       	cp	r24, r25
    259a:	e1 f1       	breq	.+120    	; 0x2614 <vTaskPriorityDisinheritAfterTimeout+0x96>
    259c:	24 a1       	ldd	r18, Z+36	; 0x24
    259e:	21 30       	cpi	r18, 0x01	; 1
    25a0:	c9 f5       	brne	.+114    	; 0x2614 <vTaskPriorityDisinheritAfterTimeout+0x96>
    25a2:	96 8b       	std	Z+22, r25	; 0x16
    25a4:	24 85       	ldd	r18, Z+12	; 0x0c
    25a6:	35 85       	ldd	r19, Z+13	; 0x0d
    25a8:	33 23       	and	r19, r19
    25aa:	34 f0       	brlt	.+12     	; 0x25b8 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    25ac:	24 e0       	ldi	r18, 0x04	; 4
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	29 1b       	sub	r18, r25
    25b2:	31 09       	sbc	r19, r1
    25b4:	35 87       	std	Z+13, r19	; 0x0d
    25b6:	24 87       	std	Z+12, r18	; 0x0c
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9c 01       	movw	r18, r24
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	22 0f       	add	r18, r18
    25c2:	33 1f       	adc	r19, r19
    25c4:	22 0f       	add	r18, r18
    25c6:	33 1f       	adc	r19, r19
    25c8:	82 0f       	add	r24, r18
    25ca:	93 1f       	adc	r25, r19
    25cc:	85 58       	subi	r24, 0x85	; 133
    25ce:	97 4e       	sbci	r25, 0xE7	; 231
    25d0:	22 85       	ldd	r18, Z+10	; 0x0a
    25d2:	33 85       	ldd	r19, Z+11	; 0x0b
    25d4:	28 17       	cp	r18, r24
    25d6:	39 07       	cpc	r19, r25
    25d8:	e9 f4       	brne	.+58     	; 0x2614 <vTaskPriorityDisinheritAfterTimeout+0x96>
    25da:	ef 01       	movw	r28, r30
    25dc:	8f 01       	movw	r16, r30
    25de:	0e 5f       	subi	r16, 0xFE	; 254
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	c8 01       	movw	r24, r16
    25e4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    25e8:	8e 89       	ldd	r24, Y+22	; 0x16
    25ea:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    25ee:	98 17       	cp	r25, r24
    25f0:	10 f4       	brcc	.+4      	; 0x25f6 <vTaskPriorityDisinheritAfterTimeout+0x78>
    25f2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9c 01       	movw	r18, r24
    25fa:	22 0f       	add	r18, r18
    25fc:	33 1f       	adc	r19, r19
    25fe:	22 0f       	add	r18, r18
    2600:	33 1f       	adc	r19, r19
    2602:	22 0f       	add	r18, r18
    2604:	33 1f       	adc	r19, r19
    2606:	82 0f       	add	r24, r18
    2608:	93 1f       	adc	r25, r19
    260a:	b8 01       	movw	r22, r16
    260c:	85 58       	subi	r24, 0x85	; 133
    260e:	97 4e       	sbci	r25, 0xE7	; 231
    2610:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <pvTaskIncrementMutexHeldCount>:
    261e:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    2622:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2626:	89 2b       	or	r24, r25
    2628:	39 f0       	breq	.+14     	; 0x2638 <pvTaskIncrementMutexHeldCount+0x1a>
    262a:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    262e:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2632:	84 a1       	ldd	r24, Z+36	; 0x24
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	84 a3       	std	Z+36, r24	; 0x24
    2638:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    263c:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2640:	08 95       	ret

00002642 <xTaskNotifyWait>:
    2642:	4f 92       	push	r4
    2644:	5f 92       	push	r5
    2646:	6f 92       	push	r6
    2648:	7f 92       	push	r7
    264a:	8f 92       	push	r8
    264c:	9f 92       	push	r9
    264e:	af 92       	push	r10
    2650:	bf 92       	push	r11
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	49 01       	movw	r8, r18
    265c:	5a 01       	movw	r10, r20
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	0f 92       	push	r0
    2664:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2668:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    266c:	23 a5       	ldd	r18, Z+43	; 0x2b
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	21 f1       	breq	.+72     	; 0x26ba <xTaskNotifyWait+0x78>
    2672:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2676:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    267a:	47 a0       	ldd	r4, Z+39	; 0x27
    267c:	50 a4       	ldd	r5, Z+40	; 0x28
    267e:	61 a4       	ldd	r6, Z+41	; 0x29
    2680:	72 a4       	ldd	r7, Z+42	; 0x2a
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	80 95       	com	r24
    2688:	90 95       	com	r25
    268a:	a0 95       	com	r26
    268c:	b0 95       	com	r27
    268e:	84 21       	and	r24, r4
    2690:	95 21       	and	r25, r5
    2692:	a6 21       	and	r26, r6
    2694:	b7 21       	and	r27, r7
    2696:	87 a3       	std	Z+39, r24	; 0x27
    2698:	90 a7       	std	Z+40, r25	; 0x28
    269a:	a1 a7       	std	Z+41, r26	; 0x29
    269c:	b2 a7       	std	Z+42, r27	; 0x2a
    269e:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    26a2:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	83 a7       	std	Z+43, r24	; 0x2b
    26aa:	e1 14       	cp	r14, r1
    26ac:	f1 04       	cpc	r15, r1
    26ae:	29 f0       	breq	.+10     	; 0x26ba <xTaskNotifyWait+0x78>
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	c7 01       	movw	r24, r14
    26b4:	5f da       	rcall	.-2882   	; 0x1b74 <prvAddCurrentTaskToDelayedList>
    26b6:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortYield>
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	0f 92       	push	r0
    26c4:	01 15       	cp	r16, r1
    26c6:	11 05       	cpc	r17, r1
    26c8:	69 f0       	breq	.+26     	; 0x26e4 <xTaskNotifyWait+0xa2>
    26ca:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    26ce:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    26d2:	87 a1       	ldd	r24, Z+39	; 0x27
    26d4:	90 a5       	ldd	r25, Z+40	; 0x28
    26d6:	a1 a5       	ldd	r26, Z+41	; 0x29
    26d8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26da:	f8 01       	movw	r30, r16
    26dc:	80 83       	st	Z, r24
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	a2 83       	std	Z+2, r26	; 0x02
    26e2:	b3 83       	std	Z+3, r27	; 0x03
    26e4:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    26e8:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    26ec:	83 a5       	ldd	r24, Z+43	; 0x2b
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	b1 f4       	brne	.+44     	; 0x271e <xTaskNotifyWait+0xdc>
    26f2:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    26f6:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    26fa:	87 a1       	ldd	r24, Z+39	; 0x27
    26fc:	90 a5       	ldd	r25, Z+40	; 0x28
    26fe:	a1 a5       	ldd	r26, Z+41	; 0x29
    2700:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2702:	80 94       	com	r8
    2704:	90 94       	com	r9
    2706:	a0 94       	com	r10
    2708:	b0 94       	com	r11
    270a:	88 22       	and	r8, r24
    270c:	99 22       	and	r9, r25
    270e:	aa 22       	and	r10, r26
    2710:	bb 22       	and	r11, r27
    2712:	87 a2       	std	Z+39, r8	; 0x27
    2714:	90 a6       	std	Z+40, r9	; 0x28
    2716:	a1 a6       	std	Z+41, r10	; 0x29
    2718:	b2 a6       	std	Z+42, r11	; 0x2a
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <xTaskNotifyWait+0xde>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2724:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2728:	13 a6       	std	Z+43, r1	; 0x2b
    272a:	0f 90       	pop	r0
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	bf 90       	pop	r11
    2738:	af 90       	pop	r10
    273a:	9f 90       	pop	r9
    273c:	8f 90       	pop	r8
    273e:	7f 90       	pop	r7
    2740:	6f 90       	pop	r6
    2742:	5f 90       	pop	r5
    2744:	4f 90       	pop	r4
    2746:	08 95       	ret

00002748 <xTaskGenericNotify>:
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	fc 01       	movw	r30, r24
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	0f 92       	push	r0
    2758:	01 15       	cp	r16, r1
    275a:	11 05       	cpc	r17, r1
    275c:	49 f0       	breq	.+18     	; 0x2770 <xTaskGenericNotify+0x28>
    275e:	87 a1       	ldd	r24, Z+39	; 0x27
    2760:	90 a5       	ldd	r25, Z+40	; 0x28
    2762:	a1 a5       	ldd	r26, Z+41	; 0x29
    2764:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2766:	e8 01       	movw	r28, r16
    2768:	88 83       	st	Y, r24
    276a:	99 83       	std	Y+1, r25	; 0x01
    276c:	aa 83       	std	Y+2, r26	; 0x02
    276e:	bb 83       	std	Y+3, r27	; 0x03
    2770:	83 a5       	ldd	r24, Z+43	; 0x2b
    2772:	92 e0       	ldi	r25, 0x02	; 2
    2774:	93 a7       	std	Z+43, r25	; 0x2b
    2776:	22 30       	cpi	r18, 0x02	; 2
    2778:	b1 f0       	breq	.+44     	; 0x27a6 <xTaskGenericNotify+0x5e>
    277a:	18 f4       	brcc	.+6      	; 0x2782 <xTaskGenericNotify+0x3a>
    277c:	21 30       	cpi	r18, 0x01	; 1
    277e:	31 f0       	breq	.+12     	; 0x278c <xTaskGenericNotify+0x44>
    2780:	2a c0       	rjmp	.+84     	; 0x27d6 <xTaskGenericNotify+0x8e>
    2782:	23 30       	cpi	r18, 0x03	; 3
    2784:	e9 f0       	breq	.+58     	; 0x27c0 <xTaskGenericNotify+0x78>
    2786:	24 30       	cpi	r18, 0x04	; 4
    2788:	01 f1       	breq	.+64     	; 0x27ca <xTaskGenericNotify+0x82>
    278a:	25 c0       	rjmp	.+74     	; 0x27d6 <xTaskGenericNotify+0x8e>
    278c:	07 a1       	ldd	r16, Z+39	; 0x27
    278e:	10 a5       	ldd	r17, Z+40	; 0x28
    2790:	21 a5       	ldd	r18, Z+41	; 0x29
    2792:	32 a5       	ldd	r19, Z+42	; 0x2a
    2794:	40 2b       	or	r20, r16
    2796:	51 2b       	or	r21, r17
    2798:	62 2b       	or	r22, r18
    279a:	73 2b       	or	r23, r19
    279c:	47 a3       	std	Z+39, r20	; 0x27
    279e:	50 a7       	std	Z+40, r21	; 0x28
    27a0:	61 a7       	std	Z+41, r22	; 0x29
    27a2:	72 a7       	std	Z+42, r23	; 0x2a
    27a4:	18 c0       	rjmp	.+48     	; 0x27d6 <xTaskGenericNotify+0x8e>
    27a6:	47 a1       	ldd	r20, Z+39	; 0x27
    27a8:	50 a5       	ldd	r21, Z+40	; 0x28
    27aa:	61 a5       	ldd	r22, Z+41	; 0x29
    27ac:	72 a5       	ldd	r23, Z+42	; 0x2a
    27ae:	4f 5f       	subi	r20, 0xFF	; 255
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255
    27b2:	6f 4f       	sbci	r22, 0xFF	; 255
    27b4:	7f 4f       	sbci	r23, 0xFF	; 255
    27b6:	47 a3       	std	Z+39, r20	; 0x27
    27b8:	50 a7       	std	Z+40, r21	; 0x28
    27ba:	61 a7       	std	Z+41, r22	; 0x29
    27bc:	72 a7       	std	Z+42, r23	; 0x2a
    27be:	0b c0       	rjmp	.+22     	; 0x27d6 <xTaskGenericNotify+0x8e>
    27c0:	47 a3       	std	Z+39, r20	; 0x27
    27c2:	50 a7       	std	Z+40, r21	; 0x28
    27c4:	61 a7       	std	Z+41, r22	; 0x29
    27c6:	72 a7       	std	Z+42, r23	; 0x2a
    27c8:	06 c0       	rjmp	.+12     	; 0x27d6 <xTaskGenericNotify+0x8e>
    27ca:	82 30       	cpi	r24, 0x02	; 2
    27cc:	79 f1       	breq	.+94     	; 0x282c <xTaskGenericNotify+0xe4>
    27ce:	47 a3       	std	Z+39, r20	; 0x27
    27d0:	50 a7       	std	Z+40, r21	; 0x28
    27d2:	61 a7       	std	Z+41, r22	; 0x29
    27d4:	72 a7       	std	Z+42, r23	; 0x2a
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	59 f5       	brne	.+86     	; 0x2830 <xTaskGenericNotify+0xe8>
    27da:	ef 01       	movw	r28, r30
    27dc:	8f 01       	movw	r16, r30
    27de:	0e 5f       	subi	r16, 0xFE	; 254
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	c8 01       	movw	r24, r16
    27e4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    27e8:	8e 89       	ldd	r24, Y+22	; 0x16
    27ea:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    27ee:	98 17       	cp	r25, r24
    27f0:	10 f4       	brcc	.+4      	; 0x27f6 <xTaskGenericNotify+0xae>
    27f2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9c 01       	movw	r18, r24
    27fa:	22 0f       	add	r18, r18
    27fc:	33 1f       	adc	r19, r19
    27fe:	22 0f       	add	r18, r18
    2800:	33 1f       	adc	r19, r19
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	82 0f       	add	r24, r18
    2808:	93 1f       	adc	r25, r19
    280a:	b8 01       	movw	r22, r16
    280c:	85 58       	subi	r24, 0x85	; 133
    280e:	97 4e       	sbci	r25, 0xE7	; 231
    2810:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2814:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    2818:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    281c:	9e 89       	ldd	r25, Y+22	; 0x16
    281e:	86 89       	ldd	r24, Z+22	; 0x16
    2820:	89 17       	cp	r24, r25
    2822:	40 f4       	brcc	.+16     	; 0x2834 <xTaskGenericNotify+0xec>
    2824:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortYield>
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <xTaskGenericNotify+0xee>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <xTaskGenericNotify+0xee>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <xTaskGenericNotify+0xee>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	0f 90       	pop	r0
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <xTaskGenericNotifyFromISR>:
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	fc 01       	movw	r30, r24
    2852:	01 15       	cp	r16, r1
    2854:	11 05       	cpc	r17, r1
    2856:	49 f0       	breq	.+18     	; 0x286a <xTaskGenericNotifyFromISR+0x26>
    2858:	87 a1       	ldd	r24, Z+39	; 0x27
    285a:	90 a5       	ldd	r25, Z+40	; 0x28
    285c:	a1 a5       	ldd	r26, Z+41	; 0x29
    285e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2860:	e8 01       	movw	r28, r16
    2862:	88 83       	st	Y, r24
    2864:	99 83       	std	Y+1, r25	; 0x01
    2866:	aa 83       	std	Y+2, r26	; 0x02
    2868:	bb 83       	std	Y+3, r27	; 0x03
    286a:	83 a5       	ldd	r24, Z+43	; 0x2b
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	93 a7       	std	Z+43, r25	; 0x2b
    2870:	22 30       	cpi	r18, 0x02	; 2
    2872:	b1 f0       	breq	.+44     	; 0x28a0 <xTaskGenericNotifyFromISR+0x5c>
    2874:	18 f4       	brcc	.+6      	; 0x287c <xTaskGenericNotifyFromISR+0x38>
    2876:	21 30       	cpi	r18, 0x01	; 1
    2878:	31 f0       	breq	.+12     	; 0x2886 <xTaskGenericNotifyFromISR+0x42>
    287a:	2b c0       	rjmp	.+86     	; 0x28d2 <xTaskGenericNotifyFromISR+0x8e>
    287c:	23 30       	cpi	r18, 0x03	; 3
    287e:	e9 f0       	breq	.+58     	; 0x28ba <xTaskGenericNotifyFromISR+0x76>
    2880:	24 30       	cpi	r18, 0x04	; 4
    2882:	01 f1       	breq	.+64     	; 0x28c4 <xTaskGenericNotifyFromISR+0x80>
    2884:	26 c0       	rjmp	.+76     	; 0x28d2 <xTaskGenericNotifyFromISR+0x8e>
    2886:	07 a1       	ldd	r16, Z+39	; 0x27
    2888:	10 a5       	ldd	r17, Z+40	; 0x28
    288a:	21 a5       	ldd	r18, Z+41	; 0x29
    288c:	32 a5       	ldd	r19, Z+42	; 0x2a
    288e:	40 2b       	or	r20, r16
    2890:	51 2b       	or	r21, r17
    2892:	62 2b       	or	r22, r18
    2894:	73 2b       	or	r23, r19
    2896:	47 a3       	std	Z+39, r20	; 0x27
    2898:	50 a7       	std	Z+40, r21	; 0x28
    289a:	61 a7       	std	Z+41, r22	; 0x29
    289c:	72 a7       	std	Z+42, r23	; 0x2a
    289e:	19 c0       	rjmp	.+50     	; 0x28d2 <xTaskGenericNotifyFromISR+0x8e>
    28a0:	47 a1       	ldd	r20, Z+39	; 0x27
    28a2:	50 a5       	ldd	r21, Z+40	; 0x28
    28a4:	61 a5       	ldd	r22, Z+41	; 0x29
    28a6:	72 a5       	ldd	r23, Z+42	; 0x2a
    28a8:	4f 5f       	subi	r20, 0xFF	; 255
    28aa:	5f 4f       	sbci	r21, 0xFF	; 255
    28ac:	6f 4f       	sbci	r22, 0xFF	; 255
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	47 a3       	std	Z+39, r20	; 0x27
    28b2:	50 a7       	std	Z+40, r21	; 0x28
    28b4:	61 a7       	std	Z+41, r22	; 0x29
    28b6:	72 a7       	std	Z+42, r23	; 0x2a
    28b8:	0c c0       	rjmp	.+24     	; 0x28d2 <xTaskGenericNotifyFromISR+0x8e>
    28ba:	47 a3       	std	Z+39, r20	; 0x27
    28bc:	50 a7       	std	Z+40, r21	; 0x28
    28be:	61 a7       	std	Z+41, r22	; 0x29
    28c0:	72 a7       	std	Z+42, r23	; 0x2a
    28c2:	07 c0       	rjmp	.+14     	; 0x28d2 <xTaskGenericNotifyFromISR+0x8e>
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	09 f4       	brne	.+2      	; 0x28ca <xTaskGenericNotifyFromISR+0x86>
    28c8:	41 c0       	rjmp	.+130    	; 0x294c <xTaskGenericNotifyFromISR+0x108>
    28ca:	47 a3       	std	Z+39, r20	; 0x27
    28cc:	50 a7       	std	Z+40, r21	; 0x28
    28ce:	61 a7       	std	Z+41, r22	; 0x29
    28d0:	72 a7       	std	Z+42, r23	; 0x2a
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	e9 f5       	brne	.+122    	; 0x2950 <xTaskGenericNotifyFromISR+0x10c>
    28d6:	ef 01       	movw	r28, r30
    28d8:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <uxSchedulerSuspended>
    28dc:	81 11       	cpse	r24, r1
    28de:	1d c0       	rjmp	.+58     	; 0x291a <xTaskGenericNotifyFromISR+0xd6>
    28e0:	8f 01       	movw	r16, r30
    28e2:	0e 5f       	subi	r16, 0xFE	; 254
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
    28ec:	8e 89       	ldd	r24, Y+22	; 0x16
    28ee:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    28f2:	98 17       	cp	r25, r24
    28f4:	10 f4       	brcc	.+4      	; 0x28fa <xTaskGenericNotifyFromISR+0xb6>
    28f6:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9c 01       	movw	r18, r24
    28fe:	22 0f       	add	r18, r18
    2900:	33 1f       	adc	r19, r19
    2902:	22 0f       	add	r18, r18
    2904:	33 1f       	adc	r19, r19
    2906:	22 0f       	add	r18, r18
    2908:	33 1f       	adc	r19, r19
    290a:	82 0f       	add	r24, r18
    290c:	93 1f       	adc	r25, r19
    290e:	b8 01       	movw	r22, r16
    2910:	85 58       	subi	r24, 0x85	; 133
    2912:	97 4e       	sbci	r25, 0xE7	; 231
    2914:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <xTaskGenericNotifyFromISR+0xe4>
    291a:	bf 01       	movw	r22, r30
    291c:	64 5f       	subi	r22, 0xF4	; 244
    291e:	7f 4f       	sbci	r23, 0xFF	; 255
    2920:	8c e5       	ldi	r24, 0x5C	; 92
    2922:	98 e1       	ldi	r25, 0x18	; 24
    2924:	0e 94 0e 06 	call	0xc1c	; 0xc1c <vListInsertEnd>
    2928:	e0 91 9f 18 	lds	r30, 0x189F	; 0x80189f <pxCurrentTCB>
    292c:	f0 91 a0 18 	lds	r31, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>
    2930:	9e 89       	ldd	r25, Y+22	; 0x16
    2932:	86 89       	ldd	r24, Z+22	; 0x16
    2934:	89 17       	cp	r24, r25
    2936:	70 f4       	brcc	.+28     	; 0x2954 <xTaskGenericNotifyFromISR+0x110>
    2938:	e1 14       	cp	r14, r1
    293a:	f1 04       	cpc	r15, r1
    293c:	19 f0       	breq	.+6      	; 0x2944 <xTaskGenericNotifyFromISR+0x100>
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	f7 01       	movw	r30, r14
    2942:	80 83       	st	Z, r24
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <xYieldPending>
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <xTaskGenericNotifyFromISR+0x112>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <xTaskGenericNotifyFromISR+0x112>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	01 c0       	rjmp	.+2      	; 0x2956 <xTaskGenericNotifyFromISR+0x112>
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	08 95       	ret

00002964 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	21 f4       	brne	.+8      	; 0x2970 <xTaskNotifyStateClear+0xc>
    2968:	80 91 9f 18 	lds	r24, 0x189F	; 0x80189f <pxCurrentTCB>
    296c:	90 91 a0 18 	lds	r25, 0x18A0	; 0x8018a0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2976:	fc 01       	movw	r30, r24
    2978:	23 a5       	ldd	r18, Z+43	; 0x2b
    297a:	22 30       	cpi	r18, 0x02	; 2
    297c:	19 f4       	brne	.+6      	; 0x2984 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    297e:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2984:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2986:	0f 90       	pop	r0
    2988:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    298a:	08 95       	ret

0000298c <prvInsertTimerInActiveList>:
    298c:	fc 01       	movw	r30, r24
    298e:	73 83       	std	Z+3, r23	; 0x03
    2990:	62 83       	std	Z+2, r22	; 0x02
    2992:	91 87       	std	Z+9, r25	; 0x09
    2994:	80 87       	std	Z+8, r24	; 0x08
    2996:	46 17       	cp	r20, r22
    2998:	57 07       	cpc	r21, r23
    299a:	90 f0       	brcs	.+36     	; 0x29c0 <prvInsertTimerInActiveList+0x34>
    299c:	42 1b       	sub	r20, r18
    299e:	53 0b       	sbc	r21, r19
    29a0:	84 85       	ldd	r24, Z+12	; 0x0c
    29a2:	95 85       	ldd	r25, Z+13	; 0x0d
    29a4:	48 17       	cp	r20, r24
    29a6:	59 07       	cpc	r21, r25
    29a8:	e0 f4       	brcc	.+56     	; 0x29e2 <prvInsertTimerInActiveList+0x56>
    29aa:	bf 01       	movw	r22, r30
    29ac:	6e 5f       	subi	r22, 0xFE	; 254
    29ae:	7f 4f       	sbci	r23, 0xFF	; 255
    29b0:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <pxOverflowTimerList>
    29b4:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <pxOverflowTimerList+0x1>
    29b8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vListInsert>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	08 95       	ret
    29c0:	42 17       	cp	r20, r18
    29c2:	53 07       	cpc	r21, r19
    29c4:	18 f4       	brcc	.+6      	; 0x29cc <prvInsertTimerInActiveList+0x40>
    29c6:	62 17       	cp	r22, r18
    29c8:	73 07       	cpc	r23, r19
    29ca:	68 f4       	brcc	.+26     	; 0x29e6 <prvInsertTimerInActiveList+0x5a>
    29cc:	bf 01       	movw	r22, r30
    29ce:	6e 5f       	subi	r22, 0xFE	; 254
    29d0:	7f 4f       	sbci	r23, 0xFF	; 255
    29d2:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <pxCurrentTimerList>
    29d6:	90 91 aa 18 	lds	r25, 0x18AA	; 0x8018aa <pxCurrentTimerList+0x1>
    29da:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vListInsert>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	08 95       	ret
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	08 95       	ret
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	08 95       	ret

000029ea <prvCheckForValidListAndQueue>:
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	0f 92       	push	r0
    29f0:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
    29f4:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
    29f8:	89 2b       	or	r24, r25
    29fa:	e9 f4       	brne	.+58     	; 0x2a36 <prvCheckForValidListAndQueue+0x4c>
    29fc:	84 eb       	ldi	r24, 0xB4	; 180
    29fe:	98 e1       	ldi	r25, 0x18	; 24
    2a00:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    2a04:	8b ea       	ldi	r24, 0xAB	; 171
    2a06:	98 e1       	ldi	r25, 0x18	; 24
    2a08:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <vListInitialise>
    2a0c:	84 eb       	ldi	r24, 0xB4	; 180
    2a0e:	98 e1       	ldi	r25, 0x18	; 24
    2a10:	90 93 aa 18 	sts	0x18AA, r25	; 0x8018aa <pxCurrentTimerList+0x1>
    2a14:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <pxCurrentTimerList>
    2a18:	8b ea       	ldi	r24, 0xAB	; 171
    2a1a:	98 e1       	ldi	r25, 0x18	; 24
    2a1c:	90 93 a8 18 	sts	0x18A8, r25	; 0x8018a8 <pxOverflowTimerList+0x1>
    2a20:	80 93 a7 18 	sts	0x18A7, r24	; 0x8018a7 <pxOverflowTimerList>
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	65 e0       	ldi	r22, 0x05	; 5
    2a28:	8a e0       	ldi	r24, 0x0A	; 10
    2a2a:	0e 94 10 09 	call	0x1220	; 0x1220 <xQueueGenericCreate>
    2a2e:	90 93 a6 18 	sts	0x18A6, r25	; 0x8018a6 <xTimerQueue+0x1>
    2a32:	80 93 a5 18 	sts	0x18A5, r24	; 0x8018a5 <xTimerQueue>
    2a36:	0f 90       	pop	r0
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	08 95       	ret

00002a3c <xTimerCreateTimerTask>:
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	d3 df       	rcall	.-90     	; 0x29ea <prvCheckForValidListAndQueue>
    2a44:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
    2a48:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
    2a4c:	89 2b       	or	r24, r25
    2a4e:	89 f0       	breq	.+34     	; 0x2a72 <xTimerCreateTimerTask+0x36>
    2a50:	0f 2e       	mov	r0, r31
    2a52:	f3 ea       	ldi	r31, 0xA3	; 163
    2a54:	ef 2e       	mov	r14, r31
    2a56:	f8 e1       	ldi	r31, 0x18	; 24
    2a58:	ff 2e       	mov	r15, r31
    2a5a:	f0 2d       	mov	r31, r0
    2a5c:	03 e0       	ldi	r16, 0x03	; 3
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	45 e5       	ldi	r20, 0x55	; 85
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	60 ea       	ldi	r22, 0xA0	; 160
    2a68:	75 e0       	ldi	r23, 0x05	; 5
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	91 e0       	ldi	r25, 0x01	; 1
    2a6e:	d6 d8       	rcall	.-3668   	; 0x1c1c <xTaskCreate>
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <xTimerCreateTimerTask+0x38>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	08 95       	ret

00002a7c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <xTimerGenericCommand+0xa>
    2a86:	1f 92       	push	r1
    2a88:	1f 92       	push	r1
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2a8e:	e0 91 a5 18 	lds	r30, 0x18A5	; 0x8018a5 <xTimerQueue>
    2a92:	f0 91 a6 18 	lds	r31, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
    2a96:	30 97       	sbiw	r30, 0x00	; 0
    2a98:	69 f1       	breq	.+90     	; 0x2af4 <xTimerGenericCommand+0x78>
    2a9a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2a9c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a9e:	5b 83       	std	Y+3, r21	; 0x03
    2aa0:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2aa2:	9d 83       	std	Y+5, r25	; 0x05
    2aa4:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2aa6:	66 30       	cpi	r22, 0x06	; 6
    2aa8:	e4 f4       	brge	.+56     	; 0x2ae2 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2aaa:	a9 dc       	rcall	.-1710   	; 0x23fe <xTaskGetSchedulerState>
    2aac:	82 30       	cpi	r24, 0x02	; 2
    2aae:	61 f4       	brne	.+24     	; 0x2ac8 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	a8 01       	movw	r20, r16
    2ab4:	be 01       	movw	r22, r28
    2ab6:	6f 5f       	subi	r22, 0xFF	; 255
    2ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aba:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
    2abe:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
    2ac2:	0e 94 3e 09 	call	0x127c	; 0x127c <xQueueGenericSend>
    2ac6:	17 c0       	rjmp	.+46     	; 0x2af6 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	be 01       	movw	r22, r28
    2ad0:	6f 5f       	subi	r22, 0xFF	; 255
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <xTimerQueue>
    2ad8:	90 91 a6 18 	lds	r25, 0x18A6	; 0x8018a6 <xTimerQueue+0x1>
    2adc:	0e 94 3e 09 	call	0x127c	; 0x127c <xQueueGenericSend>
    2ae0:	0a c0       	rjmp	.+20     	; 0x2af6 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	ad 01       	movw	r20, r26
    2ae6:	be 01       	movw	r22, r28
    2ae8:	6f 5f       	subi	r22, 0xFF	; 255
    2aea:	7f 4f       	sbci	r23, 0xFF	; 255
    2aec:	cf 01       	movw	r24, r30
    2aee:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <xQueueGenericSendFromISR>
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	08 95       	ret

00002b0a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2b0a:	af 92       	push	r10
    2b0c:	bf 92       	push	r11
    2b0e:	cf 92       	push	r12
    2b10:	df 92       	push	r13
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b20:	d4 d9       	rcall	.-3160   	; 0x1eca <xTaskGetTickCount>
    2b22:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2b24:	80 91 a1 18 	lds	r24, 0x18A1	; 0x8018a1 <xLastTime.2432>
    2b28:	90 91 a2 18 	lds	r25, 0x18A2	; 0x8018a2 <xLastTime.2432+0x1>
    2b2c:	e8 16       	cp	r14, r24
    2b2e:	f9 06       	cpc	r15, r25
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <prvSampleTimeNow+0x2a>
    2b32:	47 c0       	rjmp	.+142    	; 0x2bc2 <prvSampleTimeNow+0xb8>
    2b34:	2f c0       	rjmp	.+94     	; 0x2b94 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b36:	05 80       	ldd	r0, Z+5	; 0x05
    2b38:	f6 81       	ldd	r31, Z+6	; 0x06
    2b3a:	e0 2d       	mov	r30, r0
    2b3c:	a0 80       	ld	r10, Z
    2b3e:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b40:	c6 81       	ldd	r28, Z+6	; 0x06
    2b42:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b44:	8e 01       	movw	r16, r28
    2b46:	0e 5f       	subi	r16, 0xFE	; 254
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b50:	e8 89       	ldd	r30, Y+16	; 0x10
    2b52:	f9 89       	ldd	r31, Y+17	; 0x11
    2b54:	ce 01       	movw	r24, r28
    2b56:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	82 ff       	sbrs	r24, 2
    2b5c:	1b c0       	rjmp	.+54     	; 0x2b94 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b60:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b62:	8a 0d       	add	r24, r10
    2b64:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2b66:	a8 16       	cp	r10, r24
    2b68:	b9 06       	cpc	r11, r25
    2b6a:	60 f4       	brcc	.+24     	; 0x2b84 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b6c:	9b 83       	std	Y+3, r25	; 0x03
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b70:	d9 87       	std	Y+9, r29	; 0x09
    2b72:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b74:	b8 01       	movw	r22, r16
    2b76:	80 91 a9 18 	lds	r24, 0x18A9	; 0x8018a9 <pxCurrentTimerList>
    2b7a:	90 91 aa 18 	lds	r25, 0x18AA	; 0x8018aa <pxCurrentTimerList+0x1>
    2b7e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <vListInsert>
    2b82:	08 c0       	rjmp	.+16     	; 0x2b94 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b84:	00 e0       	ldi	r16, 0x00	; 0
    2b86:	10 e0       	ldi	r17, 0x00	; 0
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	a5 01       	movw	r20, r10
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	ce 01       	movw	r24, r28
    2b92:	74 df       	rcall	.-280    	; 0x2a7c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b94:	e0 91 a9 18 	lds	r30, 0x18A9	; 0x8018a9 <pxCurrentTimerList>
    2b98:	f0 91 aa 18 	lds	r31, 0x18AA	; 0x8018aa <pxCurrentTimerList+0x1>
    2b9c:	80 81       	ld	r24, Z
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	ca cf       	rjmp	.-108    	; 0x2b36 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2ba2:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <pxOverflowTimerList>
    2ba6:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <pxOverflowTimerList+0x1>
    2baa:	90 93 aa 18 	sts	0x18AA, r25	; 0x8018aa <pxCurrentTimerList+0x1>
    2bae:	80 93 a9 18 	sts	0x18A9, r24	; 0x8018a9 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2bb2:	f0 93 a8 18 	sts	0x18A8, r31	; 0x8018a8 <pxOverflowTimerList+0x1>
    2bb6:	e0 93 a7 18 	sts	0x18A7, r30	; 0x8018a7 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	f6 01       	movw	r30, r12
    2bbe:	80 83       	st	Z, r24
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2bc6:	f0 92 a2 18 	sts	0x18A2, r15	; 0x8018a2 <xLastTime.2432+0x1>
    2bca:	e0 92 a1 18 	sts	0x18A1, r14	; 0x8018a1 <xLastTime.2432>

    return xTimeNow;
}
    2bce:	c7 01       	movw	r24, r14
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	bf 90       	pop	r11
    2be2:	af 90       	pop	r10
    2be4:	08 95       	ret

00002be6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2be6:	08 95       	ret

00002be8 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2be8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2bea:	2f 9a       	sbi	0x05, 7	; 5
    2bec:	2f ef       	ldi	r18, 0xFF	; 255
    2bee:	80 e7       	ldi	r24, 0x70	; 112
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
    2bf2:	21 50       	subi	r18, 0x01	; 1
    2bf4:	80 40       	sbci	r24, 0x00	; 0
    2bf6:	90 40       	sbci	r25, 0x00	; 0
    2bf8:	e1 f7       	brne	.-8      	; 0x2bf2 <vApplicationMallocFailedHook+0xa>
    2bfa:	00 c0       	rjmp	.+0      	; 0x2bfc <vApplicationMallocFailedHook+0x14>
    2bfc:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2bfe:	1f 9a       	sbi	0x03, 7	; 3
    2c00:	f5 cf       	rjmp	.-22     	; 0x2bec <vApplicationMallocFailedHook+0x4>

00002c02 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2c02:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2c04:	2f 9a       	sbi	0x05, 7	; 5
    2c06:	2f ef       	ldi	r18, 0xFF	; 255
    2c08:	87 ea       	ldi	r24, 0xA7	; 167
    2c0a:	91 e6       	ldi	r25, 0x61	; 97
    2c0c:	21 50       	subi	r18, 0x01	; 1
    2c0e:	80 40       	sbci	r24, 0x00	; 0
    2c10:	90 40       	sbci	r25, 0x00	; 0
    2c12:	e1 f7       	brne	.-8      	; 0x2c0c <vApplicationStackOverflowHook+0xa>
    2c14:	00 c0       	rjmp	.+0      	; 0x2c16 <vApplicationStackOverflowHook+0x14>
    2c16:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2c18:	1f 9a       	sbi	0x03, 7	; 3
    2c1a:	f5 cf       	rjmp	.-22     	; 0x2c06 <vApplicationStackOverflowHook+0x4>

00002c1c <hal_create>:
    2c1c:	e1 e3       	ldi	r30, 0x31	; 49
    2c1e:	fa e1       	ldi	r31, 0x1A	; 26
    2c20:	29 ee       	ldi	r18, 0xE9	; 233
    2c22:	3b e1       	ldi	r19, 0x1B	; 27
    2c24:	31 83       	std	Z+1, r19	; 0x01
    2c26:	20 83       	st	Z, r18
    2c28:	2c ee       	ldi	r18, 0xEC	; 236
    2c2a:	3b e1       	ldi	r19, 0x1B	; 27
    2c2c:	33 83       	std	Z+3, r19	; 0x03
    2c2e:	22 83       	std	Z+2, r18	; 0x02
    2c30:	27 ef       	ldi	r18, 0xF7	; 247
    2c32:	3b e1       	ldi	r19, 0x1B	; 27
    2c34:	35 83       	std	Z+5, r19	; 0x05
    2c36:	24 83       	std	Z+4, r18	; 0x04
    2c38:	2b ef       	ldi	r18, 0xFB	; 251
    2c3a:	3b e1       	ldi	r19, 0x1B	; 27
    2c3c:	37 83       	std	Z+7, r19	; 0x07
    2c3e:	26 83       	std	Z+6, r18	; 0x06
    2c40:	21 e0       	ldi	r18, 0x01	; 1
    2c42:	3c e1       	ldi	r19, 0x1C	; 28
    2c44:	31 87       	std	Z+9, r19	; 0x09
    2c46:	20 87       	std	Z+8, r18	; 0x08
    2c48:	2d e0       	ldi	r18, 0x0D	; 13
    2c4a:	3c e1       	ldi	r19, 0x1C	; 28
    2c4c:	33 87       	std	Z+11, r19	; 0x0b
    2c4e:	22 87       	std	Z+10, r18	; 0x0a
    2c50:	22 e1       	ldi	r18, 0x12	; 18
    2c52:	3c e1       	ldi	r19, 0x1C	; 28
    2c54:	35 87       	std	Z+13, r19	; 0x0d
    2c56:	24 87       	std	Z+12, r18	; 0x0c
    2c58:	2e e1       	ldi	r18, 0x1E	; 30
    2c5a:	3c e1       	ldi	r19, 0x1C	; 28
    2c5c:	37 87       	std	Z+15, r19	; 0x0f
    2c5e:	26 87       	std	Z+14, r18	; 0x0e
    2c60:	2e ef       	ldi	r18, 0xFE	; 254
    2c62:	3b e1       	ldi	r19, 0x1B	; 27
    2c64:	31 8b       	std	Z+17, r19	; 0x11
    2c66:	20 8b       	std	Z+16, r18	; 0x10
    2c68:	23 e2       	ldi	r18, 0x23	; 35
    2c6a:	3c e1       	ldi	r19, 0x1C	; 28
    2c6c:	33 8b       	std	Z+19, r19	; 0x13
    2c6e:	22 8b       	std	Z+18, r18	; 0x12
    2c70:	20 e3       	ldi	r18, 0x30	; 48
    2c72:	3c e1       	ldi	r19, 0x1C	; 28
    2c74:	35 8b       	std	Z+21, r19	; 0x15
    2c76:	24 8b       	std	Z+20, r18	; 0x14
    2c78:	68 2f       	mov	r22, r24
    2c7a:	cf 01       	movw	r24, r30
    2c7c:	51 c1       	rjmp	.+674    	; 0x2f20 <led_create>
    2c7e:	08 95       	ret

00002c80 <_hihTwiCallback>:
    2c80:	65 30       	cpi	r22, 0x05	; 5
    2c82:	f1 f4       	brne	.+60     	; 0x2cc0 <_hihTwiCallback+0x40>
    2c84:	fa 01       	movw	r30, r20
    2c86:	80 81       	ld	r24, Z
    2c88:	8f 73       	andi	r24, 0x3F	; 63
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	88 27       	eor	r24, r24
    2c90:	21 81       	ldd	r18, Z+1	; 0x01
    2c92:	82 2b       	or	r24, r18
    2c94:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2c98:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	f0 e4       	ldi	r31, 0x40	; 64
    2ca0:	8f 9f       	mul	r24, r31
    2ca2:	c0 01       	movw	r24, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	fa 01       	movw	r30, r20
    2ca8:	23 81       	ldd	r18, Z+3	; 0x03
    2caa:	26 95       	lsr	r18
    2cac:	26 95       	lsr	r18
    2cae:	82 2b       	or	r24, r18
    2cb0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2cb4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <_measuringIsReady>
    2cbe:	08 95       	ret
    2cc0:	64 30       	cpi	r22, 0x04	; 4
    2cc2:	51 f0       	breq	.+20     	; 0x2cd8 <_hihTwiCallback+0x58>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e4       	ldi	r25, 0x40	; 64
    2cc8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2ccc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2cd0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2cd4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2cd8:	08 95       	ret

00002cda <hih8120Create>:
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	00 e4       	ldi	r16, 0x40	; 64
    2ce0:	16 e1       	ldi	r17, 0x16	; 22
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	34 e2       	ldi	r19, 0x24	; 36
    2ce6:	44 ef       	ldi	r20, 0xF4	; 244
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	87 e2       	ldi	r24, 0x27	; 39
    2cee:	0e 94 c5 20 	call	0x418a	; 0x418a <twiCreate>
    2cf2:	90 93 bf 18 	sts	0x18BF, r25	; 0x8018bf <_hih8120Handler+0x1>
    2cf6:	80 93 be 18 	sts	0x18BE, r24	; 0x8018be <_hih8120Handler>
    2cfa:	21 e0       	ldi	r18, 0x01	; 1
    2cfc:	89 2b       	or	r24, r25
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <hih8120Create+0x28>
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	82 2f       	mov	r24, r18
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <hih8120Wakeup>:
    2d0a:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_hih8120Handler>
    2d0e:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_hih8120Handler+0x1>
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	59 f0       	breq	.+22     	; 0x2d2c <hih8120Wakeup+0x22>
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	0e 94 16 21 	call	0x422c	; 0x422c <twiTransmit>
    2d20:	84 30       	cpi	r24, 0x04	; 4
    2d22:	31 f4       	brne	.+12     	; 0x2d30 <hih8120Wakeup+0x26>
    2d24:	10 92 bd 18 	sts	0x18BD, r1	; 0x8018bd <_measuringIsReady>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	08 95       	ret
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	08 95       	ret
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	08 95       	ret

00002d34 <hih8120Meassure>:
    2d34:	80 91 be 18 	lds	r24, 0x18BE	; 0x8018be <_hih8120Handler>
    2d38:	90 91 bf 18 	lds	r25, 0x18BF	; 0x8018bf <_hih8120Handler+0x1>
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	39 f0       	breq	.+14     	; 0x2d4e <hih8120Meassure+0x1a>
    2d40:	64 e0       	ldi	r22, 0x04	; 4
    2d42:	0e 94 62 21 	call	0x42c4	; 0x42c4 <twiReceive>
    2d46:	85 30       	cpi	r24, 0x05	; 5
    2d48:	21 f0       	breq	.+8      	; 0x2d52 <hih8120Meassure+0x1e>
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	08 95       	ret
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	08 95       	ret
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	08 95       	ret

00002d56 <hih8120GetHumidity>:
    2d56:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2d5a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__floatunsisf>
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	48 ec       	ldi	r20, 0xC8	; 200
    2d6c:	52 e4       	ldi	r21, 0x42	; 66
    2d6e:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsf3>
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	38 ef       	ldi	r19, 0xF8	; 248
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	56 e4       	ldi	r21, 0x46	; 70
    2d7a:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__divsf3>
    2d7e:	08 95       	ret

00002d80 <hih8120GetHumidityPercent_x10>:
    2d80:	ea df       	rcall	.-44     	; 0x2d56 <hih8120GetHumidity>
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	51 e4       	ldi	r21, 0x41	; 65
    2d8a:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsf3>
    2d8e:	0e 94 40 23 	call	0x4680	; 0x4680 <__fixunssfsi>
    2d92:	cb 01       	movw	r24, r22
    2d94:	08 95       	ret

00002d96 <hih8120GetTemperature>:
    2d96:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2d9a:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__floatunsisf>
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	45 e2       	ldi	r20, 0x25	; 37
    2dac:	53 e4       	ldi	r21, 0x43	; 67
    2dae:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsf3>
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	38 ef       	ldi	r19, 0xF8	; 248
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	56 e4       	ldi	r21, 0x46	; 70
    2dba:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__divsf3>
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e2       	ldi	r20, 0x20	; 32
    2dc4:	52 e4       	ldi	r21, 0x42	; 66
    2dc6:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <__subsf3>
    2dca:	08 95       	ret

00002dcc <hih8120GetTemperature_x10>:
    2dcc:	e4 df       	rcall	.-56     	; 0x2d96 <hih8120GetTemperature>
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	51 e4       	ldi	r21, 0x41	; 65
    2dd6:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__mulsf3>
    2dda:	0e 94 3b 23 	call	0x4676	; 0x4676 <__fixsfsi>
    2dde:	cb 01       	movw	r24, r22
    2de0:	08 95       	ret

00002de2 <_turn_off>:
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	fc 01       	movw	r30, r24
    2dea:	ee 0f       	add	r30, r30
    2dec:	ff 1f       	adc	r31, r31
    2dee:	e8 0f       	add	r30, r24
    2df0:	f9 1f       	adc	r31, r25
    2df2:	ee 0f       	add	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	e0 54       	subi	r30, 0x40	; 64
    2df8:	f7 4e       	sbci	r31, 0xE7	; 231
    2dfa:	23 81       	ldd	r18, Z+3	; 0x03
    2dfc:	21 11       	cpse	r18, r1
    2dfe:	0a c0       	rjmp	.+20     	; 0x2e14 <_turn_off+0x32>
    2e00:	ef 01       	movw	r28, r30
    2e02:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <register_access+0x8>
    2e06:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <register_access+0x9>
    2e0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e0c:	88 81       	ld	r24, Y
    2e0e:	99 81       	ldd	r25, Y+1	; 0x01
    2e10:	19 95       	eicall
    2e12:	12 c0       	rjmp	.+36     	; 0x2e38 <_turn_off+0x56>
    2e14:	dc 01       	movw	r26, r24
    2e16:	aa 0f       	add	r26, r26
    2e18:	bb 1f       	adc	r27, r27
    2e1a:	ed 01       	movw	r28, r26
    2e1c:	c8 0f       	add	r28, r24
    2e1e:	d9 1f       	adc	r29, r25
    2e20:	cc 0f       	add	r28, r28
    2e22:	dd 1f       	adc	r29, r29
    2e24:	c0 54       	subi	r28, 0x40	; 64
    2e26:	d7 4e       	sbci	r29, 0xE7	; 231
    2e28:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <register_access+0x12>
    2e2c:	f0 91 44 1a 	lds	r31, 0x1A44	; 0x801a44 <register_access+0x13>
    2e30:	6a 81       	ldd	r22, Y+2	; 0x02
    2e32:	88 81       	ld	r24, Y
    2e34:	99 81       	ldd	r25, Y+1	; 0x01
    2e36:	19 95       	eicall
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	08 95       	ret

00002e3e <_turn_on>:
    2e3e:	cf 93       	push	r28
    2e40:	df 93       	push	r29
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	fc 01       	movw	r30, r24
    2e46:	ee 0f       	add	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	e8 0f       	add	r30, r24
    2e4c:	f9 1f       	adc	r31, r25
    2e4e:	ee 0f       	add	r30, r30
    2e50:	ff 1f       	adc	r31, r31
    2e52:	e0 54       	subi	r30, 0x40	; 64
    2e54:	f7 4e       	sbci	r31, 0xE7	; 231
    2e56:	23 81       	ldd	r18, Z+3	; 0x03
    2e58:	21 11       	cpse	r18, r1
    2e5a:	0a c0       	rjmp	.+20     	; 0x2e70 <_turn_on+0x32>
    2e5c:	ef 01       	movw	r28, r30
    2e5e:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <register_access+0x12>
    2e62:	f0 91 44 1a 	lds	r31, 0x1A44	; 0x801a44 <register_access+0x13>
    2e66:	6a 81       	ldd	r22, Y+2	; 0x02
    2e68:	88 81       	ld	r24, Y
    2e6a:	99 81       	ldd	r25, Y+1	; 0x01
    2e6c:	19 95       	eicall
    2e6e:	12 c0       	rjmp	.+36     	; 0x2e94 <_turn_on+0x56>
    2e70:	dc 01       	movw	r26, r24
    2e72:	aa 0f       	add	r26, r26
    2e74:	bb 1f       	adc	r27, r27
    2e76:	ed 01       	movw	r28, r26
    2e78:	c8 0f       	add	r28, r24
    2e7a:	d9 1f       	adc	r29, r25
    2e7c:	cc 0f       	add	r28, r28
    2e7e:	dd 1f       	adc	r29, r29
    2e80:	c0 54       	subi	r28, 0x40	; 64
    2e82:	d7 4e       	sbci	r29, 0xE7	; 231
    2e84:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <register_access+0x8>
    2e88:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <register_access+0x9>
    2e8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e8e:	88 81       	ld	r24, Y
    2e90:	99 81       	ldd	r25, Y+1	; 0x01
    2e92:	19 95       	eicall
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <_hal_led_task>:
    2e9a:	88 ea       	ldi	r24, 0xA8	; 168
    2e9c:	95 e0       	ldi	r25, 0x05	; 5
    2e9e:	0e 94 13 26 	call	0x4c26	; 0x4c26 <puts>
    2ea2:	0f 2e       	mov	r0, r31
    2ea4:	f1 e3       	ldi	r31, 0x31	; 49
    2ea6:	cf 2e       	mov	r12, r31
    2ea8:	fa e1       	ldi	r31, 0x1A	; 26
    2eaa:	df 2e       	mov	r13, r31
    2eac:	f0 2d       	mov	r31, r0
    2eae:	04 e0       	ldi	r16, 0x04	; 4
    2eb0:	c0 ec       	ldi	r28, 0xC0	; 192
    2eb2:	d8 e1       	ldi	r29, 0x18	; 24
    2eb4:	10 e0       	ldi	r17, 0x00	; 0
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	81 30       	cpi	r24, 0x01	; 1
    2eba:	69 f0       	breq	.+26     	; 0x2ed6 <_hal_led_task+0x3c>
    2ebc:	e8 f0       	brcs	.+58     	; 0x2ef8 <_hal_led_task+0x5e>
    2ebe:	82 30       	cpi	r24, 0x02	; 2
    2ec0:	39 f5       	brne	.+78     	; 0x2f10 <_hal_led_task+0x76>
    2ec2:	d6 01       	movw	r26, r12
    2ec4:	1c 96       	adiw	r26, 0x0c	; 12
    2ec6:	ed 91       	ld	r30, X+
    2ec8:	fc 91       	ld	r31, X
    2eca:	1d 97       	sbiw	r26, 0x0d	; 13
    2ecc:	6a 81       	ldd	r22, Y+2	; 0x02
    2ece:	88 81       	ld	r24, Y
    2ed0:	99 81       	ldd	r25, Y+1	; 0x01
    2ed2:	19 95       	eicall
    2ed4:	1d c0       	rjmp	.+58     	; 0x2f10 <_hal_led_task+0x76>
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	8f 5f       	subi	r24, 0xFF	; 255
    2eda:	8a 30       	cpi	r24, 0x0A	; 10
    2edc:	10 f4       	brcc	.+4      	; 0x2ee2 <_hal_led_task+0x48>
    2ede:	8d 83       	std	Y+5, r24	; 0x05
    2ee0:	17 c0       	rjmp	.+46     	; 0x2f10 <_hal_led_task+0x76>
    2ee2:	1d 82       	std	Y+5, r1	; 0x05
    2ee4:	d6 01       	movw	r26, r12
    2ee6:	1c 96       	adiw	r26, 0x0c	; 12
    2ee8:	ed 91       	ld	r30, X+
    2eea:	fc 91       	ld	r31, X
    2eec:	1d 97       	sbiw	r26, 0x0d	; 13
    2eee:	6a 81       	ldd	r22, Y+2	; 0x02
    2ef0:	88 81       	ld	r24, Y
    2ef2:	99 81       	ldd	r25, Y+1	; 0x01
    2ef4:	19 95       	eicall
    2ef6:	0c c0       	rjmp	.+24     	; 0x2f10 <_hal_led_task+0x76>
    2ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    2efa:	88 23       	and	r24, r24
    2efc:	31 f0       	breq	.+12     	; 0x2f0a <_hal_led_task+0x70>
    2efe:	81 2f       	mov	r24, r17
    2f00:	9e df       	rcall	.-196    	; 0x2e3e <_turn_on>
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	81 50       	subi	r24, 0x01	; 1
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	03 c0       	rjmp	.+6      	; 0x2f10 <_hal_led_task+0x76>
    2f0a:	0c 83       	std	Y+4, r16	; 0x04
    2f0c:	81 2f       	mov	r24, r17
    2f0e:	69 df       	rcall	.-302    	; 0x2de2 <_turn_off>
    2f10:	1f 5f       	subi	r17, 0xFF	; 255
    2f12:	26 96       	adiw	r28, 0x06	; 6
    2f14:	14 30       	cpi	r17, 0x04	; 4
    2f16:	79 f6       	brne	.-98     	; 0x2eb6 <_hal_led_task+0x1c>
    2f18:	85 e0       	ldi	r24, 0x05	; 5
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	17 d9       	rcall	.-3538   	; 0x214c <vTaskDelay>
    2f1e:	c8 cf       	rjmp	.-112    	; 0x2eb0 <_hal_led_task+0x16>

00002f20 <led_create>:
    2f20:	cf 92       	push	r12
    2f22:	df 92       	push	r13
    2f24:	ef 92       	push	r14
    2f26:	ff 92       	push	r15
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	06 2f       	mov	r16, r22
    2f32:	0f 2e       	mov	r0, r31
    2f34:	f1 e3       	ldi	r31, 0x31	; 49
    2f36:	ef 2e       	mov	r14, r31
    2f38:	fa e1       	ldi	r31, 0x1A	; 26
    2f3a:	ff 2e       	mov	r15, r31
    2f3c:	f0 2d       	mov	r31, r0
    2f3e:	d7 01       	movw	r26, r14
    2f40:	18 96       	adiw	r26, 0x08	; 8
    2f42:	ed 91       	ld	r30, X+
    2f44:	fc 91       	ld	r31, X
    2f46:	19 97       	sbiw	r26, 0x09	; 9
    2f48:	66 e0       	ldi	r22, 0x06	; 6
    2f4a:	87 e2       	ldi	r24, 0x27	; 39
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	19 95       	eicall
    2f50:	c0 ec       	ldi	r28, 0xC0	; 192
    2f52:	d8 e1       	ldi	r29, 0x18	; 24
    2f54:	0f 2e       	mov	r0, r31
    2f56:	f8 e2       	ldi	r31, 0x28	; 40
    2f58:	cf 2e       	mov	r12, r31
    2f5a:	d1 2c       	mov	r13, r1
    2f5c:	f0 2d       	mov	r31, r0
    2f5e:	d9 82       	std	Y+1, r13	; 0x01
    2f60:	c8 82       	st	Y, r12
    2f62:	86 e0       	ldi	r24, 0x06	; 6
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    2f66:	1b 82       	std	Y+3, r1	; 0x03
    2f68:	14 e0       	ldi	r17, 0x04	; 4
    2f6a:	1c 83       	std	Y+4, r17	; 0x04
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	39 df       	rcall	.-398    	; 0x2de2 <_turn_off>
    2f70:	d7 01       	movw	r26, r14
    2f72:	18 96       	adiw	r26, 0x08	; 8
    2f74:	ed 91       	ld	r30, X+
    2f76:	fc 91       	ld	r31, X
    2f78:	19 97       	sbiw	r26, 0x09	; 9
    2f7a:	67 e0       	ldi	r22, 0x07	; 7
    2f7c:	87 e2       	ldi	r24, 0x27	; 39
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	19 95       	eicall
    2f82:	df 82       	std	Y+7, r13	; 0x07
    2f84:	ce 82       	std	Y+6, r12	; 0x06
    2f86:	87 e0       	ldi	r24, 0x07	; 7
    2f88:	88 87       	std	Y+8, r24	; 0x08
    2f8a:	19 86       	std	Y+9, r1	; 0x09
    2f8c:	1a 87       	std	Y+10, r17	; 0x0a
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	28 df       	rcall	.-432    	; 0x2de2 <_turn_off>
    2f92:	d7 01       	movw	r26, r14
    2f94:	18 96       	adiw	r26, 0x08	; 8
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	19 97       	sbiw	r26, 0x09	; 9
    2f9c:	65 e0       	ldi	r22, 0x05	; 5
    2f9e:	83 e3       	ldi	r24, 0x33	; 51
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	19 95       	eicall
    2fa4:	d7 01       	movw	r26, r14
    2fa6:	18 96       	adiw	r26, 0x08	; 8
    2fa8:	ed 91       	ld	r30, X+
    2faa:	fc 91       	ld	r31, X
    2fac:	19 97       	sbiw	r26, 0x09	; 9
    2fae:	61 e0       	ldi	r22, 0x01	; 1
    2fb0:	84 e3       	ldi	r24, 0x34	; 52
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	19 95       	eicall
    2fb6:	84 e3       	ldi	r24, 0x34	; 52
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9d 87       	std	Y+13, r25	; 0x0d
    2fbc:	8c 87       	std	Y+12, r24	; 0x0c
    2fbe:	85 e0       	ldi	r24, 0x05	; 5
    2fc0:	8e 87       	std	Y+14, r24	; 0x0e
    2fc2:	1f 86       	std	Y+15, r1	; 0x0f
    2fc4:	18 8b       	std	Y+16, r17	; 0x10
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	0c df       	rcall	.-488    	; 0x2de2 <_turn_off>
    2fca:	d7 01       	movw	r26, r14
    2fcc:	18 96       	adiw	r26, 0x08	; 8
    2fce:	ed 91       	ld	r30, X+
    2fd0:	fc 91       	ld	r31, X
    2fd2:	19 97       	sbiw	r26, 0x09	; 9
    2fd4:	64 e0       	ldi	r22, 0x04	; 4
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	91 e0       	ldi	r25, 0x01	; 1
    2fda:	19 95       	eicall
    2fdc:	d7 01       	movw	r26, r14
    2fde:	18 96       	adiw	r26, 0x08	; 8
    2fe0:	ed 91       	ld	r30, X+
    2fe2:	fc 91       	ld	r31, X
    2fe4:	19 97       	sbiw	r26, 0x09	; 9
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	19 95       	eicall
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	91 e0       	ldi	r25, 0x01	; 1
    2ff2:	9b 8b       	std	Y+19, r25	; 0x13
    2ff4:	8a 8b       	std	Y+18, r24	; 0x12
    2ff6:	1c 8b       	std	Y+20, r17	; 0x14
    2ff8:	1d 8a       	std	Y+21, r1	; 0x15
    2ffa:	1e 8b       	std	Y+22, r17	; 0x16
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	f1 de       	rcall	.-542    	; 0x2de2 <_turn_off>
    3000:	e1 2c       	mov	r14, r1
    3002:	f1 2c       	mov	r15, r1
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 ec       	ldi	r20, 0xC0	; 192
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	6f eb       	ldi	r22, 0xBF	; 191
    300e:	75 e0       	ldi	r23, 0x05	; 5
    3010:	8d e4       	ldi	r24, 0x4D	; 77
    3012:	97 e1       	ldi	r25, 0x17	; 23
    3014:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskCreate>
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	08 95       	ret

0000302a <_serial_call_back>:
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	1f 92       	push	r1
    3034:	1f 92       	push	r1
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	8c 01       	movw	r16, r24
    303c:	19 82       	std	Y+1, r1	; 0x01
    303e:	2d c0       	rjmp	.+90     	; 0x309a <_serial_call_back+0x70>
    3040:	e0 91 3c 19 	lds	r30, 0x193C	; 0x80193c <rec_buf_inp.2926>
    3044:	ec 32       	cpi	r30, 0x2C	; 44
    3046:	50 f4       	brcc	.+20     	; 0x305c <_serial_call_back+0x32>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8e 0f       	add	r24, r30
    304c:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <rec_buf_inp.2926>
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	e4 59       	subi	r30, 0x94	; 148
    3054:	f6 4e       	sbci	r31, 0xE6	; 230
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	80 83       	st	Z, r24
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <_serial_call_back+0x36>
    305c:	10 92 3c 19 	sts	0x193C, r1	; 0x80193c <rec_buf_inp.2926>
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	8a 30       	cpi	r24, 0x0A	; 10
    3064:	d1 f4       	brne	.+52     	; 0x309a <_serial_call_back+0x70>
    3066:	40 91 3c 19 	lds	r20, 0x193C	; 0x80193c <rec_buf_inp.2926>
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	fa 01       	movw	r30, r20
    306e:	e6 59       	subi	r30, 0x96	; 150
    3070:	f6 4e       	sbci	r31, 0xE6	; 230
    3072:	10 82       	st	Z, r1
    3074:	41 50       	subi	r20, 0x01	; 1
    3076:	51 09       	sbc	r21, r1
    3078:	9e 01       	movw	r18, r28
    307a:	2f 5f       	subi	r18, 0xFF	; 255
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	6c e6       	ldi	r22, 0x6C	; 108
    3080:	79 e1       	ldi	r23, 0x19	; 25
    3082:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_reply_buffer_handle>
    3086:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_reply_buffer_handle+0x1>
    308a:	0e 94 bf 0c 	call	0x197e	; 0x197e <xStreamBufferSendFromISR>
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	81 11       	cpse	r24, r1
    3092:	0e 94 35 07 	call	0xe6a	; 0xe6a <vPortYield>
    3096:	10 92 3c 19 	sts	0x193C, r1	; 0x80193c <rec_buf_inp.2926>
    309a:	be 01       	movw	r22, r28
    309c:	6e 5f       	subi	r22, 0xFE	; 254
    309e:	7f 4f       	sbci	r23, 0xFF	; 255
    30a0:	c8 01       	movw	r24, r16
    30a2:	a7 d5       	rcall	.+2894   	; 0x3bf2 <serial_get_byte>
    30a4:	88 23       	and	r24, r24
    30a6:	61 f2       	breq	.-104    	; 0x3040 <_serial_call_back+0x16>
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	08 95       	ret

000030b6 <_upload_message>:
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	8c 01       	movw	r16, r24
    30c0:	eb 01       	movw	r28, r22
    30c2:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_reply_buffer_handle>
    30c6:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_reply_buffer_handle+0x1>
    30ca:	0e 94 80 0c 	call	0x1900	; 0x1900 <xStreamBufferReset>
    30ce:	b8 01       	movw	r22, r16
    30d0:	88 ed       	ldi	r24, 0xD8	; 216
    30d2:	98 e1       	ldi	r25, 0x18	; 24
    30d4:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <strcpy>
    30d8:	20 97       	sbiw	r28, 0x00	; 0
    30da:	79 f0       	breq	.+30     	; 0x30fa <_upload_message+0x44>
    30dc:	e8 ed       	ldi	r30, 0xD8	; 216
    30de:	f8 e1       	ldi	r31, 0x18	; 24
    30e0:	01 90       	ld	r0, Z+
    30e2:	00 20       	and	r0, r0
    30e4:	e9 f7       	brne	.-6      	; 0x30e0 <_upload_message+0x2a>
    30e6:	31 97       	sbiw	r30, 0x01	; 1
    30e8:	80 e2       	ldi	r24, 0x20	; 32
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	be 01       	movw	r22, r28
    30f2:	88 ed       	ldi	r24, 0xD8	; 216
    30f4:	98 e1       	ldi	r25, 0x18	; 24
    30f6:	0e 94 d6 25 	call	0x4bac	; 0x4bac <strcat>
    30fa:	e8 ed       	ldi	r30, 0xD8	; 216
    30fc:	f8 e1       	ldi	r31, 0x18	; 24
    30fe:	df 01       	movw	r26, r30
    3100:	0d 90       	ld	r0, X+
    3102:	00 20       	and	r0, r0
    3104:	e9 f7       	brne	.-6      	; 0x3100 <_upload_message+0x4a>
    3106:	11 97       	sbiw	r26, 0x01	; 1
    3108:	8d e0       	ldi	r24, 0x0D	; 13
    310a:	9a e0       	ldi	r25, 0x0A	; 10
    310c:	11 96       	adiw	r26, 0x01	; 1
    310e:	9c 93       	st	X, r25
    3110:	8e 93       	st	-X, r24
    3112:	12 96       	adiw	r26, 0x02	; 2
    3114:	1c 92       	st	X, r1
    3116:	01 90       	ld	r0, Z+
    3118:	00 20       	and	r0, r0
    311a:	e9 f7       	brne	.-6      	; 0x3116 <_upload_message+0x60>
    311c:	31 97       	sbiw	r30, 0x01	; 1
    311e:	e8 5d       	subi	r30, 0xD8	; 216
    3120:	f8 41       	sbci	r31, 0x18	; 24
    3122:	ae 2f       	mov	r26, r30
    3124:	88 ed       	ldi	r24, 0xD8	; 216
    3126:	98 e1       	ldi	r25, 0x18	; 24
    3128:	ac 01       	movw	r20, r24
    312a:	6a 2f       	mov	r22, r26
    312c:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <_rn2483_serial>
    3130:	90 91 40 19 	lds	r25, 0x1940	; 0x801940 <_rn2483_serial+0x1>
    3134:	0e d5       	rcall	.+2588   	; 0x3b52 <serial_send_bytes>
    3136:	81 11       	cpse	r24, r1
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <_upload_message+0xa2>
    313a:	28 e2       	ldi	r18, 0x28	; 40
    313c:	35 e0       	ldi	r19, 0x05	; 5
    313e:	4d e2       	ldi	r20, 0x2D	; 45
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	66 ec       	ldi	r22, 0xC6	; 198
    3144:	79 e1       	ldi	r23, 0x19	; 25
    3146:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_reply_buffer_handle>
    314a:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_reply_buffer_handle+0x1>
    314e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <xStreamBufferReceive>
    3152:	86 ec       	ldi	r24, 0xC6	; 198
    3154:	99 e1       	ldi	r25, 0x19	; 25
    3156:	02 c0       	rjmp	.+4      	; 0x315c <_upload_message+0xa6>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <_reply2return_code>:
    3166:	af 92       	push	r10
    3168:	bf 92       	push	r11
    316a:	cf 92       	push	r12
    316c:	df 92       	push	r13
    316e:	ef 92       	push	r14
    3170:	ff 92       	push	r15
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	6c 01       	movw	r12, r24
    317c:	fc 01       	movw	r30, r24
    317e:	01 90       	ld	r0, Z+
    3180:	00 20       	and	r0, r0
    3182:	e9 f7       	brne	.-6      	; 0x317e <_reply2return_code+0x18>
    3184:	31 97       	sbiw	r30, 0x01	; 1
    3186:	7f 01       	movw	r14, r30
    3188:	e8 1a       	sub	r14, r24
    318a:	f9 0a       	sbc	r15, r25
    318c:	0b e4       	ldi	r16, 0x4B	; 75
    318e:	18 e0       	ldi	r17, 0x08	; 8
    3190:	c0 e0       	ldi	r28, 0x00	; 0
    3192:	d0 e0       	ldi	r29, 0x00	; 0
    3194:	f8 01       	movw	r30, r16
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	a7 01       	movw	r20, r14
    319c:	c6 01       	movw	r24, r12
    319e:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <strncasecmp>
    31a2:	89 2b       	or	r24, r25
    31a4:	49 f4       	brne	.+18     	; 0x31b8 <_reply2return_code+0x52>
    31a6:	fe 01       	movw	r30, r28
    31a8:	ee 0f       	add	r30, r30
    31aa:	ff 1f       	adc	r31, r31
    31ac:	ec 0f       	add	r30, r28
    31ae:	fd 1f       	adc	r31, r29
    31b0:	e6 5b       	subi	r30, 0xB6	; 182
    31b2:	f7 4f       	sbci	r31, 0xF7	; 247
    31b4:	80 81       	ld	r24, Z
    31b6:	07 c0       	rjmp	.+14     	; 0x31c6 <_reply2return_code+0x60>
    31b8:	21 96       	adiw	r28, 0x01	; 1
    31ba:	0d 5f       	subi	r16, 0xFD	; 253
    31bc:	1f 4f       	sbci	r17, 0xFF	; 255
    31be:	c1 31       	cpi	r28, 0x11	; 17
    31c0:	d1 05       	cpc	r29, r1
    31c2:	41 f7       	brne	.-48     	; 0x3194 <_reply2return_code+0x2e>
    31c4:	80 e1       	ldi	r24, 0x10	; 16
    31c6:	df 91       	pop	r29
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ff 90       	pop	r15
    31d0:	ef 90       	pop	r14
    31d2:	df 90       	pop	r13
    31d4:	cf 90       	pop	r12
    31d6:	bf 90       	pop	r11
    31d8:	af 90       	pop	r10
    31da:	08 95       	ret

000031dc <_upload_message_rc>:
    31dc:	6c df       	rcall	.-296    	; 0x30b6 <_upload_message>
    31de:	c3 cf       	rjmp	.-122    	; 0x3166 <_reply2return_code>
    31e0:	08 95       	ret

000031e2 <lora_driver_flush_buffers>:
    31e2:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_reply_buffer_handle>
    31e6:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_reply_buffer_handle+0x1>
    31ea:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <xStreamBufferReset>
    31ee:	08 95       	ret

000031f0 <lora_driver_create>:
    31f0:	8f 92       	push	r8
    31f2:	9f 92       	push	r9
    31f4:	af 92       	push	r10
    31f6:	cf 92       	push	r12
    31f8:	ef 92       	push	r14
    31fa:	0f 93       	push	r16
    31fc:	cf 93       	push	r28
    31fe:	c8 2f       	mov	r28, r24
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	88 ec       	ldi	r24, 0xC8	; 200
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <xStreamBufferGenericCreate>
    320e:	90 93 3e 19 	sts	0x193E, r25	; 0x80193e <_reply_buffer_handle+0x1>
    3212:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <_reply_buffer_handle>
    3216:	0f 2e       	mov	r0, r31
    3218:	f5 e1       	ldi	r31, 0x15	; 21
    321a:	8f 2e       	mov	r8, r31
    321c:	f8 e1       	ldi	r31, 0x18	; 24
    321e:	9f 2e       	mov	r9, r31
    3220:	f0 2d       	mov	r31, r0
    3222:	68 94       	set
    3224:	aa 24       	eor	r10, r10
    3226:	a6 f8       	bld	r10, 6
    3228:	68 94       	set
    322a:	cc 24       	eor	r12, r12
    322c:	c6 f8       	bld	r12, 6
    322e:	e1 2c       	mov	r14, r1
    3230:	00 e0       	ldi	r16, 0x00	; 0
    3232:	23 e0       	ldi	r18, 0x03	; 3
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	51 ee       	ldi	r21, 0xE1	; 225
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	8c 2f       	mov	r24, r28
    323e:	ce d3       	rcall	.+1948   	; 0x39dc <serial_new_instance>
    3240:	90 93 40 19 	sts	0x1940, r25	; 0x801940 <_rn2483_serial+0x1>
    3244:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <_rn2483_serial>
    3248:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <register_access+0x8>
    324c:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <register_access+0x9>
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	87 e0       	ldi	r24, 0x07	; 7
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	19 95       	eicall
    3258:	cf 91       	pop	r28
    325a:	0f 91       	pop	r16
    325c:	ef 90       	pop	r14
    325e:	cf 90       	pop	r12
    3260:	af 90       	pop	r10
    3262:	9f 90       	pop	r9
    3264:	8f 90       	pop	r8
    3266:	08 95       	ret

00003268 <lora_driver_reset_rn2483>:
    3268:	88 23       	and	r24, r24
    326a:	49 f0       	breq	.+18     	; 0x327e <lora_driver_reset_rn2483+0x16>
    326c:	e0 91 43 1a 	lds	r30, 0x1A43	; 0x801a43 <register_access+0x12>
    3270:	f0 91 44 1a 	lds	r31, 0x1A44	; 0x801a44 <register_access+0x13>
    3274:	64 e0       	ldi	r22, 0x04	; 4
    3276:	88 e0       	ldi	r24, 0x08	; 8
    3278:	91 e0       	ldi	r25, 0x01	; 1
    327a:	19 95       	eicall
    327c:	08 95       	ret
    327e:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <register_access+0x8>
    3282:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <register_access+0x9>
    3286:	64 e0       	ldi	r22, 0x04	; 4
    3288:	88 e0       	ldi	r24, 0x08	; 8
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	19 95       	eicall
    328e:	08 95       	ret

00003290 <lora_driver_rn2483_factory_reset>:
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	86 ee       	ldi	r24, 0xE6	; 230
    3296:	95 e0       	ldi	r25, 0x05	; 5
    3298:	0e df       	rcall	.-484    	; 0x30b6 <_upload_message>
    329a:	e6 ec       	ldi	r30, 0xC6	; 198
    329c:	f9 e1       	ldi	r31, 0x19	; 25
    329e:	01 90       	ld	r0, Z+
    32a0:	00 20       	and	r0, r0
    32a2:	e9 f7       	brne	.-6      	; 0x329e <lora_driver_rn2483_factory_reset+0xe>
    32a4:	31 97       	sbiw	r30, 0x01	; 1
    32a6:	e6 5c       	subi	r30, 0xC6	; 198
    32a8:	f9 41       	sbci	r31, 0x19	; 25
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	75 97       	sbiw	r30, 0x15	; 21
    32ae:	08 f0       	brcs	.+2      	; 0x32b2 <lora_driver_rn2483_factory_reset+0x22>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	08 95       	ret

000032b4 <lora_driver_get_rn2483_hweui>:
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	ec 01       	movw	r28, r24
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	87 ef       	ldi	r24, 0xF7	; 247
    32c0:	95 e0       	ldi	r25, 0x05	; 5
    32c2:	f9 de       	rcall	.-526    	; 0x30b6 <_upload_message>
    32c4:	e6 ec       	ldi	r30, 0xC6	; 198
    32c6:	f9 e1       	ldi	r31, 0x19	; 25
    32c8:	01 90       	ld	r0, Z+
    32ca:	00 20       	and	r0, r0
    32cc:	e9 f7       	brne	.-6      	; 0x32c8 <lora_driver_get_rn2483_hweui+0x14>
    32ce:	e7 5d       	subi	r30, 0xD7	; 215
    32d0:	f9 41       	sbci	r31, 0x19	; 25
    32d2:	39 f4       	brne	.+14     	; 0x32e2 <lora_driver_get_rn2483_hweui+0x2e>
    32d4:	66 ec       	ldi	r22, 0xC6	; 198
    32d6:	79 e1       	ldi	r23, 0x19	; 25
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <strcpy>
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <lora_driver_get_rn2483_hweui+0x32>
    32e2:	18 82       	st	Y, r1
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <lora_driver_set_device_identifier>:
    32ec:	fc 01       	movw	r30, r24
    32ee:	01 90       	ld	r0, Z+
    32f0:	00 20       	and	r0, r0
    32f2:	e9 f7       	brne	.-6      	; 0x32ee <lora_driver_set_device_identifier+0x2>
    32f4:	9f 01       	movw	r18, r30
    32f6:	21 51       	subi	r18, 0x11	; 17
    32f8:	31 09       	sbc	r19, r1
    32fa:	28 17       	cp	r18, r24
    32fc:	39 07       	cpc	r19, r25
    32fe:	29 f4       	brne	.+10     	; 0x330a <lora_driver_set_device_identifier+0x1e>
    3300:	bc 01       	movw	r22, r24
    3302:	85 e2       	ldi	r24, 0x25	; 37
    3304:	96 e0       	ldi	r25, 0x06	; 6
    3306:	6a cf       	rjmp	.-300    	; 0x31dc <_upload_message_rc>
    3308:	08 95       	ret
    330a:	89 e0       	ldi	r24, 0x09	; 9
    330c:	08 95       	ret

0000330e <lora_driver_set_application_identifier>:
    330e:	fc 01       	movw	r30, r24
    3310:	01 90       	ld	r0, Z+
    3312:	00 20       	and	r0, r0
    3314:	e9 f7       	brne	.-6      	; 0x3310 <lora_driver_set_application_identifier+0x2>
    3316:	9f 01       	movw	r18, r30
    3318:	21 51       	subi	r18, 0x11	; 17
    331a:	31 09       	sbc	r19, r1
    331c:	28 17       	cp	r18, r24
    331e:	39 07       	cpc	r19, r25
    3320:	29 f4       	brne	.+10     	; 0x332c <lora_driver_set_application_identifier+0x1e>
    3322:	bc 01       	movw	r22, r24
    3324:	84 e3       	ldi	r24, 0x34	; 52
    3326:	96 e0       	ldi	r25, 0x06	; 6
    3328:	59 cf       	rjmp	.-334    	; 0x31dc <_upload_message_rc>
    332a:	08 95       	ret
    332c:	89 e0       	ldi	r24, 0x09	; 9
    332e:	08 95       	ret

00003330 <lora_driver_set_application_key>:
    3330:	fc 01       	movw	r30, r24
    3332:	01 90       	ld	r0, Z+
    3334:	00 20       	and	r0, r0
    3336:	e9 f7       	brne	.-6      	; 0x3332 <lora_driver_set_application_key+0x2>
    3338:	9f 01       	movw	r18, r30
    333a:	21 52       	subi	r18, 0x21	; 33
    333c:	31 09       	sbc	r19, r1
    333e:	28 17       	cp	r18, r24
    3340:	39 07       	cpc	r19, r25
    3342:	29 f4       	brne	.+10     	; 0x334e <lora_driver_set_application_key+0x1e>
    3344:	bc 01       	movw	r22, r24
    3346:	83 e4       	ldi	r24, 0x43	; 67
    3348:	96 e0       	ldi	r25, 0x06	; 6
    334a:	48 cf       	rjmp	.-368    	; 0x31dc <_upload_message_rc>
    334c:	08 95       	ret
    334e:	89 e0       	ldi	r24, 0x09	; 9
    3350:	08 95       	ret

00003352 <lora_driver_save_mac>:
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	82 e8       	ldi	r24, 0x82	; 130
    3358:	96 e0       	ldi	r25, 0x06	; 6
    335a:	40 cf       	rjmp	.-384    	; 0x31dc <_upload_message_rc>
    335c:	08 95       	ret

0000335e <lora_driver_join>:
    335e:	e8 2f       	mov	r30, r24
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	ee 0f       	add	r30, r30
    3364:	ff 1f       	adc	r31, r31
    3366:	ea 5b       	subi	r30, 0xBA	; 186
    3368:	f7 4f       	sbci	r31, 0xF7	; 247
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	8b e8       	ldi	r24, 0x8B	; 139
    3370:	96 e0       	ldi	r25, 0x06	; 6
    3372:	34 df       	rcall	.-408    	; 0x31dc <_upload_message_rc>
    3374:	81 11       	cpse	r24, r1
    3376:	12 c0       	rjmp	.+36     	; 0x339c <lora_driver_join+0x3e>
    3378:	28 e2       	ldi	r18, 0x28	; 40
    337a:	35 e0       	ldi	r19, 0x05	; 5
    337c:	4d e2       	ldi	r20, 0x2D	; 45
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	66 ec       	ldi	r22, 0xC6	; 198
    3382:	79 e1       	ldi	r23, 0x19	; 25
    3384:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <_reply_buffer_handle>
    3388:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <_reply_buffer_handle+0x1>
    338c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <xStreamBufferReceive>
    3390:	88 23       	and	r24, r24
    3392:	21 f0       	breq	.+8      	; 0x339c <lora_driver_join+0x3e>
    3394:	86 ec       	ldi	r24, 0xC6	; 198
    3396:	99 e1       	ldi	r25, 0x19	; 25
    3398:	e6 ce       	rjmp	.-564    	; 0x3166 <_reply2return_code>
    339a:	08 95       	ret
    339c:	86 ec       	ldi	r24, 0xC6	; 198
    339e:	99 e1       	ldi	r25, 0x19	; 25
    33a0:	e2 ce       	rjmp	.-572    	; 0x3166 <_reply2return_code>
    33a2:	08 95       	ret

000033a4 <lora_driver_sent_upload_message>:
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	1f 92       	push	r1
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	db 01       	movw	r26, r22
    33b0:	11 96       	adiw	r26, 0x01	; 1
    33b2:	9c 91       	ld	r25, X
    33b4:	11 97       	sbiw	r26, 0x01	; 1
    33b6:	95 31       	cpi	r25, 0x15	; 21
    33b8:	08 f0       	brcs	.+2      	; 0x33bc <lora_driver_sent_upload_message+0x18>
    33ba:	87 c0       	rjmp	.+270    	; 0x34ca <lora_driver_sent_upload_message+0x126>
    33bc:	99 23       	and	r25, r25
    33be:	81 f1       	breq	.+96     	; 0x3420 <lora_driver_sent_upload_message+0x7c>
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	27 2f       	mov	r18, r23
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	46 2f       	mov	r20, r22
    33ca:	50 e0       	ldi	r21, 0x00	; 0
    33cc:	fd 01       	movw	r30, r26
    33ce:	e4 0f       	add	r30, r20
    33d0:	f5 1f       	adc	r31, r21
    33d2:	92 81       	ldd	r25, Z+2	; 0x02
    33d4:	92 95       	swap	r25
    33d6:	9f 70       	andi	r25, 0x0F	; 15
    33d8:	9a 30       	cpi	r25, 0x0A	; 10
    33da:	10 f0       	brcs	.+4      	; 0x33e0 <lora_driver_sent_upload_message+0x3c>
    33dc:	99 5c       	subi	r25, 0xC9	; 201
    33de:	01 c0       	rjmp	.+2      	; 0x33e2 <lora_driver_sent_upload_message+0x3e>
    33e0:	90 5d       	subi	r25, 0xD0	; 208
    33e2:	f9 01       	movw	r30, r18
    33e4:	e9 5a       	subi	r30, 0xA9	; 169
    33e6:	f6 4e       	sbci	r31, 0xE6	; 230
    33e8:	90 83       	st	Z, r25
    33ea:	2f 5f       	subi	r18, 0xFF	; 255
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
    33ee:	fd 01       	movw	r30, r26
    33f0:	e4 0f       	add	r30, r20
    33f2:	f5 1f       	adc	r31, r21
    33f4:	92 81       	ldd	r25, Z+2	; 0x02
    33f6:	9f 70       	andi	r25, 0x0F	; 15
    33f8:	49 2f       	mov	r20, r25
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	4a 30       	cpi	r20, 0x0A	; 10
    33fe:	51 05       	cpc	r21, r1
    3400:	14 f0       	brlt	.+4      	; 0x3406 <lora_driver_sent_upload_message+0x62>
    3402:	99 5c       	subi	r25, 0xC9	; 201
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <lora_driver_sent_upload_message+0x64>
    3406:	90 5d       	subi	r25, 0xD0	; 208
    3408:	f9 01       	movw	r30, r18
    340a:	e9 5a       	subi	r30, 0xA9	; 169
    340c:	f6 4e       	sbci	r31, 0xE6	; 230
    340e:	90 83       	st	Z, r25
    3410:	7e 5f       	subi	r23, 0xFE	; 254
    3412:	6f 5f       	subi	r22, 0xFF	; 255
    3414:	11 96       	adiw	r26, 0x01	; 1
    3416:	9c 91       	ld	r25, X
    3418:	11 97       	sbiw	r26, 0x01	; 1
    341a:	69 17       	cp	r22, r25
    341c:	98 f2       	brcs	.-90     	; 0x33c4 <lora_driver_sent_upload_message+0x20>
    341e:	01 c0       	rjmp	.+2      	; 0x3422 <lora_driver_sent_upload_message+0x7e>
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	e7 2f       	mov	r30, r23
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	e9 5a       	subi	r30, 0xA9	; 169
    3428:	f6 4e       	sbci	r31, 0xE6	; 230
    342a:	10 82       	st	Z, r1
    342c:	4c 91       	ld	r20, X
    342e:	81 11       	cpse	r24, r1
    3430:	03 c0       	rjmp	.+6      	; 0x3438 <lora_driver_sent_upload_message+0x94>
    3432:	84 e9       	ldi	r24, 0x94	; 148
    3434:	96 e0       	ldi	r25, 0x06	; 6
    3436:	02 c0       	rjmp	.+4      	; 0x343c <lora_driver_sent_upload_message+0x98>
    3438:	86 e9       	ldi	r24, 0x96	; 150
    343a:	96 e0       	ldi	r25, 0x06	; 6
    343c:	27 e5       	ldi	r18, 0x57	; 87
    343e:	39 e1       	ldi	r19, 0x19	; 25
    3440:	3f 93       	push	r19
    3442:	2f 93       	push	r18
    3444:	1f 92       	push	r1
    3446:	4f 93       	push	r20
    3448:	9f 93       	push	r25
    344a:	8f 93       	push	r24
    344c:	8a e9       	ldi	r24, 0x9A	; 154
    344e:	96 e0       	ldi	r25, 0x06	; 6
    3450:	9f 93       	push	r25
    3452:	8f 93       	push	r24
    3454:	89 e9       	ldi	r24, 0x99	; 153
    3456:	99 e1       	ldi	r25, 0x19	; 25
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    3460:	60 e0       	ldi	r22, 0x00	; 0
    3462:	70 e0       	ldi	r23, 0x00	; 0
    3464:	89 e9       	ldi	r24, 0x99	; 153
    3466:	99 e1       	ldi	r25, 0x19	; 25
    3468:	b9 de       	rcall	.-654    	; 0x31dc <_upload_message_rc>
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	8e 30       	cpi	r24, 0x0E	; 14
    3476:	51 f5       	brne	.+84     	; 0x34cc <lora_driver_sent_upload_message+0x128>
    3478:	87 e0       	ldi	r24, 0x07	; 7
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	be 01       	movw	r22, r28
    347e:	6f 5f       	subi	r22, 0xFF	; 255
    3480:	7f 4f       	sbci	r23, 0xFF	; 255
    3482:	86 ec       	ldi	r24, 0xC6	; 198
    3484:	99 e1       	ldi	r25, 0x19	; 25
    3486:	30 d1       	rcall	.+608    	; 0x36e8 <decode_port_no>
    3488:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <_downlink_payload>
    348c:	e9 81       	ldd	r30, Y+1	; 0x01
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	ea 53       	subi	r30, 0x3A	; 58
    3492:	f6 4e       	sbci	r31, 0xE6	; 230
    3494:	df 01       	movw	r26, r30
    3496:	0d 90       	ld	r0, X+
    3498:	00 20       	and	r0, r0
    349a:	e9 f7       	brne	.-6      	; 0x3496 <lora_driver_sent_upload_message+0xf2>
    349c:	11 97       	sbiw	r26, 0x01	; 1
    349e:	ae 1b       	sub	r26, r30
    34a0:	bf 0b       	sbc	r27, r31
    34a2:	aa 23       	and	r26, r26
    34a4:	81 f0       	breq	.+32     	; 0x34c6 <lora_driver_sent_upload_message+0x122>
    34a6:	bb 27       	eor	r27, r27
    34a8:	11 97       	sbiw	r26, 0x01	; 1
    34aa:	cd 01       	movw	r24, r26
    34ac:	0a f4       	brpl	.+2      	; 0x34b0 <lora_driver_sent_upload_message+0x10c>
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	95 95       	asr	r25
    34b2:	87 95       	ror	r24
    34b4:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <_downlink_payload+0x1>
    34b8:	af 01       	movw	r20, r30
    34ba:	4f 5f       	subi	r20, 0xFF	; 255
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
    34be:	64 e1       	ldi	r22, 0x14	; 20
    34c0:	83 e4       	ldi	r24, 0x43	; 67
    34c2:	99 e1       	ldi	r25, 0x19	; 25
    34c4:	3d d1       	rcall	.+634    	; 0x3740 <decode_hexadecimal_string_bytes>
    34c6:	8e e0       	ldi	r24, 0x0E	; 14
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <lora_driver_sent_upload_message+0x128>
    34ca:	84 e1       	ldi	r24, 0x14	; 20
    34cc:	0f 90       	pop	r0
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <lora_driver_set_adaptive_data_rate>:
    34d4:	81 30       	cpi	r24, 0x01	; 1
    34d6:	19 f0       	breq	.+6      	; 0x34de <lora_driver_set_adaptive_data_rate+0xa>
    34d8:	6a ea       	ldi	r22, 0xAA	; 170
    34da:	76 e0       	ldi	r23, 0x06	; 6
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <lora_driver_set_adaptive_data_rate+0xe>
    34de:	6a e6       	ldi	r22, 0x6A	; 106
    34e0:	77 e0       	ldi	r23, 0x07	; 7
    34e2:	8e ea       	ldi	r24, 0xAE	; 174
    34e4:	96 e0       	ldi	r25, 0x06	; 6
    34e6:	7a ce       	rjmp	.-780    	; 0x31dc <_upload_message_rc>
    34e8:	08 95       	ret

000034ea <lora_driver_configure_to_eu868>:
    34ea:	2f 92       	push	r2
    34ec:	3f 92       	push	r3
    34ee:	4f 92       	push	r4
    34f0:	5f 92       	push	r5
    34f2:	6f 92       	push	r6
    34f4:	7f 92       	push	r7
    34f6:	8f 92       	push	r8
    34f8:	9f 92       	push	r9
    34fa:	af 92       	push	r10
    34fc:	bf 92       	push	r11
    34fe:	cf 92       	push	r12
    3500:	df 92       	push	r13
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	a0 97       	sbiw	r28, 0x20	; 32
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	63 ef       	ldi	r22, 0xF3	; 243
    3520:	76 e0       	ldi	r23, 0x06	; 6
    3522:	8f ef       	ldi	r24, 0xFF	; 255
    3524:	96 e0       	ldi	r25, 0x06	; 6
    3526:	c7 dd       	rcall	.-1138   	; 0x30b6 <_upload_message>
    3528:	1e de       	rcall	.-964    	; 0x3166 <_reply2return_code>
    352a:	81 11       	cpse	r24, r1
    352c:	a3 c0       	rjmp	.+326    	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	e1 e2       	ldi	r30, 0x21	; 33
    3532:	f2 e0       	ldi	r31, 0x02	; 2
    3534:	de 01       	movw	r26, r28
    3536:	11 96       	adiw	r26, 0x01	; 1
    3538:	01 90       	ld	r0, Z+
    353a:	0d 92       	st	X+, r0
    353c:	8a 95       	dec	r24
    353e:	e1 f7       	brne	.-8      	; 0x3538 <lora_driver_configure_to_eu868+0x4e>
    3540:	9e 01       	movw	r18, r28
    3542:	2f 5f       	subi	r18, 0xFF	; 255
    3544:	3f 4f       	sbci	r19, 0xFF	; 255
    3546:	69 01       	movw	r12, r18
    3548:	e1 2c       	mov	r14, r1
    354a:	f1 2c       	mov	r15, r1
    354c:	0f 2e       	mov	r0, r31
    354e:	fb e0       	ldi	r31, 0x0B	; 11
    3550:	af 2e       	mov	r10, r31
    3552:	f7 e0       	ldi	r31, 0x07	; 7
    3554:	bf 2e       	mov	r11, r31
    3556:	f0 2d       	mov	r31, r0
    3558:	09 e9       	ldi	r16, 0x99	; 153
    355a:	19 e1       	ldi	r17, 0x19	; 25
    355c:	0f 2e       	mov	r0, r31
    355e:	f4 e2       	ldi	r31, 0x24	; 36
    3560:	4f 2e       	mov	r4, r31
    3562:	f7 e0       	ldi	r31, 0x07	; 7
    3564:	5f 2e       	mov	r5, r31
    3566:	f0 2d       	mov	r31, r0
    3568:	0f 2e       	mov	r0, r31
    356a:	fb e3       	ldi	r31, 0x3B	; 59
    356c:	8f 2e       	mov	r8, r31
    356e:	f7 e0       	ldi	r31, 0x07	; 7
    3570:	9f 2e       	mov	r9, r31
    3572:	f0 2d       	mov	r31, r0
    3574:	0f 2e       	mov	r0, r31
    3576:	f5 e5       	ldi	r31, 0x55	; 85
    3578:	6f 2e       	mov	r6, r31
    357a:	f7 e0       	ldi	r31, 0x07	; 7
    357c:	7f 2e       	mov	r7, r31
    357e:	f0 2d       	mov	r31, r0
    3580:	3e 2c       	mov	r3, r14
    3582:	2f 2c       	mov	r2, r15
    3584:	ff 92       	push	r15
    3586:	ef 92       	push	r14
    3588:	bf 92       	push	r11
    358a:	af 92       	push	r10
    358c:	1f 93       	push	r17
    358e:	0f 93       	push	r16
    3590:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	70 e0       	ldi	r23, 0x00	; 0
    3598:	c8 01       	movw	r24, r16
    359a:	8d dd       	rcall	.-1254   	; 0x30b6 <_upload_message>
    359c:	e4 dd       	rcall	.-1080   	; 0x3166 <_reply2return_code>
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	81 11       	cpse	r24, r1
    35ac:	63 c0       	rjmp	.+198    	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    35ae:	32 e0       	ldi	r19, 0x02	; 2
    35b0:	3e 15       	cp	r19, r14
    35b2:	e8 f4       	brcc	.+58     	; 0x35ee <lora_driver_configure_to_eu868+0x104>
    35b4:	f6 01       	movw	r30, r12
    35b6:	83 81       	ldd	r24, Z+3	; 0x03
    35b8:	8f 93       	push	r24
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	8f 93       	push	r24
    35be:	81 81       	ldd	r24, Z+1	; 0x01
    35c0:	8f 93       	push	r24
    35c2:	80 81       	ld	r24, Z
    35c4:	8f 93       	push	r24
    35c6:	ff 92       	push	r15
    35c8:	ef 92       	push	r14
    35ca:	5f 92       	push	r5
    35cc:	4f 92       	push	r4
    35ce:	1f 93       	push	r17
    35d0:	0f 93       	push	r16
    35d2:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	c8 01       	movw	r24, r16
    35dc:	6c dd       	rcall	.-1320   	; 0x30b6 <_upload_message>
    35de:	c3 dd       	rcall	.-1146   	; 0x3166 <_reply2return_code>
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	81 11       	cpse	r24, r1
    35ec:	43 c0       	rjmp	.+134    	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    35ee:	2f 92       	push	r2
    35f0:	3f 92       	push	r3
    35f2:	9f 92       	push	r9
    35f4:	8f 92       	push	r8
    35f6:	1f 93       	push	r17
    35f8:	0f 93       	push	r16
    35fa:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	70 e0       	ldi	r23, 0x00	; 0
    3602:	c8 01       	movw	r24, r16
    3604:	58 dd       	rcall	.-1360   	; 0x30b6 <_upload_message>
    3606:	af dd       	rcall	.-1186   	; 0x3166 <_reply2return_code>
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	81 11       	cpse	r24, r1
    3616:	2e c0       	rjmp	.+92     	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    3618:	2f 92       	push	r2
    361a:	3f 92       	push	r3
    361c:	7f 92       	push	r7
    361e:	6f 92       	push	r6
    3620:	1f 93       	push	r17
    3622:	0f 93       	push	r16
    3624:	0e 94 43 26 	call	0x4c86	; 0x4c86 <sprintf>
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	c8 01       	movw	r24, r16
    362e:	43 dd       	rcall	.-1402   	; 0x30b6 <_upload_message>
    3630:	9a dd       	rcall	.-1228   	; 0x3166 <_reply2return_code>
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	81 11       	cpse	r24, r1
    3640:	19 c0       	rjmp	.+50     	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	e3 1a       	sub	r14, r19
    3646:	f3 0a       	sbc	r15, r19
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	c8 0e       	add	r12, r24
    364c:	d1 1c       	adc	r13, r1
    364e:	98 e0       	ldi	r25, 0x08	; 8
    3650:	e9 16       	cp	r14, r25
    3652:	f1 04       	cpc	r15, r1
    3654:	09 f0       	breq	.+2      	; 0x3658 <lora_driver_configure_to_eu868+0x16e>
    3656:	94 cf       	rjmp	.-216    	; 0x3580 <lora_driver_configure_to_eu868+0x96>
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	8d e6       	ldi	r24, 0x6D	; 109
    365e:	97 e0       	ldi	r25, 0x07	; 7
    3660:	2a dd       	rcall	.-1452   	; 0x30b6 <_upload_message>
    3662:	81 dd       	rcall	.-1278   	; 0x3166 <_reply2return_code>
    3664:	81 11       	cpse	r24, r1
    3666:	06 c0       	rjmp	.+12     	; 0x3674 <lora_driver_configure_to_eu868+0x18a>
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	70 e0       	ldi	r23, 0x00	; 0
    366c:	8e e7       	ldi	r24, 0x7E	; 126
    366e:	97 e0       	ldi	r25, 0x07	; 7
    3670:	22 dd       	rcall	.-1468   	; 0x30b6 <_upload_message>
    3672:	79 dd       	rcall	.-1294   	; 0x3166 <_reply2return_code>
    3674:	a0 96       	adiw	r28, 0x20	; 32
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	df 90       	pop	r13
    368e:	cf 90       	pop	r12
    3690:	bf 90       	pop	r11
    3692:	af 90       	pop	r10
    3694:	9f 90       	pop	r9
    3696:	8f 90       	pop	r8
    3698:	7f 90       	pop	r7
    369a:	6f 90       	pop	r6
    369c:	5f 90       	pop	r5
    369e:	4f 90       	pop	r4
    36a0:	3f 90       	pop	r3
    36a2:	2f 90       	pop	r2
    36a4:	08 95       	ret

000036a6 <lora_driver_set_otaa_identity>:
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	ec 01       	movw	r28, r24
    36b4:	8b 01       	movw	r16, r22
    36b6:	7a 01       	movw	r14, r20
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	0c df       	rcall	.-488    	; 0x34d4 <lora_driver_set_adaptive_data_rate>
    36bc:	81 11       	cpse	r24, r1
    36be:	0d c0       	rjmp	.+26     	; 0x36da <lora_driver_set_otaa_identity+0x34>
    36c0:	ce 01       	movw	r24, r28
    36c2:	25 de       	rcall	.-950    	; 0x330e <lora_driver_set_application_identifier>
    36c4:	81 11       	cpse	r24, r1
    36c6:	09 c0       	rjmp	.+18     	; 0x36da <lora_driver_set_otaa_identity+0x34>
    36c8:	c8 01       	movw	r24, r16
    36ca:	32 de       	rcall	.-924    	; 0x3330 <lora_driver_set_application_key>
    36cc:	81 11       	cpse	r24, r1
    36ce:	05 c0       	rjmp	.+10     	; 0x36da <lora_driver_set_otaa_identity+0x34>
    36d0:	c7 01       	movw	r24, r14
    36d2:	0c de       	rcall	.-1000   	; 0x32ec <lora_driver_set_device_identifier>
    36d4:	81 11       	cpse	r24, r1
    36d6:	01 c0       	rjmp	.+2      	; 0x36da <lora_driver_set_otaa_identity+0x34>
    36d8:	3c de       	rcall	.-904    	; 0x3352 <lora_driver_save_mac>
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	08 95       	ret

000036e8 <decode_port_no>:
    36e8:	dc 01       	movw	r26, r24
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	29 f1       	breq	.+74     	; 0x3738 <decode_port_no+0x50>
    36ee:	fb 01       	movw	r30, r22
    36f0:	20 81       	ld	r18, Z
    36f2:	fc 01       	movw	r30, r24
    36f4:	01 90       	ld	r0, Z+
    36f6:	00 20       	and	r0, r0
    36f8:	e9 f7       	brne	.-6      	; 0x36f4 <decode_port_no+0xc>
    36fa:	31 97       	sbiw	r30, 0x01	; 1
    36fc:	e8 1b       	sub	r30, r24
    36fe:	f9 0b       	sbc	r31, r25
    3700:	82 2f       	mov	r24, r18
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	e8 17       	cp	r30, r24
    3706:	f9 07       	cpc	r31, r25
    3708:	c8 f0       	brcs	.+50     	; 0x373c <decode_port_no+0x54>
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	08 c0       	rjmp	.+16     	; 0x371e <decode_port_no+0x36>
    370e:	88 0f       	add	r24, r24
    3710:	38 2f       	mov	r19, r24
    3712:	33 0f       	add	r19, r19
    3714:	33 0f       	add	r19, r19
    3716:	83 0f       	add	r24, r19
    3718:	80 53       	subi	r24, 0x30	; 48
    371a:	89 0f       	add	r24, r25
    371c:	2f 5f       	subi	r18, 0xFF	; 255
    371e:	fd 01       	movw	r30, r26
    3720:	e2 0f       	add	r30, r18
    3722:	f1 1d       	adc	r31, r1
    3724:	90 81       	ld	r25, Z
    3726:	30 ed       	ldi	r19, 0xD0	; 208
    3728:	39 0f       	add	r19, r25
    372a:	3a 30       	cpi	r19, 0x0A	; 10
    372c:	10 f4       	brcc	.+4      	; 0x3732 <decode_port_no+0x4a>
    372e:	91 11       	cpse	r25, r1
    3730:	ee cf       	rjmp	.-36     	; 0x370e <decode_port_no+0x26>
    3732:	fb 01       	movw	r30, r22
    3734:	20 83       	st	Z, r18
    3736:	08 95       	ret
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	08 95       	ret
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	08 95       	ret

00003740 <decode_hexadecimal_string_bytes>:
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	dc 01       	movw	r26, r24
    374a:	ea 01       	movw	r28, r20
    374c:	20 97       	sbiw	r28, 0x00	; 0
    374e:	e1 f1       	breq	.+120    	; 0x37c8 <decode_hexadecimal_string_bytes+0x88>
    3750:	fa 01       	movw	r30, r20
    3752:	01 90       	ld	r0, Z+
    3754:	00 20       	and	r0, r0
    3756:	e9 f7       	brne	.-6      	; 0x3752 <decode_hexadecimal_string_bytes+0x12>
    3758:	31 97       	sbiw	r30, 0x01	; 1
    375a:	e4 1b       	sub	r30, r20
    375c:	f5 0b       	sbc	r31, r21
    375e:	32 97       	sbiw	r30, 0x02	; 2
    3760:	10 f5       	brcc	.+68     	; 0x37a6 <decode_hexadecimal_string_bytes+0x66>
    3762:	32 c0       	rjmp	.+100    	; 0x37c8 <decode_hexadecimal_string_bytes+0x88>
    3764:	8d 01       	movw	r16, r26
    3766:	04 0f       	add	r16, r20
    3768:	15 1f       	adc	r17, r21
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	ae 01       	movw	r20, r28
    376e:	42 0f       	add	r20, r18
    3770:	53 1f       	adc	r21, r19
    3772:	fa 01       	movw	r30, r20
    3774:	90 81       	ld	r25, Z
    3776:	91 34       	cpi	r25, 0x41	; 65
    3778:	28 f0       	brcs	.+10     	; 0x3784 <decode_hexadecimal_string_bytes+0x44>
    377a:	97 53       	subi	r25, 0x37	; 55
    377c:	59 2f       	mov	r21, r25
    377e:	52 95       	swap	r21
    3780:	50 7f       	andi	r21, 0xF0	; 240
    3782:	03 c0       	rjmp	.+6      	; 0x378a <decode_hexadecimal_string_bytes+0x4a>
    3784:	59 2f       	mov	r21, r25
    3786:	52 95       	swap	r21
    3788:	50 7f       	andi	r21, 0xF0	; 240
    378a:	2c 0f       	add	r18, r28
    378c:	3d 1f       	adc	r19, r29
    378e:	f9 01       	movw	r30, r18
    3790:	91 81       	ldd	r25, Z+1	; 0x01
    3792:	91 34       	cpi	r25, 0x41	; 65
    3794:	10 f0       	brcs	.+4      	; 0x379a <decode_hexadecimal_string_bytes+0x5a>
    3796:	97 53       	subi	r25, 0x37	; 55
    3798:	01 c0       	rjmp	.+2      	; 0x379c <decode_hexadecimal_string_bytes+0x5c>
    379a:	90 53       	subi	r25, 0x30	; 48
    379c:	95 0f       	add	r25, r21
    379e:	f8 01       	movw	r30, r16
    37a0:	90 83       	st	Z, r25
    37a2:	8f 5f       	subi	r24, 0xFF	; 255
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <decode_hexadecimal_string_bytes+0x68>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	28 2f       	mov	r18, r24
    37aa:	22 0f       	add	r18, r18
    37ac:	48 2f       	mov	r20, r24
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	fe 01       	movw	r30, r28
    37b2:	01 90       	ld	r0, Z+
    37b4:	00 20       	and	r0, r0
    37b6:	e9 f7       	brne	.-6      	; 0x37b2 <decode_hexadecimal_string_bytes+0x72>
    37b8:	31 97       	sbiw	r30, 0x01	; 1
    37ba:	ec 1b       	sub	r30, r28
    37bc:	fd 0b       	sbc	r31, r29
    37be:	4e 17       	cp	r20, r30
    37c0:	5f 07       	cpc	r21, r31
    37c2:	10 f4       	brcc	.+4      	; 0x37c8 <decode_hexadecimal_string_bytes+0x88>
    37c4:	86 13       	cpse	r24, r22
    37c6:	ce cf       	rjmp	.-100    	; 0x3764 <decode_hexadecimal_string_bytes+0x24>
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	08 95       	ret

000037d2 <reg_read_register>:
    37d2:	fc 01       	movw	r30, r24
    37d4:	80 81       	ld	r24, Z
    37d6:	08 95       	ret

000037d8 <reg_read_bit>:
    37d8:	fc 01       	movw	r30, r24
    37da:	20 81       	ld	r18, Z
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	02 c0       	rjmp	.+4      	; 0x37e6 <reg_read_bit+0xe>
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	6a 95       	dec	r22
    37e8:	e2 f7       	brpl	.-8      	; 0x37e2 <reg_read_bit+0xa>
    37ea:	82 23       	and	r24, r18
    37ec:	08 95       	ret

000037ee <reg_read_bits>:
    37ee:	fc 01       	movw	r30, r24
    37f0:	80 81       	ld	r24, Z
    37f2:	86 23       	and	r24, r22
    37f4:	08 95       	ret

000037f6 <reg_set_register>:
    37f6:	fc 01       	movw	r30, r24
    37f8:	60 83       	st	Z, r22
    37fa:	08 95       	ret

000037fc <reg_clear_register>:
    37fc:	fc 01       	movw	r30, r24
    37fe:	10 82       	st	Z, r1
    3800:	08 95       	ret

00003802 <reg_set_bit>:
    3802:	fc 01       	movw	r30, r24
    3804:	40 81       	ld	r20, Z
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	02 c0       	rjmp	.+4      	; 0x3810 <reg_set_bit+0xe>
    380c:	22 0f       	add	r18, r18
    380e:	33 1f       	adc	r19, r19
    3810:	6a 95       	dec	r22
    3812:	e2 f7       	brpl	.-8      	; 0x380c <reg_set_bit+0xa>
    3814:	24 2b       	or	r18, r20
    3816:	20 83       	st	Z, r18
    3818:	08 95       	ret

0000381a <reg_set_bits>:
    381a:	fc 01       	movw	r30, r24
    381c:	20 81       	ld	r18, Z
    381e:	62 2b       	or	r22, r18
    3820:	60 83       	st	Z, r22
    3822:	08 95       	ret

00003824 <reg_toggle_bit>:
    3824:	fc 01       	movw	r30, r24
    3826:	40 81       	ld	r20, Z
    3828:	21 e0       	ldi	r18, 0x01	; 1
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <reg_toggle_bit+0xe>
    382e:	22 0f       	add	r18, r18
    3830:	33 1f       	adc	r19, r19
    3832:	6a 95       	dec	r22
    3834:	e2 f7       	brpl	.-8      	; 0x382e <reg_toggle_bit+0xa>
    3836:	24 27       	eor	r18, r20
    3838:	20 83       	st	Z, r18
    383a:	08 95       	ret

0000383c <reg_toggle_bits>:
    383c:	fc 01       	movw	r30, r24
    383e:	20 81       	ld	r18, Z
    3840:	62 27       	eor	r22, r18
    3842:	60 83       	st	Z, r22
    3844:	08 95       	ret

00003846 <reg_clear_bit>:
    3846:	fc 01       	movw	r30, r24
    3848:	90 81       	ld	r25, Z
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <reg_clear_bit+0xe>
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	6a 95       	dec	r22
    3856:	e2 f7       	brpl	.-8      	; 0x3850 <reg_clear_bit+0xa>
    3858:	20 95       	com	r18
    385a:	29 23       	and	r18, r25
    385c:	20 83       	st	Z, r18
    385e:	08 95       	ret

00003860 <reg_clear_bits>:
    3860:	fc 01       	movw	r30, r24
    3862:	90 81       	ld	r25, Z
    3864:	60 95       	com	r22
    3866:	69 23       	and	r22, r25
    3868:	60 83       	st	Z, r22
    386a:	08 95       	ret

0000386c <_serial_call_back>:
    386c:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <crc_sum.1941>
    3870:	86 0f       	add	r24, r22
    3872:	80 93 f6 19 	sts	0x19F6, r24	; 0x8019f6 <crc_sum.1941>
    3876:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <_mh_state>
    387a:	91 30       	cpi	r25, 0x01	; 1
    387c:	79 f0       	breq	.+30     	; 0x389c <_serial_call_back+0x30>
    387e:	28 f0       	brcs	.+10     	; 0x388a <_serial_call_back+0x1e>
    3880:	92 30       	cpi	r25, 0x02	; 2
    3882:	a9 f0       	breq	.+42     	; 0x38ae <_serial_call_back+0x42>
    3884:	93 30       	cpi	r25, 0x03	; 3
    3886:	19 f1       	breq	.+70     	; 0x38ce <_serial_call_back+0x62>
    3888:	08 95       	ret
    388a:	6f 3f       	cpi	r22, 0xFF	; 255
    388c:	09 f0       	breq	.+2      	; 0x3890 <_serial_call_back+0x24>
    388e:	48 c0       	rjmp	.+144    	; 0x3920 <_serial_call_back+0xb4>
    3890:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <crc_sum.1941>
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <_mh_state>
    389a:	08 95       	ret
    389c:	66 38       	cpi	r22, 0x86	; 134
    389e:	09 f0       	breq	.+2      	; 0x38a2 <_serial_call_back+0x36>
    38a0:	3f c0       	rjmp	.+126    	; 0x3920 <_serial_call_back+0xb4>
    38a2:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <inDex.1939>
    38a6:	82 e0       	ldi	r24, 0x02	; 2
    38a8:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <_mh_state>
    38ac:	08 95       	ret
    38ae:	e0 91 f5 19 	lds	r30, 0x19F5	; 0x8019f5 <inDex.1939>
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	8e 0f       	add	r24, r30
    38b6:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <inDex.1939>
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	ed 50       	subi	r30, 0x0D	; 13
    38be:	f6 4e       	sbci	r31, 0xE6	; 230
    38c0:	60 83       	st	Z, r22
    38c2:	82 30       	cpi	r24, 0x02	; 2
    38c4:	69 f5       	brne	.+90     	; 0x3920 <_serial_call_back+0xb4>
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <_mh_state>
    38cc:	08 95       	ret
    38ce:	90 91 f5 19 	lds	r25, 0x19F5	; 0x8019f5 <inDex.1939>
    38d2:	21 e0       	ldi	r18, 0x01	; 1
    38d4:	29 0f       	add	r18, r25
    38d6:	20 93 f5 19 	sts	0x19F5, r18	; 0x8019f5 <inDex.1939>
    38da:	96 30       	cpi	r25, 0x06	; 6
    38dc:	09 f5       	brne	.+66     	; 0x3920 <_serial_call_back+0xb4>
    38de:	81 11       	cpse	r24, r1
    38e0:	0e c0       	rjmp	.+28     	; 0x38fe <_serial_call_back+0x92>
    38e2:	e3 ef       	ldi	r30, 0xF3	; 243
    38e4:	f9 e1       	ldi	r31, 0x19	; 25
    38e6:	80 81       	ld	r24, Z
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	98 2f       	mov	r25, r24
    38ec:	88 27       	eor	r24, r24
    38ee:	21 81       	ldd	r18, Z+1	; 0x01
    38f0:	82 0f       	add	r24, r18
    38f2:	91 1d       	adc	r25, r1
    38f4:	90 93 fb 19 	sts	0x19FB, r25	; 0x8019fb <_ppm+0x1>
    38f8:	80 93 fa 19 	sts	0x19FA, r24	; 0x8019fa <_ppm>
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <_serial_call_back+0x9a>
    38fe:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <_ppm+0x1>
    3902:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <_ppm>
    3906:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <_mh_state>
    390a:	e0 91 f7 19 	lds	r30, 0x19F7	; 0x8019f7 <_app_call_back>
    390e:	f0 91 f8 19 	lds	r31, 0x19F8	; 0x8019f8 <_app_call_back+0x1>
    3912:	30 97       	sbiw	r30, 0x00	; 0
    3914:	29 f0       	breq	.+10     	; 0x3920 <_serial_call_back+0xb4>
    3916:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <_ppm>
    391a:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <_ppm+0x1>
    391e:	19 95       	eicall
    3920:	08 95       	ret

00003922 <mh_z19_create>:
    3922:	8f 92       	push	r8
    3924:	9f 92       	push	r9
    3926:	af 92       	push	r10
    3928:	cf 92       	push	r12
    392a:	ef 92       	push	r14
    392c:	0f 93       	push	r16
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	eb 01       	movw	r28, r22
    3934:	0f 2e       	mov	r0, r31
    3936:	f6 e3       	ldi	r31, 0x36	; 54
    3938:	8f 2e       	mov	r8, r31
    393a:	fc e1       	ldi	r31, 0x1C	; 28
    393c:	9f 2e       	mov	r9, r31
    393e:	f0 2d       	mov	r31, r0
    3940:	68 94       	set
    3942:	aa 24       	eor	r10, r10
    3944:	a4 f8       	bld	r10, 4
    3946:	68 94       	set
    3948:	cc 24       	eor	r12, r12
    394a:	c4 f8       	bld	r12, 4
    394c:	e1 2c       	mov	r14, r1
    394e:	00 e0       	ldi	r16, 0x00	; 0
    3950:	23 e0       	ldi	r18, 0x03	; 3
    3952:	40 e8       	ldi	r20, 0x80	; 128
    3954:	55 e2       	ldi	r21, 0x25	; 37
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	70 e0       	ldi	r23, 0x00	; 0
    395a:	40 d0       	rcall	.+128    	; 0x39dc <serial_new_instance>
    395c:	90 93 fd 19 	sts	0x19FD, r25	; 0x8019fd <_serial+0x1>
    3960:	80 93 fc 19 	sts	0x19FC, r24	; 0x8019fc <_serial>
    3964:	d0 93 f8 19 	sts	0x19F8, r29	; 0x8019f8 <_app_call_back+0x1>
    3968:	c0 93 f7 19 	sts	0x19F7, r28	; 0x8019f7 <_app_call_back>
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	0f 91       	pop	r16
    3972:	ef 90       	pop	r14
    3974:	cf 90       	pop	r12
    3976:	af 90       	pop	r10
    3978:	9f 90       	pop	r9
    397a:	8f 90       	pop	r8
    397c:	08 95       	ret

0000397e <mh_z19_take_meassuring>:
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	29 97       	sbiw	r28, 0x09	; 9
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	89 e0       	ldi	r24, 0x09	; 9
    3994:	e1 e4       	ldi	r30, 0x41	; 65
    3996:	f2 e0       	ldi	r31, 0x02	; 2
    3998:	9e 01       	movw	r18, r28
    399a:	2f 5f       	subi	r18, 0xFF	; 255
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
    399e:	d9 01       	movw	r26, r18
    39a0:	01 90       	ld	r0, Z+
    39a2:	0d 92       	st	X+, r0
    39a4:	8a 95       	dec	r24
    39a6:	e1 f7       	brne	.-8      	; 0x39a0 <mh_z19_take_meassuring+0x22>
    39a8:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <_ppm+0x1>
    39ac:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <_ppm>
    39b0:	80 91 fc 19 	lds	r24, 0x19FC	; 0x8019fc <_serial>
    39b4:	90 91 fd 19 	lds	r25, 0x19FD	; 0x8019fd <_serial+0x1>
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	31 f0       	breq	.+12     	; 0x39c8 <mh_z19_take_meassuring+0x4a>
    39bc:	42 2f       	mov	r20, r18
    39be:	53 2f       	mov	r21, r19
    39c0:	69 e0       	ldi	r22, 0x09	; 9
    39c2:	c7 d0       	rcall	.+398    	; 0x3b52 <serial_send_bytes>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	01 c0       	rjmp	.+2      	; 0x39ca <mh_z19_take_meassuring+0x4c>
    39c8:	82 e0       	ldi	r24, 0x02	; 2
    39ca:	29 96       	adiw	r28, 0x09	; 9
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	08 95       	ret

000039dc <serial_new_instance>:
    39dc:	2f 92       	push	r2
    39de:	3f 92       	push	r3
    39e0:	4f 92       	push	r4
    39e2:	5f 92       	push	r5
    39e4:	6f 92       	push	r6
    39e6:	7f 92       	push	r7
    39e8:	8f 92       	push	r8
    39ea:	9f 92       	push	r9
    39ec:	af 92       	push	r10
    39ee:	cf 92       	push	r12
    39f0:	ef 92       	push	r14
    39f2:	ff 92       	push	r15
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	f8 2e       	mov	r15, r24
    3a02:	2a 01       	movw	r4, r20
    3a04:	3b 01       	movw	r6, r22
    3a06:	88 e0       	ldi	r24, 0x08	; 8
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	9b d7       	rcall	.+3894   	; 0x4942 <malloc>
    3a0c:	8c 01       	movw	r16, r24
    3a0e:	8f 2d       	mov	r24, r15
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	88 0f       	add	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	fc 01       	movw	r30, r24
    3a18:	e2 50       	subi	r30, 0x02	; 2
    3a1a:	f6 4e       	sbci	r31, 0xE6	; 230
    3a1c:	11 83       	std	Z+1, r17	; 0x01
    3a1e:	00 83       	st	Z, r16
    3a20:	fc 01       	movw	r30, r24
    3a22:	e6 5f       	subi	r30, 0xF6	; 246
    3a24:	fd 4f       	sbci	r31, 0xFD	; 253
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	d8 01       	movw	r26, r16
    3a2c:	8d 93       	st	X+, r24
    3a2e:	9c 93       	st	X, r25
    3a30:	6c 2d       	mov	r22, r12
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	84 e0       	ldi	r24, 0x04	; 4
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	6a d7       	rcall	.+3796   	; 0x490e <calloc>
    3a3a:	1c 01       	movw	r2, r24
    3a3c:	61 e0       	ldi	r22, 0x01	; 1
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	64 d7       	rcall	.+3784   	; 0x490e <calloc>
    3a46:	7c 01       	movw	r14, r24
    3a48:	4c 2d       	mov	r20, r12
    3a4a:	b1 01       	movw	r22, r2
    3a4c:	2b d5       	rcall	.+2646   	; 0x44a4 <fifo_init>
    3a4e:	f8 01       	movw	r30, r16
    3a50:	f5 82       	std	Z+5, r15	; 0x05
    3a52:	e4 82       	std	Z+4, r14	; 0x04
    3a54:	6a 2d       	mov	r22, r10
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	58 d7       	rcall	.+3760   	; 0x490e <calloc>
    3a5e:	1c 01       	movw	r2, r24
    3a60:	61 e0       	ldi	r22, 0x01	; 1
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	86 e0       	ldi	r24, 0x06	; 6
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	52 d7       	rcall	.+3748   	; 0x490e <calloc>
    3a6a:	7c 01       	movw	r14, r24
    3a6c:	4a 2d       	mov	r20, r10
    3a6e:	b1 01       	movw	r22, r2
    3a70:	19 d5       	rcall	.+2610   	; 0x44a4 <fifo_init>
    3a72:	d8 01       	movw	r26, r16
    3a74:	13 96       	adiw	r26, 0x03	; 3
    3a76:	fc 92       	st	X, r15
    3a78:	ee 92       	st	-X, r14
    3a7a:	12 97       	sbiw	r26, 0x02	; 2
    3a7c:	17 96       	adiw	r26, 0x07	; 7
    3a7e:	9c 92       	st	X, r9
    3a80:	8e 92       	st	-X, r8
    3a82:	16 97       	sbiw	r26, 0x06	; 6
    3a84:	ff b6       	in	r15, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	ed 91       	ld	r30, X+
    3a8a:	fc 91       	ld	r31, X
    3a8c:	11 97       	sbiw	r26, 0x01	; 1
    3a8e:	36 97       	sbiw	r30, 0x06	; 6
    3a90:	80 81       	ld	r24, Z
    3a92:	82 60       	ori	r24, 0x02	; 2
    3a94:	80 83       	st	Z, r24
    3a96:	8d 90       	ld	r8, X+
    3a98:	9c 90       	ld	r9, X
    3a9a:	c3 01       	movw	r24, r6
    3a9c:	b2 01       	movw	r22, r4
    3a9e:	1c d6       	rcall	.+3128   	; 0x46d8 <__floatunsisf>
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e0       	ldi	r20, 0x00	; 0
    3aa6:	51 e4       	ldi	r21, 0x41	; 65
    3aa8:	a5 d6       	rcall	.+3402   	; 0x47f4 <__mulsf3>
    3aaa:	9b 01       	movw	r18, r22
    3aac:	ac 01       	movw	r20, r24
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	74 e2       	ldi	r23, 0x24	; 36
    3ab2:	84 e7       	ldi	r24, 0x74	; 116
    3ab4:	9b e4       	ldi	r25, 0x4B	; 75
    3ab6:	77 d5       	rcall	.+2798   	; 0x45a6 <__divsf3>
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e8       	ldi	r20, 0x80	; 128
    3abe:	5f e3       	ldi	r21, 0x3F	; 63
    3ac0:	0d d5       	rcall	.+2586   	; 0x44dc <__subsf3>
    3ac2:	de d5       	rcall	.+3004   	; 0x4680 <__fixunssfsi>
    3ac4:	f4 01       	movw	r30, r8
    3ac6:	32 97       	sbiw	r30, 0x02	; 2
    3ac8:	60 83       	st	Z, r22
    3aca:	d8 01       	movw	r26, r16
    3acc:	ed 91       	ld	r30, X+
    3ace:	fc 91       	ld	r31, X
    3ad0:	11 97       	sbiw	r26, 0x01	; 1
    3ad2:	35 97       	sbiw	r30, 0x05	; 5
    3ad4:	88 e9       	ldi	r24, 0x98	; 152
    3ad6:	80 83       	st	Z, r24
    3ad8:	ed 91       	ld	r30, X+
    3ada:	fc 91       	ld	r31, X
    3adc:	34 97       	sbiw	r30, 0x04	; 4
    3ade:	86 e0       	ldi	r24, 0x06	; 6
    3ae0:	80 83       	st	Z, r24
    3ae2:	ff be       	out	0x3f, r15	; 63
    3ae4:	c8 01       	movw	r24, r16
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	1f 91       	pop	r17
    3aec:	0f 91       	pop	r16
    3aee:	ff 90       	pop	r15
    3af0:	ef 90       	pop	r14
    3af2:	cf 90       	pop	r12
    3af4:	af 90       	pop	r10
    3af6:	9f 90       	pop	r9
    3af8:	8f 90       	pop	r8
    3afa:	7f 90       	pop	r7
    3afc:	6f 90       	pop	r6
    3afe:	5f 90       	pop	r5
    3b00:	4f 90       	pop	r4
    3b02:	3f 90       	pop	r3
    3b04:	2f 90       	pop	r2
    3b06:	08 95       	ret

00003b08 <serial_send_byte>:
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	ea 81       	ldd	r30, Y+2	; 0x02
    3b10:	fb 81       	ldd	r31, Y+3	; 0x03
    3b12:	93 81       	ldd	r25, Z+3	; 0x03
    3b14:	82 81       	ldd	r24, Z+2	; 0x02
    3b16:	25 81       	ldd	r18, Z+5	; 0x05
    3b18:	98 1b       	sub	r25, r24
    3b1a:	92 23       	and	r25, r18
    3b1c:	84 81       	ldd	r24, Z+4	; 0x04
    3b1e:	98 17       	cp	r25, r24
    3b20:	a1 f0       	breq	.+40     	; 0x3b4a <serial_send_byte+0x42>
    3b22:	93 81       	ldd	r25, Z+3	; 0x03
    3b24:	26 95       	lsr	r18
    3b26:	29 23       	and	r18, r25
    3b28:	a0 81       	ld	r26, Z
    3b2a:	b1 81       	ldd	r27, Z+1	; 0x01
    3b2c:	a2 0f       	add	r26, r18
    3b2e:	b1 1d       	adc	r27, r1
    3b30:	6c 93       	st	X, r22
    3b32:	9f 5f       	subi	r25, 0xFF	; 255
    3b34:	25 81       	ldd	r18, Z+5	; 0x05
    3b36:	92 23       	and	r25, r18
    3b38:	93 83       	std	Z+3, r25	; 0x03
    3b3a:	e8 81       	ld	r30, Y
    3b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b3e:	35 97       	sbiw	r30, 0x05	; 5
    3b40:	80 81       	ld	r24, Z
    3b42:	80 62       	ori	r24, 0x20	; 32
    3b44:	80 83       	st	Z, r24
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	01 c0       	rjmp	.+2      	; 0x3b4c <serial_send_byte+0x44>
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	08 95       	ret

00003b52 <serial_send_bytes>:
    3b52:	ef 92       	push	r14
    3b54:	ff 92       	push	r15
    3b56:	0f 93       	push	r16
    3b58:	1f 93       	push	r17
    3b5a:	cf 93       	push	r28
    3b5c:	df 93       	push	r29
    3b5e:	7c 01       	movw	r14, r24
    3b60:	dc 01       	movw	r26, r24
    3b62:	12 96       	adiw	r26, 0x02	; 2
    3b64:	ed 91       	ld	r30, X+
    3b66:	fc 91       	ld	r31, X
    3b68:	13 97       	sbiw	r26, 0x03	; 3
    3b6a:	93 81       	ldd	r25, Z+3	; 0x03
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	98 1b       	sub	r25, r24
    3b70:	85 81       	ldd	r24, Z+5	; 0x05
    3b72:	98 23       	and	r25, r24
    3b74:	84 81       	ldd	r24, Z+4	; 0x04
    3b76:	89 1b       	sub	r24, r25
    3b78:	86 17       	cp	r24, r22
    3b7a:	98 f1       	brcs	.+102    	; 0x3be2 <serial_send_bytes+0x90>
    3b7c:	66 23       	and	r22, r22
    3b7e:	41 f1       	breq	.+80     	; 0x3bd0 <serial_send_bytes+0x7e>
    3b80:	84 2f       	mov	r24, r20
    3b82:	95 2f       	mov	r25, r21
    3b84:	dc 01       	movw	r26, r24
    3b86:	61 50       	subi	r22, 0x01	; 1
    3b88:	46 2f       	mov	r20, r22
    3b8a:	50 e0       	ldi	r21, 0x00	; 0
    3b8c:	4f 5f       	subi	r20, 0xFF	; 255
    3b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b90:	48 0f       	add	r20, r24
    3b92:	59 1f       	adc	r21, r25
    3b94:	e7 01       	movw	r28, r14
    3b96:	ea 81       	ldd	r30, Y+2	; 0x02
    3b98:	fb 81       	ldd	r31, Y+3	; 0x03
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	25 81       	ldd	r18, Z+5	; 0x05
    3ba0:	98 1b       	sub	r25, r24
    3ba2:	92 23       	and	r25, r18
    3ba4:	84 81       	ldd	r24, Z+4	; 0x04
    3ba6:	98 17       	cp	r25, r24
    3ba8:	79 f0       	breq	.+30     	; 0x3bc8 <serial_send_bytes+0x76>
    3baa:	8c 91       	ld	r24, X
    3bac:	93 81       	ldd	r25, Z+3	; 0x03
    3bae:	26 95       	lsr	r18
    3bb0:	29 23       	and	r18, r25
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	8b 01       	movw	r16, r22
    3bb8:	02 0f       	add	r16, r18
    3bba:	11 1d       	adc	r17, r1
    3bbc:	e8 01       	movw	r28, r16
    3bbe:	88 83       	st	Y, r24
    3bc0:	9f 5f       	subi	r25, 0xFF	; 255
    3bc2:	85 81       	ldd	r24, Z+5	; 0x05
    3bc4:	98 23       	and	r25, r24
    3bc6:	93 83       	std	Z+3, r25	; 0x03
    3bc8:	11 96       	adiw	r26, 0x01	; 1
    3bca:	a4 17       	cp	r26, r20
    3bcc:	b5 07       	cpc	r27, r21
    3bce:	11 f7       	brne	.-60     	; 0x3b94 <serial_send_bytes+0x42>
    3bd0:	d7 01       	movw	r26, r14
    3bd2:	ed 91       	ld	r30, X+
    3bd4:	fc 91       	ld	r31, X
    3bd6:	35 97       	sbiw	r30, 0x05	; 5
    3bd8:	80 81       	ld	r24, Z
    3bda:	80 62       	ori	r24, 0x20	; 32
    3bdc:	80 83       	st	Z, r24
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <serial_send_bytes+0x92>
    3be2:	82 e0       	ldi	r24, 0x02	; 2
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	0f 91       	pop	r16
    3bec:	ff 90       	pop	r15
    3bee:	ef 90       	pop	r14
    3bf0:	08 95       	ret

00003bf2 <serial_get_byte>:
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	14 96       	adiw	r26, 0x04	; 4
    3bf6:	ed 91       	ld	r30, X+
    3bf8:	fc 91       	ld	r31, X
    3bfa:	15 97       	sbiw	r26, 0x05	; 5
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	82 81       	ldd	r24, Z+2	; 0x02
    3c00:	98 17       	cp	r25, r24
    3c02:	89 f0       	breq	.+34     	; 0x3c26 <serial_get_byte+0x34>
    3c04:	92 81       	ldd	r25, Z+2	; 0x02
    3c06:	85 81       	ldd	r24, Z+5	; 0x05
    3c08:	86 95       	lsr	r24
    3c0a:	89 23       	and	r24, r25
    3c0c:	a0 81       	ld	r26, Z
    3c0e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c10:	a8 0f       	add	r26, r24
    3c12:	b1 1d       	adc	r27, r1
    3c14:	8c 91       	ld	r24, X
    3c16:	db 01       	movw	r26, r22
    3c18:	8c 93       	st	X, r24
    3c1a:	9f 5f       	subi	r25, 0xFF	; 255
    3c1c:	85 81       	ldd	r24, Z+5	; 0x05
    3c1e:	98 23       	and	r25, r24
    3c20:	92 83       	std	Z+2, r25	; 0x02
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	08 95       	ret
    3c26:	83 e0       	ldi	r24, 0x03	; 3
    3c28:	08 95       	ret

00003c2a <__vector_25>:
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	0f 92       	push	r0
    3c32:	11 24       	eor	r1, r1
    3c34:	0b b6       	in	r0, 0x3b	; 59
    3c36:	0f 92       	push	r0
    3c38:	2f 93       	push	r18
    3c3a:	3f 93       	push	r19
    3c3c:	4f 93       	push	r20
    3c3e:	5f 93       	push	r21
    3c40:	6f 93       	push	r22
    3c42:	7f 93       	push	r23
    3c44:	8f 93       	push	r24
    3c46:	9f 93       	push	r25
    3c48:	af 93       	push	r26
    3c4a:	bf 93       	push	r27
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	ef 93       	push	r30
    3c52:	ff 93       	push	r31
    3c54:	a0 91 fe 19 	lds	r26, 0x19FE	; 0x8019fe <_ser_handle>
    3c58:	b0 91 ff 19 	lds	r27, 0x19FF	; 0x8019ff <_ser_handle+0x1>
    3c5c:	10 97       	sbiw	r26, 0x00	; 0
    3c5e:	11 f1       	breq	.+68     	; 0x3ca4 <__vector_25+0x7a>
    3c60:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c64:	14 96       	adiw	r26, 0x04	; 4
    3c66:	ed 91       	ld	r30, X+
    3c68:	fc 91       	ld	r31, X
    3c6a:	15 97       	sbiw	r26, 0x05	; 5
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	25 81       	ldd	r18, Z+5	; 0x05
    3c72:	98 1b       	sub	r25, r24
    3c74:	92 23       	and	r25, r18
    3c76:	84 81       	ldd	r24, Z+4	; 0x04
    3c78:	98 17       	cp	r25, r24
    3c7a:	61 f0       	breq	.+24     	; 0x3c94 <__vector_25+0x6a>
    3c7c:	83 81       	ldd	r24, Z+3	; 0x03
    3c7e:	26 95       	lsr	r18
    3c80:	28 23       	and	r18, r24
    3c82:	c0 81       	ld	r28, Z
    3c84:	d1 81       	ldd	r29, Z+1	; 0x01
    3c86:	c2 0f       	add	r28, r18
    3c88:	d1 1d       	adc	r29, r1
    3c8a:	68 83       	st	Y, r22
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	95 81       	ldd	r25, Z+5	; 0x05
    3c90:	89 23       	and	r24, r25
    3c92:	83 83       	std	Z+3, r24	; 0x03
    3c94:	16 96       	adiw	r26, 0x06	; 6
    3c96:	ed 91       	ld	r30, X+
    3c98:	fc 91       	ld	r31, X
    3c9a:	17 97       	sbiw	r26, 0x07	; 7
    3c9c:	30 97       	sbiw	r30, 0x00	; 0
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <__vector_25+0x7a>
    3ca0:	cd 01       	movw	r24, r26
    3ca2:	19 95       	eicall
    3ca4:	ff 91       	pop	r31
    3ca6:	ef 91       	pop	r30
    3ca8:	df 91       	pop	r29
    3caa:	cf 91       	pop	r28
    3cac:	bf 91       	pop	r27
    3cae:	af 91       	pop	r26
    3cb0:	9f 91       	pop	r25
    3cb2:	8f 91       	pop	r24
    3cb4:	7f 91       	pop	r23
    3cb6:	6f 91       	pop	r22
    3cb8:	5f 91       	pop	r21
    3cba:	4f 91       	pop	r20
    3cbc:	3f 91       	pop	r19
    3cbe:	2f 91       	pop	r18
    3cc0:	0f 90       	pop	r0
    3cc2:	0b be       	out	0x3b, r0	; 59
    3cc4:	0f 90       	pop	r0
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	0f 90       	pop	r0
    3cca:	1f 90       	pop	r1
    3ccc:	18 95       	reti

00003cce <__vector_26>:
    3cce:	1f 92       	push	r1
    3cd0:	0f 92       	push	r0
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	0f 92       	push	r0
    3cd6:	11 24       	eor	r1, r1
    3cd8:	0b b6       	in	r0, 0x3b	; 59
    3cda:	0f 92       	push	r0
    3cdc:	2f 93       	push	r18
    3cde:	8f 93       	push	r24
    3ce0:	9f 93       	push	r25
    3ce2:	af 93       	push	r26
    3ce4:	bf 93       	push	r27
    3ce6:	ef 93       	push	r30
    3ce8:	ff 93       	push	r31
    3cea:	e0 91 fe 19 	lds	r30, 0x19FE	; 0x8019fe <_ser_handle>
    3cee:	f0 91 ff 19 	lds	r31, 0x19FF	; 0x8019ff <_ser_handle+0x1>
    3cf2:	30 97       	sbiw	r30, 0x00	; 0
    3cf4:	b9 f0       	breq	.+46     	; 0x3d24 <__vector_26+0x56>
    3cf6:	02 80       	ldd	r0, Z+2	; 0x02
    3cf8:	f3 81       	ldd	r31, Z+3	; 0x03
    3cfa:	e0 2d       	mov	r30, r0
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	98 17       	cp	r25, r24
    3d02:	b1 f0       	breq	.+44     	; 0x3d30 <__vector_26+0x62>
    3d04:	92 81       	ldd	r25, Z+2	; 0x02
    3d06:	85 81       	ldd	r24, Z+5	; 0x05
    3d08:	28 2f       	mov	r18, r24
    3d0a:	26 95       	lsr	r18
    3d0c:	29 23       	and	r18, r25
    3d0e:	a0 81       	ld	r26, Z
    3d10:	b1 81       	ldd	r27, Z+1	; 0x01
    3d12:	a2 0f       	add	r26, r18
    3d14:	b1 1d       	adc	r27, r1
    3d16:	2c 91       	ld	r18, X
    3d18:	9f 5f       	subi	r25, 0xFF	; 255
    3d1a:	89 23       	and	r24, r25
    3d1c:	82 83       	std	Z+2, r24	; 0x02
    3d1e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3d22:	0b c0       	rjmp	.+22     	; 0x3d3a <__vector_26+0x6c>
    3d24:	e1 ec       	ldi	r30, 0xC1	; 193
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	8f 7d       	andi	r24, 0xDF	; 223
    3d2c:	80 83       	st	Z, r24
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <__vector_26+0x6c>
    3d30:	e1 ec       	ldi	r30, 0xC1	; 193
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	8f 7d       	andi	r24, 0xDF	; 223
    3d38:	80 83       	st	Z, r24
    3d3a:	ff 91       	pop	r31
    3d3c:	ef 91       	pop	r30
    3d3e:	bf 91       	pop	r27
    3d40:	af 91       	pop	r26
    3d42:	9f 91       	pop	r25
    3d44:	8f 91       	pop	r24
    3d46:	2f 91       	pop	r18
    3d48:	0f 90       	pop	r0
    3d4a:	0b be       	out	0x3b, r0	; 59
    3d4c:	0f 90       	pop	r0
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	0f 90       	pop	r0
    3d52:	1f 90       	pop	r1
    3d54:	18 95       	reti

00003d56 <__vector_36>:
    3d56:	1f 92       	push	r1
    3d58:	0f 92       	push	r0
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	0f 92       	push	r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	0b b6       	in	r0, 0x3b	; 59
    3d62:	0f 92       	push	r0
    3d64:	2f 93       	push	r18
    3d66:	3f 93       	push	r19
    3d68:	4f 93       	push	r20
    3d6a:	5f 93       	push	r21
    3d6c:	6f 93       	push	r22
    3d6e:	7f 93       	push	r23
    3d70:	8f 93       	push	r24
    3d72:	9f 93       	push	r25
    3d74:	af 93       	push	r26
    3d76:	bf 93       	push	r27
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	ef 93       	push	r30
    3d7e:	ff 93       	push	r31
    3d80:	a0 91 00 1a 	lds	r26, 0x1A00	; 0x801a00 <_ser_handle+0x2>
    3d84:	b0 91 01 1a 	lds	r27, 0x1A01	; 0x801a01 <_ser_handle+0x3>
    3d88:	10 97       	sbiw	r26, 0x00	; 0
    3d8a:	11 f1       	breq	.+68     	; 0x3dd0 <__vector_36+0x7a>
    3d8c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3d90:	14 96       	adiw	r26, 0x04	; 4
    3d92:	ed 91       	ld	r30, X+
    3d94:	fc 91       	ld	r31, X
    3d96:	15 97       	sbiw	r26, 0x05	; 5
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	25 81       	ldd	r18, Z+5	; 0x05
    3d9e:	98 1b       	sub	r25, r24
    3da0:	92 23       	and	r25, r18
    3da2:	84 81       	ldd	r24, Z+4	; 0x04
    3da4:	98 17       	cp	r25, r24
    3da6:	61 f0       	breq	.+24     	; 0x3dc0 <__vector_36+0x6a>
    3da8:	83 81       	ldd	r24, Z+3	; 0x03
    3daa:	26 95       	lsr	r18
    3dac:	28 23       	and	r18, r24
    3dae:	c0 81       	ld	r28, Z
    3db0:	d1 81       	ldd	r29, Z+1	; 0x01
    3db2:	c2 0f       	add	r28, r18
    3db4:	d1 1d       	adc	r29, r1
    3db6:	68 83       	st	Y, r22
    3db8:	8f 5f       	subi	r24, 0xFF	; 255
    3dba:	95 81       	ldd	r25, Z+5	; 0x05
    3dbc:	89 23       	and	r24, r25
    3dbe:	83 83       	std	Z+3, r24	; 0x03
    3dc0:	16 96       	adiw	r26, 0x06	; 6
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	17 97       	sbiw	r26, 0x07	; 7
    3dc8:	30 97       	sbiw	r30, 0x00	; 0
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <__vector_36+0x7a>
    3dcc:	cd 01       	movw	r24, r26
    3dce:	19 95       	eicall
    3dd0:	ff 91       	pop	r31
    3dd2:	ef 91       	pop	r30
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	bf 91       	pop	r27
    3dda:	af 91       	pop	r26
    3ddc:	9f 91       	pop	r25
    3dde:	8f 91       	pop	r24
    3de0:	7f 91       	pop	r23
    3de2:	6f 91       	pop	r22
    3de4:	5f 91       	pop	r21
    3de6:	4f 91       	pop	r20
    3de8:	3f 91       	pop	r19
    3dea:	2f 91       	pop	r18
    3dec:	0f 90       	pop	r0
    3dee:	0b be       	out	0x3b, r0	; 59
    3df0:	0f 90       	pop	r0
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	0f 90       	pop	r0
    3df6:	1f 90       	pop	r1
    3df8:	18 95       	reti

00003dfa <__vector_37>:
    3dfa:	1f 92       	push	r1
    3dfc:	0f 92       	push	r0
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	0f 92       	push	r0
    3e02:	11 24       	eor	r1, r1
    3e04:	0b b6       	in	r0, 0x3b	; 59
    3e06:	0f 92       	push	r0
    3e08:	2f 93       	push	r18
    3e0a:	8f 93       	push	r24
    3e0c:	9f 93       	push	r25
    3e0e:	af 93       	push	r26
    3e10:	bf 93       	push	r27
    3e12:	ef 93       	push	r30
    3e14:	ff 93       	push	r31
    3e16:	e0 91 00 1a 	lds	r30, 0x1A00	; 0x801a00 <_ser_handle+0x2>
    3e1a:	f0 91 01 1a 	lds	r31, 0x1A01	; 0x801a01 <_ser_handle+0x3>
    3e1e:	30 97       	sbiw	r30, 0x00	; 0
    3e20:	b9 f0       	breq	.+46     	; 0x3e50 <__vector_37+0x56>
    3e22:	02 80       	ldd	r0, Z+2	; 0x02
    3e24:	f3 81       	ldd	r31, Z+3	; 0x03
    3e26:	e0 2d       	mov	r30, r0
    3e28:	93 81       	ldd	r25, Z+3	; 0x03
    3e2a:	82 81       	ldd	r24, Z+2	; 0x02
    3e2c:	98 17       	cp	r25, r24
    3e2e:	b1 f0       	breq	.+44     	; 0x3e5c <__vector_37+0x62>
    3e30:	92 81       	ldd	r25, Z+2	; 0x02
    3e32:	85 81       	ldd	r24, Z+5	; 0x05
    3e34:	28 2f       	mov	r18, r24
    3e36:	26 95       	lsr	r18
    3e38:	29 23       	and	r18, r25
    3e3a:	a0 81       	ld	r26, Z
    3e3c:	b1 81       	ldd	r27, Z+1	; 0x01
    3e3e:	a2 0f       	add	r26, r18
    3e40:	b1 1d       	adc	r27, r1
    3e42:	2c 91       	ld	r18, X
    3e44:	9f 5f       	subi	r25, 0xFF	; 255
    3e46:	89 23       	and	r24, r25
    3e48:	82 83       	std	Z+2, r24	; 0x02
    3e4a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e4e:	0b c0       	rjmp	.+22     	; 0x3e66 <__vector_37+0x6c>
    3e50:	e9 ec       	ldi	r30, 0xC9	; 201
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	80 81       	ld	r24, Z
    3e56:	8f 7d       	andi	r24, 0xDF	; 223
    3e58:	80 83       	st	Z, r24
    3e5a:	05 c0       	rjmp	.+10     	; 0x3e66 <__vector_37+0x6c>
    3e5c:	e9 ec       	ldi	r30, 0xC9	; 201
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	8f 7d       	andi	r24, 0xDF	; 223
    3e64:	80 83       	st	Z, r24
    3e66:	ff 91       	pop	r31
    3e68:	ef 91       	pop	r30
    3e6a:	bf 91       	pop	r27
    3e6c:	af 91       	pop	r26
    3e6e:	9f 91       	pop	r25
    3e70:	8f 91       	pop	r24
    3e72:	2f 91       	pop	r18
    3e74:	0f 90       	pop	r0
    3e76:	0b be       	out	0x3b, r0	; 59
    3e78:	0f 90       	pop	r0
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	0f 90       	pop	r0
    3e7e:	1f 90       	pop	r1
    3e80:	18 95       	reti

00003e82 <__vector_51>:
    3e82:	1f 92       	push	r1
    3e84:	0f 92       	push	r0
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	0f 92       	push	r0
    3e8a:	11 24       	eor	r1, r1
    3e8c:	0b b6       	in	r0, 0x3b	; 59
    3e8e:	0f 92       	push	r0
    3e90:	2f 93       	push	r18
    3e92:	3f 93       	push	r19
    3e94:	4f 93       	push	r20
    3e96:	5f 93       	push	r21
    3e98:	6f 93       	push	r22
    3e9a:	7f 93       	push	r23
    3e9c:	8f 93       	push	r24
    3e9e:	9f 93       	push	r25
    3ea0:	af 93       	push	r26
    3ea2:	bf 93       	push	r27
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	ef 93       	push	r30
    3eaa:	ff 93       	push	r31
    3eac:	a0 91 02 1a 	lds	r26, 0x1A02	; 0x801a02 <_ser_handle+0x4>
    3eb0:	b0 91 03 1a 	lds	r27, 0x1A03	; 0x801a03 <_ser_handle+0x5>
    3eb4:	10 97       	sbiw	r26, 0x00	; 0
    3eb6:	11 f1       	breq	.+68     	; 0x3efc <__vector_51+0x7a>
    3eb8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ebc:	14 96       	adiw	r26, 0x04	; 4
    3ebe:	ed 91       	ld	r30, X+
    3ec0:	fc 91       	ld	r31, X
    3ec2:	15 97       	sbiw	r26, 0x05	; 5
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	82 81       	ldd	r24, Z+2	; 0x02
    3ec8:	25 81       	ldd	r18, Z+5	; 0x05
    3eca:	98 1b       	sub	r25, r24
    3ecc:	92 23       	and	r25, r18
    3ece:	84 81       	ldd	r24, Z+4	; 0x04
    3ed0:	98 17       	cp	r25, r24
    3ed2:	61 f0       	breq	.+24     	; 0x3eec <__vector_51+0x6a>
    3ed4:	83 81       	ldd	r24, Z+3	; 0x03
    3ed6:	26 95       	lsr	r18
    3ed8:	28 23       	and	r18, r24
    3eda:	c0 81       	ld	r28, Z
    3edc:	d1 81       	ldd	r29, Z+1	; 0x01
    3ede:	c2 0f       	add	r28, r18
    3ee0:	d1 1d       	adc	r29, r1
    3ee2:	68 83       	st	Y, r22
    3ee4:	8f 5f       	subi	r24, 0xFF	; 255
    3ee6:	95 81       	ldd	r25, Z+5	; 0x05
    3ee8:	89 23       	and	r24, r25
    3eea:	83 83       	std	Z+3, r24	; 0x03
    3eec:	16 96       	adiw	r26, 0x06	; 6
    3eee:	ed 91       	ld	r30, X+
    3ef0:	fc 91       	ld	r31, X
    3ef2:	17 97       	sbiw	r26, 0x07	; 7
    3ef4:	30 97       	sbiw	r30, 0x00	; 0
    3ef6:	11 f0       	breq	.+4      	; 0x3efc <__vector_51+0x7a>
    3ef8:	cd 01       	movw	r24, r26
    3efa:	19 95       	eicall
    3efc:	ff 91       	pop	r31
    3efe:	ef 91       	pop	r30
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	bf 91       	pop	r27
    3f06:	af 91       	pop	r26
    3f08:	9f 91       	pop	r25
    3f0a:	8f 91       	pop	r24
    3f0c:	7f 91       	pop	r23
    3f0e:	6f 91       	pop	r22
    3f10:	5f 91       	pop	r21
    3f12:	4f 91       	pop	r20
    3f14:	3f 91       	pop	r19
    3f16:	2f 91       	pop	r18
    3f18:	0f 90       	pop	r0
    3f1a:	0b be       	out	0x3b, r0	; 59
    3f1c:	0f 90       	pop	r0
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	0f 90       	pop	r0
    3f22:	1f 90       	pop	r1
    3f24:	18 95       	reti

00003f26 <__vector_52>:
    3f26:	1f 92       	push	r1
    3f28:	0f 92       	push	r0
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	0f 92       	push	r0
    3f2e:	11 24       	eor	r1, r1
    3f30:	0b b6       	in	r0, 0x3b	; 59
    3f32:	0f 92       	push	r0
    3f34:	2f 93       	push	r18
    3f36:	8f 93       	push	r24
    3f38:	9f 93       	push	r25
    3f3a:	af 93       	push	r26
    3f3c:	bf 93       	push	r27
    3f3e:	ef 93       	push	r30
    3f40:	ff 93       	push	r31
    3f42:	e0 91 02 1a 	lds	r30, 0x1A02	; 0x801a02 <_ser_handle+0x4>
    3f46:	f0 91 03 1a 	lds	r31, 0x1A03	; 0x801a03 <_ser_handle+0x5>
    3f4a:	30 97       	sbiw	r30, 0x00	; 0
    3f4c:	b9 f0       	breq	.+46     	; 0x3f7c <__vector_52+0x56>
    3f4e:	02 80       	ldd	r0, Z+2	; 0x02
    3f50:	f3 81       	ldd	r31, Z+3	; 0x03
    3f52:	e0 2d       	mov	r30, r0
    3f54:	93 81       	ldd	r25, Z+3	; 0x03
    3f56:	82 81       	ldd	r24, Z+2	; 0x02
    3f58:	98 17       	cp	r25, r24
    3f5a:	b1 f0       	breq	.+44     	; 0x3f88 <__vector_52+0x62>
    3f5c:	92 81       	ldd	r25, Z+2	; 0x02
    3f5e:	85 81       	ldd	r24, Z+5	; 0x05
    3f60:	28 2f       	mov	r18, r24
    3f62:	26 95       	lsr	r18
    3f64:	29 23       	and	r18, r25
    3f66:	a0 81       	ld	r26, Z
    3f68:	b1 81       	ldd	r27, Z+1	; 0x01
    3f6a:	a2 0f       	add	r26, r18
    3f6c:	b1 1d       	adc	r27, r1
    3f6e:	2c 91       	ld	r18, X
    3f70:	9f 5f       	subi	r25, 0xFF	; 255
    3f72:	89 23       	and	r24, r25
    3f74:	82 83       	std	Z+2, r24	; 0x02
    3f76:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3f7a:	0b c0       	rjmp	.+22     	; 0x3f92 <__vector_52+0x6c>
    3f7c:	e1 ed       	ldi	r30, 0xD1	; 209
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	8f 7d       	andi	r24, 0xDF	; 223
    3f84:	80 83       	st	Z, r24
    3f86:	05 c0       	rjmp	.+10     	; 0x3f92 <__vector_52+0x6c>
    3f88:	e1 ed       	ldi	r30, 0xD1	; 209
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	8f 7d       	andi	r24, 0xDF	; 223
    3f90:	80 83       	st	Z, r24
    3f92:	ff 91       	pop	r31
    3f94:	ef 91       	pop	r30
    3f96:	bf 91       	pop	r27
    3f98:	af 91       	pop	r26
    3f9a:	9f 91       	pop	r25
    3f9c:	8f 91       	pop	r24
    3f9e:	2f 91       	pop	r18
    3fa0:	0f 90       	pop	r0
    3fa2:	0b be       	out	0x3b, r0	; 59
    3fa4:	0f 90       	pop	r0
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	0f 90       	pop	r0
    3faa:	1f 90       	pop	r1
    3fac:	18 95       	reti

00003fae <__vector_54>:
    3fae:	1f 92       	push	r1
    3fb0:	0f 92       	push	r0
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	0f 92       	push	r0
    3fb6:	11 24       	eor	r1, r1
    3fb8:	0b b6       	in	r0, 0x3b	; 59
    3fba:	0f 92       	push	r0
    3fbc:	2f 93       	push	r18
    3fbe:	3f 93       	push	r19
    3fc0:	4f 93       	push	r20
    3fc2:	5f 93       	push	r21
    3fc4:	6f 93       	push	r22
    3fc6:	7f 93       	push	r23
    3fc8:	8f 93       	push	r24
    3fca:	9f 93       	push	r25
    3fcc:	af 93       	push	r26
    3fce:	bf 93       	push	r27
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	ef 93       	push	r30
    3fd6:	ff 93       	push	r31
    3fd8:	a0 91 04 1a 	lds	r26, 0x1A04	; 0x801a04 <_ser_handle+0x6>
    3fdc:	b0 91 05 1a 	lds	r27, 0x1A05	; 0x801a05 <_ser_handle+0x7>
    3fe0:	10 97       	sbiw	r26, 0x00	; 0
    3fe2:	11 f1       	breq	.+68     	; 0x4028 <__vector_54+0x7a>
    3fe4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3fe8:	14 96       	adiw	r26, 0x04	; 4
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	15 97       	sbiw	r26, 0x05	; 5
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	25 81       	ldd	r18, Z+5	; 0x05
    3ff6:	98 1b       	sub	r25, r24
    3ff8:	92 23       	and	r25, r18
    3ffa:	84 81       	ldd	r24, Z+4	; 0x04
    3ffc:	98 17       	cp	r25, r24
    3ffe:	61 f0       	breq	.+24     	; 0x4018 <__vector_54+0x6a>
    4000:	83 81       	ldd	r24, Z+3	; 0x03
    4002:	26 95       	lsr	r18
    4004:	28 23       	and	r18, r24
    4006:	c0 81       	ld	r28, Z
    4008:	d1 81       	ldd	r29, Z+1	; 0x01
    400a:	c2 0f       	add	r28, r18
    400c:	d1 1d       	adc	r29, r1
    400e:	68 83       	st	Y, r22
    4010:	8f 5f       	subi	r24, 0xFF	; 255
    4012:	95 81       	ldd	r25, Z+5	; 0x05
    4014:	89 23       	and	r24, r25
    4016:	83 83       	std	Z+3, r24	; 0x03
    4018:	16 96       	adiw	r26, 0x06	; 6
    401a:	ed 91       	ld	r30, X+
    401c:	fc 91       	ld	r31, X
    401e:	17 97       	sbiw	r26, 0x07	; 7
    4020:	30 97       	sbiw	r30, 0x00	; 0
    4022:	11 f0       	breq	.+4      	; 0x4028 <__vector_54+0x7a>
    4024:	cd 01       	movw	r24, r26
    4026:	19 95       	eicall
    4028:	ff 91       	pop	r31
    402a:	ef 91       	pop	r30
    402c:	df 91       	pop	r29
    402e:	cf 91       	pop	r28
    4030:	bf 91       	pop	r27
    4032:	af 91       	pop	r26
    4034:	9f 91       	pop	r25
    4036:	8f 91       	pop	r24
    4038:	7f 91       	pop	r23
    403a:	6f 91       	pop	r22
    403c:	5f 91       	pop	r21
    403e:	4f 91       	pop	r20
    4040:	3f 91       	pop	r19
    4042:	2f 91       	pop	r18
    4044:	0f 90       	pop	r0
    4046:	0b be       	out	0x3b, r0	; 59
    4048:	0f 90       	pop	r0
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	0f 90       	pop	r0
    404e:	1f 90       	pop	r1
    4050:	18 95       	reti

00004052 <__vector_55>:
    4052:	1f 92       	push	r1
    4054:	0f 92       	push	r0
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	0f 92       	push	r0
    405a:	11 24       	eor	r1, r1
    405c:	0b b6       	in	r0, 0x3b	; 59
    405e:	0f 92       	push	r0
    4060:	2f 93       	push	r18
    4062:	8f 93       	push	r24
    4064:	9f 93       	push	r25
    4066:	af 93       	push	r26
    4068:	bf 93       	push	r27
    406a:	ef 93       	push	r30
    406c:	ff 93       	push	r31
    406e:	e0 91 04 1a 	lds	r30, 0x1A04	; 0x801a04 <_ser_handle+0x6>
    4072:	f0 91 05 1a 	lds	r31, 0x1A05	; 0x801a05 <_ser_handle+0x7>
    4076:	30 97       	sbiw	r30, 0x00	; 0
    4078:	b9 f0       	breq	.+46     	; 0x40a8 <__vector_55+0x56>
    407a:	02 80       	ldd	r0, Z+2	; 0x02
    407c:	f3 81       	ldd	r31, Z+3	; 0x03
    407e:	e0 2d       	mov	r30, r0
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	98 17       	cp	r25, r24
    4086:	b1 f0       	breq	.+44     	; 0x40b4 <__vector_55+0x62>
    4088:	92 81       	ldd	r25, Z+2	; 0x02
    408a:	85 81       	ldd	r24, Z+5	; 0x05
    408c:	28 2f       	mov	r18, r24
    408e:	26 95       	lsr	r18
    4090:	29 23       	and	r18, r25
    4092:	a0 81       	ld	r26, Z
    4094:	b1 81       	ldd	r27, Z+1	; 0x01
    4096:	a2 0f       	add	r26, r18
    4098:	b1 1d       	adc	r27, r1
    409a:	2c 91       	ld	r18, X
    409c:	9f 5f       	subi	r25, 0xFF	; 255
    409e:	89 23       	and	r24, r25
    40a0:	82 83       	std	Z+2, r24	; 0x02
    40a2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    40a6:	0b c0       	rjmp	.+22     	; 0x40be <__vector_55+0x6c>
    40a8:	e1 e3       	ldi	r30, 0x31	; 49
    40aa:	f1 e0       	ldi	r31, 0x01	; 1
    40ac:	80 81       	ld	r24, Z
    40ae:	8f 7d       	andi	r24, 0xDF	; 223
    40b0:	80 83       	st	Z, r24
    40b2:	05 c0       	rjmp	.+10     	; 0x40be <__vector_55+0x6c>
    40b4:	e1 e3       	ldi	r30, 0x31	; 49
    40b6:	f1 e0       	ldi	r31, 0x01	; 1
    40b8:	80 81       	ld	r24, Z
    40ba:	8f 7d       	andi	r24, 0xDF	; 223
    40bc:	80 83       	st	Z, r24
    40be:	ff 91       	pop	r31
    40c0:	ef 91       	pop	r30
    40c2:	bf 91       	pop	r27
    40c4:	af 91       	pop	r26
    40c6:	9f 91       	pop	r25
    40c8:	8f 91       	pop	r24
    40ca:	2f 91       	pop	r18
    40cc:	0f 90       	pop	r0
    40ce:	0b be       	out	0x3b, r0	; 59
    40d0:	0f 90       	pop	r0
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	0f 90       	pop	r0
    40d6:	1f 90       	pop	r1
    40d8:	18 95       	reti

000040da <usart_getchar>:
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	1f 92       	push	r1
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	be 01       	movw	r22, r28
    40e6:	6f 5f       	subi	r22, 0xFF	; 255
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_com_serial_instance>
    40ee:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_com_serial_instance+0x1>
    40f2:	7f dd       	rcall	.-1282   	; 0x3bf2 <serial_get_byte>
    40f4:	81 11       	cpse	r24, r1
    40f6:	f6 cf       	rjmp	.-20     	; 0x40e4 <usart_getchar+0xa>
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0f 90       	pop	r0
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	08 95       	ret

00004104 <usart_putchar>:
    4104:	68 2f       	mov	r22, r24
    4106:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <_com_serial_instance>
    410a:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <_com_serial_instance+0x1>
    410e:	fc dc       	rcall	.-1544   	; 0x3b08 <serial_send_byte>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	08 95       	ret

00004116 <stdioCreate>:
    4116:	8f 92       	push	r8
    4118:	9f 92       	push	r9
    411a:	af 92       	push	r10
    411c:	cf 92       	push	r12
    411e:	ef 92       	push	r14
    4120:	0f 93       	push	r16
    4122:	81 2c       	mov	r8, r1
    4124:	91 2c       	mov	r9, r1
    4126:	68 94       	set
    4128:	aa 24       	eor	r10, r10
    412a:	a7 f8       	bld	r10, 7
    412c:	68 94       	set
    412e:	cc 24       	eor	r12, r12
    4130:	c7 f8       	bld	r12, 7
    4132:	e1 2c       	mov	r14, r1
    4134:	00 e0       	ldi	r16, 0x00	; 0
    4136:	23 e0       	ldi	r18, 0x03	; 3
    4138:	40 e0       	ldi	r20, 0x00	; 0
    413a:	51 ee       	ldi	r21, 0xE1	; 225
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	4d dc       	rcall	.-1894   	; 0x39dc <serial_new_instance>
    4142:	90 93 07 1a 	sts	0x1A07, r25	; 0x801a07 <_com_serial_instance+0x1>
    4146:	80 93 06 1a 	sts	0x1A06, r24	; 0x801a06 <_com_serial_instance>
    414a:	eb e4       	ldi	r30, 0x4B	; 75
    414c:	fa e1       	ldi	r31, 0x1A	; 26
    414e:	82 e1       	ldi	r24, 0x12	; 18
    4150:	92 e0       	ldi	r25, 0x02	; 2
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	93 83       	std	Z+3, r25	; 0x03
    4158:	82 83       	std	Z+2, r24	; 0x02
    415a:	0f 91       	pop	r16
    415c:	ef 90       	pop	r14
    415e:	cf 90       	pop	r12
    4160:	af 90       	pop	r10
    4162:	9f 90       	pop	r9
    4164:	8f 90       	pop	r8
    4166:	08 95       	ret

00004168 <_initTwiInterface>:
    4168:	80 91 16 1a 	lds	r24, 0x1A16	; 0x801a16 <_twiIsInitiated>
    416c:	81 11       	cpse	r24, r1
    416e:	0c c0       	rjmp	.+24     	; 0x4188 <_initTwiInterface+0x20>
    4170:	8c e0       	ldi	r24, 0x0C	; 12
    4172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4176:	8f ef       	ldi	r24, 0xFF	; 255
    4178:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    417c:	84 e0       	ldi	r24, 0x04	; 4
    417e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	80 93 16 1a 	sts	0x1A16, r24	; 0x801a16 <_twiIsInitiated>
    4188:	08 95       	ret

0000418a <twiCreate>:
    418a:	af 92       	push	r10
    418c:	bf 92       	push	r11
    418e:	cf 92       	push	r12
    4190:	df 92       	push	r13
    4192:	ef 92       	push	r14
    4194:	ff 92       	push	r15
    4196:	0f 93       	push	r16
    4198:	1f 93       	push	r17
    419a:	cf 93       	push	r28
    419c:	df 93       	push	r29
    419e:	a8 2e       	mov	r10, r24
    41a0:	b6 2e       	mov	r11, r22
    41a2:	69 01       	movw	r12, r18
    41a4:	7a 01       	movw	r14, r20
    41a6:	84 e0       	ldi	r24, 0x04	; 4
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	cb d3       	rcall	.+1942   	; 0x4942 <malloc>
    41ac:	ec 01       	movw	r28, r24
    41ae:	89 2b       	or	r24, r25
    41b0:	61 f1       	breq	.+88     	; 0x420a <twiCreate+0x80>
    41b2:	a8 82       	st	Y, r10
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	b8 12       	cpse	r11, r24
    41b8:	12 c0       	rjmp	.+36     	; 0x41de <twiCreate+0x54>
    41ba:	c7 01       	movw	r24, r14
    41bc:	b6 01       	movw	r22, r12
    41be:	20 ea       	ldi	r18, 0xA0	; 160
    41c0:	36 e8       	ldi	r19, 0x86	; 134
    41c2:	41 e0       	ldi	r20, 0x01	; 1
    41c4:	50 e0       	ldi	r21, 0x00	; 0
    41c6:	79 d3       	rcall	.+1778   	; 0x48ba <__udivmodsi4>
    41c8:	da 01       	movw	r26, r20
    41ca:	c9 01       	movw	r24, r18
    41cc:	40 97       	sbiw	r24, 0x10	; 16
    41ce:	a1 09       	sbc	r26, r1
    41d0:	b1 09       	sbc	r27, r1
    41d2:	b6 95       	lsr	r27
    41d4:	a7 95       	ror	r26
    41d6:	97 95       	ror	r25
    41d8:	87 95       	ror	r24
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	11 c0       	rjmp	.+34     	; 0x4200 <twiCreate+0x76>
    41de:	c7 01       	movw	r24, r14
    41e0:	b6 01       	movw	r22, r12
    41e2:	20 e8       	ldi	r18, 0x80	; 128
    41e4:	3a e1       	ldi	r19, 0x1A	; 26
    41e6:	46 e0       	ldi	r20, 0x06	; 6
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	67 d3       	rcall	.+1742   	; 0x48ba <__udivmodsi4>
    41ec:	da 01       	movw	r26, r20
    41ee:	c9 01       	movw	r24, r18
    41f0:	40 97       	sbiw	r24, 0x10	; 16
    41f2:	a1 09       	sbc	r26, r1
    41f4:	b1 09       	sbc	r27, r1
    41f6:	b6 95       	lsr	r27
    41f8:	a7 95       	ror	r26
    41fa:	97 95       	ror	r25
    41fc:	87 95       	ror	r24
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	1b 83       	std	Y+3, r17	; 0x03
    4202:	0a 83       	std	Y+2, r16	; 0x02
    4204:	8c 2f       	mov	r24, r28
    4206:	9d 2f       	mov	r25, r29
    4208:	02 c0       	rjmp	.+4      	; 0x420e <twiCreate+0x84>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	ff 90       	pop	r15
    4218:	ef 90       	pop	r14
    421a:	df 90       	pop	r13
    421c:	cf 90       	pop	r12
    421e:	bf 90       	pop	r11
    4220:	af 90       	pop	r10
    4222:	08 95       	ret

00004224 <twiIsBusy>:
    4224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4228:	81 70       	andi	r24, 0x01	; 1
    422a:	08 95       	ret

0000422c <twiTransmit>:
    422c:	ff 92       	push	r15
    422e:	0f 93       	push	r16
    4230:	1f 93       	push	r17
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	00 97       	sbiw	r24, 0x00	; 0
    4238:	d1 f1       	breq	.+116    	; 0x42ae <twiTransmit+0x82>
    423a:	4a 30       	cpi	r20, 0x0A	; 10
    423c:	d0 f5       	brcc	.+116    	; 0x42b2 <twiTransmit+0x86>
    423e:	f4 2e       	mov	r15, r20
    4240:	8b 01       	movw	r16, r22
    4242:	ec 01       	movw	r28, r24
    4244:	ef df       	rcall	.-34     	; 0x4224 <twiIsBusy>
    4246:	81 11       	cpse	r24, r1
    4248:	36 c0       	rjmp	.+108    	; 0x42b6 <twiTransmit+0x8a>
    424a:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <_twiCurrentHandler>
    424e:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <_twiCurrentHandler+0x1>
    4252:	c8 17       	cp	r28, r24
    4254:	d9 07       	cpc	r29, r25
    4256:	41 f0       	breq	.+16     	; 0x4268 <twiTransmit+0x3c>
    4258:	87 df       	rcall	.-242    	; 0x4168 <_initTwiInterface>
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4260:	d0 93 0a 1a 	sts	0x1A0A, r29	; 0x801a0a <_twiCurrentHandler+0x1>
    4264:	c0 93 09 1a 	sts	0x1A09, r28	; 0x801a09 <_twiCurrentHandler>
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	8f 0d       	add	r24, r15
    426c:	80 93 0b 1a 	sts	0x1A0B, r24	; 0x801a0b <_twiMessageLen>
    4270:	88 81       	ld	r24, Y
    4272:	88 0f       	add	r24, r24
    4274:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <_twiMessageBuffer>
    4278:	ff 20       	and	r15, r15
    427a:	89 f0       	breq	.+34     	; 0x429e <twiTransmit+0x72>
    427c:	f8 01       	movw	r30, r16
    427e:	ad e0       	ldi	r26, 0x0D	; 13
    4280:	ba e1       	ldi	r27, 0x1A	; 26
    4282:	4f ef       	ldi	r20, 0xFF	; 255
    4284:	4f 0d       	add	r20, r15
    4286:	64 2f       	mov	r22, r20
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	cb 01       	movw	r24, r22
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	b8 01       	movw	r22, r16
    4290:	68 0f       	add	r22, r24
    4292:	79 1f       	adc	r23, r25
    4294:	81 91       	ld	r24, Z+
    4296:	8d 93       	st	X+, r24
    4298:	e6 17       	cp	r30, r22
    429a:	f7 07       	cpc	r31, r23
    429c:	d9 f7       	brne	.-10     	; 0x4294 <twiTransmit+0x68>
    429e:	88 ef       	ldi	r24, 0xF8	; 248
    42a0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    42a4:	85 ea       	ldi	r24, 0xA5	; 165
    42a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42aa:	84 e0       	ldi	r24, 0x04	; 4
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <twiTransmit+0x8c>
    42ae:	86 e0       	ldi	r24, 0x06	; 6
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <twiTransmit+0x8c>
    42b2:	87 e0       	ldi	r24, 0x07	; 7
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <twiTransmit+0x8c>
    42b6:	82 e0       	ldi	r24, 0x02	; 2
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	ff 90       	pop	r15
    42c2:	08 95       	ret

000042c4 <twiReceive>:
    42c4:	1f 93       	push	r17
    42c6:	cf 93       	push	r28
    42c8:	df 93       	push	r29
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	29 f1       	breq	.+74     	; 0x4318 <twiReceive+0x54>
    42ce:	6b 30       	cpi	r22, 0x0B	; 11
    42d0:	28 f5       	brcc	.+74     	; 0x431c <twiReceive+0x58>
    42d2:	16 2f       	mov	r17, r22
    42d4:	ec 01       	movw	r28, r24
    42d6:	a6 df       	rcall	.-180    	; 0x4224 <twiIsBusy>
    42d8:	81 11       	cpse	r24, r1
    42da:	22 c0       	rjmp	.+68     	; 0x4320 <twiReceive+0x5c>
    42dc:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <_twiCurrentHandler>
    42e0:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <_twiCurrentHandler+0x1>
    42e4:	c8 17       	cp	r28, r24
    42e6:	d9 07       	cpc	r29, r25
    42e8:	41 f0       	breq	.+16     	; 0x42fa <twiReceive+0x36>
    42ea:	3e df       	rcall	.-388    	; 0x4168 <_initTwiInterface>
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    42f2:	d0 93 0a 1a 	sts	0x1A0A, r29	; 0x801a0a <_twiCurrentHandler+0x1>
    42f6:	c0 93 09 1a 	sts	0x1A09, r28	; 0x801a09 <_twiCurrentHandler>
    42fa:	10 93 0b 1a 	sts	0x1A0B, r17	; 0x801a0b <_twiMessageLen>
    42fe:	88 81       	ld	r24, Y
    4300:	88 0f       	add	r24, r24
    4302:	81 60       	ori	r24, 0x01	; 1
    4304:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <_twiMessageBuffer>
    4308:	88 ef       	ldi	r24, 0xF8	; 248
    430a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    430e:	85 ea       	ldi	r24, 0xA5	; 165
    4310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4314:	85 e0       	ldi	r24, 0x05	; 5
    4316:	05 c0       	rjmp	.+10     	; 0x4322 <twiReceive+0x5e>
    4318:	86 e0       	ldi	r24, 0x06	; 6
    431a:	03 c0       	rjmp	.+6      	; 0x4322 <twiReceive+0x5e>
    431c:	87 e0       	ldi	r24, 0x07	; 7
    431e:	01 c0       	rjmp	.+2      	; 0x4322 <twiReceive+0x5e>
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	1f 91       	pop	r17
    4328:	08 95       	ret

0000432a <__vector_39>:
    432a:	1f 92       	push	r1
    432c:	0f 92       	push	r0
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	0f 92       	push	r0
    4332:	11 24       	eor	r1, r1
    4334:	0b b6       	in	r0, 0x3b	; 59
    4336:	0f 92       	push	r0
    4338:	2f 93       	push	r18
    433a:	3f 93       	push	r19
    433c:	4f 93       	push	r20
    433e:	5f 93       	push	r21
    4340:	6f 93       	push	r22
    4342:	7f 93       	push	r23
    4344:	8f 93       	push	r24
    4346:	9f 93       	push	r25
    4348:	af 93       	push	r26
    434a:	bf 93       	push	r27
    434c:	ef 93       	push	r30
    434e:	ff 93       	push	r31
    4350:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4354:	8e 2f       	mov	r24, r30
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	fc 01       	movw	r30, r24
    435a:	38 97       	sbiw	r30, 0x08	; 8
    435c:	e1 35       	cpi	r30, 0x51	; 81
    435e:	f1 05       	cpc	r31, r1
    4360:	08 f0       	brcs	.+2      	; 0x4364 <__vector_39+0x3a>
    4362:	75 c0       	rjmp	.+234    	; 0x444e <__vector_39+0x124>
    4364:	88 27       	eor	r24, r24
    4366:	e4 58       	subi	r30, 0x84	; 132
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	8f 4f       	sbci	r24, 0xFF	; 255
    436c:	c8 c2       	rjmp	.+1424   	; 0x48fe <__tablejump2__>
    436e:	10 92 08 1a 	sts	0x1A08, r1	; 0x801a08 <_index.1885>
    4372:	e0 91 08 1a 	lds	r30, 0x1A08	; 0x801a08 <_index.1885>
    4376:	80 91 0b 1a 	lds	r24, 0x1A0B	; 0x801a0b <_twiMessageLen>
    437a:	e8 17       	cp	r30, r24
    437c:	70 f4       	brcc	.+28     	; 0x439a <__vector_39+0x70>
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	8e 0f       	add	r24, r30
    4382:	80 93 08 1a 	sts	0x1A08, r24	; 0x801a08 <_index.1885>
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	e4 5f       	subi	r30, 0xF4	; 244
    438a:	f5 4e       	sbci	r31, 0xE5	; 229
    438c:	80 81       	ld	r24, Z
    438e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4392:	85 e8       	ldi	r24, 0x85	; 133
    4394:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4398:	72 c0       	rjmp	.+228    	; 0x447e <__vector_39+0x154>
    439a:	84 e9       	ldi	r24, 0x94	; 148
    439c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43a0:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <_twiCurrentHandler>
    43a4:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <_twiCurrentHandler+0x1>
    43a8:	dc 01       	movw	r26, r24
    43aa:	12 96       	adiw	r26, 0x02	; 2
    43ac:	ed 91       	ld	r30, X+
    43ae:	fc 91       	ld	r31, X
    43b0:	13 97       	sbiw	r26, 0x03	; 3
    43b2:	30 97       	sbiw	r30, 0x00	; 0
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <__vector_39+0x8e>
    43b6:	63 c0       	rjmp	.+198    	; 0x447e <__vector_39+0x154>
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	64 e0       	ldi	r22, 0x04	; 4
    43c0:	19 95       	eicall
    43c2:	5d c0       	rjmp	.+186    	; 0x447e <__vector_39+0x154>
    43c4:	e0 91 08 1a 	lds	r30, 0x1A08	; 0x801a08 <_index.1885>
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	8e 0f       	add	r24, r30
    43cc:	80 93 08 1a 	sts	0x1A08, r24	; 0x801a08 <_index.1885>
    43d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43d4:	f0 e0       	ldi	r31, 0x00	; 0
    43d6:	e4 5f       	subi	r30, 0xF4	; 244
    43d8:	f5 4e       	sbci	r31, 0xE5	; 229
    43da:	80 83       	st	Z, r24
    43dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    43e0:	80 34       	cpi	r24, 0x40	; 64
    43e2:	11 f4       	brne	.+4      	; 0x43e8 <__vector_39+0xbe>
    43e4:	10 92 08 1a 	sts	0x1A08, r1	; 0x801a08 <_index.1885>
    43e8:	20 91 08 1a 	lds	r18, 0x1A08	; 0x801a08 <_index.1885>
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	80 91 0b 1a 	lds	r24, 0x1A0B	; 0x801a0b <_twiMessageLen>
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	28 17       	cp	r18, r24
    43f8:	39 07       	cpc	r19, r25
    43fa:	24 f4       	brge	.+8      	; 0x4404 <__vector_39+0xda>
    43fc:	85 ec       	ldi	r24, 0xC5	; 197
    43fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4402:	3d c0       	rjmp	.+122    	; 0x447e <__vector_39+0x154>
    4404:	85 e8       	ldi	r24, 0x85	; 133
    4406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    440a:	39 c0       	rjmp	.+114    	; 0x447e <__vector_39+0x154>
    440c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4410:	e0 91 08 1a 	lds	r30, 0x1A08	; 0x801a08 <_index.1885>
    4414:	f0 e0       	ldi	r31, 0x00	; 0
    4416:	e4 5f       	subi	r30, 0xF4	; 244
    4418:	f5 4e       	sbci	r31, 0xE5	; 229
    441a:	80 83       	st	Z, r24
    441c:	84 e9       	ldi	r24, 0x94	; 148
    441e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4422:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <_twiCurrentHandler>
    4426:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <_twiCurrentHandler+0x1>
    442a:	dc 01       	movw	r26, r24
    442c:	12 96       	adiw	r26, 0x02	; 2
    442e:	ed 91       	ld	r30, X+
    4430:	fc 91       	ld	r31, X
    4432:	13 97       	sbiw	r26, 0x03	; 3
    4434:	30 97       	sbiw	r30, 0x00	; 0
    4436:	19 f1       	breq	.+70     	; 0x447e <__vector_39+0x154>
    4438:	20 91 0b 1a 	lds	r18, 0x1A0B	; 0x801a0b <_twiMessageLen>
    443c:	4c e0       	ldi	r20, 0x0C	; 12
    443e:	5a e1       	ldi	r21, 0x1A	; 26
    4440:	65 e0       	ldi	r22, 0x05	; 5
    4442:	19 95       	eicall
    4444:	1c c0       	rjmp	.+56     	; 0x447e <__vector_39+0x154>
    4446:	85 ea       	ldi	r24, 0xA5	; 165
    4448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    444c:	18 c0       	rjmp	.+48     	; 0x447e <__vector_39+0x154>
    444e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4452:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4456:	84 e0       	ldi	r24, 0x04	; 4
    4458:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    445c:	80 91 09 1a 	lds	r24, 0x1A09	; 0x801a09 <_twiCurrentHandler>
    4460:	90 91 0a 1a 	lds	r25, 0x1A0A	; 0x801a0a <_twiCurrentHandler+0x1>
    4464:	dc 01       	movw	r26, r24
    4466:	12 96       	adiw	r26, 0x02	; 2
    4468:	ed 91       	ld	r30, X+
    446a:	fc 91       	ld	r31, X
    446c:	13 97       	sbiw	r26, 0x03	; 3
    446e:	30 97       	sbiw	r30, 0x00	; 0
    4470:	31 f0       	breq	.+12     	; 0x447e <__vector_39+0x154>
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    447c:	19 95       	eicall
    447e:	ff 91       	pop	r31
    4480:	ef 91       	pop	r30
    4482:	bf 91       	pop	r27
    4484:	af 91       	pop	r26
    4486:	9f 91       	pop	r25
    4488:	8f 91       	pop	r24
    448a:	7f 91       	pop	r23
    448c:	6f 91       	pop	r22
    448e:	5f 91       	pop	r21
    4490:	4f 91       	pop	r20
    4492:	3f 91       	pop	r19
    4494:	2f 91       	pop	r18
    4496:	0f 90       	pop	r0
    4498:	0b be       	out	0x3b, r0	; 59
    449a:	0f 90       	pop	r0
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	0f 90       	pop	r0
    44a0:	1f 90       	pop	r1
    44a2:	18 95       	reti

000044a4 <fifo_init>:
    44a4:	fc 01       	movw	r30, r24
    44a6:	41 11       	cpse	r20, r1
    44a8:	01 c0       	rjmp	.+2      	; 0x44ac <fifo_init+0x8>
    44aa:	6c d3       	rcall	.+1752   	; 0x4b84 <abort>
    44ac:	84 2f       	mov	r24, r20
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	9c 01       	movw	r18, r24
    44b2:	21 50       	subi	r18, 0x01	; 1
    44b4:	31 09       	sbc	r19, r1
    44b6:	82 23       	and	r24, r18
    44b8:	93 23       	and	r25, r19
    44ba:	89 2b       	or	r24, r25
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <fifo_init+0x1c>
    44be:	62 d3       	rcall	.+1732   	; 0x4b84 <abort>
    44c0:	41 38       	cpi	r20, 0x81	; 129
    44c2:	08 f0       	brcs	.+2      	; 0x44c6 <fifo_init+0x22>
    44c4:	5f d3       	rcall	.+1726   	; 0x4b84 <abort>
    44c6:	12 82       	std	Z+2, r1	; 0x02
    44c8:	13 82       	std	Z+3, r1	; 0x03
    44ca:	44 83       	std	Z+4, r20	; 0x04
    44cc:	44 0f       	add	r20, r20
    44ce:	41 50       	subi	r20, 0x01	; 1
    44d0:	45 83       	std	Z+5, r20	; 0x05
    44d2:	71 83       	std	Z+1, r23	; 0x01
    44d4:	60 83       	st	Z, r22
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	08 95       	ret

000044dc <__subsf3>:
    44dc:	50 58       	subi	r21, 0x80	; 128

000044de <__addsf3>:
    44de:	bb 27       	eor	r27, r27
    44e0:	aa 27       	eor	r26, r26
    44e2:	0e d0       	rcall	.+28     	; 0x4500 <__addsf3x>
    44e4:	4d c1       	rjmp	.+666    	; 0x4780 <__fp_round>
    44e6:	3e d1       	rcall	.+636    	; 0x4764 <__fp_pscA>
    44e8:	30 f0       	brcs	.+12     	; 0x44f6 <__addsf3+0x18>
    44ea:	43 d1       	rcall	.+646    	; 0x4772 <__fp_pscB>
    44ec:	20 f0       	brcs	.+8      	; 0x44f6 <__addsf3+0x18>
    44ee:	31 f4       	brne	.+12     	; 0x44fc <__addsf3+0x1e>
    44f0:	9f 3f       	cpi	r25, 0xFF	; 255
    44f2:	11 f4       	brne	.+4      	; 0x44f8 <__addsf3+0x1a>
    44f4:	1e f4       	brtc	.+6      	; 0x44fc <__addsf3+0x1e>
    44f6:	33 c1       	rjmp	.+614    	; 0x475e <__fp_nan>
    44f8:	0e f4       	brtc	.+2      	; 0x44fc <__addsf3+0x1e>
    44fa:	e0 95       	com	r30
    44fc:	e7 fb       	bst	r30, 7
    44fe:	29 c1       	rjmp	.+594    	; 0x4752 <__fp_inf>

00004500 <__addsf3x>:
    4500:	e9 2f       	mov	r30, r25
    4502:	4f d1       	rcall	.+670    	; 0x47a2 <__fp_split3>
    4504:	80 f3       	brcs	.-32     	; 0x44e6 <__addsf3+0x8>
    4506:	ba 17       	cp	r27, r26
    4508:	62 07       	cpc	r22, r18
    450a:	73 07       	cpc	r23, r19
    450c:	84 07       	cpc	r24, r20
    450e:	95 07       	cpc	r25, r21
    4510:	18 f0       	brcs	.+6      	; 0x4518 <__addsf3x+0x18>
    4512:	71 f4       	brne	.+28     	; 0x4530 <__addsf3x+0x30>
    4514:	9e f5       	brtc	.+102    	; 0x457c <__addsf3x+0x7c>
    4516:	67 c1       	rjmp	.+718    	; 0x47e6 <__fp_zero>
    4518:	0e f4       	brtc	.+2      	; 0x451c <__addsf3x+0x1c>
    451a:	e0 95       	com	r30
    451c:	0b 2e       	mov	r0, r27
    451e:	ba 2f       	mov	r27, r26
    4520:	a0 2d       	mov	r26, r0
    4522:	0b 01       	movw	r0, r22
    4524:	b9 01       	movw	r22, r18
    4526:	90 01       	movw	r18, r0
    4528:	0c 01       	movw	r0, r24
    452a:	ca 01       	movw	r24, r20
    452c:	a0 01       	movw	r20, r0
    452e:	11 24       	eor	r1, r1
    4530:	ff 27       	eor	r31, r31
    4532:	59 1b       	sub	r21, r25
    4534:	99 f0       	breq	.+38     	; 0x455c <__addsf3x+0x5c>
    4536:	59 3f       	cpi	r21, 0xF9	; 249
    4538:	50 f4       	brcc	.+20     	; 0x454e <__addsf3x+0x4e>
    453a:	50 3e       	cpi	r21, 0xE0	; 224
    453c:	68 f1       	brcs	.+90     	; 0x4598 <__addsf3x+0x98>
    453e:	1a 16       	cp	r1, r26
    4540:	f0 40       	sbci	r31, 0x00	; 0
    4542:	a2 2f       	mov	r26, r18
    4544:	23 2f       	mov	r18, r19
    4546:	34 2f       	mov	r19, r20
    4548:	44 27       	eor	r20, r20
    454a:	58 5f       	subi	r21, 0xF8	; 248
    454c:	f3 cf       	rjmp	.-26     	; 0x4534 <__addsf3x+0x34>
    454e:	46 95       	lsr	r20
    4550:	37 95       	ror	r19
    4552:	27 95       	ror	r18
    4554:	a7 95       	ror	r26
    4556:	f0 40       	sbci	r31, 0x00	; 0
    4558:	53 95       	inc	r21
    455a:	c9 f7       	brne	.-14     	; 0x454e <__addsf3x+0x4e>
    455c:	7e f4       	brtc	.+30     	; 0x457c <__addsf3x+0x7c>
    455e:	1f 16       	cp	r1, r31
    4560:	ba 0b       	sbc	r27, r26
    4562:	62 0b       	sbc	r22, r18
    4564:	73 0b       	sbc	r23, r19
    4566:	84 0b       	sbc	r24, r20
    4568:	ba f0       	brmi	.+46     	; 0x4598 <__addsf3x+0x98>
    456a:	91 50       	subi	r25, 0x01	; 1
    456c:	a1 f0       	breq	.+40     	; 0x4596 <__addsf3x+0x96>
    456e:	ff 0f       	add	r31, r31
    4570:	bb 1f       	adc	r27, r27
    4572:	66 1f       	adc	r22, r22
    4574:	77 1f       	adc	r23, r23
    4576:	88 1f       	adc	r24, r24
    4578:	c2 f7       	brpl	.-16     	; 0x456a <__addsf3x+0x6a>
    457a:	0e c0       	rjmp	.+28     	; 0x4598 <__addsf3x+0x98>
    457c:	ba 0f       	add	r27, r26
    457e:	62 1f       	adc	r22, r18
    4580:	73 1f       	adc	r23, r19
    4582:	84 1f       	adc	r24, r20
    4584:	48 f4       	brcc	.+18     	; 0x4598 <__addsf3x+0x98>
    4586:	87 95       	ror	r24
    4588:	77 95       	ror	r23
    458a:	67 95       	ror	r22
    458c:	b7 95       	ror	r27
    458e:	f7 95       	ror	r31
    4590:	9e 3f       	cpi	r25, 0xFE	; 254
    4592:	08 f0       	brcs	.+2      	; 0x4596 <__addsf3x+0x96>
    4594:	b3 cf       	rjmp	.-154    	; 0x44fc <__addsf3+0x1e>
    4596:	93 95       	inc	r25
    4598:	88 0f       	add	r24, r24
    459a:	08 f0       	brcs	.+2      	; 0x459e <__addsf3x+0x9e>
    459c:	99 27       	eor	r25, r25
    459e:	ee 0f       	add	r30, r30
    45a0:	97 95       	ror	r25
    45a2:	87 95       	ror	r24
    45a4:	08 95       	ret

000045a6 <__divsf3>:
    45a6:	0c d0       	rcall	.+24     	; 0x45c0 <__divsf3x>
    45a8:	eb c0       	rjmp	.+470    	; 0x4780 <__fp_round>
    45aa:	e3 d0       	rcall	.+454    	; 0x4772 <__fp_pscB>
    45ac:	40 f0       	brcs	.+16     	; 0x45be <__divsf3+0x18>
    45ae:	da d0       	rcall	.+436    	; 0x4764 <__fp_pscA>
    45b0:	30 f0       	brcs	.+12     	; 0x45be <__divsf3+0x18>
    45b2:	21 f4       	brne	.+8      	; 0x45bc <__divsf3+0x16>
    45b4:	5f 3f       	cpi	r21, 0xFF	; 255
    45b6:	19 f0       	breq	.+6      	; 0x45be <__divsf3+0x18>
    45b8:	cc c0       	rjmp	.+408    	; 0x4752 <__fp_inf>
    45ba:	51 11       	cpse	r21, r1
    45bc:	15 c1       	rjmp	.+554    	; 0x47e8 <__fp_szero>
    45be:	cf c0       	rjmp	.+414    	; 0x475e <__fp_nan>

000045c0 <__divsf3x>:
    45c0:	f0 d0       	rcall	.+480    	; 0x47a2 <__fp_split3>
    45c2:	98 f3       	brcs	.-26     	; 0x45aa <__divsf3+0x4>

000045c4 <__divsf3_pse>:
    45c4:	99 23       	and	r25, r25
    45c6:	c9 f3       	breq	.-14     	; 0x45ba <__divsf3+0x14>
    45c8:	55 23       	and	r21, r21
    45ca:	b1 f3       	breq	.-20     	; 0x45b8 <__divsf3+0x12>
    45cc:	95 1b       	sub	r25, r21
    45ce:	55 0b       	sbc	r21, r21
    45d0:	bb 27       	eor	r27, r27
    45d2:	aa 27       	eor	r26, r26
    45d4:	62 17       	cp	r22, r18
    45d6:	73 07       	cpc	r23, r19
    45d8:	84 07       	cpc	r24, r20
    45da:	38 f0       	brcs	.+14     	; 0x45ea <__divsf3_pse+0x26>
    45dc:	9f 5f       	subi	r25, 0xFF	; 255
    45de:	5f 4f       	sbci	r21, 0xFF	; 255
    45e0:	22 0f       	add	r18, r18
    45e2:	33 1f       	adc	r19, r19
    45e4:	44 1f       	adc	r20, r20
    45e6:	aa 1f       	adc	r26, r26
    45e8:	a9 f3       	breq	.-22     	; 0x45d4 <__divsf3_pse+0x10>
    45ea:	33 d0       	rcall	.+102    	; 0x4652 <__divsf3_pse+0x8e>
    45ec:	0e 2e       	mov	r0, r30
    45ee:	3a f0       	brmi	.+14     	; 0x45fe <__divsf3_pse+0x3a>
    45f0:	e0 e8       	ldi	r30, 0x80	; 128
    45f2:	30 d0       	rcall	.+96     	; 0x4654 <__divsf3_pse+0x90>
    45f4:	91 50       	subi	r25, 0x01	; 1
    45f6:	50 40       	sbci	r21, 0x00	; 0
    45f8:	e6 95       	lsr	r30
    45fa:	00 1c       	adc	r0, r0
    45fc:	ca f7       	brpl	.-14     	; 0x45f0 <__divsf3_pse+0x2c>
    45fe:	29 d0       	rcall	.+82     	; 0x4652 <__divsf3_pse+0x8e>
    4600:	fe 2f       	mov	r31, r30
    4602:	27 d0       	rcall	.+78     	; 0x4652 <__divsf3_pse+0x8e>
    4604:	66 0f       	add	r22, r22
    4606:	77 1f       	adc	r23, r23
    4608:	88 1f       	adc	r24, r24
    460a:	bb 1f       	adc	r27, r27
    460c:	26 17       	cp	r18, r22
    460e:	37 07       	cpc	r19, r23
    4610:	48 07       	cpc	r20, r24
    4612:	ab 07       	cpc	r26, r27
    4614:	b0 e8       	ldi	r27, 0x80	; 128
    4616:	09 f0       	breq	.+2      	; 0x461a <__divsf3_pse+0x56>
    4618:	bb 0b       	sbc	r27, r27
    461a:	80 2d       	mov	r24, r0
    461c:	bf 01       	movw	r22, r30
    461e:	ff 27       	eor	r31, r31
    4620:	93 58       	subi	r25, 0x83	; 131
    4622:	5f 4f       	sbci	r21, 0xFF	; 255
    4624:	2a f0       	brmi	.+10     	; 0x4630 <__divsf3_pse+0x6c>
    4626:	9e 3f       	cpi	r25, 0xFE	; 254
    4628:	51 05       	cpc	r21, r1
    462a:	68 f0       	brcs	.+26     	; 0x4646 <__divsf3_pse+0x82>
    462c:	92 c0       	rjmp	.+292    	; 0x4752 <__fp_inf>
    462e:	dc c0       	rjmp	.+440    	; 0x47e8 <__fp_szero>
    4630:	5f 3f       	cpi	r21, 0xFF	; 255
    4632:	ec f3       	brlt	.-6      	; 0x462e <__divsf3_pse+0x6a>
    4634:	98 3e       	cpi	r25, 0xE8	; 232
    4636:	dc f3       	brlt	.-10     	; 0x462e <__divsf3_pse+0x6a>
    4638:	86 95       	lsr	r24
    463a:	77 95       	ror	r23
    463c:	67 95       	ror	r22
    463e:	b7 95       	ror	r27
    4640:	f7 95       	ror	r31
    4642:	9f 5f       	subi	r25, 0xFF	; 255
    4644:	c9 f7       	brne	.-14     	; 0x4638 <__divsf3_pse+0x74>
    4646:	88 0f       	add	r24, r24
    4648:	91 1d       	adc	r25, r1
    464a:	96 95       	lsr	r25
    464c:	87 95       	ror	r24
    464e:	97 f9       	bld	r25, 7
    4650:	08 95       	ret
    4652:	e1 e0       	ldi	r30, 0x01	; 1
    4654:	66 0f       	add	r22, r22
    4656:	77 1f       	adc	r23, r23
    4658:	88 1f       	adc	r24, r24
    465a:	bb 1f       	adc	r27, r27
    465c:	62 17       	cp	r22, r18
    465e:	73 07       	cpc	r23, r19
    4660:	84 07       	cpc	r24, r20
    4662:	ba 07       	cpc	r27, r26
    4664:	20 f0       	brcs	.+8      	; 0x466e <__divsf3_pse+0xaa>
    4666:	62 1b       	sub	r22, r18
    4668:	73 0b       	sbc	r23, r19
    466a:	84 0b       	sbc	r24, r20
    466c:	ba 0b       	sbc	r27, r26
    466e:	ee 1f       	adc	r30, r30
    4670:	88 f7       	brcc	.-30     	; 0x4654 <__divsf3_pse+0x90>
    4672:	e0 95       	com	r30
    4674:	08 95       	ret

00004676 <__fixsfsi>:
    4676:	04 d0       	rcall	.+8      	; 0x4680 <__fixunssfsi>
    4678:	68 94       	set
    467a:	b1 11       	cpse	r27, r1
    467c:	b5 c0       	rjmp	.+362    	; 0x47e8 <__fp_szero>
    467e:	08 95       	ret

00004680 <__fixunssfsi>:
    4680:	98 d0       	rcall	.+304    	; 0x47b2 <__fp_splitA>
    4682:	88 f0       	brcs	.+34     	; 0x46a6 <__fixunssfsi+0x26>
    4684:	9f 57       	subi	r25, 0x7F	; 127
    4686:	90 f0       	brcs	.+36     	; 0x46ac <__fixunssfsi+0x2c>
    4688:	b9 2f       	mov	r27, r25
    468a:	99 27       	eor	r25, r25
    468c:	b7 51       	subi	r27, 0x17	; 23
    468e:	a0 f0       	brcs	.+40     	; 0x46b8 <__fixunssfsi+0x38>
    4690:	d1 f0       	breq	.+52     	; 0x46c6 <__fixunssfsi+0x46>
    4692:	66 0f       	add	r22, r22
    4694:	77 1f       	adc	r23, r23
    4696:	88 1f       	adc	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	1a f0       	brmi	.+6      	; 0x46a2 <__fixunssfsi+0x22>
    469c:	ba 95       	dec	r27
    469e:	c9 f7       	brne	.-14     	; 0x4692 <__fixunssfsi+0x12>
    46a0:	12 c0       	rjmp	.+36     	; 0x46c6 <__fixunssfsi+0x46>
    46a2:	b1 30       	cpi	r27, 0x01	; 1
    46a4:	81 f0       	breq	.+32     	; 0x46c6 <__fixunssfsi+0x46>
    46a6:	9f d0       	rcall	.+318    	; 0x47e6 <__fp_zero>
    46a8:	b1 e0       	ldi	r27, 0x01	; 1
    46aa:	08 95       	ret
    46ac:	9c c0       	rjmp	.+312    	; 0x47e6 <__fp_zero>
    46ae:	67 2f       	mov	r22, r23
    46b0:	78 2f       	mov	r23, r24
    46b2:	88 27       	eor	r24, r24
    46b4:	b8 5f       	subi	r27, 0xF8	; 248
    46b6:	39 f0       	breq	.+14     	; 0x46c6 <__fixunssfsi+0x46>
    46b8:	b9 3f       	cpi	r27, 0xF9	; 249
    46ba:	cc f3       	brlt	.-14     	; 0x46ae <__fixunssfsi+0x2e>
    46bc:	86 95       	lsr	r24
    46be:	77 95       	ror	r23
    46c0:	67 95       	ror	r22
    46c2:	b3 95       	inc	r27
    46c4:	d9 f7       	brne	.-10     	; 0x46bc <__fixunssfsi+0x3c>
    46c6:	3e f4       	brtc	.+14     	; 0x46d6 <__fixunssfsi+0x56>
    46c8:	90 95       	com	r25
    46ca:	80 95       	com	r24
    46cc:	70 95       	com	r23
    46ce:	61 95       	neg	r22
    46d0:	7f 4f       	sbci	r23, 0xFF	; 255
    46d2:	8f 4f       	sbci	r24, 0xFF	; 255
    46d4:	9f 4f       	sbci	r25, 0xFF	; 255
    46d6:	08 95       	ret

000046d8 <__floatunsisf>:
    46d8:	e8 94       	clt
    46da:	09 c0       	rjmp	.+18     	; 0x46ee <__floatsisf+0x12>

000046dc <__floatsisf>:
    46dc:	97 fb       	bst	r25, 7
    46de:	3e f4       	brtc	.+14     	; 0x46ee <__floatsisf+0x12>
    46e0:	90 95       	com	r25
    46e2:	80 95       	com	r24
    46e4:	70 95       	com	r23
    46e6:	61 95       	neg	r22
    46e8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ea:	8f 4f       	sbci	r24, 0xFF	; 255
    46ec:	9f 4f       	sbci	r25, 0xFF	; 255
    46ee:	99 23       	and	r25, r25
    46f0:	a9 f0       	breq	.+42     	; 0x471c <__floatsisf+0x40>
    46f2:	f9 2f       	mov	r31, r25
    46f4:	96 e9       	ldi	r25, 0x96	; 150
    46f6:	bb 27       	eor	r27, r27
    46f8:	93 95       	inc	r25
    46fa:	f6 95       	lsr	r31
    46fc:	87 95       	ror	r24
    46fe:	77 95       	ror	r23
    4700:	67 95       	ror	r22
    4702:	b7 95       	ror	r27
    4704:	f1 11       	cpse	r31, r1
    4706:	f8 cf       	rjmp	.-16     	; 0x46f8 <__floatsisf+0x1c>
    4708:	fa f4       	brpl	.+62     	; 0x4748 <__floatsisf+0x6c>
    470a:	bb 0f       	add	r27, r27
    470c:	11 f4       	brne	.+4      	; 0x4712 <__floatsisf+0x36>
    470e:	60 ff       	sbrs	r22, 0
    4710:	1b c0       	rjmp	.+54     	; 0x4748 <__floatsisf+0x6c>
    4712:	6f 5f       	subi	r22, 0xFF	; 255
    4714:	7f 4f       	sbci	r23, 0xFF	; 255
    4716:	8f 4f       	sbci	r24, 0xFF	; 255
    4718:	9f 4f       	sbci	r25, 0xFF	; 255
    471a:	16 c0       	rjmp	.+44     	; 0x4748 <__floatsisf+0x6c>
    471c:	88 23       	and	r24, r24
    471e:	11 f0       	breq	.+4      	; 0x4724 <__floatsisf+0x48>
    4720:	96 e9       	ldi	r25, 0x96	; 150
    4722:	11 c0       	rjmp	.+34     	; 0x4746 <__floatsisf+0x6a>
    4724:	77 23       	and	r23, r23
    4726:	21 f0       	breq	.+8      	; 0x4730 <__floatsisf+0x54>
    4728:	9e e8       	ldi	r25, 0x8E	; 142
    472a:	87 2f       	mov	r24, r23
    472c:	76 2f       	mov	r23, r22
    472e:	05 c0       	rjmp	.+10     	; 0x473a <__floatsisf+0x5e>
    4730:	66 23       	and	r22, r22
    4732:	71 f0       	breq	.+28     	; 0x4750 <__floatsisf+0x74>
    4734:	96 e8       	ldi	r25, 0x86	; 134
    4736:	86 2f       	mov	r24, r22
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	60 e0       	ldi	r22, 0x00	; 0
    473c:	2a f0       	brmi	.+10     	; 0x4748 <__floatsisf+0x6c>
    473e:	9a 95       	dec	r25
    4740:	66 0f       	add	r22, r22
    4742:	77 1f       	adc	r23, r23
    4744:	88 1f       	adc	r24, r24
    4746:	da f7       	brpl	.-10     	; 0x473e <__floatsisf+0x62>
    4748:	88 0f       	add	r24, r24
    474a:	96 95       	lsr	r25
    474c:	87 95       	ror	r24
    474e:	97 f9       	bld	r25, 7
    4750:	08 95       	ret

00004752 <__fp_inf>:
    4752:	97 f9       	bld	r25, 7
    4754:	9f 67       	ori	r25, 0x7F	; 127
    4756:	80 e8       	ldi	r24, 0x80	; 128
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	60 e0       	ldi	r22, 0x00	; 0
    475c:	08 95       	ret

0000475e <__fp_nan>:
    475e:	9f ef       	ldi	r25, 0xFF	; 255
    4760:	80 ec       	ldi	r24, 0xC0	; 192
    4762:	08 95       	ret

00004764 <__fp_pscA>:
    4764:	00 24       	eor	r0, r0
    4766:	0a 94       	dec	r0
    4768:	16 16       	cp	r1, r22
    476a:	17 06       	cpc	r1, r23
    476c:	18 06       	cpc	r1, r24
    476e:	09 06       	cpc	r0, r25
    4770:	08 95       	ret

00004772 <__fp_pscB>:
    4772:	00 24       	eor	r0, r0
    4774:	0a 94       	dec	r0
    4776:	12 16       	cp	r1, r18
    4778:	13 06       	cpc	r1, r19
    477a:	14 06       	cpc	r1, r20
    477c:	05 06       	cpc	r0, r21
    477e:	08 95       	ret

00004780 <__fp_round>:
    4780:	09 2e       	mov	r0, r25
    4782:	03 94       	inc	r0
    4784:	00 0c       	add	r0, r0
    4786:	11 f4       	brne	.+4      	; 0x478c <__fp_round+0xc>
    4788:	88 23       	and	r24, r24
    478a:	52 f0       	brmi	.+20     	; 0x47a0 <__fp_round+0x20>
    478c:	bb 0f       	add	r27, r27
    478e:	40 f4       	brcc	.+16     	; 0x47a0 <__fp_round+0x20>
    4790:	bf 2b       	or	r27, r31
    4792:	11 f4       	brne	.+4      	; 0x4798 <__fp_round+0x18>
    4794:	60 ff       	sbrs	r22, 0
    4796:	04 c0       	rjmp	.+8      	; 0x47a0 <__fp_round+0x20>
    4798:	6f 5f       	subi	r22, 0xFF	; 255
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	08 95       	ret

000047a2 <__fp_split3>:
    47a2:	57 fd       	sbrc	r21, 7
    47a4:	90 58       	subi	r25, 0x80	; 128
    47a6:	44 0f       	add	r20, r20
    47a8:	55 1f       	adc	r21, r21
    47aa:	59 f0       	breq	.+22     	; 0x47c2 <__fp_splitA+0x10>
    47ac:	5f 3f       	cpi	r21, 0xFF	; 255
    47ae:	71 f0       	breq	.+28     	; 0x47cc <__fp_splitA+0x1a>
    47b0:	47 95       	ror	r20

000047b2 <__fp_splitA>:
    47b2:	88 0f       	add	r24, r24
    47b4:	97 fb       	bst	r25, 7
    47b6:	99 1f       	adc	r25, r25
    47b8:	61 f0       	breq	.+24     	; 0x47d2 <__fp_splitA+0x20>
    47ba:	9f 3f       	cpi	r25, 0xFF	; 255
    47bc:	79 f0       	breq	.+30     	; 0x47dc <__fp_splitA+0x2a>
    47be:	87 95       	ror	r24
    47c0:	08 95       	ret
    47c2:	12 16       	cp	r1, r18
    47c4:	13 06       	cpc	r1, r19
    47c6:	14 06       	cpc	r1, r20
    47c8:	55 1f       	adc	r21, r21
    47ca:	f2 cf       	rjmp	.-28     	; 0x47b0 <__fp_split3+0xe>
    47cc:	46 95       	lsr	r20
    47ce:	f1 df       	rcall	.-30     	; 0x47b2 <__fp_splitA>
    47d0:	08 c0       	rjmp	.+16     	; 0x47e2 <__fp_splitA+0x30>
    47d2:	16 16       	cp	r1, r22
    47d4:	17 06       	cpc	r1, r23
    47d6:	18 06       	cpc	r1, r24
    47d8:	99 1f       	adc	r25, r25
    47da:	f1 cf       	rjmp	.-30     	; 0x47be <__fp_splitA+0xc>
    47dc:	86 95       	lsr	r24
    47de:	71 05       	cpc	r23, r1
    47e0:	61 05       	cpc	r22, r1
    47e2:	08 94       	sec
    47e4:	08 95       	ret

000047e6 <__fp_zero>:
    47e6:	e8 94       	clt

000047e8 <__fp_szero>:
    47e8:	bb 27       	eor	r27, r27
    47ea:	66 27       	eor	r22, r22
    47ec:	77 27       	eor	r23, r23
    47ee:	cb 01       	movw	r24, r22
    47f0:	97 f9       	bld	r25, 7
    47f2:	08 95       	ret

000047f4 <__mulsf3>:
    47f4:	0b d0       	rcall	.+22     	; 0x480c <__mulsf3x>
    47f6:	c4 cf       	rjmp	.-120    	; 0x4780 <__fp_round>
    47f8:	b5 df       	rcall	.-150    	; 0x4764 <__fp_pscA>
    47fa:	28 f0       	brcs	.+10     	; 0x4806 <__mulsf3+0x12>
    47fc:	ba df       	rcall	.-140    	; 0x4772 <__fp_pscB>
    47fe:	18 f0       	brcs	.+6      	; 0x4806 <__mulsf3+0x12>
    4800:	95 23       	and	r25, r21
    4802:	09 f0       	breq	.+2      	; 0x4806 <__mulsf3+0x12>
    4804:	a6 cf       	rjmp	.-180    	; 0x4752 <__fp_inf>
    4806:	ab cf       	rjmp	.-170    	; 0x475e <__fp_nan>
    4808:	11 24       	eor	r1, r1
    480a:	ee cf       	rjmp	.-36     	; 0x47e8 <__fp_szero>

0000480c <__mulsf3x>:
    480c:	ca df       	rcall	.-108    	; 0x47a2 <__fp_split3>
    480e:	a0 f3       	brcs	.-24     	; 0x47f8 <__mulsf3+0x4>

00004810 <__mulsf3_pse>:
    4810:	95 9f       	mul	r25, r21
    4812:	d1 f3       	breq	.-12     	; 0x4808 <__mulsf3+0x14>
    4814:	95 0f       	add	r25, r21
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	55 1f       	adc	r21, r21
    481a:	62 9f       	mul	r22, r18
    481c:	f0 01       	movw	r30, r0
    481e:	72 9f       	mul	r23, r18
    4820:	bb 27       	eor	r27, r27
    4822:	f0 0d       	add	r31, r0
    4824:	b1 1d       	adc	r27, r1
    4826:	63 9f       	mul	r22, r19
    4828:	aa 27       	eor	r26, r26
    482a:	f0 0d       	add	r31, r0
    482c:	b1 1d       	adc	r27, r1
    482e:	aa 1f       	adc	r26, r26
    4830:	64 9f       	mul	r22, r20
    4832:	66 27       	eor	r22, r22
    4834:	b0 0d       	add	r27, r0
    4836:	a1 1d       	adc	r26, r1
    4838:	66 1f       	adc	r22, r22
    483a:	82 9f       	mul	r24, r18
    483c:	22 27       	eor	r18, r18
    483e:	b0 0d       	add	r27, r0
    4840:	a1 1d       	adc	r26, r1
    4842:	62 1f       	adc	r22, r18
    4844:	73 9f       	mul	r23, r19
    4846:	b0 0d       	add	r27, r0
    4848:	a1 1d       	adc	r26, r1
    484a:	62 1f       	adc	r22, r18
    484c:	83 9f       	mul	r24, r19
    484e:	a0 0d       	add	r26, r0
    4850:	61 1d       	adc	r22, r1
    4852:	22 1f       	adc	r18, r18
    4854:	74 9f       	mul	r23, r20
    4856:	33 27       	eor	r19, r19
    4858:	a0 0d       	add	r26, r0
    485a:	61 1d       	adc	r22, r1
    485c:	23 1f       	adc	r18, r19
    485e:	84 9f       	mul	r24, r20
    4860:	60 0d       	add	r22, r0
    4862:	21 1d       	adc	r18, r1
    4864:	82 2f       	mov	r24, r18
    4866:	76 2f       	mov	r23, r22
    4868:	6a 2f       	mov	r22, r26
    486a:	11 24       	eor	r1, r1
    486c:	9f 57       	subi	r25, 0x7F	; 127
    486e:	50 40       	sbci	r21, 0x00	; 0
    4870:	8a f0       	brmi	.+34     	; 0x4894 <__mulsf3_pse+0x84>
    4872:	e1 f0       	breq	.+56     	; 0x48ac <__mulsf3_pse+0x9c>
    4874:	88 23       	and	r24, r24
    4876:	4a f0       	brmi	.+18     	; 0x488a <__mulsf3_pse+0x7a>
    4878:	ee 0f       	add	r30, r30
    487a:	ff 1f       	adc	r31, r31
    487c:	bb 1f       	adc	r27, r27
    487e:	66 1f       	adc	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	88 1f       	adc	r24, r24
    4884:	91 50       	subi	r25, 0x01	; 1
    4886:	50 40       	sbci	r21, 0x00	; 0
    4888:	a9 f7       	brne	.-22     	; 0x4874 <__mulsf3_pse+0x64>
    488a:	9e 3f       	cpi	r25, 0xFE	; 254
    488c:	51 05       	cpc	r21, r1
    488e:	70 f0       	brcs	.+28     	; 0x48ac <__mulsf3_pse+0x9c>
    4890:	60 cf       	rjmp	.-320    	; 0x4752 <__fp_inf>
    4892:	aa cf       	rjmp	.-172    	; 0x47e8 <__fp_szero>
    4894:	5f 3f       	cpi	r21, 0xFF	; 255
    4896:	ec f3       	brlt	.-6      	; 0x4892 <__mulsf3_pse+0x82>
    4898:	98 3e       	cpi	r25, 0xE8	; 232
    489a:	dc f3       	brlt	.-10     	; 0x4892 <__mulsf3_pse+0x82>
    489c:	86 95       	lsr	r24
    489e:	77 95       	ror	r23
    48a0:	67 95       	ror	r22
    48a2:	b7 95       	ror	r27
    48a4:	f7 95       	ror	r31
    48a6:	e7 95       	ror	r30
    48a8:	9f 5f       	subi	r25, 0xFF	; 255
    48aa:	c1 f7       	brne	.-16     	; 0x489c <__mulsf3_pse+0x8c>
    48ac:	fe 2b       	or	r31, r30
    48ae:	88 0f       	add	r24, r24
    48b0:	91 1d       	adc	r25, r1
    48b2:	96 95       	lsr	r25
    48b4:	87 95       	ror	r24
    48b6:	97 f9       	bld	r25, 7
    48b8:	08 95       	ret

000048ba <__udivmodsi4>:
    48ba:	a1 e2       	ldi	r26, 0x21	; 33
    48bc:	1a 2e       	mov	r1, r26
    48be:	aa 1b       	sub	r26, r26
    48c0:	bb 1b       	sub	r27, r27
    48c2:	fd 01       	movw	r30, r26
    48c4:	0d c0       	rjmp	.+26     	; 0x48e0 <__udivmodsi4_ep>

000048c6 <__udivmodsi4_loop>:
    48c6:	aa 1f       	adc	r26, r26
    48c8:	bb 1f       	adc	r27, r27
    48ca:	ee 1f       	adc	r30, r30
    48cc:	ff 1f       	adc	r31, r31
    48ce:	a2 17       	cp	r26, r18
    48d0:	b3 07       	cpc	r27, r19
    48d2:	e4 07       	cpc	r30, r20
    48d4:	f5 07       	cpc	r31, r21
    48d6:	20 f0       	brcs	.+8      	; 0x48e0 <__udivmodsi4_ep>
    48d8:	a2 1b       	sub	r26, r18
    48da:	b3 0b       	sbc	r27, r19
    48dc:	e4 0b       	sbc	r30, r20
    48de:	f5 0b       	sbc	r31, r21

000048e0 <__udivmodsi4_ep>:
    48e0:	66 1f       	adc	r22, r22
    48e2:	77 1f       	adc	r23, r23
    48e4:	88 1f       	adc	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	1a 94       	dec	r1
    48ea:	69 f7       	brne	.-38     	; 0x48c6 <__udivmodsi4_loop>
    48ec:	60 95       	com	r22
    48ee:	70 95       	com	r23
    48f0:	80 95       	com	r24
    48f2:	90 95       	com	r25
    48f4:	9b 01       	movw	r18, r22
    48f6:	ac 01       	movw	r20, r24
    48f8:	bd 01       	movw	r22, r26
    48fa:	cf 01       	movw	r24, r30
    48fc:	08 95       	ret

000048fe <__tablejump2__>:
    48fe:	ee 0f       	add	r30, r30
    4900:	ff 1f       	adc	r31, r31
    4902:	88 1f       	adc	r24, r24
    4904:	8b bf       	out	0x3b, r24	; 59
    4906:	07 90       	elpm	r0, Z+
    4908:	f6 91       	elpm	r31, Z
    490a:	e0 2d       	mov	r30, r0
    490c:	19 94       	eijmp

0000490e <calloc>:
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	86 9f       	mul	r24, r22
    4918:	80 01       	movw	r16, r0
    491a:	87 9f       	mul	r24, r23
    491c:	10 0d       	add	r17, r0
    491e:	96 9f       	mul	r25, r22
    4920:	10 0d       	add	r17, r0
    4922:	11 24       	eor	r1, r1
    4924:	c8 01       	movw	r24, r16
    4926:	0d d0       	rcall	.+26     	; 0x4942 <malloc>
    4928:	ec 01       	movw	r28, r24
    492a:	00 97       	sbiw	r24, 0x00	; 0
    492c:	21 f0       	breq	.+8      	; 0x4936 <calloc+0x28>
    492e:	a8 01       	movw	r20, r16
    4930:	60 e0       	ldi	r22, 0x00	; 0
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	34 d1       	rcall	.+616    	; 0x4b9e <memset>
    4936:	ce 01       	movw	r24, r28
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	1f 91       	pop	r17
    493e:	0f 91       	pop	r16
    4940:	08 95       	ret

00004942 <malloc>:
    4942:	0f 93       	push	r16
    4944:	1f 93       	push	r17
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	82 30       	cpi	r24, 0x02	; 2
    494c:	91 05       	cpc	r25, r1
    494e:	10 f4       	brcc	.+4      	; 0x4954 <malloc+0x12>
    4950:	82 e0       	ldi	r24, 0x02	; 2
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	e0 91 49 1a 	lds	r30, 0x1A49	; 0x801a49 <__flp>
    4958:	f0 91 4a 1a 	lds	r31, 0x1A4A	; 0x801a4a <__flp+0x1>
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	a0 e0       	ldi	r26, 0x00	; 0
    4962:	b0 e0       	ldi	r27, 0x00	; 0
    4964:	30 97       	sbiw	r30, 0x00	; 0
    4966:	19 f1       	breq	.+70     	; 0x49ae <malloc+0x6c>
    4968:	40 81       	ld	r20, Z
    496a:	51 81       	ldd	r21, Z+1	; 0x01
    496c:	02 81       	ldd	r16, Z+2	; 0x02
    496e:	13 81       	ldd	r17, Z+3	; 0x03
    4970:	48 17       	cp	r20, r24
    4972:	59 07       	cpc	r21, r25
    4974:	c8 f0       	brcs	.+50     	; 0x49a8 <malloc+0x66>
    4976:	84 17       	cp	r24, r20
    4978:	95 07       	cpc	r25, r21
    497a:	69 f4       	brne	.+26     	; 0x4996 <malloc+0x54>
    497c:	10 97       	sbiw	r26, 0x00	; 0
    497e:	31 f0       	breq	.+12     	; 0x498c <malloc+0x4a>
    4980:	12 96       	adiw	r26, 0x02	; 2
    4982:	0c 93       	st	X, r16
    4984:	12 97       	sbiw	r26, 0x02	; 2
    4986:	13 96       	adiw	r26, 0x03	; 3
    4988:	1c 93       	st	X, r17
    498a:	27 c0       	rjmp	.+78     	; 0x49da <malloc+0x98>
    498c:	00 93 49 1a 	sts	0x1A49, r16	; 0x801a49 <__flp>
    4990:	10 93 4a 1a 	sts	0x1A4A, r17	; 0x801a4a <__flp+0x1>
    4994:	22 c0       	rjmp	.+68     	; 0x49da <malloc+0x98>
    4996:	21 15       	cp	r18, r1
    4998:	31 05       	cpc	r19, r1
    499a:	19 f0       	breq	.+6      	; 0x49a2 <malloc+0x60>
    499c:	42 17       	cp	r20, r18
    499e:	53 07       	cpc	r21, r19
    49a0:	18 f4       	brcc	.+6      	; 0x49a8 <malloc+0x66>
    49a2:	9a 01       	movw	r18, r20
    49a4:	bd 01       	movw	r22, r26
    49a6:	ef 01       	movw	r28, r30
    49a8:	df 01       	movw	r26, r30
    49aa:	f8 01       	movw	r30, r16
    49ac:	db cf       	rjmp	.-74     	; 0x4964 <malloc+0x22>
    49ae:	21 15       	cp	r18, r1
    49b0:	31 05       	cpc	r19, r1
    49b2:	f9 f0       	breq	.+62     	; 0x49f2 <malloc+0xb0>
    49b4:	28 1b       	sub	r18, r24
    49b6:	39 0b       	sbc	r19, r25
    49b8:	24 30       	cpi	r18, 0x04	; 4
    49ba:	31 05       	cpc	r19, r1
    49bc:	80 f4       	brcc	.+32     	; 0x49de <malloc+0x9c>
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	9b 81       	ldd	r25, Y+3	; 0x03
    49c2:	61 15       	cp	r22, r1
    49c4:	71 05       	cpc	r23, r1
    49c6:	21 f0       	breq	.+8      	; 0x49d0 <malloc+0x8e>
    49c8:	fb 01       	movw	r30, r22
    49ca:	93 83       	std	Z+3, r25	; 0x03
    49cc:	82 83       	std	Z+2, r24	; 0x02
    49ce:	04 c0       	rjmp	.+8      	; 0x49d8 <malloc+0x96>
    49d0:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <__flp+0x1>
    49d4:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <__flp>
    49d8:	fe 01       	movw	r30, r28
    49da:	32 96       	adiw	r30, 0x02	; 2
    49dc:	44 c0       	rjmp	.+136    	; 0x4a66 <malloc+0x124>
    49de:	fe 01       	movw	r30, r28
    49e0:	e2 0f       	add	r30, r18
    49e2:	f3 1f       	adc	r31, r19
    49e4:	81 93       	st	Z+, r24
    49e6:	91 93       	st	Z+, r25
    49e8:	22 50       	subi	r18, 0x02	; 2
    49ea:	31 09       	sbc	r19, r1
    49ec:	39 83       	std	Y+1, r19	; 0x01
    49ee:	28 83       	st	Y, r18
    49f0:	3a c0       	rjmp	.+116    	; 0x4a66 <malloc+0x124>
    49f2:	20 91 47 1a 	lds	r18, 0x1A47	; 0x801a47 <__brkval>
    49f6:	30 91 48 1a 	lds	r19, 0x1A48	; 0x801a48 <__brkval+0x1>
    49fa:	23 2b       	or	r18, r19
    49fc:	41 f4       	brne	.+16     	; 0x4a0e <malloc+0xcc>
    49fe:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4a02:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4a06:	30 93 48 1a 	sts	0x1A48, r19	; 0x801a48 <__brkval+0x1>
    4a0a:	20 93 47 1a 	sts	0x1A47, r18	; 0x801a47 <__brkval>
    4a0e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4a12:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4a16:	21 15       	cp	r18, r1
    4a18:	31 05       	cpc	r19, r1
    4a1a:	41 f4       	brne	.+16     	; 0x4a2c <malloc+0xea>
    4a1c:	2d b7       	in	r18, 0x3d	; 61
    4a1e:	3e b7       	in	r19, 0x3e	; 62
    4a20:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a24:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a28:	24 1b       	sub	r18, r20
    4a2a:	35 0b       	sbc	r19, r21
    4a2c:	e0 91 47 1a 	lds	r30, 0x1A47	; 0x801a47 <__brkval>
    4a30:	f0 91 48 1a 	lds	r31, 0x1A48	; 0x801a48 <__brkval+0x1>
    4a34:	e2 17       	cp	r30, r18
    4a36:	f3 07       	cpc	r31, r19
    4a38:	a0 f4       	brcc	.+40     	; 0x4a62 <malloc+0x120>
    4a3a:	2e 1b       	sub	r18, r30
    4a3c:	3f 0b       	sbc	r19, r31
    4a3e:	28 17       	cp	r18, r24
    4a40:	39 07       	cpc	r19, r25
    4a42:	78 f0       	brcs	.+30     	; 0x4a62 <malloc+0x120>
    4a44:	ac 01       	movw	r20, r24
    4a46:	4e 5f       	subi	r20, 0xFE	; 254
    4a48:	5f 4f       	sbci	r21, 0xFF	; 255
    4a4a:	24 17       	cp	r18, r20
    4a4c:	35 07       	cpc	r19, r21
    4a4e:	48 f0       	brcs	.+18     	; 0x4a62 <malloc+0x120>
    4a50:	4e 0f       	add	r20, r30
    4a52:	5f 1f       	adc	r21, r31
    4a54:	50 93 48 1a 	sts	0x1A48, r21	; 0x801a48 <__brkval+0x1>
    4a58:	40 93 47 1a 	sts	0x1A47, r20	; 0x801a47 <__brkval>
    4a5c:	81 93       	st	Z+, r24
    4a5e:	91 93       	st	Z+, r25
    4a60:	02 c0       	rjmp	.+4      	; 0x4a66 <malloc+0x124>
    4a62:	e0 e0       	ldi	r30, 0x00	; 0
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	cf 01       	movw	r24, r30
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	1f 91       	pop	r17
    4a6e:	0f 91       	pop	r16
    4a70:	08 95       	ret

00004a72 <free>:
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <free+0xa>
    4a7a:	81 c0       	rjmp	.+258    	; 0x4b7e <free+0x10c>
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	32 97       	sbiw	r30, 0x02	; 2
    4a80:	13 82       	std	Z+3, r1	; 0x03
    4a82:	12 82       	std	Z+2, r1	; 0x02
    4a84:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <__flp>
    4a88:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <__flp+0x1>
    4a8c:	10 97       	sbiw	r26, 0x00	; 0
    4a8e:	81 f4       	brne	.+32     	; 0x4ab0 <free+0x3e>
    4a90:	20 81       	ld	r18, Z
    4a92:	31 81       	ldd	r19, Z+1	; 0x01
    4a94:	82 0f       	add	r24, r18
    4a96:	93 1f       	adc	r25, r19
    4a98:	20 91 47 1a 	lds	r18, 0x1A47	; 0x801a47 <__brkval>
    4a9c:	30 91 48 1a 	lds	r19, 0x1A48	; 0x801a48 <__brkval+0x1>
    4aa0:	28 17       	cp	r18, r24
    4aa2:	39 07       	cpc	r19, r25
    4aa4:	51 f5       	brne	.+84     	; 0x4afa <free+0x88>
    4aa6:	f0 93 48 1a 	sts	0x1A48, r31	; 0x801a48 <__brkval+0x1>
    4aaa:	e0 93 47 1a 	sts	0x1A47, r30	; 0x801a47 <__brkval>
    4aae:	67 c0       	rjmp	.+206    	; 0x4b7e <free+0x10c>
    4ab0:	ed 01       	movw	r28, r26
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	ce 17       	cp	r28, r30
    4ab8:	df 07       	cpc	r29, r31
    4aba:	40 f4       	brcc	.+16     	; 0x4acc <free+0x5a>
    4abc:	4a 81       	ldd	r20, Y+2	; 0x02
    4abe:	5b 81       	ldd	r21, Y+3	; 0x03
    4ac0:	9e 01       	movw	r18, r28
    4ac2:	41 15       	cp	r20, r1
    4ac4:	51 05       	cpc	r21, r1
    4ac6:	f1 f0       	breq	.+60     	; 0x4b04 <free+0x92>
    4ac8:	ea 01       	movw	r28, r20
    4aca:	f5 cf       	rjmp	.-22     	; 0x4ab6 <free+0x44>
    4acc:	d3 83       	std	Z+3, r29	; 0x03
    4ace:	c2 83       	std	Z+2, r28	; 0x02
    4ad0:	40 81       	ld	r20, Z
    4ad2:	51 81       	ldd	r21, Z+1	; 0x01
    4ad4:	84 0f       	add	r24, r20
    4ad6:	95 1f       	adc	r25, r21
    4ad8:	c8 17       	cp	r28, r24
    4ada:	d9 07       	cpc	r29, r25
    4adc:	59 f4       	brne	.+22     	; 0x4af4 <free+0x82>
    4ade:	88 81       	ld	r24, Y
    4ae0:	99 81       	ldd	r25, Y+1	; 0x01
    4ae2:	84 0f       	add	r24, r20
    4ae4:	95 1f       	adc	r25, r21
    4ae6:	02 96       	adiw	r24, 0x02	; 2
    4ae8:	91 83       	std	Z+1, r25	; 0x01
    4aea:	80 83       	st	Z, r24
    4aec:	8a 81       	ldd	r24, Y+2	; 0x02
    4aee:	9b 81       	ldd	r25, Y+3	; 0x03
    4af0:	93 83       	std	Z+3, r25	; 0x03
    4af2:	82 83       	std	Z+2, r24	; 0x02
    4af4:	21 15       	cp	r18, r1
    4af6:	31 05       	cpc	r19, r1
    4af8:	29 f4       	brne	.+10     	; 0x4b04 <free+0x92>
    4afa:	f0 93 4a 1a 	sts	0x1A4A, r31	; 0x801a4a <__flp+0x1>
    4afe:	e0 93 49 1a 	sts	0x1A49, r30	; 0x801a49 <__flp>
    4b02:	3d c0       	rjmp	.+122    	; 0x4b7e <free+0x10c>
    4b04:	e9 01       	movw	r28, r18
    4b06:	fb 83       	std	Y+3, r31	; 0x03
    4b08:	ea 83       	std	Y+2, r30	; 0x02
    4b0a:	49 91       	ld	r20, Y+
    4b0c:	59 91       	ld	r21, Y+
    4b0e:	c4 0f       	add	r28, r20
    4b10:	d5 1f       	adc	r29, r21
    4b12:	ec 17       	cp	r30, r28
    4b14:	fd 07       	cpc	r31, r29
    4b16:	61 f4       	brne	.+24     	; 0x4b30 <free+0xbe>
    4b18:	80 81       	ld	r24, Z
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	84 0f       	add	r24, r20
    4b1e:	95 1f       	adc	r25, r21
    4b20:	02 96       	adiw	r24, 0x02	; 2
    4b22:	e9 01       	movw	r28, r18
    4b24:	99 83       	std	Y+1, r25	; 0x01
    4b26:	88 83       	st	Y, r24
    4b28:	82 81       	ldd	r24, Z+2	; 0x02
    4b2a:	93 81       	ldd	r25, Z+3	; 0x03
    4b2c:	9b 83       	std	Y+3, r25	; 0x03
    4b2e:	8a 83       	std	Y+2, r24	; 0x02
    4b30:	e0 e0       	ldi	r30, 0x00	; 0
    4b32:	f0 e0       	ldi	r31, 0x00	; 0
    4b34:	12 96       	adiw	r26, 0x02	; 2
    4b36:	8d 91       	ld	r24, X+
    4b38:	9c 91       	ld	r25, X
    4b3a:	13 97       	sbiw	r26, 0x03	; 3
    4b3c:	00 97       	sbiw	r24, 0x00	; 0
    4b3e:	19 f0       	breq	.+6      	; 0x4b46 <free+0xd4>
    4b40:	fd 01       	movw	r30, r26
    4b42:	dc 01       	movw	r26, r24
    4b44:	f7 cf       	rjmp	.-18     	; 0x4b34 <free+0xc2>
    4b46:	8d 91       	ld	r24, X+
    4b48:	9c 91       	ld	r25, X
    4b4a:	11 97       	sbiw	r26, 0x01	; 1
    4b4c:	9d 01       	movw	r18, r26
    4b4e:	2e 5f       	subi	r18, 0xFE	; 254
    4b50:	3f 4f       	sbci	r19, 0xFF	; 255
    4b52:	82 0f       	add	r24, r18
    4b54:	93 1f       	adc	r25, r19
    4b56:	20 91 47 1a 	lds	r18, 0x1A47	; 0x801a47 <__brkval>
    4b5a:	30 91 48 1a 	lds	r19, 0x1A48	; 0x801a48 <__brkval+0x1>
    4b5e:	28 17       	cp	r18, r24
    4b60:	39 07       	cpc	r19, r25
    4b62:	69 f4       	brne	.+26     	; 0x4b7e <free+0x10c>
    4b64:	30 97       	sbiw	r30, 0x00	; 0
    4b66:	29 f4       	brne	.+10     	; 0x4b72 <free+0x100>
    4b68:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <__flp+0x1>
    4b6c:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <__flp>
    4b70:	02 c0       	rjmp	.+4      	; 0x4b76 <free+0x104>
    4b72:	13 82       	std	Z+3, r1	; 0x03
    4b74:	12 82       	std	Z+2, r1	; 0x02
    4b76:	b0 93 48 1a 	sts	0x1A48, r27	; 0x801a48 <__brkval+0x1>
    4b7a:	a0 93 47 1a 	sts	0x1A47, r26	; 0x801a47 <__brkval>
    4b7e:	df 91       	pop	r29
    4b80:	cf 91       	pop	r28
    4b82:	08 95       	ret

00004b84 <abort>:
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	f8 94       	cli
    4b8a:	58 c3       	rjmp	.+1712   	; 0x523c <_exit>

00004b8c <memcpy>:
    4b8c:	fb 01       	movw	r30, r22
    4b8e:	dc 01       	movw	r26, r24
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <memcpy+0xa>
    4b92:	01 90       	ld	r0, Z+
    4b94:	0d 92       	st	X+, r0
    4b96:	41 50       	subi	r20, 0x01	; 1
    4b98:	50 40       	sbci	r21, 0x00	; 0
    4b9a:	d8 f7       	brcc	.-10     	; 0x4b92 <memcpy+0x6>
    4b9c:	08 95       	ret

00004b9e <memset>:
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	01 c0       	rjmp	.+2      	; 0x4ba4 <memset+0x6>
    4ba2:	6d 93       	st	X+, r22
    4ba4:	41 50       	subi	r20, 0x01	; 1
    4ba6:	50 40       	sbci	r21, 0x00	; 0
    4ba8:	e0 f7       	brcc	.-8      	; 0x4ba2 <memset+0x4>
    4baa:	08 95       	ret

00004bac <strcat>:
    4bac:	fb 01       	movw	r30, r22
    4bae:	dc 01       	movw	r26, r24
    4bb0:	0d 90       	ld	r0, X+
    4bb2:	00 20       	and	r0, r0
    4bb4:	e9 f7       	brne	.-6      	; 0x4bb0 <strcat+0x4>
    4bb6:	11 97       	sbiw	r26, 0x01	; 1
    4bb8:	01 90       	ld	r0, Z+
    4bba:	0d 92       	st	X+, r0
    4bbc:	00 20       	and	r0, r0
    4bbe:	e1 f7       	brne	.-8      	; 0x4bb8 <strcat+0xc>
    4bc0:	08 95       	ret

00004bc2 <strcpy>:
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	01 90       	ld	r0, Z+
    4bc8:	0d 92       	st	X+, r0
    4bca:	00 20       	and	r0, r0
    4bcc:	e1 f7       	brne	.-8      	; 0x4bc6 <strcpy+0x4>
    4bce:	08 95       	ret

00004bd0 <strncasecmp>:
    4bd0:	fb 01       	movw	r30, r22
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	41 50       	subi	r20, 0x01	; 1
    4bd6:	50 40       	sbci	r21, 0x00	; 0
    4bd8:	88 f0       	brcs	.+34     	; 0x4bfc <strncasecmp+0x2c>
    4bda:	8d 91       	ld	r24, X+
    4bdc:	81 34       	cpi	r24, 0x41	; 65
    4bde:	1c f0       	brlt	.+6      	; 0x4be6 <strncasecmp+0x16>
    4be0:	8b 35       	cpi	r24, 0x5B	; 91
    4be2:	0c f4       	brge	.+2      	; 0x4be6 <strncasecmp+0x16>
    4be4:	80 5e       	subi	r24, 0xE0	; 224
    4be6:	61 91       	ld	r22, Z+
    4be8:	61 34       	cpi	r22, 0x41	; 65
    4bea:	1c f0       	brlt	.+6      	; 0x4bf2 <strncasecmp+0x22>
    4bec:	6b 35       	cpi	r22, 0x5B	; 91
    4bee:	0c f4       	brge	.+2      	; 0x4bf2 <strncasecmp+0x22>
    4bf0:	60 5e       	subi	r22, 0xE0	; 224
    4bf2:	86 1b       	sub	r24, r22
    4bf4:	61 11       	cpse	r22, r1
    4bf6:	71 f3       	breq	.-36     	; 0x4bd4 <strncasecmp+0x4>
    4bf8:	99 0b       	sbc	r25, r25
    4bfa:	08 95       	ret
    4bfc:	88 1b       	sub	r24, r24
    4bfe:	fc cf       	rjmp	.-8      	; 0x4bf8 <strncasecmp+0x28>

00004c00 <printf>:
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
    4c04:	cd b7       	in	r28, 0x3d	; 61
    4c06:	de b7       	in	r29, 0x3e	; 62
    4c08:	ae 01       	movw	r20, r28
    4c0a:	4a 5f       	subi	r20, 0xFA	; 250
    4c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c0e:	fa 01       	movw	r30, r20
    4c10:	61 91       	ld	r22, Z+
    4c12:	71 91       	ld	r23, Z+
    4c14:	af 01       	movw	r20, r30
    4c16:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__iob+0x2>
    4c1a:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__iob+0x3>
    4c1e:	61 d0       	rcall	.+194    	; 0x4ce2 <vfprintf>
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	08 95       	ret

00004c26 <puts>:
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	e0 91 4d 1a 	lds	r30, 0x1A4D	; 0x801a4d <__iob+0x2>
    4c32:	f0 91 4e 1a 	lds	r31, 0x1A4E	; 0x801a4e <__iob+0x3>
    4c36:	23 81       	ldd	r18, Z+3	; 0x03
    4c38:	21 ff       	sbrs	r18, 1
    4c3a:	1b c0       	rjmp	.+54     	; 0x4c72 <puts+0x4c>
    4c3c:	8c 01       	movw	r16, r24
    4c3e:	d0 e0       	ldi	r29, 0x00	; 0
    4c40:	c0 e0       	ldi	r28, 0x00	; 0
    4c42:	f8 01       	movw	r30, r16
    4c44:	81 91       	ld	r24, Z+
    4c46:	8f 01       	movw	r16, r30
    4c48:	60 91 4d 1a 	lds	r22, 0x1A4D	; 0x801a4d <__iob+0x2>
    4c4c:	70 91 4e 1a 	lds	r23, 0x1A4E	; 0x801a4e <__iob+0x3>
    4c50:	db 01       	movw	r26, r22
    4c52:	18 96       	adiw	r26, 0x08	; 8
    4c54:	ed 91       	ld	r30, X+
    4c56:	fc 91       	ld	r31, X
    4c58:	19 97       	sbiw	r26, 0x09	; 9
    4c5a:	88 23       	and	r24, r24
    4c5c:	31 f0       	breq	.+12     	; 0x4c6a <puts+0x44>
    4c5e:	19 95       	eicall
    4c60:	89 2b       	or	r24, r25
    4c62:	79 f3       	breq	.-34     	; 0x4c42 <puts+0x1c>
    4c64:	df ef       	ldi	r29, 0xFF	; 255
    4c66:	cf ef       	ldi	r28, 0xFF	; 255
    4c68:	ec cf       	rjmp	.-40     	; 0x4c42 <puts+0x1c>
    4c6a:	8a e0       	ldi	r24, 0x0A	; 10
    4c6c:	19 95       	eicall
    4c6e:	89 2b       	or	r24, r25
    4c70:	19 f0       	breq	.+6      	; 0x4c78 <puts+0x52>
    4c72:	8f ef       	ldi	r24, 0xFF	; 255
    4c74:	9f ef       	ldi	r25, 0xFF	; 255
    4c76:	02 c0       	rjmp	.+4      	; 0x4c7c <puts+0x56>
    4c78:	8d 2f       	mov	r24, r29
    4c7a:	9c 2f       	mov	r25, r28
    4c7c:	df 91       	pop	r29
    4c7e:	cf 91       	pop	r28
    4c80:	1f 91       	pop	r17
    4c82:	0f 91       	pop	r16
    4c84:	08 95       	ret

00004c86 <sprintf>:
    4c86:	0f 93       	push	r16
    4c88:	1f 93       	push	r17
    4c8a:	cf 93       	push	r28
    4c8c:	df 93       	push	r29
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	2e 97       	sbiw	r28, 0x0e	; 14
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	0e 89       	ldd	r16, Y+22	; 0x16
    4ca0:	1f 89       	ldd	r17, Y+23	; 0x17
    4ca2:	86 e0       	ldi	r24, 0x06	; 6
    4ca4:	8c 83       	std	Y+4, r24	; 0x04
    4ca6:	1a 83       	std	Y+2, r17	; 0x02
    4ca8:	09 83       	std	Y+1, r16	; 0x01
    4caa:	8f ef       	ldi	r24, 0xFF	; 255
    4cac:	9f e7       	ldi	r25, 0x7F	; 127
    4cae:	9e 83       	std	Y+6, r25	; 0x06
    4cb0:	8d 83       	std	Y+5, r24	; 0x05
    4cb2:	ae 01       	movw	r20, r28
    4cb4:	46 5e       	subi	r20, 0xE6	; 230
    4cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb8:	68 8d       	ldd	r22, Y+24	; 0x18
    4cba:	79 8d       	ldd	r23, Y+25	; 0x19
    4cbc:	ce 01       	movw	r24, r28
    4cbe:	01 96       	adiw	r24, 0x01	; 1
    4cc0:	10 d0       	rcall	.+32     	; 0x4ce2 <vfprintf>
    4cc2:	ef 81       	ldd	r30, Y+7	; 0x07
    4cc4:	f8 85       	ldd	r31, Y+8	; 0x08
    4cc6:	e0 0f       	add	r30, r16
    4cc8:	f1 1f       	adc	r31, r17
    4cca:	10 82       	st	Z, r1
    4ccc:	2e 96       	adiw	r28, 0x0e	; 14
    4cce:	0f b6       	in	r0, 0x3f	; 63
    4cd0:	f8 94       	cli
    4cd2:	de bf       	out	0x3e, r29	; 62
    4cd4:	0f be       	out	0x3f, r0	; 63
    4cd6:	cd bf       	out	0x3d, r28	; 61
    4cd8:	df 91       	pop	r29
    4cda:	cf 91       	pop	r28
    4cdc:	1f 91       	pop	r17
    4cde:	0f 91       	pop	r16
    4ce0:	08 95       	ret

00004ce2 <vfprintf>:
    4ce2:	2f 92       	push	r2
    4ce4:	3f 92       	push	r3
    4ce6:	4f 92       	push	r4
    4ce8:	5f 92       	push	r5
    4cea:	6f 92       	push	r6
    4cec:	7f 92       	push	r7
    4cee:	8f 92       	push	r8
    4cf0:	9f 92       	push	r9
    4cf2:	af 92       	push	r10
    4cf4:	bf 92       	push	r11
    4cf6:	cf 92       	push	r12
    4cf8:	df 92       	push	r13
    4cfa:	ef 92       	push	r14
    4cfc:	ff 92       	push	r15
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	2b 97       	sbiw	r28, 0x0b	; 11
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	6c 01       	movw	r12, r24
    4d18:	7b 01       	movw	r14, r22
    4d1a:	8a 01       	movw	r16, r20
    4d1c:	fc 01       	movw	r30, r24
    4d1e:	17 82       	std	Z+7, r1	; 0x07
    4d20:	16 82       	std	Z+6, r1	; 0x06
    4d22:	83 81       	ldd	r24, Z+3	; 0x03
    4d24:	81 ff       	sbrs	r24, 1
    4d26:	bf c1       	rjmp	.+894    	; 0x50a6 <vfprintf+0x3c4>
    4d28:	ce 01       	movw	r24, r28
    4d2a:	01 96       	adiw	r24, 0x01	; 1
    4d2c:	3c 01       	movw	r6, r24
    4d2e:	f6 01       	movw	r30, r12
    4d30:	93 81       	ldd	r25, Z+3	; 0x03
    4d32:	f7 01       	movw	r30, r14
    4d34:	93 fd       	sbrc	r25, 3
    4d36:	85 91       	lpm	r24, Z+
    4d38:	93 ff       	sbrs	r25, 3
    4d3a:	81 91       	ld	r24, Z+
    4d3c:	7f 01       	movw	r14, r30
    4d3e:	88 23       	and	r24, r24
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <vfprintf+0x62>
    4d42:	ad c1       	rjmp	.+858    	; 0x509e <vfprintf+0x3bc>
    4d44:	85 32       	cpi	r24, 0x25	; 37
    4d46:	39 f4       	brne	.+14     	; 0x4d56 <vfprintf+0x74>
    4d48:	93 fd       	sbrc	r25, 3
    4d4a:	85 91       	lpm	r24, Z+
    4d4c:	93 ff       	sbrs	r25, 3
    4d4e:	81 91       	ld	r24, Z+
    4d50:	7f 01       	movw	r14, r30
    4d52:	85 32       	cpi	r24, 0x25	; 37
    4d54:	21 f4       	brne	.+8      	; 0x4d5e <vfprintf+0x7c>
    4d56:	b6 01       	movw	r22, r12
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	d6 d1       	rcall	.+940    	; 0x5108 <fputc>
    4d5c:	e8 cf       	rjmp	.-48     	; 0x4d2e <vfprintf+0x4c>
    4d5e:	91 2c       	mov	r9, r1
    4d60:	21 2c       	mov	r2, r1
    4d62:	31 2c       	mov	r3, r1
    4d64:	ff e1       	ldi	r31, 0x1F	; 31
    4d66:	f3 15       	cp	r31, r3
    4d68:	d8 f0       	brcs	.+54     	; 0x4da0 <vfprintf+0xbe>
    4d6a:	8b 32       	cpi	r24, 0x2B	; 43
    4d6c:	79 f0       	breq	.+30     	; 0x4d8c <vfprintf+0xaa>
    4d6e:	38 f4       	brcc	.+14     	; 0x4d7e <vfprintf+0x9c>
    4d70:	80 32       	cpi	r24, 0x20	; 32
    4d72:	79 f0       	breq	.+30     	; 0x4d92 <vfprintf+0xb0>
    4d74:	83 32       	cpi	r24, 0x23	; 35
    4d76:	a1 f4       	brne	.+40     	; 0x4da0 <vfprintf+0xbe>
    4d78:	23 2d       	mov	r18, r3
    4d7a:	20 61       	ori	r18, 0x10	; 16
    4d7c:	1d c0       	rjmp	.+58     	; 0x4db8 <vfprintf+0xd6>
    4d7e:	8d 32       	cpi	r24, 0x2D	; 45
    4d80:	61 f0       	breq	.+24     	; 0x4d9a <vfprintf+0xb8>
    4d82:	80 33       	cpi	r24, 0x30	; 48
    4d84:	69 f4       	brne	.+26     	; 0x4da0 <vfprintf+0xbe>
    4d86:	23 2d       	mov	r18, r3
    4d88:	21 60       	ori	r18, 0x01	; 1
    4d8a:	16 c0       	rjmp	.+44     	; 0x4db8 <vfprintf+0xd6>
    4d8c:	83 2d       	mov	r24, r3
    4d8e:	82 60       	ori	r24, 0x02	; 2
    4d90:	38 2e       	mov	r3, r24
    4d92:	e3 2d       	mov	r30, r3
    4d94:	e4 60       	ori	r30, 0x04	; 4
    4d96:	3e 2e       	mov	r3, r30
    4d98:	2a c0       	rjmp	.+84     	; 0x4dee <vfprintf+0x10c>
    4d9a:	f3 2d       	mov	r31, r3
    4d9c:	f8 60       	ori	r31, 0x08	; 8
    4d9e:	1d c0       	rjmp	.+58     	; 0x4dda <vfprintf+0xf8>
    4da0:	37 fc       	sbrc	r3, 7
    4da2:	2d c0       	rjmp	.+90     	; 0x4dfe <vfprintf+0x11c>
    4da4:	20 ed       	ldi	r18, 0xD0	; 208
    4da6:	28 0f       	add	r18, r24
    4da8:	2a 30       	cpi	r18, 0x0A	; 10
    4daa:	40 f0       	brcs	.+16     	; 0x4dbc <vfprintf+0xda>
    4dac:	8e 32       	cpi	r24, 0x2E	; 46
    4dae:	b9 f4       	brne	.+46     	; 0x4dde <vfprintf+0xfc>
    4db0:	36 fc       	sbrc	r3, 6
    4db2:	75 c1       	rjmp	.+746    	; 0x509e <vfprintf+0x3bc>
    4db4:	23 2d       	mov	r18, r3
    4db6:	20 64       	ori	r18, 0x40	; 64
    4db8:	32 2e       	mov	r3, r18
    4dba:	19 c0       	rjmp	.+50     	; 0x4dee <vfprintf+0x10c>
    4dbc:	36 fe       	sbrs	r3, 6
    4dbe:	06 c0       	rjmp	.+12     	; 0x4dcc <vfprintf+0xea>
    4dc0:	8a e0       	ldi	r24, 0x0A	; 10
    4dc2:	98 9e       	mul	r9, r24
    4dc4:	20 0d       	add	r18, r0
    4dc6:	11 24       	eor	r1, r1
    4dc8:	92 2e       	mov	r9, r18
    4dca:	11 c0       	rjmp	.+34     	; 0x4dee <vfprintf+0x10c>
    4dcc:	ea e0       	ldi	r30, 0x0A	; 10
    4dce:	2e 9e       	mul	r2, r30
    4dd0:	20 0d       	add	r18, r0
    4dd2:	11 24       	eor	r1, r1
    4dd4:	22 2e       	mov	r2, r18
    4dd6:	f3 2d       	mov	r31, r3
    4dd8:	f0 62       	ori	r31, 0x20	; 32
    4dda:	3f 2e       	mov	r3, r31
    4ddc:	08 c0       	rjmp	.+16     	; 0x4dee <vfprintf+0x10c>
    4dde:	8c 36       	cpi	r24, 0x6C	; 108
    4de0:	21 f4       	brne	.+8      	; 0x4dea <vfprintf+0x108>
    4de2:	83 2d       	mov	r24, r3
    4de4:	80 68       	ori	r24, 0x80	; 128
    4de6:	38 2e       	mov	r3, r24
    4de8:	02 c0       	rjmp	.+4      	; 0x4dee <vfprintf+0x10c>
    4dea:	88 36       	cpi	r24, 0x68	; 104
    4dec:	41 f4       	brne	.+16     	; 0x4dfe <vfprintf+0x11c>
    4dee:	f7 01       	movw	r30, r14
    4df0:	93 fd       	sbrc	r25, 3
    4df2:	85 91       	lpm	r24, Z+
    4df4:	93 ff       	sbrs	r25, 3
    4df6:	81 91       	ld	r24, Z+
    4df8:	7f 01       	movw	r14, r30
    4dfa:	81 11       	cpse	r24, r1
    4dfc:	b3 cf       	rjmp	.-154    	; 0x4d64 <vfprintf+0x82>
    4dfe:	98 2f       	mov	r25, r24
    4e00:	9f 7d       	andi	r25, 0xDF	; 223
    4e02:	95 54       	subi	r25, 0x45	; 69
    4e04:	93 30       	cpi	r25, 0x03	; 3
    4e06:	28 f4       	brcc	.+10     	; 0x4e12 <vfprintf+0x130>
    4e08:	0c 5f       	subi	r16, 0xFC	; 252
    4e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0c:	9f e3       	ldi	r25, 0x3F	; 63
    4e0e:	99 83       	std	Y+1, r25	; 0x01
    4e10:	0d c0       	rjmp	.+26     	; 0x4e2c <vfprintf+0x14a>
    4e12:	83 36       	cpi	r24, 0x63	; 99
    4e14:	31 f0       	breq	.+12     	; 0x4e22 <vfprintf+0x140>
    4e16:	83 37       	cpi	r24, 0x73	; 115
    4e18:	71 f0       	breq	.+28     	; 0x4e36 <vfprintf+0x154>
    4e1a:	83 35       	cpi	r24, 0x53	; 83
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <vfprintf+0x13e>
    4e1e:	55 c0       	rjmp	.+170    	; 0x4eca <vfprintf+0x1e8>
    4e20:	20 c0       	rjmp	.+64     	; 0x4e62 <vfprintf+0x180>
    4e22:	f8 01       	movw	r30, r16
    4e24:	80 81       	ld	r24, Z
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	0e 5f       	subi	r16, 0xFE	; 254
    4e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e2c:	88 24       	eor	r8, r8
    4e2e:	83 94       	inc	r8
    4e30:	91 2c       	mov	r9, r1
    4e32:	53 01       	movw	r10, r6
    4e34:	12 c0       	rjmp	.+36     	; 0x4e5a <vfprintf+0x178>
    4e36:	28 01       	movw	r4, r16
    4e38:	f2 e0       	ldi	r31, 0x02	; 2
    4e3a:	4f 0e       	add	r4, r31
    4e3c:	51 1c       	adc	r5, r1
    4e3e:	f8 01       	movw	r30, r16
    4e40:	a0 80       	ld	r10, Z
    4e42:	b1 80       	ldd	r11, Z+1	; 0x01
    4e44:	36 fe       	sbrs	r3, 6
    4e46:	03 c0       	rjmp	.+6      	; 0x4e4e <vfprintf+0x16c>
    4e48:	69 2d       	mov	r22, r9
    4e4a:	70 e0       	ldi	r23, 0x00	; 0
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x170>
    4e4e:	6f ef       	ldi	r22, 0xFF	; 255
    4e50:	7f ef       	ldi	r23, 0xFF	; 255
    4e52:	c5 01       	movw	r24, r10
    4e54:	4e d1       	rcall	.+668    	; 0x50f2 <strnlen>
    4e56:	4c 01       	movw	r8, r24
    4e58:	82 01       	movw	r16, r4
    4e5a:	f3 2d       	mov	r31, r3
    4e5c:	ff 77       	andi	r31, 0x7F	; 127
    4e5e:	3f 2e       	mov	r3, r31
    4e60:	15 c0       	rjmp	.+42     	; 0x4e8c <vfprintf+0x1aa>
    4e62:	28 01       	movw	r4, r16
    4e64:	22 e0       	ldi	r18, 0x02	; 2
    4e66:	42 0e       	add	r4, r18
    4e68:	51 1c       	adc	r5, r1
    4e6a:	f8 01       	movw	r30, r16
    4e6c:	a0 80       	ld	r10, Z
    4e6e:	b1 80       	ldd	r11, Z+1	; 0x01
    4e70:	36 fe       	sbrs	r3, 6
    4e72:	03 c0       	rjmp	.+6      	; 0x4e7a <vfprintf+0x198>
    4e74:	69 2d       	mov	r22, r9
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <vfprintf+0x19c>
    4e7a:	6f ef       	ldi	r22, 0xFF	; 255
    4e7c:	7f ef       	ldi	r23, 0xFF	; 255
    4e7e:	c5 01       	movw	r24, r10
    4e80:	2d d1       	rcall	.+602    	; 0x50dc <strnlen_P>
    4e82:	4c 01       	movw	r8, r24
    4e84:	f3 2d       	mov	r31, r3
    4e86:	f0 68       	ori	r31, 0x80	; 128
    4e88:	3f 2e       	mov	r3, r31
    4e8a:	82 01       	movw	r16, r4
    4e8c:	33 fc       	sbrc	r3, 3
    4e8e:	19 c0       	rjmp	.+50     	; 0x4ec2 <vfprintf+0x1e0>
    4e90:	82 2d       	mov	r24, r2
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	88 16       	cp	r8, r24
    4e96:	99 06       	cpc	r9, r25
    4e98:	a0 f4       	brcc	.+40     	; 0x4ec2 <vfprintf+0x1e0>
    4e9a:	b6 01       	movw	r22, r12
    4e9c:	80 e2       	ldi	r24, 0x20	; 32
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	33 d1       	rcall	.+614    	; 0x5108 <fputc>
    4ea2:	2a 94       	dec	r2
    4ea4:	f5 cf       	rjmp	.-22     	; 0x4e90 <vfprintf+0x1ae>
    4ea6:	f5 01       	movw	r30, r10
    4ea8:	37 fc       	sbrc	r3, 7
    4eaa:	85 91       	lpm	r24, Z+
    4eac:	37 fe       	sbrs	r3, 7
    4eae:	81 91       	ld	r24, Z+
    4eb0:	5f 01       	movw	r10, r30
    4eb2:	b6 01       	movw	r22, r12
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	28 d1       	rcall	.+592    	; 0x5108 <fputc>
    4eb8:	21 10       	cpse	r2, r1
    4eba:	2a 94       	dec	r2
    4ebc:	21 e0       	ldi	r18, 0x01	; 1
    4ebe:	82 1a       	sub	r8, r18
    4ec0:	91 08       	sbc	r9, r1
    4ec2:	81 14       	cp	r8, r1
    4ec4:	91 04       	cpc	r9, r1
    4ec6:	79 f7       	brne	.-34     	; 0x4ea6 <vfprintf+0x1c4>
    4ec8:	e1 c0       	rjmp	.+450    	; 0x508c <vfprintf+0x3aa>
    4eca:	84 36       	cpi	r24, 0x64	; 100
    4ecc:	11 f0       	breq	.+4      	; 0x4ed2 <vfprintf+0x1f0>
    4ece:	89 36       	cpi	r24, 0x69	; 105
    4ed0:	39 f5       	brne	.+78     	; 0x4f20 <vfprintf+0x23e>
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	37 fe       	sbrs	r3, 7
    4ed6:	07 c0       	rjmp	.+14     	; 0x4ee6 <vfprintf+0x204>
    4ed8:	60 81       	ld	r22, Z
    4eda:	71 81       	ldd	r23, Z+1	; 0x01
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	0c 5f       	subi	r16, 0xFC	; 252
    4ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ee4:	08 c0       	rjmp	.+16     	; 0x4ef6 <vfprintf+0x214>
    4ee6:	60 81       	ld	r22, Z
    4ee8:	71 81       	ldd	r23, Z+1	; 0x01
    4eea:	07 2e       	mov	r0, r23
    4eec:	00 0c       	add	r0, r0
    4eee:	88 0b       	sbc	r24, r24
    4ef0:	99 0b       	sbc	r25, r25
    4ef2:	0e 5f       	subi	r16, 0xFE	; 254
    4ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef6:	f3 2d       	mov	r31, r3
    4ef8:	ff 76       	andi	r31, 0x6F	; 111
    4efa:	3f 2e       	mov	r3, r31
    4efc:	97 ff       	sbrs	r25, 7
    4efe:	09 c0       	rjmp	.+18     	; 0x4f12 <vfprintf+0x230>
    4f00:	90 95       	com	r25
    4f02:	80 95       	com	r24
    4f04:	70 95       	com	r23
    4f06:	61 95       	neg	r22
    4f08:	7f 4f       	sbci	r23, 0xFF	; 255
    4f0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0e:	f0 68       	ori	r31, 0x80	; 128
    4f10:	3f 2e       	mov	r3, r31
    4f12:	2a e0       	ldi	r18, 0x0A	; 10
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	a3 01       	movw	r20, r6
    4f18:	33 d1       	rcall	.+614    	; 0x5180 <__ultoa_invert>
    4f1a:	88 2e       	mov	r8, r24
    4f1c:	86 18       	sub	r8, r6
    4f1e:	44 c0       	rjmp	.+136    	; 0x4fa8 <vfprintf+0x2c6>
    4f20:	85 37       	cpi	r24, 0x75	; 117
    4f22:	31 f4       	brne	.+12     	; 0x4f30 <vfprintf+0x24e>
    4f24:	23 2d       	mov	r18, r3
    4f26:	2f 7e       	andi	r18, 0xEF	; 239
    4f28:	b2 2e       	mov	r11, r18
    4f2a:	2a e0       	ldi	r18, 0x0A	; 10
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	25 c0       	rjmp	.+74     	; 0x4f7a <vfprintf+0x298>
    4f30:	93 2d       	mov	r25, r3
    4f32:	99 7f       	andi	r25, 0xF9	; 249
    4f34:	b9 2e       	mov	r11, r25
    4f36:	8f 36       	cpi	r24, 0x6F	; 111
    4f38:	c1 f0       	breq	.+48     	; 0x4f6a <vfprintf+0x288>
    4f3a:	18 f4       	brcc	.+6      	; 0x4f42 <vfprintf+0x260>
    4f3c:	88 35       	cpi	r24, 0x58	; 88
    4f3e:	79 f0       	breq	.+30     	; 0x4f5e <vfprintf+0x27c>
    4f40:	ae c0       	rjmp	.+348    	; 0x509e <vfprintf+0x3bc>
    4f42:	80 37       	cpi	r24, 0x70	; 112
    4f44:	19 f0       	breq	.+6      	; 0x4f4c <vfprintf+0x26a>
    4f46:	88 37       	cpi	r24, 0x78	; 120
    4f48:	21 f0       	breq	.+8      	; 0x4f52 <vfprintf+0x270>
    4f4a:	a9 c0       	rjmp	.+338    	; 0x509e <vfprintf+0x3bc>
    4f4c:	e9 2f       	mov	r30, r25
    4f4e:	e0 61       	ori	r30, 0x10	; 16
    4f50:	be 2e       	mov	r11, r30
    4f52:	b4 fe       	sbrs	r11, 4
    4f54:	0d c0       	rjmp	.+26     	; 0x4f70 <vfprintf+0x28e>
    4f56:	fb 2d       	mov	r31, r11
    4f58:	f4 60       	ori	r31, 0x04	; 4
    4f5a:	bf 2e       	mov	r11, r31
    4f5c:	09 c0       	rjmp	.+18     	; 0x4f70 <vfprintf+0x28e>
    4f5e:	34 fe       	sbrs	r3, 4
    4f60:	0a c0       	rjmp	.+20     	; 0x4f76 <vfprintf+0x294>
    4f62:	29 2f       	mov	r18, r25
    4f64:	26 60       	ori	r18, 0x06	; 6
    4f66:	b2 2e       	mov	r11, r18
    4f68:	06 c0       	rjmp	.+12     	; 0x4f76 <vfprintf+0x294>
    4f6a:	28 e0       	ldi	r18, 0x08	; 8
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	05 c0       	rjmp	.+10     	; 0x4f7a <vfprintf+0x298>
    4f70:	20 e1       	ldi	r18, 0x10	; 16
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	02 c0       	rjmp	.+4      	; 0x4f7a <vfprintf+0x298>
    4f76:	20 e1       	ldi	r18, 0x10	; 16
    4f78:	32 e0       	ldi	r19, 0x02	; 2
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	b7 fe       	sbrs	r11, 7
    4f7e:	07 c0       	rjmp	.+14     	; 0x4f8e <vfprintf+0x2ac>
    4f80:	60 81       	ld	r22, Z
    4f82:	71 81       	ldd	r23, Z+1	; 0x01
    4f84:	82 81       	ldd	r24, Z+2	; 0x02
    4f86:	93 81       	ldd	r25, Z+3	; 0x03
    4f88:	0c 5f       	subi	r16, 0xFC	; 252
    4f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8c:	06 c0       	rjmp	.+12     	; 0x4f9a <vfprintf+0x2b8>
    4f8e:	60 81       	ld	r22, Z
    4f90:	71 81       	ldd	r23, Z+1	; 0x01
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	0e 5f       	subi	r16, 0xFE	; 254
    4f98:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9a:	a3 01       	movw	r20, r6
    4f9c:	f1 d0       	rcall	.+482    	; 0x5180 <__ultoa_invert>
    4f9e:	88 2e       	mov	r8, r24
    4fa0:	86 18       	sub	r8, r6
    4fa2:	fb 2d       	mov	r31, r11
    4fa4:	ff 77       	andi	r31, 0x7F	; 127
    4fa6:	3f 2e       	mov	r3, r31
    4fa8:	36 fe       	sbrs	r3, 6
    4faa:	0d c0       	rjmp	.+26     	; 0x4fc6 <vfprintf+0x2e4>
    4fac:	23 2d       	mov	r18, r3
    4fae:	2e 7f       	andi	r18, 0xFE	; 254
    4fb0:	a2 2e       	mov	r10, r18
    4fb2:	89 14       	cp	r8, r9
    4fb4:	58 f4       	brcc	.+22     	; 0x4fcc <vfprintf+0x2ea>
    4fb6:	34 fe       	sbrs	r3, 4
    4fb8:	0b c0       	rjmp	.+22     	; 0x4fd0 <vfprintf+0x2ee>
    4fba:	32 fc       	sbrc	r3, 2
    4fbc:	09 c0       	rjmp	.+18     	; 0x4fd0 <vfprintf+0x2ee>
    4fbe:	83 2d       	mov	r24, r3
    4fc0:	8e 7e       	andi	r24, 0xEE	; 238
    4fc2:	a8 2e       	mov	r10, r24
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <vfprintf+0x2ee>
    4fc6:	b8 2c       	mov	r11, r8
    4fc8:	a3 2c       	mov	r10, r3
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <vfprintf+0x2f0>
    4fcc:	b8 2c       	mov	r11, r8
    4fce:	01 c0       	rjmp	.+2      	; 0x4fd2 <vfprintf+0x2f0>
    4fd0:	b9 2c       	mov	r11, r9
    4fd2:	a4 fe       	sbrs	r10, 4
    4fd4:	0f c0       	rjmp	.+30     	; 0x4ff4 <vfprintf+0x312>
    4fd6:	fe 01       	movw	r30, r28
    4fd8:	e8 0d       	add	r30, r8
    4fda:	f1 1d       	adc	r31, r1
    4fdc:	80 81       	ld	r24, Z
    4fde:	80 33       	cpi	r24, 0x30	; 48
    4fe0:	21 f4       	brne	.+8      	; 0x4fea <vfprintf+0x308>
    4fe2:	9a 2d       	mov	r25, r10
    4fe4:	99 7e       	andi	r25, 0xE9	; 233
    4fe6:	a9 2e       	mov	r10, r25
    4fe8:	09 c0       	rjmp	.+18     	; 0x4ffc <vfprintf+0x31a>
    4fea:	a2 fe       	sbrs	r10, 2
    4fec:	06 c0       	rjmp	.+12     	; 0x4ffa <vfprintf+0x318>
    4fee:	b3 94       	inc	r11
    4ff0:	b3 94       	inc	r11
    4ff2:	04 c0       	rjmp	.+8      	; 0x4ffc <vfprintf+0x31a>
    4ff4:	8a 2d       	mov	r24, r10
    4ff6:	86 78       	andi	r24, 0x86	; 134
    4ff8:	09 f0       	breq	.+2      	; 0x4ffc <vfprintf+0x31a>
    4ffa:	b3 94       	inc	r11
    4ffc:	a3 fc       	sbrc	r10, 3
    4ffe:	10 c0       	rjmp	.+32     	; 0x5020 <vfprintf+0x33e>
    5000:	a0 fe       	sbrs	r10, 0
    5002:	06 c0       	rjmp	.+12     	; 0x5010 <vfprintf+0x32e>
    5004:	b2 14       	cp	r11, r2
    5006:	80 f4       	brcc	.+32     	; 0x5028 <vfprintf+0x346>
    5008:	28 0c       	add	r2, r8
    500a:	92 2c       	mov	r9, r2
    500c:	9b 18       	sub	r9, r11
    500e:	0d c0       	rjmp	.+26     	; 0x502a <vfprintf+0x348>
    5010:	b2 14       	cp	r11, r2
    5012:	58 f4       	brcc	.+22     	; 0x502a <vfprintf+0x348>
    5014:	b6 01       	movw	r22, r12
    5016:	80 e2       	ldi	r24, 0x20	; 32
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	76 d0       	rcall	.+236    	; 0x5108 <fputc>
    501c:	b3 94       	inc	r11
    501e:	f8 cf       	rjmp	.-16     	; 0x5010 <vfprintf+0x32e>
    5020:	b2 14       	cp	r11, r2
    5022:	18 f4       	brcc	.+6      	; 0x502a <vfprintf+0x348>
    5024:	2b 18       	sub	r2, r11
    5026:	02 c0       	rjmp	.+4      	; 0x502c <vfprintf+0x34a>
    5028:	98 2c       	mov	r9, r8
    502a:	21 2c       	mov	r2, r1
    502c:	a4 fe       	sbrs	r10, 4
    502e:	0f c0       	rjmp	.+30     	; 0x504e <vfprintf+0x36c>
    5030:	b6 01       	movw	r22, r12
    5032:	80 e3       	ldi	r24, 0x30	; 48
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	68 d0       	rcall	.+208    	; 0x5108 <fputc>
    5038:	a2 fe       	sbrs	r10, 2
    503a:	16 c0       	rjmp	.+44     	; 0x5068 <vfprintf+0x386>
    503c:	a1 fc       	sbrc	r10, 1
    503e:	03 c0       	rjmp	.+6      	; 0x5046 <vfprintf+0x364>
    5040:	88 e7       	ldi	r24, 0x78	; 120
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	02 c0       	rjmp	.+4      	; 0x504a <vfprintf+0x368>
    5046:	88 e5       	ldi	r24, 0x58	; 88
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	b6 01       	movw	r22, r12
    504c:	0c c0       	rjmp	.+24     	; 0x5066 <vfprintf+0x384>
    504e:	8a 2d       	mov	r24, r10
    5050:	86 78       	andi	r24, 0x86	; 134
    5052:	51 f0       	breq	.+20     	; 0x5068 <vfprintf+0x386>
    5054:	a1 fe       	sbrs	r10, 1
    5056:	02 c0       	rjmp	.+4      	; 0x505c <vfprintf+0x37a>
    5058:	8b e2       	ldi	r24, 0x2B	; 43
    505a:	01 c0       	rjmp	.+2      	; 0x505e <vfprintf+0x37c>
    505c:	80 e2       	ldi	r24, 0x20	; 32
    505e:	a7 fc       	sbrc	r10, 7
    5060:	8d e2       	ldi	r24, 0x2D	; 45
    5062:	b6 01       	movw	r22, r12
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	50 d0       	rcall	.+160    	; 0x5108 <fputc>
    5068:	89 14       	cp	r8, r9
    506a:	30 f4       	brcc	.+12     	; 0x5078 <vfprintf+0x396>
    506c:	b6 01       	movw	r22, r12
    506e:	80 e3       	ldi	r24, 0x30	; 48
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	4a d0       	rcall	.+148    	; 0x5108 <fputc>
    5074:	9a 94       	dec	r9
    5076:	f8 cf       	rjmp	.-16     	; 0x5068 <vfprintf+0x386>
    5078:	8a 94       	dec	r8
    507a:	f3 01       	movw	r30, r6
    507c:	e8 0d       	add	r30, r8
    507e:	f1 1d       	adc	r31, r1
    5080:	80 81       	ld	r24, Z
    5082:	b6 01       	movw	r22, r12
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	40 d0       	rcall	.+128    	; 0x5108 <fputc>
    5088:	81 10       	cpse	r8, r1
    508a:	f6 cf       	rjmp	.-20     	; 0x5078 <vfprintf+0x396>
    508c:	22 20       	and	r2, r2
    508e:	09 f4       	brne	.+2      	; 0x5092 <vfprintf+0x3b0>
    5090:	4e ce       	rjmp	.-868    	; 0x4d2e <vfprintf+0x4c>
    5092:	b6 01       	movw	r22, r12
    5094:	80 e2       	ldi	r24, 0x20	; 32
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	37 d0       	rcall	.+110    	; 0x5108 <fputc>
    509a:	2a 94       	dec	r2
    509c:	f7 cf       	rjmp	.-18     	; 0x508c <vfprintf+0x3aa>
    509e:	f6 01       	movw	r30, r12
    50a0:	86 81       	ldd	r24, Z+6	; 0x06
    50a2:	97 81       	ldd	r25, Z+7	; 0x07
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <vfprintf+0x3c8>
    50a6:	8f ef       	ldi	r24, 0xFF	; 255
    50a8:	9f ef       	ldi	r25, 0xFF	; 255
    50aa:	2b 96       	adiw	r28, 0x0b	; 11
    50ac:	0f b6       	in	r0, 0x3f	; 63
    50ae:	f8 94       	cli
    50b0:	de bf       	out	0x3e, r29	; 62
    50b2:	0f be       	out	0x3f, r0	; 63
    50b4:	cd bf       	out	0x3d, r28	; 61
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	df 90       	pop	r13
    50c4:	cf 90       	pop	r12
    50c6:	bf 90       	pop	r11
    50c8:	af 90       	pop	r10
    50ca:	9f 90       	pop	r9
    50cc:	8f 90       	pop	r8
    50ce:	7f 90       	pop	r7
    50d0:	6f 90       	pop	r6
    50d2:	5f 90       	pop	r5
    50d4:	4f 90       	pop	r4
    50d6:	3f 90       	pop	r3
    50d8:	2f 90       	pop	r2
    50da:	08 95       	ret

000050dc <strnlen_P>:
    50dc:	fc 01       	movw	r30, r24
    50de:	05 90       	lpm	r0, Z+
    50e0:	61 50       	subi	r22, 0x01	; 1
    50e2:	70 40       	sbci	r23, 0x00	; 0
    50e4:	01 10       	cpse	r0, r1
    50e6:	d8 f7       	brcc	.-10     	; 0x50de <strnlen_P+0x2>
    50e8:	80 95       	com	r24
    50ea:	90 95       	com	r25
    50ec:	8e 0f       	add	r24, r30
    50ee:	9f 1f       	adc	r25, r31
    50f0:	08 95       	ret

000050f2 <strnlen>:
    50f2:	fc 01       	movw	r30, r24
    50f4:	61 50       	subi	r22, 0x01	; 1
    50f6:	70 40       	sbci	r23, 0x00	; 0
    50f8:	01 90       	ld	r0, Z+
    50fa:	01 10       	cpse	r0, r1
    50fc:	d8 f7       	brcc	.-10     	; 0x50f4 <strnlen+0x2>
    50fe:	80 95       	com	r24
    5100:	90 95       	com	r25
    5102:	8e 0f       	add	r24, r30
    5104:	9f 1f       	adc	r25, r31
    5106:	08 95       	ret

00005108 <fputc>:
    5108:	0f 93       	push	r16
    510a:	1f 93       	push	r17
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	fb 01       	movw	r30, r22
    5112:	23 81       	ldd	r18, Z+3	; 0x03
    5114:	21 fd       	sbrc	r18, 1
    5116:	03 c0       	rjmp	.+6      	; 0x511e <fputc+0x16>
    5118:	8f ef       	ldi	r24, 0xFF	; 255
    511a:	9f ef       	ldi	r25, 0xFF	; 255
    511c:	2c c0       	rjmp	.+88     	; 0x5176 <fputc+0x6e>
    511e:	22 ff       	sbrs	r18, 2
    5120:	16 c0       	rjmp	.+44     	; 0x514e <fputc+0x46>
    5122:	46 81       	ldd	r20, Z+6	; 0x06
    5124:	57 81       	ldd	r21, Z+7	; 0x07
    5126:	24 81       	ldd	r18, Z+4	; 0x04
    5128:	35 81       	ldd	r19, Z+5	; 0x05
    512a:	42 17       	cp	r20, r18
    512c:	53 07       	cpc	r21, r19
    512e:	44 f4       	brge	.+16     	; 0x5140 <fputc+0x38>
    5130:	a0 81       	ld	r26, Z
    5132:	b1 81       	ldd	r27, Z+1	; 0x01
    5134:	9d 01       	movw	r18, r26
    5136:	2f 5f       	subi	r18, 0xFF	; 255
    5138:	3f 4f       	sbci	r19, 0xFF	; 255
    513a:	31 83       	std	Z+1, r19	; 0x01
    513c:	20 83       	st	Z, r18
    513e:	8c 93       	st	X, r24
    5140:	26 81       	ldd	r18, Z+6	; 0x06
    5142:	37 81       	ldd	r19, Z+7	; 0x07
    5144:	2f 5f       	subi	r18, 0xFF	; 255
    5146:	3f 4f       	sbci	r19, 0xFF	; 255
    5148:	37 83       	std	Z+7, r19	; 0x07
    514a:	26 83       	std	Z+6, r18	; 0x06
    514c:	14 c0       	rjmp	.+40     	; 0x5176 <fputc+0x6e>
    514e:	8b 01       	movw	r16, r22
    5150:	ec 01       	movw	r28, r24
    5152:	fb 01       	movw	r30, r22
    5154:	00 84       	ldd	r0, Z+8	; 0x08
    5156:	f1 85       	ldd	r31, Z+9	; 0x09
    5158:	e0 2d       	mov	r30, r0
    515a:	19 95       	eicall
    515c:	89 2b       	or	r24, r25
    515e:	e1 f6       	brne	.-72     	; 0x5118 <fputc+0x10>
    5160:	d8 01       	movw	r26, r16
    5162:	16 96       	adiw	r26, 0x06	; 6
    5164:	8d 91       	ld	r24, X+
    5166:	9c 91       	ld	r25, X
    5168:	17 97       	sbiw	r26, 0x07	; 7
    516a:	01 96       	adiw	r24, 0x01	; 1
    516c:	17 96       	adiw	r26, 0x07	; 7
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
    5172:	16 97       	sbiw	r26, 0x06	; 6
    5174:	ce 01       	movw	r24, r28
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	08 95       	ret

00005180 <__ultoa_invert>:
    5180:	fa 01       	movw	r30, r20
    5182:	aa 27       	eor	r26, r26
    5184:	28 30       	cpi	r18, 0x08	; 8
    5186:	51 f1       	breq	.+84     	; 0x51dc <__ultoa_invert+0x5c>
    5188:	20 31       	cpi	r18, 0x10	; 16
    518a:	81 f1       	breq	.+96     	; 0x51ec <__ultoa_invert+0x6c>
    518c:	e8 94       	clt
    518e:	6f 93       	push	r22
    5190:	6e 7f       	andi	r22, 0xFE	; 254
    5192:	6e 5f       	subi	r22, 0xFE	; 254
    5194:	7f 4f       	sbci	r23, 0xFF	; 255
    5196:	8f 4f       	sbci	r24, 0xFF	; 255
    5198:	9f 4f       	sbci	r25, 0xFF	; 255
    519a:	af 4f       	sbci	r26, 0xFF	; 255
    519c:	b1 e0       	ldi	r27, 0x01	; 1
    519e:	3e d0       	rcall	.+124    	; 0x521c <__ultoa_invert+0x9c>
    51a0:	b4 e0       	ldi	r27, 0x04	; 4
    51a2:	3c d0       	rcall	.+120    	; 0x521c <__ultoa_invert+0x9c>
    51a4:	67 0f       	add	r22, r23
    51a6:	78 1f       	adc	r23, r24
    51a8:	89 1f       	adc	r24, r25
    51aa:	9a 1f       	adc	r25, r26
    51ac:	a1 1d       	adc	r26, r1
    51ae:	68 0f       	add	r22, r24
    51b0:	79 1f       	adc	r23, r25
    51b2:	8a 1f       	adc	r24, r26
    51b4:	91 1d       	adc	r25, r1
    51b6:	a1 1d       	adc	r26, r1
    51b8:	6a 0f       	add	r22, r26
    51ba:	71 1d       	adc	r23, r1
    51bc:	81 1d       	adc	r24, r1
    51be:	91 1d       	adc	r25, r1
    51c0:	a1 1d       	adc	r26, r1
    51c2:	20 d0       	rcall	.+64     	; 0x5204 <__ultoa_invert+0x84>
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <__ultoa_invert+0x48>
    51c6:	68 94       	set
    51c8:	3f 91       	pop	r19
    51ca:	2a e0       	ldi	r18, 0x0A	; 10
    51cc:	26 9f       	mul	r18, r22
    51ce:	11 24       	eor	r1, r1
    51d0:	30 19       	sub	r19, r0
    51d2:	30 5d       	subi	r19, 0xD0	; 208
    51d4:	31 93       	st	Z+, r19
    51d6:	de f6       	brtc	.-74     	; 0x518e <__ultoa_invert+0xe>
    51d8:	cf 01       	movw	r24, r30
    51da:	08 95       	ret
    51dc:	46 2f       	mov	r20, r22
    51de:	47 70       	andi	r20, 0x07	; 7
    51e0:	40 5d       	subi	r20, 0xD0	; 208
    51e2:	41 93       	st	Z+, r20
    51e4:	b3 e0       	ldi	r27, 0x03	; 3
    51e6:	0f d0       	rcall	.+30     	; 0x5206 <__ultoa_invert+0x86>
    51e8:	c9 f7       	brne	.-14     	; 0x51dc <__ultoa_invert+0x5c>
    51ea:	f6 cf       	rjmp	.-20     	; 0x51d8 <__ultoa_invert+0x58>
    51ec:	46 2f       	mov	r20, r22
    51ee:	4f 70       	andi	r20, 0x0F	; 15
    51f0:	40 5d       	subi	r20, 0xD0	; 208
    51f2:	4a 33       	cpi	r20, 0x3A	; 58
    51f4:	18 f0       	brcs	.+6      	; 0x51fc <__ultoa_invert+0x7c>
    51f6:	49 5d       	subi	r20, 0xD9	; 217
    51f8:	31 fd       	sbrc	r19, 1
    51fa:	40 52       	subi	r20, 0x20	; 32
    51fc:	41 93       	st	Z+, r20
    51fe:	02 d0       	rcall	.+4      	; 0x5204 <__ultoa_invert+0x84>
    5200:	a9 f7       	brne	.-22     	; 0x51ec <__ultoa_invert+0x6c>
    5202:	ea cf       	rjmp	.-44     	; 0x51d8 <__ultoa_invert+0x58>
    5204:	b4 e0       	ldi	r27, 0x04	; 4
    5206:	a6 95       	lsr	r26
    5208:	97 95       	ror	r25
    520a:	87 95       	ror	r24
    520c:	77 95       	ror	r23
    520e:	67 95       	ror	r22
    5210:	ba 95       	dec	r27
    5212:	c9 f7       	brne	.-14     	; 0x5206 <__ultoa_invert+0x86>
    5214:	00 97       	sbiw	r24, 0x00	; 0
    5216:	61 05       	cpc	r22, r1
    5218:	71 05       	cpc	r23, r1
    521a:	08 95       	ret
    521c:	9b 01       	movw	r18, r22
    521e:	ac 01       	movw	r20, r24
    5220:	0a 2e       	mov	r0, r26
    5222:	06 94       	lsr	r0
    5224:	57 95       	ror	r21
    5226:	47 95       	ror	r20
    5228:	37 95       	ror	r19
    522a:	27 95       	ror	r18
    522c:	ba 95       	dec	r27
    522e:	c9 f7       	brne	.-14     	; 0x5222 <__ultoa_invert+0xa2>
    5230:	62 0f       	add	r22, r18
    5232:	73 1f       	adc	r23, r19
    5234:	84 1f       	adc	r24, r20
    5236:	95 1f       	adc	r25, r21
    5238:	a0 1d       	adc	r26, r0
    523a:	08 95       	ret

0000523c <_exit>:
    523c:	f8 94       	cli

0000523e <__stop_program>:
    523e:	ff cf       	rjmp	.-2      	; 0x523e <__stop_program>
