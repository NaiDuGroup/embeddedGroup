
Temp_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000720  00800200  0000516e  00005202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000516e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800920  00800920  00005922  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d9ae  00000000  00000000  000064d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037ac  00000000  00000000  00013e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000068e1  00000000  00000000  0001762a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021bc  00000000  00000000  0001df0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003fb9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b48a  00000000  00000000  00024081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  0002f50b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c7       	rjmp	.+3666   	; 0xe84 <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <__vector_25>
      68:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_36>
      94:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__vector_51>
      d0:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__vector_54>
      dc:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	4e 21       	and	r20, r14
      fa:	be 21       	and	r27, r14
      fc:	be 21       	and	r27, r14
      fe:	be 21       	and	r27, r14
     100:	be 21       	and	r27, r14
     102:	be 21       	and	r27, r14
     104:	be 21       	and	r27, r14
     106:	be 21       	and	r27, r14
     108:	4e 21       	and	r20, r14
     10a:	be 21       	and	r27, r14
     10c:	be 21       	and	r27, r14
     10e:	be 21       	and	r27, r14
     110:	be 21       	and	r27, r14
     112:	be 21       	and	r27, r14
     114:	be 21       	and	r27, r14
     116:	be 21       	and	r27, r14
     118:	50 21       	and	r21, r0
     11a:	be 21       	and	r27, r14
     11c:	be 21       	and	r27, r14
     11e:	be 21       	and	r27, r14
     120:	be 21       	and	r27, r14
     122:	be 21       	and	r27, r14
     124:	be 21       	and	r27, r14
     126:	be 21       	and	r27, r14
     128:	be 21       	and	r27, r14
     12a:	be 21       	and	r27, r14
     12c:	be 21       	and	r27, r14
     12e:	be 21       	and	r27, r14
     130:	be 21       	and	r27, r14
     132:	be 21       	and	r27, r14
     134:	be 21       	and	r27, r14
     136:	be 21       	and	r27, r14
     138:	50 21       	and	r21, r0
     13a:	be 21       	and	r27, r14
     13c:	be 21       	and	r27, r14
     13e:	be 21       	and	r27, r14
     140:	be 21       	and	r27, r14
     142:	be 21       	and	r27, r14
     144:	be 21       	and	r27, r14
     146:	be 21       	and	r27, r14
     148:	be 21       	and	r27, r14
     14a:	be 21       	and	r27, r14
     14c:	be 21       	and	r27, r14
     14e:	be 21       	and	r27, r14
     150:	be 21       	and	r27, r14
     152:	be 21       	and	r27, r14
     154:	be 21       	and	r27, r14
     156:	be 21       	and	r27, r14
     158:	ba 21       	and	r27, r10
     15a:	be 21       	and	r27, r14
     15c:	be 21       	and	r27, r14
     15e:	be 21       	and	r27, r14
     160:	be 21       	and	r27, r14
     162:	be 21       	and	r27, r14
     164:	be 21       	and	r27, r14
     166:	be 21       	and	r27, r14
     168:	85 21       	and	r24, r5
     16a:	be 21       	and	r27, r14
     16c:	be 21       	and	r27, r14
     16e:	be 21       	and	r27, r14
     170:	be 21       	and	r27, r14
     172:	be 21       	and	r27, r14
     174:	be 21       	and	r27, r14
     176:	be 21       	and	r27, r14
     178:	be 21       	and	r27, r14
     17a:	be 21       	and	r27, r14
     17c:	be 21       	and	r27, r14
     17e:	be 21       	and	r27, r14
     180:	be 21       	and	r27, r14
     182:	be 21       	and	r27, r14
     184:	be 21       	and	r27, r14
     186:	be 21       	and	r27, r14
     188:	79 21       	and	r23, r9
     18a:	be 21       	and	r27, r14
     18c:	be 21       	and	r27, r14
     18e:	be 21       	and	r27, r14
     190:	be 21       	and	r27, r14
     192:	be 21       	and	r27, r14
     194:	be 21       	and	r27, r14
     196:	be 21       	and	r27, r14
     198:	9d 21       	and	r25, r13

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0b e4       	ldi	r16, 0x4B	; 75
     19c:	19 e0       	ldi	r17, 0x09	; 9
     19e:	0f 2e       	mov	r0, r31
     1a0:	f3 e7       	ldi	r31, 0x73	; 115
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f9 e0       	ldi	r31, 0x09	; 9
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	c2 d4       	rcall	.+2436   	; 0xb50 <uxListRemove>
     1cc:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <uxCurrentNumberOfTasks>
     1d6:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	40 d4       	rcall	.+2176   	; 0xa6a <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	3e d4       	rcall	.+2172   	; 0xa6a <vPortFree>
     1ee:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	7d d5       	rcall	.+2810   	; 0xcfa <vPortYield>
     200:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTimerList>
     22a:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTimerList>
     260:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	6e d4       	rcall	.+2268   	; 0xb50 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 27 14 	call	0x284e	; 0x284e <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
     2d0:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
     2d4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	0c d5       	rcall	.+2584   	; 0xcfa <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	25 d4       	rcall	.+2122   	; 0xb50 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 16 24 	jmp	0x482c	; 0x482c <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 27 14 	call	0x284e	; 0x284e <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 27 14 	call	0x284e	; 0x284e <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	52 d3       	rcall	.+1700   	; 0xa6a <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
     3da:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
     3de:	7b d7       	rcall	.+3830   	; 0x12d6 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f8:	e0 91 9f 09 	lds	r30, 0x099F	; 0x80099f <pxOverflowTimerList>
     3fc:	f0 91 a0 09 	lds	r31, 0x09A0	; 0x8009a0 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	19 e0       	ldi	r17, 0x09	; 9
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	ee e6       	ldi	r30, 0x6E	; 110
     426:	f1 e5       	ldi	r31, 0x51	; 81
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a0 32       	cpi	r26, 0x20	; 32
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2b e0       	ldi	r18, 0x0B	; 11
     43a:	a0 e2       	ldi	r26, 0x20	; 32
     43c:	b9 e0       	ldi	r27, 0x09	; 9
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a9 34       	cpi	r26, 0x49	; 73
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	8e d1       	rcall	.+796    	; 0x766 <main>
     44a:	0c 94 b5 28 	jmp	0x516a	; 0x516a <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <main_tasks>:
void main_tasks(void *pvParameters)
{

	for( ;; )
	{
		if (xSemaphoreTake( allSemaphores, portMAX_DELAY ) == pdTRUE)
     450:	6f ef       	ldi	r22, 0xFF	; 255
     452:	7f ef       	ldi	r23, 0xFF	; 255
     454:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <allSemaphores>
     458:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <allSemaphores+0x1>
     45c:	c5 d7       	rcall	.+3978   	; 0x13e8 <xQueueSemaphoreTake>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	b9 f7       	brne	.-18     	; 0x450 <main_tasks>
		{
			if (xTimerReset(temperatureHumidityTimer,0) != pdTRUE)
     462:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	ac 01       	movw	r20, r24
     470:	62 e0       	ldi	r22, 0x02	; 2
     472:	80 91 13 0b 	lds	r24, 0x0B13	; 0x800b13 <temperatureHumidityTimer>
     476:	90 91 14 0b 	lds	r25, 0x0B14	; 0x800b14 <temperatureHumidityTimer+0x1>
     47a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	61 f0       	breq	.+24     	; 0x49a <main_tasks+0x4a>
				xTimerStart(temperatureHumidityTimer,0);
     482:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	ac 01       	movw	r20, r24
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	80 91 13 0b 	lds	r24, 0x0B13	; 0x800b13 <temperatureHumidityTimer>
     492:	90 91 14 0b 	lds	r25, 0x0B14	; 0x800b14 <temperatureHumidityTimer+0x1>
     496:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>

			xSemaphoreGive( allSemaphores);
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <allSemaphores>
     4a8:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <allSemaphores+0x1>
     4ac:	2f d6       	rcall	.+3166   	; 0x110c <xQueueGenericSend>
			vTaskDelay(65000/ portTICK_PERIOD_MS); //  55 seconds
     4ae:	8e ed       	ldi	r24, 0xDE	; 222
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
     4b2:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
     4b6:	cc cf       	rjmp	.-104    	; 0x450 <main_tasks>

000004b8 <temp_humidity_task>:
	for( ;; )
	{
		if (xSemaphoreTake( temperatureHumiditySemaphore, portMAX_DELAY ) == pdTRUE)
		{
			temperatureHumidity_measure();
			printf("humidity = %d \n", humidityGetValue());
     4b8:	0e e6       	ldi	r16, 0x6E	; 110
     4ba:	12 e0       	ldi	r17, 0x02	; 2
			printf("temperature = %d \n", temperatureGetValue());
     4bc:	ce e7       	ldi	r28, 0x7E	; 126
     4be:	d2 e0       	ldi	r29, 0x02	; 2
void temp_humidity_task(void *pvParameters)
{

	for( ;; )
	{
		if (xSemaphoreTake( temperatureHumiditySemaphore, portMAX_DELAY ) == pdTRUE)
     4c0:	6f ef       	ldi	r22, 0xFF	; 255
     4c2:	7f ef       	ldi	r23, 0xFF	; 255
     4c4:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <temperatureHumiditySemaphore>
     4c8:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <temperatureHumiditySemaphore+0x1>
     4cc:	8d d7       	rcall	.+3866   	; 0x13e8 <xQueueSemaphoreTake>
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	b9 f7       	brne	.-18     	; 0x4c0 <temp_humidity_task+0x8>
		{
			temperatureHumidity_measure();
     4d2:	79 d2       	rcall	.+1266   	; 0x9c6 <temperatureHumidity_measure>
			printf("humidity = %d \n", humidityGetValue());
     4d4:	9e d2       	rcall	.+1340   	; 0xa12 <humidityGetValue>
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	1f 93       	push	r17
     4dc:	0f 93       	push	r16
     4de:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
			printf("temperature = %d \n", temperatureGetValue());
     4e2:	94 d2       	rcall	.+1320   	; 0xa0c <temperatureGetValue>
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
			
			xSemaphoreGive(temperatureHumiditySemaphore);
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <temperatureHumiditySemaphore>
     4fe:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <temperatureHumiditySemaphore+0x1>
     502:	04 d6       	rcall	.+3080   	; 0x110c <xQueueGenericSend>
     504:	8e ed       	ldi	r24, 0xDE	; 222
		    vTaskDelay(65000/ portTICK_PERIOD_MS); //55 seconds
     506:	9f e0       	ldi	r25, 0x0F	; 15
     508:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
     50c:	8d b7       	in	r24, 0x3d	; 61
     50e:	9e b7       	in	r25, 0x3e	; 62
     510:	08 96       	adiw	r24, 0x08	; 8
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	9e bf       	out	0x3e, r25	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	8d bf       	out	0x3d, r24	; 61
     51c:	d1 cf       	rjmp	.-94     	; 0x4c0 <temp_humidity_task+0x8>

0000051e <co2_task>:
     51e:	c1 e9       	ldi	r28, 0x91	; 145
	for( ;; )
	{
		if (xSemaphoreTake( co2Semaphore, portMAX_DELAY ) == pdTRUE)
		{
			co2Sensor_measure();
			printf("co2 = %d \n", co2Sensor_getValue());
     520:	d2 e0       	ldi	r29, 0x02	; 2
void co2_task(void *pvParameters)
{

	for( ;; )
	{
		if (xSemaphoreTake( co2Semaphore, portMAX_DELAY ) == pdTRUE)
     522:	6f ef       	ldi	r22, 0xFF	; 255
     524:	7f ef       	ldi	r23, 0xFF	; 255
     526:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <co2Semaphore>
     52a:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <co2Semaphore+0x1>
     52e:	5c d7       	rcall	.+3768   	; 0x13e8 <xQueueSemaphoreTake>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	b9 f7       	brne	.-18     	; 0x522 <co2_task+0x4>
		{
			co2Sensor_measure();
     534:	7a d0       	rcall	.+244    	; 0x62a <co2Sensor_measure>
			printf("co2 = %d \n", co2Sensor_getValue());
     536:	86 d0       	rcall	.+268    	; 0x644 <co2Sensor_getValue>
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	df 93       	push	r29
     53e:	cf 93       	push	r28
     540:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
     544:	20 e0       	ldi	r18, 0x00	; 0
			
			xSemaphoreGive(co2Semaphore);
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <co2Semaphore>
     552:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <co2Semaphore+0x1>
     556:	da d5       	rcall	.+2996   	; 0x110c <xQueueGenericSend>
     558:	8e ed       	ldi	r24, 0xDE	; 222
			vTaskDelay(65000/ portTICK_PERIOD_MS); //55 seconds
     55a:	9f e0       	ldi	r25, 0x0F	; 15
     55c:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	dc cf       	rjmp	.-72     	; 0x522 <co2_task+0x4>

0000056a <lorawan_task>:
     56a:	78 d0       	rcall	.+240    	; 0x65c <lorawanDevStart>
void lorawan_task(void *pvParameters)
{
	lorawanDevStart();
	for( ;; )
	{
		if (xSemaphoreTake( lorawanSemaphore, portMAX_DELAY ) == pdTRUE)
     56c:	6f ef       	ldi	r22, 0xFF	; 255
     56e:	7f ef       	ldi	r23, 0xFF	; 255
     570:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <lorawanSemaphore>
     574:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <lorawanSemaphore+0x1>
     578:	37 d7       	rcall	.+3694   	; 0x13e8 <xQueueSemaphoreTake>
     57a:	81 30       	cpi	r24, 0x01	; 1
		{
			lorawanDevSend_data();
     57c:	b9 f7       	brne	.-18     	; 0x56c <lorawan_task+0x2>
     57e:	b4 d0       	rcall	.+360    	; 0x6e8 <lorawanDevSend_data>
			printf("data send\n");
     580:	8c e9       	ldi	r24, 0x9C	; 156
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
			
			xSemaphoreGive(lorawanSemaphore);
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <lorawanSemaphore>
     596:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <lorawanSemaphore+0x1>
     59a:	b8 d5       	rcall	.+2928   	; 0x110c <xQueueGenericSend>
			vTaskDelay(65000/ portTICK_PERIOD_MS); //55 seconds
     59c:	8e ed       	ldi	r24, 0xDE	; 222
     59e:	9f e0       	ldi	r25, 0x0F	; 15
     5a0:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
     5a4:	e3 cf       	rjmp	.-58     	; 0x56c <lorawan_task+0x2>

000005a6 <tasks_init>:
#include "Header/board_tasks.h"

TaskHandle_t xHandle = NULL;

void tasks_init()
{
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
	xTaskCreate(
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f0 e2       	ldi	r31, 0x20	; 32
     5b0:	ef 2e       	mov	r14, r31
     5b2:	f9 e0       	ldi	r31, 0x09	; 9
     5b4:	ff 2e       	mov	r15, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	03 e0       	ldi	r16, 0x03	; 3
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 ec       	ldi	r20, 0xC0	; 192
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	66 ea       	ldi	r22, 0xA6	; 166
     5c4:	72 e0       	ldi	r23, 0x02	; 2
     5c6:	88 e2       	ldi	r24, 0x28	; 40
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void * ) 1,
	configMAX_PRIORITIES - 1,
	&xHandle);

	xTaskCreate(
     5ce:	02 e0       	ldi	r16, 0x02	; 2
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 ec       	ldi	r20, 0xC0	; 192
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	68 eb       	ldi	r22, 0xB8	; 184
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	8c e5       	ldi	r24, 0x5C	; 92
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void* ) 1,
	configMAX_PRIORITIES - 2,
	&xHandle);

	xTaskCreate(
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 ec       	ldi	r20, 0xC0	; 192
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	6d ec       	ldi	r22, 0xCD	; 205
     5ee:	72 e0       	ldi	r23, 0x02	; 2
     5f0:	8f e8       	ldi	r24, 0x8F	; 143
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	( void* ) 1,
	configMAX_PRIORITIES - 2,
	&xHandle);

    xTaskCreate(
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 ec       	ldi	r20, 0xC0	; 192
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	6d ed       	ldi	r22, 0xDD	; 221
     602:	72 e0       	ldi	r23, 0x02	; 2
     604:	85 eb       	ldi	r24, 0xB5	; 181
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <xTaskCreate>
    configMINIMAL_STACK_SIZE,
    ( void* ) 1,
    configMAX_PRIORITIES - 2,
    &xHandle);

}
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <co2Sensor_callback>:
	
}

void co2Sensor_callback(uint16_t ppm)
{
	co2PPM = ppm;
     614:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <co2PPM+0x1>
     618:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <co2PPM>
     61c:	08 95       	ret

0000061e <co2Sensor_init>:

uint16_t co2PPM;

void co2Sensor_init()
{
	mh_z19_create(ser_USART3, co2Sensor_callback);
     61e:	6a e0       	ldi	r22, 0x0A	; 10
     620:	73 e0       	ldi	r23, 0x03	; 3
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <mh_z19_create>
     628:	08 95       	ret

0000062a <co2Sensor_measure>:
void co2Sensor_measure()
{
	
	mh_z19_return_code_t rc;
	uint16_t ppm;
	rc = mh_z19_take_meassuring();
     62a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <mh_z19_take_meassuring>
	if (rc != MHZ19_OK)
     62e:	88 23       	and	r24, r24
     630:	41 f0       	breq	.+16     	; 0x642 <co2Sensor_measure+0x18>
	{
		printf("Something Wrong");
     632:	81 ef       	ldi	r24, 0xF1	; 241
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	08 95       	ret

00000644 <co2Sensor_getValue>:
}

uint16_t co2Sensor_getValue()
{
	return co2PPM;
     644:	80 91 27 0b 	lds	r24, 0x0B27	; 0x800b27 <co2PPM>
     648:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <co2PPM+0x1>
     64c:	08 95       	ret

0000064e <lorawanDev_init>:
#define LORA_appKEY "8390d15cabd2baab4468e37d88c54efa"

#define LORA_INIT_TASK_PRIORITY 7
void lorawanDev_init()
{
	hal_create(LORA_INIT_TASK_PRIORITY+1);
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <hal_create>
	lora_driver_create(ser_USART1);
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0c 94 8f 18 	jmp	0x311e	; 0x311e <lora_driver_create>
     65a:	08 95       	ret

0000065c <lorawanDevStart>:
	
}

void lorawanDevStart()
{
	lora_driver_reset_rn2483(1);
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 cb 18 	call	0x3196	; 0x3196 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
	lora_driver_reset_rn2483(0);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 cb 18 	call	0x3196	; 0x3196 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     670:	86 e9       	ldi	r24, 0x96	; 150
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskDelay>
	lora_driver_flush_buffers();
     678:	0e 94 88 18 	call	0x3110	; 0x3110 <lora_driver_flush_buffers>
	
	if (lora_driver_rn2483_factory_reset() != LoRA_OK)
     67c:	0e 94 df 18 	call	0x31be	; 0x31be <lora_driver_rn2483_factory_reset>
     680:	88 23       	and	r24, r24
     682:	21 f0       	breq	.+8      	; 0x68c <lorawanDevStart+0x30>
	{
		printf("FACTORY RESET ERROR\n");
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}
	
	if (lora_driver_configure_to_eu868() != LoRA_OK)
     68c:	0e 94 0c 1a 	call	0x3418	; 0x3418 <lora_driver_configure_to_eu868>
     690:	88 23       	and	r24, r24
     692:	21 f0       	breq	.+8      	; 0x69c <lorawanDevStart+0x40>
	{
		printf("lora_Configure error\n");
     694:	85 e1       	ldi	r24, 0x15	; 21
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}
	
	static char dev_eui[17];
	if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
     69c:	82 e2       	ldi	r24, 0x22	; 34
     69e:	99 e0       	ldi	r25, 0x09	; 9
     6a0:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <lora_driver_get_rn2483_hweui>
     6a4:	88 23       	and	r24, r24
     6a6:	41 f0       	breq	.+16     	; 0x6b8 <lorawanDevStart+0x5c>
	{
		printf("lora_driver_get_rn2483_hweui error");
     6a8:	8a e2       	ldi	r24, 0x2A	; 42
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
	}
	
	if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
     6b8:	42 e2       	ldi	r20, 0x22	; 34
     6ba:	59 e0       	ldi	r21, 0x09	; 9
     6bc:	6d e4       	ldi	r22, 0x4D	; 77
     6be:	73 e0       	ldi	r23, 0x03	; 3
     6c0:	8e e6       	ldi	r24, 0x6E	; 110
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <lora_driver_set_otaa_identity>
     6c8:	88 23       	and	r24, r24
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <lorawanDevStart+0x78>
	{
		printf("lora_driver_set_otaa_identity error\n");
     6cc:	8f e7       	ldi	r24, 0x7F	; 127
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}
	
	if (lora_driver_join(LoRa_OTAA) == LoRa_ACCEPTED)
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 46 19 	call	0x328c	; 0x328c <lora_driver_join>
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <lorawanDevStart+0x8a>
	{
		printf("you are connected\n");
     6de:	83 ea       	ldi	r24, 0xA3	; 163
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <puts>
     6e6:	08 95       	ret

000006e8 <lorawanDevSend_data>:
	}
	
}

void lorawanDevSend_data()
{
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	66 97       	sbiw	r28, 0x16	; 22
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
	uint16_t tHumidity = humidityGetValue();
     704:	86 d1       	rcall	.+780    	; 0xa12 <humidityGetValue>
     706:	f8 2e       	mov	r15, r24
     708:	e9 2e       	mov	r14, r25
	uint16_t tTemperature = temperatureGetValue();
     70a:	80 d1       	rcall	.+768    	; 0xa0c <temperatureGetValue>
     70c:	18 2f       	mov	r17, r24
     70e:	09 2f       	mov	r16, r25
	uint16_t tCO2 = co2Sensor_getValue();
     710:	99 df       	rcall	.-206    	; 0x644 <co2Sensor_getValue>
     712:	26 e0       	ldi	r18, 0x06	; 6
	
	lora_payload_t uplink_payload;
	
	uplink_payload.len = 6; // Length of the actual payload
     714:	2a 83       	std	Y+2, r18	; 0x02
     716:	21 e0       	ldi	r18, 0x01	; 1
	uplink_payload.port_no = 1; // The LoRaWAN port no to sent the message to
     718:	29 83       	std	Y+1, r18	; 0x01
     71a:	eb 82       	std	Y+3, r14	; 0x03
	uplink_payload.bytes[0] = tHumidity >> 8;
     71c:	fc 82       	std	Y+4, r15	; 0x04
	uplink_payload.bytes[1] = tHumidity & 0xFF;
     71e:	0d 83       	std	Y+5, r16	; 0x05
	uplink_payload.bytes[2] = tTemperature >> 8;
     720:	1e 83       	std	Y+6, r17	; 0x06
	uplink_payload.bytes[3] = tTemperature & 0xFF;
     722:	9f 83       	std	Y+7, r25	; 0x07
	uplink_payload.bytes[4] = tCO2 >> 8;
     724:	88 87       	std	Y+8, r24	; 0x08
	uplink_payload.bytes[5] = tCO2 & 0xFF;
     726:	be 01       	movw	r22, r28
	
	e_LoRa_return_code_t rc;
	if ((rc = lora_driver_sent_upload_message(false, &uplink_payload)) == LoRa_MAC_TX_OK )
     728:	6f 5f       	subi	r22, 0xFF	; 255
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <lora_driver_sent_upload_message>
     732:	8d 30       	cpi	r24, 0x0D	; 13
     734:	29 f4       	brne	.+10     	; 0x740 <lorawanDevSend_data+0x58>
     736:	85 eb       	ldi	r24, 0xB5	; 181
	{
		// The uplink message is sent and there is no downlink message received
		printf("The uplink message is sent and there is no downlink message received\n");
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
     73e:	06 c0       	rjmp	.+12     	; 0x74c <lorawanDevSend_data+0x64>
     740:	8e 30       	cpi	r24, 0x0E	; 14
	}
	else if (rc == LoRa_MAC_RX_OK)
     742:	21 f4       	brne	.+8      	; 0x74c <lorawanDevSend_data+0x64>
     744:	8a ef       	ldi	r24, 0xFA	; 250
	{
		// The uplink message is sent and a downlink message is received
		printf("The uplink message is sent and a downlink message is received\n");
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
     74c:	66 96       	adiw	r28, 0x16	; 22
	}
	
	 
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	08 95       	ret

00000766 <main>:
#include "Header/co2Sensor.h"
#include "Header/lorawanDev.h"

int main(void)
{
	trace_init();
     766:	58 d1       	rcall	.+688    	; 0xa18 <trace_init>
	stdioCreate(0);
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 22 20 	call	0x4044	; 0x4044 <stdioCreate>

	semaphore_init();
	timers_init();
     76e:	f1 d0       	rcall	.+482    	; 0x952 <semaphore_init>
	temperatureHumiditySensor_init();
     770:	af d0       	rcall	.+350    	; 0x8d0 <timers_init>
     772:	20 d1       	rcall	.+576    	; 0x9b4 <temperatureHumiditySensor_init>
    co2Sensor_init();
     774:	54 df       	rcall	.-344    	; 0x61e <co2Sensor_init>
     776:	6b df       	rcall	.-298    	; 0x64e <lorawanDev_init>
	lorawanDev_init();
     778:	88 e3       	ldi	r24, 0x38	; 56
     77a:	94 e0       	ldi	r25, 0x04	; 4
    

	printf("Program starts");
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <printf>
     784:	10 df       	rcall	.-480    	; 0x5a6 <tasks_init>
	
	//xSemaphoreTake(temperatureHumiditySemaphore,portMAX_DELAY);

	tasks_init();
     786:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskStartScheduler>

	vTaskStartScheduler();
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	ff cf       	rjmp	.-2      	; 0x78e <main+0x28>

00000790 <mainTimerCallbackFunction>:
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
}


void mainTimerCallbackFunction(TimerHandle_t xTimer)
{
	printf("mainTimer using the semaphore (50 seconds)\n");
     794:	87 e4       	ldi	r24, 0x47	; 71
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	if (xSemaphoreTake(lorawanSemaphore,portMAX_DELAY))
     79c:	6f ef       	ldi	r22, 0xFF	; 255
     79e:	7f ef       	ldi	r23, 0xFF	; 255
     7a0:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <lorawanSemaphore>
     7a4:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <lorawanSemaphore+0x1>
     7a8:	1f d6       	rcall	.+3134   	; 0x13e8 <xQueueSemaphoreTake>
	{
		
	}
	
	if (xSemaphoreGive(allSemaphores) != pdTRUE)
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <allSemaphores>
     7b8:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <allSemaphores+0x1>
     7bc:	a7 d4       	rcall	.+2382   	; 0x110c <xQueueGenericSend>
	{
		
	}
		
	xTimerStart(temperatureHumidityTimer,0);
     7be:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	ac 01       	movw	r20, r24
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	80 91 13 0b 	lds	r24, 0x0B13	; 0x800b13 <temperatureHumidityTimer>
     7d2:	90 91 14 0b 	lds	r25, 0x0B14	; 0x800b14 <temperatureHumidityTimer+0x1>
     7d6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
}
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <temperatureHumidityCallbackFunction>:

void temperatureHumidityCallbackFunction(TimerHandle_t xTimer)
{
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
	printf("temperatureHumidityCallbackFunction using the semaphore (5seconds)\n");
     7e4:	82 e7       	ldi	r24, 0x72	; 114
     7e6:	94 e0       	ldi	r25, 0x04	; 4
     7e8:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	if (xSemaphoreTake(allSemaphores,portMAX_DELAY))
     7ec:	6f ef       	ldi	r22, 0xFF	; 255
     7ee:	7f ef       	ldi	r23, 0xFF	; 255
     7f0:	80 91 21 0b 	lds	r24, 0x0B21	; 0x800b21 <allSemaphores>
     7f4:	90 91 22 0b 	lds	r25, 0x0B22	; 0x800b22 <allSemaphores+0x1>
     7f8:	f7 d5       	rcall	.+3054   	; 0x13e8 <xQueueSemaphoreTake>
	{
		
	}
	
	if (xSemaphoreGive(temperatureHumiditySemaphore) != pdTRUE)
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <temperatureHumiditySemaphore>
     808:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <temperatureHumiditySemaphore+0x1>
     80c:	7f d4       	rcall	.+2302   	; 0x110c <xQueueGenericSend>
	{
		
	}
	
	xTimerStart(co2Timer,0);
     80e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     812:	00 e0       	ldi	r16, 0x00	; 0
     814:	10 e0       	ldi	r17, 0x00	; 0
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	ac 01       	movw	r20, r24
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	80 91 0f 0b 	lds	r24, 0x0B0F	; 0x800b0f <co2Timer>
     822:	90 91 10 0b 	lds	r25, 0x0B10	; 0x800b10 <co2Timer+0x1>
     826:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
}
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <co2CallbackFunction>:

void co2CallbackFunction(TimerHandle_t xTimer)
{
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
	printf("co2CallbackFunction using the semaphore (5seconds)\n");
     834:	85 eb       	ldi	r24, 0xB5	; 181
     836:	94 e0       	ldi	r25, 0x04	; 4
     838:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	if (xSemaphoreTake(temperatureHumiditySemaphore,portMAX_DELAY))
     83c:	6f ef       	ldi	r22, 0xFF	; 255
     83e:	7f ef       	ldi	r23, 0xFF	; 255
     840:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <temperatureHumiditySemaphore>
     844:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <temperatureHumiditySemaphore+0x1>
     848:	cf d5       	rcall	.+2974   	; 0x13e8 <xQueueSemaphoreTake>
	{
		
	}
	
	if (xSemaphoreGive(co2Semaphore) != pdTRUE)
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <co2Semaphore>
     858:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <co2Semaphore+0x1>
     85c:	57 d4       	rcall	.+2222   	; 0x110c <xQueueGenericSend>
	{
		
	}
	
	xTimerStart(lorawanTimer,0);
     85e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	ac 01       	movw	r20, r24
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	80 91 1f 0b 	lds	r24, 0x0B1F	; 0x800b1f <lorawanTimer>
     872:	90 91 20 0b 	lds	r25, 0x0B20	; 0x800b20 <lorawanTimer+0x1>
     876:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
}
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	08 95       	ret

00000880 <lorawanCallbackFunction>:

void lorawanCallbackFunction(TimerHandle_t xTimer)
{
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
	printf("lorawanCallbackFunction using the semaphore (5seconds)\n");
     884:	88 ee       	ldi	r24, 0xE8	; 232
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	if (xSemaphoreTake(co2Semaphore,portMAX_DELAY))
     88c:	6f ef       	ldi	r22, 0xFF	; 255
     88e:	7f ef       	ldi	r23, 0xFF	; 255
     890:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <co2Semaphore>
     894:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <co2Semaphore+0x1>
     898:	a7 d5       	rcall	.+2894   	; 0x13e8 <xQueueSemaphoreTake>
	{
		
	}
	
	if (xSemaphoreGive(lorawanSemaphore) != pdTRUE)
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <lorawanSemaphore>
     8a8:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <lorawanSemaphore+0x1>
     8ac:	2f d4       	rcall	.+2142   	; 0x110c <xQueueGenericSend>
	{
		
	}
	
	xTimerStart(mainTimer,0);
     8ae:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <xTaskGetTickCount>
     8b2:	00 e0       	ldi	r16, 0x00	; 0
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	ac 01       	movw	r20, r24
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <mainTimer>
     8c2:	90 91 1e 0b 	lds	r25, 0x0B1E	; 0x800b1e <mainTimer+0x1>
     8c6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTimerGenericCommand>
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <timers_init>:

#include "Header/myTimers.h"
#include "Header/semaphores.h"

void timers_init()
{
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
	mainTimer = xTimerCreate( "main timer  \n",           // Just a text name, not used by the kernel.
     8d4:	08 ec       	ldi	r16, 0xC8	; 200
     8d6:	13 e0       	ldi	r17, 0x03	; 3
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	65 e3       	ldi	r22, 0x35	; 53
     8e0:	7c e0       	ldi	r23, 0x0C	; 12
     8e2:	8f e1       	ldi	r24, 0x1F	; 31
     8e4:	95 e0       	ldi	r25, 0x05	; 5
     8e6:	0e 94 9f 14 	call	0x293e	; 0x293e <xTimerCreate>
     8ea:	90 93 1e 0b 	sts	0x0B1E, r25	; 0x800b1e <mainTimer+0x1>
     8ee:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <mainTimer>
	                          0,                          // The id is not used by the callback so can take any value.
	                          mainTimerCallbackFunction    // The callback function that switches the LCD back-light off.
	                        );
	

	temperatureHumidityTimer = xTimerCreate( "temp_hum_timer \n",           // Just a text name, not used by the kernel.
     8f2:	00 ef       	ldi	r16, 0xF0	; 240
     8f4:	13 e0       	ldi	r17, 0x03	; 3
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	68 e3       	ldi	r22, 0x38	; 56
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	8d e2       	ldi	r24, 0x2D	; 45
     902:	95 e0       	ldi	r25, 0x05	; 5
     904:	0e 94 9f 14 	call	0x293e	; 0x293e <xTimerCreate>
     908:	90 93 14 0b 	sts	0x0B14, r25	; 0x800b14 <temperatureHumidityTimer+0x1>
     90c:	80 93 13 0b 	sts	0x0B13, r24	; 0x800b13 <temperatureHumidityTimer>
										    0,                          // The id is not used by the callback so can take any value.
										    temperatureHumidityCallbackFunction    // The callback function that switches the LCD back-light off.
											);


	co2Timer = xTimerCreate("co2_timer \n",           // Just a text name, not used by the kernel.
     910:	08 e1       	ldi	r16, 0x18	; 24
     912:	14 e0       	ldi	r17, 0x04	; 4
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	68 e3       	ldi	r22, 0x38	; 56
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	8e e3       	ldi	r24, 0x3E	; 62
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	0e 94 9f 14 	call	0x293e	; 0x293e <xTimerCreate>
     926:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <co2Timer+0x1>
     92a:	80 93 0f 0b 	sts	0x0B0F, r24	; 0x800b0f <co2Timer>
							pdFALSE,                    // The timer is a one-shot timer.
							0,                          // The id is not used by the callback so can take any value.
							co2CallbackFunction    // The callback function that switches the LCD back-light off.
							);

	lorawanTimer = xTimerCreate("lorawan timer \n",           // Just a text name, not used by the kernel.
     92e:	00 e4       	ldi	r16, 0x40	; 64
     930:	14 e0       	ldi	r17, 0x04	; 4
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	68 e3       	ldi	r22, 0x38	; 56
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	8a e4       	ldi	r24, 0x4A	; 74
     93e:	95 e0       	ldi	r25, 0x05	; 5
     940:	0e 94 9f 14 	call	0x293e	; 0x293e <xTimerCreate>
     944:	90 93 20 0b 	sts	0x0B20, r25	; 0x800b20 <lorawanTimer+0x1>
     948:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <lorawanTimer>
				   ( 5000 / portTICK_PERIOD_MS), // The timer period in ticks.
					pdFALSE,                    // The timer is a one-shot timer.
					0,                          // The id is not used by the callback so can take any value.
					lorawanCallbackFunction    // The callback function that switches the LCD back-light off.
					);
}
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <semaphore_init>:

#include "Header/semaphores.h"

void semaphore_init() 
{
	allSemaphores = xSemaphoreCreateMutex();
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	70 d4       	rcall	.+2272   	; 0x1236 <xQueueCreateMutex>
     956:	90 93 22 0b 	sts	0x0B22, r25	; 0x800b22 <allSemaphores+0x1>
     95a:	80 93 21 0b 	sts	0x0B21, r24	; 0x800b21 <allSemaphores>
	if( allSemaphores != NULL )
     95e:	89 2b       	or	r24, r25
     960:	21 f0       	breq	.+8      	; 0x96a <semaphore_init+0x18>
	{
		printf("allSemaphores was created successfully\n");
     962:	8a e5       	ldi	r24, 0x5A	; 90
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}

	temperatureHumiditySemaphore = xSemaphoreCreateMutex();
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	64 d4       	rcall	.+2248   	; 0x1236 <xQueueCreateMutex>
     96e:	90 93 18 0b 	sts	0x0B18, r25	; 0x800b18 <temperatureHumiditySemaphore+0x1>
     972:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <temperatureHumiditySemaphore>
	if( temperatureHumiditySemaphore != NULL )
     976:	89 2b       	or	r24, r25
     978:	21 f0       	breq	.+8      	; 0x982 <semaphore_init+0x30>
	{
		printf("temperatureHumiditySemaphore was created successfully\n");
     97a:	81 e8       	ldi	r24, 0x81	; 129
     97c:	95 e0       	ldi	r25, 0x05	; 5
     97e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}

	co2Semaphore = xSemaphoreCreateMutex();
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	58 d4       	rcall	.+2224   	; 0x1236 <xQueueCreateMutex>
     986:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <co2Semaphore+0x1>
     98a:	80 93 1b 0b 	sts	0x0B1B, r24	; 0x800b1b <co2Semaphore>
	if ( co2Semaphore != NULL)
     98e:	89 2b       	or	r24, r25
     990:	21 f0       	breq	.+8      	; 0x99a <semaphore_init+0x48>
	{
		printf("co2Semaphore was created successfully\n");
     992:	87 eb       	ldi	r24, 0xB7	; 183
     994:	95 e0       	ldi	r25, 0x05	; 5
     996:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	}

	lorawanSemaphore = xSemaphoreCreateMutex();
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	4c d4       	rcall	.+2200   	; 0x1236 <xQueueCreateMutex>
     99e:	90 93 16 0b 	sts	0x0B16, r25	; 0x800b16 <lorawanSemaphore+0x1>
     9a2:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <lorawanSemaphore>
	if ( lorawanSemaphore != NULL)
     9a6:	89 2b       	or	r24, r25
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <semaphore_init+0x60>
	{
		printf("Lorawan was created successfully\n");
     9aa:	8d ed       	ldi	r24, 0xDD	; 221
     9ac:	95 e0       	ldi	r25, 0x05	; 5
     9ae:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <puts>
     9b2:	08 95       	ret

000009b4 <temperatureHumiditySensor_init>:
 
 
 //initialise the driver:
 void temperatureHumiditySensor_init()
 {
	 if ( HIH8120_OK == hih8120Create())
     9b4:	0e 94 04 16 	call	0x2c08	; 0x2c08 <hih8120Create>
     9b8:	81 11       	cpse	r24, r1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <temperatureHumiditySensor_init+0x10>
	 {
		 printf("Initialization of hum temp sensors\n");
     9bc:	8e ef       	ldi	r24, 0xFE	; 254
     9be:	95 e0       	ldi	r25, 0x05	; 5
     9c0:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <puts>
     9c4:	08 95       	ret

000009c6 <temperatureHumidity_measure>:
 //float temperature = 0.0;
 
 
 void temperatureHumidity_measure()
 {
	 if (HIH8120_OK != hih8120Wakeup())
     9c6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <hih8120Wakeup>
     9ca:	88 23       	and	r24, r24
     9cc:	21 f0       	breq	.+8      	; 0x9d6 <temperatureHumidity_measure+0x10>
	 {
		printf("ERROR Wakeup\n"); 
     9ce:	81 e2       	ldi	r24, 0x21	; 33
     9d0:	96 e0       	ldi	r25, 0x06	; 6
     9d2:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d6:	2f ef       	ldi	r18, 0xFF	; 255
     9d8:	80 e7       	ldi	r24, 0x70	; 112
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	e1 f7       	brne	.-8      	; 0x9dc <temperatureHumidity_measure+0x16>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <temperatureHumidity_measure+0x20>
     9e6:	00 00       	nop
	 }
	 _delay_ms(50);
	 
	 if (HIH8120_OK != hih8120Meassure())
     9e8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <hih8120Meassure>
     9ec:	88 23       	and	r24, r24
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <temperatureHumidity_measure+0x32>
	 {
		 printf("ERROR meassure\n");
     9f0:	8e e2       	ldi	r24, 0x2E	; 46
     9f2:	96 e0       	ldi	r25, 0x06	; 6
     9f4:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	80 e7       	ldi	r24, 0x70	; 112
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <temperatureHumidity_measure+0x38>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <temperatureHumidity_measure+0x42>
     a08:	00 00       	nop
     a0a:	08 95       	ret

00000a0c <temperatureGetValue>:
	 _delay_ms(50);
 }
 
uint16_t temperatureGetValue()
 {
	return hih8120GetTemperature_x10();
     a0c:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <hih8120GetTemperature_x10>
 }
     a10:	08 95       	ret

00000a12 <humidityGetValue>:
 
uint16_t humidityGetValue()
 {
	 return hih8120GetHumidityPercent_x10();
     a12:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <hih8120GetHumidityPercent_x10>
 }
     a16:	08 95       	ret

00000a18 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     a18:	e7 e0       	ldi	r30, 0x07	; 7
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 60       	ori	r24, 0x0F	; 15
     a20:	80 83       	st	Z, r24
     a22:	08 95       	ret

00000a24 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a24:	e8 e0       	ldi	r30, 0x08	; 8
     a26:	f1 e0       	ldi	r31, 0x01	; 1
     a28:	90 81       	ld	r25, Z
     a2a:	90 7f       	andi	r25, 0xF0	; 240
     a2c:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a2e:	90 81       	ld	r25, Z
     a30:	8f 70       	andi	r24, 0x0F	; 15
     a32:	98 2b       	or	r25, r24
     a34:	90 83       	st	Z, r25
     a36:	08 95       	ret

00000a38 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a38:	e8 e0       	ldi	r30, 0x08	; 8
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	80 81       	ld	r24, Z
     a3e:	80 7f       	andi	r24, 0xF0	; 240
     a40:	80 83       	st	Z, r24
     a42:	08 95       	ret

00000a44 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     a4a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 38 24 	call	0x4870	; 0x4870 <malloc>
     a54:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a56:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     a5a:	20 97       	sbiw	r28, 0x00	; 0
     a5c:	11 f4       	brne	.+4      	; 0xa62 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     a5e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     a62:	ce 01       	movw	r24, r28
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
    if( pv )
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	41 f0       	breq	.+16     	; 0xa82 <vPortFree+0x18>
     a72:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     a74:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vTaskSuspendAll>
        {
            free( pv );
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     a7e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <xTaskResumeAll>
    }
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a88:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a8a:	03 96       	adiw	r24, 0x03	; 3
     a8c:	92 83       	std	Z+2, r25	; 0x02
     a8e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	3f ef       	ldi	r19, 0xFF	; 255
     a94:	34 83       	std	Z+4, r19	; 0x04
     a96:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a98:	96 83       	std	Z+6, r25	; 0x06
     a9a:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a9c:	90 87       	std	Z+8, r25	; 0x08
     a9e:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     aa0:	10 82       	st	Z, r1
     aa2:	08 95       	ret

00000aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     aa4:	fc 01       	movw	r30, r24
     aa6:	11 86       	std	Z+9, r1	; 0x09
     aa8:	10 86       	std	Z+8, r1	; 0x08
     aaa:	08 95       	ret

00000aac <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	9c 01       	movw	r18, r24
     ab2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     ab4:	dc 01       	movw	r26, r24
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	cd 91       	ld	r28, X+
     aba:	dc 91       	ld	r29, X
     abc:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     abe:	d3 83       	std	Z+3, r29	; 0x03
     ac0:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	95 83       	std	Z+5, r25	; 0x05
     ac8:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     aca:	8c 81       	ldd	r24, Y+4	; 0x04
     acc:	9d 81       	ldd	r25, Y+5	; 0x05
     ace:	dc 01       	movw	r26, r24
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	7c 93       	st	X, r23
     ad4:	6e 93       	st	-X, r22
     ad6:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     ad8:	7d 83       	std	Y+5, r23	; 0x05
     ada:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     adc:	31 87       	std	Z+9, r19	; 0x09
     ade:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     ae0:	f9 01       	movw	r30, r18
     ae2:	80 81       	ld	r24, Z
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 83       	st	Z, r24
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     af4:	48 81       	ld	r20, Y
     af6:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     af8:	4f 3f       	cpi	r20, 0xFF	; 255
     afa:	2f ef       	ldi	r18, 0xFF	; 255
     afc:	52 07       	cpc	r21, r18
     afe:	21 f4       	brne	.+8      	; 0xb08 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b00:	fc 01       	movw	r30, r24
     b02:	a7 81       	ldd	r26, Z+7	; 0x07
     b04:	b0 85       	ldd	r27, Z+8	; 0x08
     b06:	0d c0       	rjmp	.+26     	; 0xb22 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b08:	dc 01       	movw	r26, r24
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <vListInsert+0x22>
     b0e:	df 01       	movw	r26, r30
     b10:	12 96       	adiw	r26, 0x02	; 2
     b12:	ed 91       	ld	r30, X+
     b14:	fc 91       	ld	r31, X
     b16:	13 97       	sbiw	r26, 0x03	; 3
     b18:	20 81       	ld	r18, Z
     b1a:	31 81       	ldd	r19, Z+1	; 0x01
     b1c:	42 17       	cp	r20, r18
     b1e:	53 07       	cpc	r21, r19
     b20:	b0 f7       	brcc	.-20     	; 0xb0e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	13 97       	sbiw	r26, 0x03	; 3
     b2a:	fb 83       	std	Y+3, r31	; 0x03
     b2c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b2e:	d5 83       	std	Z+5, r29	; 0x05
     b30:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     b32:	bd 83       	std	Y+5, r27	; 0x05
     b34:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	dc 93       	st	X, r29
     b3a:	ce 93       	st	-X, r28
     b3c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     b3e:	99 87       	std	Y+9, r25	; 0x09
     b40:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     b42:	fc 01       	movw	r30, r24
     b44:	20 81       	ld	r18, Z
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 83       	st	Z, r18
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b56:	a0 85       	ldd	r26, Z+8	; 0x08
     b58:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b5a:	c2 81       	ldd	r28, Z+2	; 0x02
     b5c:	d3 81       	ldd	r29, Z+3	; 0x03
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	95 81       	ldd	r25, Z+5	; 0x05
     b62:	9d 83       	std	Y+5, r25	; 0x05
     b64:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b66:	c4 81       	ldd	r28, Z+4	; 0x04
     b68:	d5 81       	ldd	r29, Z+5	; 0x05
     b6a:	82 81       	ldd	r24, Z+2	; 0x02
     b6c:	93 81       	ldd	r25, Z+3	; 0x03
     b6e:	9b 83       	std	Y+3, r25	; 0x03
     b70:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b72:	11 96       	adiw	r26, 0x01	; 1
     b74:	8d 91       	ld	r24, X+
     b76:	9c 91       	ld	r25, X
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	e8 17       	cp	r30, r24
     b7c:	f9 07       	cpc	r31, r25
     b7e:	31 f4       	brne	.+12     	; 0xb8c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b80:	84 81       	ldd	r24, Z+4	; 0x04
     b82:	95 81       	ldd	r25, Z+5	; 0x05
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	9c 93       	st	X, r25
     b88:	8e 93       	st	-X, r24
     b8a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b8c:	11 86       	std	Z+9, r1	; 0x09
     b8e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b90:	8c 91       	ld	r24, X
     b92:	81 50       	subi	r24, 0x01	; 1
     b94:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b96:	8c 91       	ld	r24, X
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b9e:	31 e1       	ldi	r19, 0x11	; 17
     ba0:	fc 01       	movw	r30, r24
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	22 e2       	ldi	r18, 0x22	; 34
     ba8:	20 83       	st	Z, r18
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	a3 e3       	ldi	r26, 0x33	; 51
     bae:	a0 83       	st	Z, r26
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	60 83       	st	Z, r22
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	70 83       	st	Z, r23
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	10 82       	st	Z, r1
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	10 82       	st	Z, r1
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	60 e8       	ldi	r22, 0x80	; 128
     bc4:	60 83       	st	Z, r22
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	10 82       	st	Z, r1
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	10 82       	st	Z, r1
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	10 82       	st	Z, r1
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	62 e0       	ldi	r22, 0x02	; 2
     bd6:	60 83       	st	Z, r22
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	63 e0       	ldi	r22, 0x03	; 3
     bdc:	60 83       	st	Z, r22
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	64 e0       	ldi	r22, 0x04	; 4
     be2:	60 83       	st	Z, r22
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	60 83       	st	Z, r22
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	66 e0       	ldi	r22, 0x06	; 6
     bee:	60 83       	st	Z, r22
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	67 e0       	ldi	r22, 0x07	; 7
     bf4:	60 83       	st	Z, r22
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	68 e0       	ldi	r22, 0x08	; 8
     bfa:	60 83       	st	Z, r22
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	69 e0       	ldi	r22, 0x09	; 9
     c00:	60 83       	st	Z, r22
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	60 e1       	ldi	r22, 0x10	; 16
     c06:	60 83       	st	Z, r22
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	30 83       	st	Z, r19
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	32 e1       	ldi	r19, 0x12	; 18
     c10:	30 83       	st	Z, r19
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	33 e1       	ldi	r19, 0x13	; 19
     c16:	30 83       	st	Z, r19
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	34 e1       	ldi	r19, 0x14	; 20
     c1c:	30 83       	st	Z, r19
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	35 e1       	ldi	r19, 0x15	; 21
     c22:	30 83       	st	Z, r19
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	36 e1       	ldi	r19, 0x16	; 22
     c28:	30 83       	st	Z, r19
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	37 e1       	ldi	r19, 0x17	; 23
     c2e:	30 83       	st	Z, r19
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	38 e1       	ldi	r19, 0x18	; 24
     c34:	30 83       	st	Z, r19
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	39 e1       	ldi	r19, 0x19	; 25
     c3a:	30 83       	st	Z, r19
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	30 e2       	ldi	r19, 0x20	; 32
     c40:	30 83       	st	Z, r19
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	31 e2       	ldi	r19, 0x21	; 33
     c46:	30 83       	st	Z, r19
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	20 83       	st	Z, r18
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	23 e2       	ldi	r18, 0x23	; 35
     c50:	20 83       	st	Z, r18
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	40 83       	st	Z, r20
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	50 83       	st	Z, r21
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	26 e2       	ldi	r18, 0x26	; 38
     c5e:	20 83       	st	Z, r18
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	27 e2       	ldi	r18, 0x27	; 39
     c64:	20 83       	st	Z, r18
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	28 e2       	ldi	r18, 0x28	; 40
     c6a:	20 83       	st	Z, r18
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	29 e2       	ldi	r18, 0x29	; 41
     c70:	20 83       	st	Z, r18
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	20 e3       	ldi	r18, 0x30	; 48
     c76:	20 83       	st	Z, r18
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	21 e3       	ldi	r18, 0x31	; 49
     c7c:	20 83       	st	Z, r18
     c7e:	89 97       	sbiw	r24, 0x29	; 41
     c80:	08 95       	ret

00000c82 <xPortStartScheduler>:
     c82:	a8 95       	wdr
     c84:	90 ec       	ldi	r25, 0xC0	; 192
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	a8 95       	wdr
     c8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c98:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
     c9c:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
     ca0:	cd 91       	ld	r28, X+
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	dd 91       	ld	r29, X+
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	bf 91       	pop	r27
     cb2:	af 91       	pop	r26
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	7f 91       	pop	r23
     cba:	6f 91       	pop	r22
     cbc:	5f 91       	pop	r21
     cbe:	4f 91       	pop	r20
     cc0:	3f 91       	pop	r19
     cc2:	2f 91       	pop	r18
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	7f 90       	pop	r7
     cda:	6f 90       	pop	r6
     cdc:	5f 90       	pop	r5
     cde:	4f 90       	pop	r4
     ce0:	3f 90       	pop	r3
     ce2:	2f 90       	pop	r2
     ce4:	1f 90       	pop	r1
     ce6:	0f 90       	pop	r0
     ce8:	0c be       	out	0x3c, r0	; 60
     cea:	0f 90       	pop	r0
     cec:	0b be       	out	0x3b, r0	; 59
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	0f 90       	pop	r0
     cf4:	08 95       	ret
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	08 95       	ret

00000cfa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     cfa:	0f 92       	push	r0
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	0f 92       	push	r0
     d02:	0b b6       	in	r0, 0x3b	; 59
     d04:	0f 92       	push	r0
     d06:	0c b6       	in	r0, 0x3c	; 60
     d08:	0f 92       	push	r0
     d0a:	1f 92       	push	r1
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 92       	push	r2
     d10:	3f 92       	push	r3
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
     d4e:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
     d52:	0d b6       	in	r0, 0x3d	; 61
     d54:	0d 92       	st	X+, r0
     d56:	0e b6       	in	r0, 0x3e	; 62
     d58:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     d5a:	0e 94 18 10 	call	0x2030	; 0x2030 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     d5e:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
     d62:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
     d66:	cd 91       	ld	r28, X+
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	dd 91       	ld	r29, X+
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	ff 91       	pop	r31
     d70:	ef 91       	pop	r30
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	bf 91       	pop	r27
     d78:	af 91       	pop	r26
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	7f 91       	pop	r23
     d80:	6f 91       	pop	r22
     d82:	5f 91       	pop	r21
     d84:	4f 91       	pop	r20
     d86:	3f 91       	pop	r19
     d88:	2f 91       	pop	r18
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	bf 90       	pop	r11
     d98:	af 90       	pop	r10
     d9a:	9f 90       	pop	r9
     d9c:	8f 90       	pop	r8
     d9e:	7f 90       	pop	r7
     da0:	6f 90       	pop	r6
     da2:	5f 90       	pop	r5
     da4:	4f 90       	pop	r4
     da6:	3f 90       	pop	r3
     da8:	2f 90       	pop	r2
     daa:	1f 90       	pop	r1
     dac:	0f 90       	pop	r0
     dae:	0c be       	out	0x3c, r0	; 60
     db0:	0f 90       	pop	r0
     db2:	0b be       	out	0x3b, r0	; 59
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dba:	08 95       	ret

00000dbc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	0f 92       	push	r0
     dc4:	0b b6       	in	r0, 0x3b	; 59
     dc6:	0f 92       	push	r0
     dc8:	0c b6       	in	r0, 0x3c	; 60
     dca:	0f 92       	push	r0
     dcc:	1f 92       	push	r1
     dce:	11 24       	eor	r1, r1
     dd0:	2f 92       	push	r2
     dd2:	3f 92       	push	r3
     dd4:	4f 92       	push	r4
     dd6:	5f 92       	push	r5
     dd8:	6f 92       	push	r6
     dda:	7f 92       	push	r7
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
     e10:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
     e14:	0d b6       	in	r0, 0x3d	; 61
     e16:	0d 92       	st	X+, r0
     e18:	0e b6       	in	r0, 0x3e	; 62
     e1a:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     e1c:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     e1e:	c0 d7       	rcall	.+3968   	; 0x1da0 <xTaskIncrementTick>
     e20:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e22:	0e 94 18 10 	call	0x2030	; 0x2030 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     e26:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
     e2a:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
     e2e:	cd 91       	ld	r28, X+
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	dd 91       	ld	r29, X+
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	bf 90       	pop	r11
     e60:	af 90       	pop	r10
     e62:	9f 90       	pop	r9
     e64:	8f 90       	pop	r8
     e66:	7f 90       	pop	r7
     e68:	6f 90       	pop	r6
     e6a:	5f 90       	pop	r5
     e6c:	4f 90       	pop	r4
     e6e:	3f 90       	pop	r3
     e70:	2f 90       	pop	r2
     e72:	1f 90       	pop	r1
     e74:	0f 90       	pop	r0
     e76:	0c be       	out	0x3c, r0	; 60
     e78:	0f 90       	pop	r0
     e7a:	0b be       	out	0x3b, r0	; 59
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e82:	08 95       	ret

00000e84 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e84:	9b df       	rcall	.-202    	; 0xdbc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e86:	18 95       	reti

00000e88 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	0f 92       	push	r0
     e8e:	fc 01       	movw	r30, r24
     e90:	92 8d       	ldd	r25, Z+26	; 0x1a
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	91 11       	cpse	r25, r1
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <prvCopyDataToQueue>:
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
     ea8:	04 2f       	mov	r16, r20
     eaa:	1a 8d       	ldd	r17, Y+26	; 0x1a
     eac:	4c 8d       	ldd	r20, Y+28	; 0x1c
     eae:	41 11       	cpse	r20, r1
     eb0:	0c c0       	rjmp	.+24     	; 0xeca <prvCopyDataToQueue+0x2c>
     eb2:	88 81       	ld	r24, Y
     eb4:	99 81       	ldd	r25, Y+1	; 0x01
     eb6:	89 2b       	or	r24, r25
     eb8:	09 f0       	breq	.+2      	; 0xebc <prvCopyDataToQueue+0x1e>
     eba:	42 c0       	rjmp	.+132    	; 0xf40 <prvCopyDataToQueue+0xa2>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <xTaskPriorityDisinherit>
     ec4:	1d 82       	std	Y+5, r1	; 0x05
     ec6:	1c 82       	std	Y+4, r1	; 0x04
     ec8:	42 c0       	rjmp	.+132    	; 0xf4e <prvCopyDataToQueue+0xb0>
     eca:	01 11       	cpse	r16, r1
     ecc:	17 c0       	rjmp	.+46     	; 0xefc <prvCopyDataToQueue+0x5e>
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	9b 81       	ldd	r25, Y+3	; 0x03
     ed4:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
     ed8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	82 0f       	add	r24, r18
     ee0:	91 1d       	adc	r25, r1
     ee2:	9b 83       	std	Y+3, r25	; 0x03
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	2c 81       	ldd	r18, Y+4	; 0x04
     ee8:	3d 81       	ldd	r19, Y+5	; 0x05
     eea:	82 17       	cp	r24, r18
     eec:	93 07       	cpc	r25, r19
     eee:	50 f1       	brcs	.+84     	; 0xf44 <prvCopyDataToQueue+0xa6>
     ef0:	88 81       	ld	r24, Y
     ef2:	99 81       	ldd	r25, Y+1	; 0x01
     ef4:	9b 83       	std	Y+3, r25	; 0x03
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	29 c0       	rjmp	.+82     	; 0xf4e <prvCopyDataToQueue+0xb0>
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
     f06:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	91 95       	neg	r25
     f0c:	81 95       	neg	r24
     f0e:	91 09       	sbc	r25, r1
     f10:	2e 81       	ldd	r18, Y+6	; 0x06
     f12:	3f 81       	ldd	r19, Y+7	; 0x07
     f14:	28 0f       	add	r18, r24
     f16:	39 1f       	adc	r19, r25
     f18:	3f 83       	std	Y+7, r19	; 0x07
     f1a:	2e 83       	std	Y+6, r18	; 0x06
     f1c:	48 81       	ld	r20, Y
     f1e:	59 81       	ldd	r21, Y+1	; 0x01
     f20:	24 17       	cp	r18, r20
     f22:	35 07       	cpc	r19, r21
     f24:	30 f4       	brcc	.+12     	; 0xf32 <prvCopyDataToQueue+0x94>
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	9f 83       	std	Y+7, r25	; 0x07
     f30:	8e 83       	std	Y+6, r24	; 0x06
     f32:	02 30       	cpi	r16, 0x02	; 2
     f34:	49 f4       	brne	.+18     	; 0xf48 <prvCopyDataToQueue+0xaa>
     f36:	11 23       	and	r17, r17
     f38:	49 f0       	breq	.+18     	; 0xf4c <prvCopyDataToQueue+0xae>
     f3a:	11 50       	subi	r17, 0x01	; 1
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <prvCopyDataToQueue+0xb0>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <prvCopyDataToQueue+0xb0>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <prvCopyDataToQueue+0xb0>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <prvCopyDataToQueue+0xb0>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	1f 5f       	subi	r17, 0xFF	; 255
     f50:	1a 8f       	std	Y+26, r17	; 0x1a
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <prvCopyDataFromQueue>:
     f5c:	fc 01       	movw	r30, r24
     f5e:	44 8d       	ldd	r20, Z+28	; 0x1c
     f60:	44 23       	and	r20, r20
     f62:	a9 f0       	breq	.+42     	; 0xf8e <prvCopyDataFromQueue+0x32>
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	26 81       	ldd	r18, Z+6	; 0x06
     f68:	37 81       	ldd	r19, Z+7	; 0x07
     f6a:	24 0f       	add	r18, r20
     f6c:	35 1f       	adc	r19, r21
     f6e:	37 83       	std	Z+7, r19	; 0x07
     f70:	26 83       	std	Z+6, r18	; 0x06
     f72:	84 81       	ldd	r24, Z+4	; 0x04
     f74:	95 81       	ldd	r25, Z+5	; 0x05
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	20 f0       	brcs	.+8      	; 0xf84 <prvCopyDataFromQueue+0x28>
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	97 83       	std	Z+7, r25	; 0x07
     f82:	86 83       	std	Z+6, r24	; 0x06
     f84:	cb 01       	movw	r24, r22
     f86:	66 81       	ldd	r22, Z+6	; 0x06
     f88:	77 81       	ldd	r23, Z+7	; 0x07
     f8a:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <memcpy>
     f8e:	08 95       	ret

00000f90 <prvUnlockQueue>:
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	8c 01       	movw	r16, r24
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	0f 92       	push	r0
     fa2:	fc 01       	movw	r30, r24
     fa4:	c6 8d       	ldd	r28, Z+30	; 0x1e
     fa6:	1c 16       	cp	r1, r28
     fa8:	ac f4       	brge	.+42     	; 0xfd4 <prvUnlockQueue+0x44>
     faa:	81 89       	ldd	r24, Z+17	; 0x11
     fac:	81 11       	cpse	r24, r1
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <prvUnlockQueue+0x2c>
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <prvUnlockQueue+0x44>
     fb2:	f8 01       	movw	r30, r16
     fb4:	81 89       	ldd	r24, Z+17	; 0x11
     fb6:	81 11       	cpse	r24, r1
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <prvUnlockQueue+0x34>
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <prvUnlockQueue+0x44>
     fbc:	78 01       	movw	r14, r16
     fbe:	f1 e1       	ldi	r31, 0x11	; 17
     fc0:	ef 0e       	add	r14, r31
     fc2:	f1 1c       	adc	r15, r1
     fc4:	c7 01       	movw	r24, r14
     fc6:	0e 94 cf 10 	call	0x219e	; 0x219e <xTaskRemoveFromEventList>
     fca:	81 11       	cpse	r24, r1
     fcc:	0e 94 57 11 	call	0x22ae	; 0x22ae <vTaskMissedYield>
     fd0:	c1 50       	subi	r28, 0x01	; 1
     fd2:	79 f7       	brne	.-34     	; 0xfb2 <prvUnlockQueue+0x22>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	f8 01       	movw	r30, r16
     fd8:	86 8f       	std	Z+30, r24	; 0x1e
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	c5 8d       	ldd	r28, Z+29	; 0x1d
     fe6:	1c 16       	cp	r1, r28
     fe8:	ac f4       	brge	.+42     	; 0x1014 <prvUnlockQueue+0x84>
     fea:	80 85       	ldd	r24, Z+8	; 0x08
     fec:	81 11       	cpse	r24, r1
     fee:	06 c0       	rjmp	.+12     	; 0xffc <prvUnlockQueue+0x6c>
     ff0:	11 c0       	rjmp	.+34     	; 0x1014 <prvUnlockQueue+0x84>
     ff2:	f8 01       	movw	r30, r16
     ff4:	80 85       	ldd	r24, Z+8	; 0x08
     ff6:	81 11       	cpse	r24, r1
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <prvUnlockQueue+0x74>
     ffa:	0c c0       	rjmp	.+24     	; 0x1014 <prvUnlockQueue+0x84>
     ffc:	78 01       	movw	r14, r16
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	ef 0e       	add	r14, r31
    1002:	f1 1c       	adc	r15, r1
    1004:	c7 01       	movw	r24, r14
    1006:	0e 94 cf 10 	call	0x219e	; 0x219e <xTaskRemoveFromEventList>
    100a:	81 11       	cpse	r24, r1
    100c:	0e 94 57 11 	call	0x22ae	; 0x22ae <vTaskMissedYield>
    1010:	c1 50       	subi	r28, 0x01	; 1
    1012:	79 f7       	brne	.-34     	; 0xff2 <prvUnlockQueue+0x62>
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	f8 01       	movw	r30, r16
    1018:	85 8f       	std	Z+29, r24	; 0x1d
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	08 95       	ret

0000102a <xQueueGenericReset>:
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	0f 92       	push	r0
    1036:	e8 81       	ld	r30, Y
    1038:	f9 81       	ldd	r31, Y+1	; 0x01
    103a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	82 9f       	mul	r24, r18
    1044:	a0 01       	movw	r20, r0
    1046:	83 9f       	mul	r24, r19
    1048:	50 0d       	add	r21, r0
    104a:	92 9f       	mul	r25, r18
    104c:	50 0d       	add	r21, r0
    104e:	11 24       	eor	r1, r1
    1050:	4e 0f       	add	r20, r30
    1052:	5f 1f       	adc	r21, r31
    1054:	5d 83       	std	Y+5, r21	; 0x05
    1056:	4c 83       	std	Y+4, r20	; 0x04
    1058:	1a 8e       	std	Y+26, r1	; 0x1a
    105a:	fb 83       	std	Y+3, r31	; 0x03
    105c:	ea 83       	std	Y+2, r30	; 0x02
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	82 9f       	mul	r24, r18
    1062:	a0 01       	movw	r20, r0
    1064:	83 9f       	mul	r24, r19
    1066:	50 0d       	add	r21, r0
    1068:	92 9f       	mul	r25, r18
    106a:	50 0d       	add	r21, r0
    106c:	11 24       	eor	r1, r1
    106e:	cf 01       	movw	r24, r30
    1070:	84 0f       	add	r24, r20
    1072:	95 1f       	adc	r25, r21
    1074:	9f 83       	std	Y+7, r25	; 0x07
    1076:	8e 83       	std	Y+6, r24	; 0x06
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	8d 8f       	std	Y+29, r24	; 0x1d
    107c:	8e 8f       	std	Y+30, r24	; 0x1e
    107e:	61 11       	cpse	r22, r1
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <xQueueGenericReset+0x6e>
    1082:	88 85       	ldd	r24, Y+8	; 0x08
    1084:	88 23       	and	r24, r24
    1086:	71 f0       	breq	.+28     	; 0x10a4 <xQueueGenericReset+0x7a>
    1088:	ce 01       	movw	r24, r28
    108a:	08 96       	adiw	r24, 0x08	; 8
    108c:	0e 94 cf 10 	call	0x219e	; 0x219e <xTaskRemoveFromEventList>
    1090:	88 23       	and	r24, r24
    1092:	41 f0       	breq	.+16     	; 0x10a4 <xQueueGenericReset+0x7a>
    1094:	32 de       	rcall	.-924    	; 0xcfa <vPortYield>
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <xQueueGenericReset+0x7a>
    1098:	ce 01       	movw	r24, r28
    109a:	08 96       	adiw	r24, 0x08	; 8
    109c:	f5 dc       	rcall	.-1558   	; 0xa88 <vListInitialise>
    109e:	ce 01       	movw	r24, r28
    10a0:	41 96       	adiw	r24, 0x11	; 17
    10a2:	f2 dc       	rcall	.-1564   	; 0xa88 <vListInitialise>
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <xQueueGenericCreate>:
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	08 2f       	mov	r16, r24
    10bc:	16 2f       	mov	r17, r22
    10be:	f4 2e       	mov	r15, r20
    10c0:	66 23       	and	r22, r22
    10c2:	b9 f0       	breq	.+46     	; 0x10f2 <xQueueGenericCreate+0x42>
    10c4:	86 9f       	mul	r24, r22
    10c6:	c0 01       	movw	r24, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	81 96       	adiw	r24, 0x21	; 33
    10cc:	bb dc       	rcall	.-1674   	; 0xa44 <pvPortMalloc>
    10ce:	ec 01       	movw	r28, r24
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	41 f4       	brne	.+16     	; 0x10e4 <xQueueGenericCreate+0x34>
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <xQueueGenericCreate+0x4e>
    10d6:	0b 8f       	std	Y+27, r16	; 0x1b
    10d8:	1c 8f       	std	Y+28, r17	; 0x1c
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	ce 01       	movw	r24, r28
    10de:	a5 df       	rcall	.-182    	; 0x102a <xQueueGenericReset>
    10e0:	f8 a2       	std	Y+32, r15	; 0x20
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <xQueueGenericCreate+0x4e>
    10e4:	81 96       	adiw	r24, 0x21	; 33
    10e6:	99 83       	std	Y+1, r25	; 0x01
    10e8:	88 83       	st	Y, r24
    10ea:	f5 cf       	rjmp	.-22     	; 0x10d6 <xQueueGenericCreate+0x26>
    10ec:	d9 83       	std	Y+1, r29	; 0x01
    10ee:	c8 83       	st	Y, r28
    10f0:	f2 cf       	rjmp	.-28     	; 0x10d6 <xQueueGenericCreate+0x26>
    10f2:	81 e2       	ldi	r24, 0x21	; 33
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a6 dc       	rcall	.-1716   	; 0xa44 <pvPortMalloc>
    10f8:	ec 01       	movw	r28, r24
    10fa:	89 2b       	or	r24, r25
    10fc:	b9 f7       	brne	.-18     	; 0x10ec <xQueueGenericCreate+0x3c>
    10fe:	ce 01       	movw	r24, r28
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	08 95       	ret

0000110c <xQueueGenericSend>:
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <xQueueGenericSend+0x18>
    1124:	1f 92       	push	r1
    1126:	1f 92       	push	r1
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	8c 01       	movw	r16, r24
    112e:	6b 01       	movw	r12, r22
    1130:	5d 83       	std	Y+5, r21	; 0x05
    1132:	4c 83       	std	Y+4, r20	; 0x04
    1134:	a2 2e       	mov	r10, r18
    1136:	b1 2c       	mov	r11, r1
    1138:	99 24       	eor	r9, r9
    113a:	93 94       	inc	r9
    113c:	7c 01       	movw	r14, r24
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	e8 0e       	add	r14, r24
    1142:	f1 1c       	adc	r15, r1
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	0f 92       	push	r0
    114a:	f8 01       	movw	r30, r16
    114c:	92 8d       	ldd	r25, Z+26	; 0x1a
    114e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1150:	98 17       	cp	r25, r24
    1152:	18 f0       	brcs	.+6      	; 0x115a <xQueueGenericSend+0x4e>
    1154:	f2 e0       	ldi	r31, 0x02	; 2
    1156:	af 12       	cpse	r10, r31
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <xQueueGenericSend+0x7a>
    115a:	4a 2d       	mov	r20, r10
    115c:	b6 01       	movw	r22, r12
    115e:	c8 01       	movw	r24, r16
    1160:	9e de       	rcall	.-708    	; 0xe9e <prvCopyDataToQueue>
    1162:	f8 01       	movw	r30, r16
    1164:	91 89       	ldd	r25, Z+17	; 0x11
    1166:	99 23       	and	r25, r25
    1168:	41 f0       	breq	.+16     	; 0x117a <xQueueGenericSend+0x6e>
    116a:	c8 01       	movw	r24, r16
    116c:	41 96       	adiw	r24, 0x11	; 17
    116e:	0e 94 cf 10 	call	0x219e	; 0x219e <xTaskRemoveFromEventList>
    1172:	88 23       	and	r24, r24
    1174:	21 f0       	breq	.+8      	; 0x117e <xQueueGenericSend+0x72>
    1176:	c1 dd       	rcall	.-1150   	; 0xcfa <vPortYield>
    1178:	02 c0       	rjmp	.+4      	; 0x117e <xQueueGenericSend+0x72>
    117a:	81 11       	cpse	r24, r1
    117c:	be dd       	rcall	.-1156   	; 0xcfa <vPortYield>
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	47 c0       	rjmp	.+142    	; 0x1214 <xQueueGenericSend+0x108>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	89 2b       	or	r24, r25
    118c:	21 f4       	brne	.+8      	; 0x1196 <xQueueGenericSend+0x8a>
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <xQueueGenericSend+0x108>
    1196:	b1 10       	cpse	r11, r1
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <xQueueGenericSend+0x98>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 17 11 	call	0x222e	; 0x222e <vTaskInternalSetTimeOutState>
    11a2:	b9 2c       	mov	r11, r9
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	eb d5       	rcall	.+3030   	; 0x1d80 <vTaskSuspendAll>
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	0f 92       	push	r0
    11b0:	f8 01       	movw	r30, r16
    11b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	09 f4       	brne	.+2      	; 0x11ba <xQueueGenericSend+0xae>
    11b8:	15 8e       	std	Z+29, r1	; 0x1d
    11ba:	f8 01       	movw	r30, r16
    11bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <xQueueGenericSend+0xb8>
    11c2:	16 8e       	std	Z+30, r1	; 0x1e
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	be 01       	movw	r22, r28
    11ca:	6c 5f       	subi	r22, 0xFC	; 252
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 22 11 	call	0x2244	; 0x2244 <xTaskCheckForTimeOut>
    11d6:	81 11       	cpse	r24, r1
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <xQueueGenericSend+0x100>
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	f8 01       	movw	r30, r16
    11e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    11e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	98 13       	cpse	r25, r24
    11ec:	0b c0       	rjmp	.+22     	; 0x1204 <xQueueGenericSend+0xf8>
    11ee:	6c 81       	ldd	r22, Y+4	; 0x04
    11f0:	7d 81       	ldd	r23, Y+5	; 0x05
    11f2:	c7 01       	movw	r24, r14
    11f4:	ab d7       	rcall	.+3926   	; 0x214c <vTaskPlaceOnEventList>
    11f6:	c8 01       	movw	r24, r16
    11f8:	cb de       	rcall	.-618    	; 0xf90 <prvUnlockQueue>
    11fa:	8c d6       	rcall	.+3352   	; 0x1f14 <xTaskResumeAll>
    11fc:	81 11       	cpse	r24, r1
    11fe:	a2 cf       	rjmp	.-188    	; 0x1144 <xQueueGenericSend+0x38>
    1200:	7c dd       	rcall	.-1288   	; 0xcfa <vPortYield>
    1202:	a0 cf       	rjmp	.-192    	; 0x1144 <xQueueGenericSend+0x38>
    1204:	c8 01       	movw	r24, r16
    1206:	c4 de       	rcall	.-632    	; 0xf90 <prvUnlockQueue>
    1208:	85 d6       	rcall	.+3338   	; 0x1f14 <xTaskResumeAll>
    120a:	9c cf       	rjmp	.-200    	; 0x1144 <xQueueGenericSend+0x38>
    120c:	c8 01       	movw	r24, r16
    120e:	c0 de       	rcall	.-640    	; 0xf90 <prvUnlockQueue>
    1210:	81 d6       	rcall	.+3330   	; 0x1f14 <xTaskResumeAll>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	08 95       	ret

00001236 <xQueueCreateMutex>:
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	48 2f       	mov	r20, r24
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	37 df       	rcall	.-402    	; 0x10b0 <xQueueGenericCreate>
    1242:	ec 01       	movw	r28, r24
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	59 f0       	breq	.+22     	; 0x125e <xQueueCreateMutex+0x28>
    1248:	1d 82       	std	Y+5, r1	; 0x05
    124a:	1c 82       	std	Y+4, r1	; 0x04
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	18 82       	st	Y, r1
    1250:	1e 82       	std	Y+6, r1	; 0x06
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	57 df       	rcall	.-338    	; 0x110c <xQueueGenericSend>
    125e:	ce 01       	movw	r24, r28
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <xQueueGenericSendFromISR>:
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	8a 01       	movw	r16, r20
    1274:	fc 01       	movw	r30, r24
    1276:	52 8d       	ldd	r21, Z+26	; 0x1a
    1278:	33 8d       	ldd	r19, Z+27	; 0x1b
    127a:	53 17       	cp	r21, r19
    127c:	10 f0       	brcs	.+4      	; 0x1282 <xQueueGenericSendFromISR+0x1c>
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	e1 f4       	brne	.+56     	; 0x12ba <xQueueGenericSendFromISR+0x54>
    1282:	42 2f       	mov	r20, r18
    1284:	78 01       	movw	r14, r16
    1286:	ec 01       	movw	r28, r24
    1288:	1e 8d       	ldd	r17, Y+30	; 0x1e
    128a:	09 de       	rcall	.-1006   	; 0xe9e <prvCopyDataToQueue>
    128c:	1f 3f       	cpi	r17, 0xFF	; 255
    128e:	79 f4       	brne	.+30     	; 0x12ae <xQueueGenericSendFromISR+0x48>
    1290:	89 89       	ldd	r24, Y+17	; 0x11
    1292:	88 23       	and	r24, r24
    1294:	a1 f0       	breq	.+40     	; 0x12be <xQueueGenericSendFromISR+0x58>
    1296:	ce 01       	movw	r24, r28
    1298:	41 96       	adiw	r24, 0x11	; 17
    129a:	81 d7       	rcall	.+3842   	; 0x219e <xTaskRemoveFromEventList>
    129c:	88 23       	and	r24, r24
    129e:	89 f0       	breq	.+34     	; 0x12c2 <xQueueGenericSendFromISR+0x5c>
    12a0:	e1 14       	cp	r14, r1
    12a2:	f1 04       	cpc	r15, r1
    12a4:	81 f0       	breq	.+32     	; 0x12c6 <xQueueGenericSendFromISR+0x60>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	f7 01       	movw	r30, r14
    12aa:	80 83       	st	Z, r24
    12ac:	0d c0       	rjmp	.+26     	; 0x12c8 <xQueueGenericSendFromISR+0x62>
    12ae:	ff 24       	eor	r15, r15
    12b0:	f3 94       	inc	r15
    12b2:	f1 0e       	add	r15, r17
    12b4:	fe 8e       	std	Y+30, r15	; 0x1e
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <xQueueGenericSendFromISR+0x62>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <xQueueGenericSendFromISR+0x62>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <xQueueGenericSendFromISR+0x62>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <xQueueGenericSendFromISR+0x62>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <xQueueReceive>:
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <xQueueReceive+0x18>
    12ee:	1f 92       	push	r1
    12f0:	1f 92       	push	r1
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8c 01       	movw	r16, r24
    12f8:	5b 01       	movw	r10, r22
    12fa:	5d 83       	std	Y+5, r21	; 0x05
    12fc:	4c 83       	std	Y+4, r20	; 0x04
    12fe:	e1 2c       	mov	r14, r1
    1300:	99 24       	eor	r9, r9
    1302:	93 94       	inc	r9
    1304:	6c 01       	movw	r12, r24
    1306:	81 e1       	ldi	r24, 0x11	; 17
    1308:	c8 0e       	add	r12, r24
    130a:	d1 1c       	adc	r13, r1
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	0f 92       	push	r0
    1312:	f8 01       	movw	r30, r16
    1314:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1316:	ff 20       	and	r15, r15
    1318:	91 f0       	breq	.+36     	; 0x133e <xQueueReceive+0x68>
    131a:	b5 01       	movw	r22, r10
    131c:	c8 01       	movw	r24, r16
    131e:	1e de       	rcall	.-964    	; 0xf5c <prvCopyDataFromQueue>
    1320:	fa 94       	dec	r15
    1322:	f8 01       	movw	r30, r16
    1324:	f2 8e       	std	Z+26, r15	; 0x1a
    1326:	80 85       	ldd	r24, Z+8	; 0x08
    1328:	88 23       	and	r24, r24
    132a:	29 f0       	breq	.+10     	; 0x1336 <xQueueReceive+0x60>
    132c:	c8 01       	movw	r24, r16
    132e:	08 96       	adiw	r24, 0x08	; 8
    1330:	36 d7       	rcall	.+3692   	; 0x219e <xTaskRemoveFromEventList>
    1332:	81 11       	cpse	r24, r1
    1334:	e2 dc       	rcall	.-1596   	; 0xcfa <vPortYield>
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	44 c0       	rjmp	.+136    	; 0x13c6 <xQueueReceive+0xf0>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	89 2b       	or	r24, r25
    1344:	21 f4       	brne	.+8      	; 0x134e <xQueueReceive+0x78>
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	3c c0       	rjmp	.+120    	; 0x13c6 <xQueueReceive+0xf0>
    134e:	e1 10       	cpse	r14, r1
    1350:	04 c0       	rjmp	.+8      	; 0x135a <xQueueReceive+0x84>
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	6b d7       	rcall	.+3798   	; 0x222e <vTaskInternalSetTimeOutState>
    1358:	e9 2c       	mov	r14, r9
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	10 d5       	rcall	.+2592   	; 0x1d80 <vTaskSuspendAll>
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	0f 92       	push	r0
    1366:	f8 01       	movw	r30, r16
    1368:	85 8d       	ldd	r24, Z+29	; 0x1d
    136a:	8f 3f       	cpi	r24, 0xFF	; 255
    136c:	09 f4       	brne	.+2      	; 0x1370 <xQueueReceive+0x9a>
    136e:	15 8e       	std	Z+29, r1	; 0x1d
    1370:	f8 01       	movw	r30, r16
    1372:	86 8d       	ldd	r24, Z+30	; 0x1e
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	09 f4       	brne	.+2      	; 0x137a <xQueueReceive+0xa4>
    1378:	16 8e       	std	Z+30, r1	; 0x1e
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	be 01       	movw	r22, r28
    1380:	6c 5f       	subi	r22, 0xFC	; 252
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	5d d7       	rcall	.+3770   	; 0x2244 <xTaskCheckForTimeOut>
    138a:	81 11       	cpse	r24, r1
    138c:	13 c0       	rjmp	.+38     	; 0x13b4 <xQueueReceive+0xde>
    138e:	c8 01       	movw	r24, r16
    1390:	7b dd       	rcall	.-1290   	; 0xe88 <prvIsQueueEmpty>
    1392:	88 23       	and	r24, r24
    1394:	59 f0       	breq	.+22     	; 0x13ac <xQueueReceive+0xd6>
    1396:	6c 81       	ldd	r22, Y+4	; 0x04
    1398:	7d 81       	ldd	r23, Y+5	; 0x05
    139a:	c6 01       	movw	r24, r12
    139c:	d7 d6       	rcall	.+3502   	; 0x214c <vTaskPlaceOnEventList>
    139e:	c8 01       	movw	r24, r16
    13a0:	f7 dd       	rcall	.-1042   	; 0xf90 <prvUnlockQueue>
    13a2:	b8 d5       	rcall	.+2928   	; 0x1f14 <xTaskResumeAll>
    13a4:	81 11       	cpse	r24, r1
    13a6:	b2 cf       	rjmp	.-156    	; 0x130c <xQueueReceive+0x36>
    13a8:	a8 dc       	rcall	.-1712   	; 0xcfa <vPortYield>
    13aa:	b0 cf       	rjmp	.-160    	; 0x130c <xQueueReceive+0x36>
    13ac:	c8 01       	movw	r24, r16
    13ae:	f0 dd       	rcall	.-1056   	; 0xf90 <prvUnlockQueue>
    13b0:	b1 d5       	rcall	.+2914   	; 0x1f14 <xTaskResumeAll>
    13b2:	ac cf       	rjmp	.-168    	; 0x130c <xQueueReceive+0x36>
    13b4:	c8 01       	movw	r24, r16
    13b6:	ec dd       	rcall	.-1064   	; 0xf90 <prvUnlockQueue>
    13b8:	ad d5       	rcall	.+2906   	; 0x1f14 <xTaskResumeAll>
    13ba:	c8 01       	movw	r24, r16
    13bc:	65 dd       	rcall	.-1334   	; 0xe88 <prvIsQueueEmpty>
    13be:	88 23       	and	r24, r24
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <xQueueReceive+0xee>
    13c2:	a4 cf       	rjmp	.-184    	; 0x130c <xQueueReceive+0x36>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	08 95       	ret

000013e8 <xQueueSemaphoreTake>:
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <xQueueSemaphoreTake+0x14>
    13fc:	1f 92       	push	r1
    13fe:	1f 92       	push	r1
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	8c 01       	movw	r16, r24
    1406:	7d 83       	std	Y+5, r23	; 0x05
    1408:	6c 83       	std	Y+4, r22	; 0x04
    140a:	b1 2c       	mov	r11, r1
    140c:	d1 2c       	mov	r13, r1
    140e:	cc 24       	eor	r12, r12
    1410:	c3 94       	inc	r12
    1412:	7c 01       	movw	r14, r24
    1414:	81 e1       	ldi	r24, 0x11	; 17
    1416:	e8 0e       	add	r14, r24
    1418:	f1 1c       	adc	r15, r1
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	0f 92       	push	r0
    1420:	d8 01       	movw	r26, r16
    1422:	5a 96       	adiw	r26, 0x1a	; 26
    1424:	8c 91       	ld	r24, X
    1426:	5a 97       	sbiw	r26, 0x1a	; 26
    1428:	88 23       	and	r24, r24
    142a:	d9 f0       	breq	.+54     	; 0x1462 <xQueueSemaphoreTake+0x7a>
    142c:	81 50       	subi	r24, 0x01	; 1
    142e:	5a 96       	adiw	r26, 0x1a	; 26
    1430:	8c 93       	st	X, r24
    1432:	5a 97       	sbiw	r26, 0x1a	; 26
    1434:	8d 91       	ld	r24, X+
    1436:	9c 91       	ld	r25, X
    1438:	89 2b       	or	r24, r25
    143a:	29 f4       	brne	.+10     	; 0x1446 <xQueueSemaphoreTake+0x5e>
    143c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <pvTaskIncrementMutexHeldCount>
    1440:	f8 01       	movw	r30, r16
    1442:	95 83       	std	Z+5, r25	; 0x05
    1444:	84 83       	std	Z+4, r24	; 0x04
    1446:	d8 01       	movw	r26, r16
    1448:	18 96       	adiw	r26, 0x08	; 8
    144a:	8c 91       	ld	r24, X
    144c:	88 23       	and	r24, r24
    144e:	29 f0       	breq	.+10     	; 0x145a <xQueueSemaphoreTake+0x72>
    1450:	c8 01       	movw	r24, r16
    1452:	08 96       	adiw	r24, 0x08	; 8
    1454:	a4 d6       	rcall	.+3400   	; 0x219e <xTaskRemoveFromEventList>
    1456:	81 11       	cpse	r24, r1
    1458:	50 dc       	rcall	.-1888   	; 0xcfa <vPortYield>
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	70 c0       	rjmp	.+224    	; 0x1542 <xQueueSemaphoreTake+0x15a>
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	89 2b       	or	r24, r25
    1468:	21 f4       	brne	.+8      	; 0x1472 <xQueueSemaphoreTake+0x8a>
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	68 c0       	rjmp	.+208    	; 0x1542 <xQueueSemaphoreTake+0x15a>
    1472:	d1 10       	cpse	r13, r1
    1474:	04 c0       	rjmp	.+8      	; 0x147e <xQueueSemaphoreTake+0x96>
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	d9 d6       	rcall	.+3506   	; 0x222e <vTaskInternalSetTimeOutState>
    147c:	dc 2c       	mov	r13, r12
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	7e d4       	rcall	.+2300   	; 0x1d80 <vTaskSuspendAll>
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	0f 92       	push	r0
    148a:	f8 01       	movw	r30, r16
    148c:	85 8d       	ldd	r24, Z+29	; 0x1d
    148e:	8f 3f       	cpi	r24, 0xFF	; 255
    1490:	09 f4       	brne	.+2      	; 0x1494 <xQueueSemaphoreTake+0xac>
    1492:	15 8e       	std	Z+29, r1	; 0x1d
    1494:	d8 01       	movw	r26, r16
    1496:	5e 96       	adiw	r26, 0x1e	; 30
    1498:	8c 91       	ld	r24, X
    149a:	5e 97       	sbiw	r26, 0x1e	; 30
    149c:	8f 3f       	cpi	r24, 0xFF	; 255
    149e:	11 f4       	brne	.+4      	; 0x14a4 <xQueueSemaphoreTake+0xbc>
    14a0:	5e 96       	adiw	r26, 0x1e	; 30
    14a2:	1c 92       	st	X, r1
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	be 01       	movw	r22, r28
    14aa:	6c 5f       	subi	r22, 0xFC	; 252
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	c8 d6       	rcall	.+3472   	; 0x2244 <xTaskCheckForTimeOut>
    14b4:	81 11       	cpse	r24, r1
    14b6:	21 c0       	rjmp	.+66     	; 0x14fa <xQueueSemaphoreTake+0x112>
    14b8:	c8 01       	movw	r24, r16
    14ba:	e6 dc       	rcall	.-1588   	; 0xe88 <prvIsQueueEmpty>
    14bc:	88 23       	and	r24, r24
    14be:	c9 f0       	breq	.+50     	; 0x14f2 <xQueueSemaphoreTake+0x10a>
    14c0:	f8 01       	movw	r30, r16
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	89 2b       	or	r24, r25
    14c8:	49 f4       	brne	.+18     	; 0x14dc <xQueueSemaphoreTake+0xf4>
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	0f 92       	push	r0
    14d0:	84 81       	ldd	r24, Z+4	; 0x04
    14d2:	95 81       	ldd	r25, Z+5	; 0x05
    14d4:	03 d7       	rcall	.+3590   	; 0x22dc <xTaskPriorityInherit>
    14d6:	b8 2e       	mov	r11, r24
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	6c 81       	ldd	r22, Y+4	; 0x04
    14de:	7d 81       	ldd	r23, Y+5	; 0x05
    14e0:	c7 01       	movw	r24, r14
    14e2:	34 d6       	rcall	.+3176   	; 0x214c <vTaskPlaceOnEventList>
    14e4:	c8 01       	movw	r24, r16
    14e6:	54 dd       	rcall	.-1368   	; 0xf90 <prvUnlockQueue>
    14e8:	15 d5       	rcall	.+2602   	; 0x1f14 <xTaskResumeAll>
    14ea:	81 11       	cpse	r24, r1
    14ec:	96 cf       	rjmp	.-212    	; 0x141a <xQueueSemaphoreTake+0x32>
    14ee:	05 dc       	rcall	.-2038   	; 0xcfa <vPortYield>
    14f0:	94 cf       	rjmp	.-216    	; 0x141a <xQueueSemaphoreTake+0x32>
    14f2:	c8 01       	movw	r24, r16
    14f4:	4d dd       	rcall	.-1382   	; 0xf90 <prvUnlockQueue>
    14f6:	0e d5       	rcall	.+2588   	; 0x1f14 <xTaskResumeAll>
    14f8:	90 cf       	rjmp	.-224    	; 0x141a <xQueueSemaphoreTake+0x32>
    14fa:	c8 01       	movw	r24, r16
    14fc:	49 dd       	rcall	.-1390   	; 0xf90 <prvUnlockQueue>
    14fe:	0a d5       	rcall	.+2580   	; 0x1f14 <xTaskResumeAll>
    1500:	c8 01       	movw	r24, r16
    1502:	c2 dc       	rcall	.-1660   	; 0xe88 <prvIsQueueEmpty>
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <xQueueSemaphoreTake+0x122>
    1508:	88 cf       	rjmp	.-240    	; 0x141a <xQueueSemaphoreTake+0x32>
    150a:	bb 20       	and	r11, r11
    150c:	c9 f0       	breq	.+50     	; 0x1540 <xQueueSemaphoreTake+0x158>
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	0f 92       	push	r0
    1514:	f8 01       	movw	r30, r16
    1516:	81 89       	ldd	r24, Z+17	; 0x11
    1518:	88 23       	and	r24, r24
    151a:	39 f0       	breq	.+14     	; 0x152a <xQueueSemaphoreTake+0x142>
    151c:	06 88       	ldd	r0, Z+22	; 0x16
    151e:	f7 89       	ldd	r31, Z+23	; 0x17
    1520:	e0 2d       	mov	r30, r0
    1522:	80 81       	ld	r24, Z
    1524:	64 e0       	ldi	r22, 0x04	; 4
    1526:	68 1b       	sub	r22, r24
    1528:	01 c0       	rjmp	.+2      	; 0x152c <xQueueSemaphoreTake+0x144>
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	d8 01       	movw	r26, r16
    152e:	14 96       	adiw	r26, 0x04	; 4
    1530:	8d 91       	ld	r24, X+
    1532:	9c 91       	ld	r25, X
    1534:	15 97       	sbiw	r26, 0x05	; 5
    1536:	84 d7       	rcall	.+3848   	; 0x2440 <vTaskPriorityDisinheritAfterTimeout>
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <xQueueSemaphoreTake+0x15a>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	df 90       	pop	r13
    155a:	cf 90       	pop	r12
    155c:	bf 90       	pop	r11
    155e:	08 95       	ret

00001560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	0f 92       	push	r0
    156c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156e:	8f 3f       	cpi	r24, 0xFF	; 255
    1570:	09 f4       	brne	.+2      	; 0x1574 <vQueueWaitForMessageRestricted+0x14>
    1572:	1d 8e       	std	Y+29, r1	; 0x1d
    1574:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1576:	8f 3f       	cpi	r24, 0xFF	; 255
    1578:	09 f4       	brne	.+2      	; 0x157c <vQueueWaitForMessageRestricted+0x1c>
    157a:	1e 8e       	std	Y+30, r1	; 0x1e
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1580:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1582:	81 11       	cpse	r24, r1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1586:	ce 01       	movw	r24, r28
    1588:	41 96       	adiw	r24, 0x11	; 17
    158a:	f1 d5       	rcall	.+3042   	; 0x216e <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    158c:	ce 01       	movw	r24, r28
    158e:	00 dd       	rcall	.-1536   	; 0xf90 <prvUnlockQueue>
    }
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1596:	fc 01       	movw	r30, r24
    1598:	44 81       	ldd	r20, Z+4	; 0x04
    159a:	55 81       	ldd	r21, Z+5	; 0x05
    159c:	22 81       	ldd	r18, Z+2	; 0x02
    159e:	33 81       	ldd	r19, Z+3	; 0x03
    15a0:	24 0f       	add	r18, r20
    15a2:	35 1f       	adc	r19, r21
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	b9 01       	movw	r22, r18
    15aa:	68 1b       	sub	r22, r24
    15ac:	79 0b       	sbc	r23, r25
    15ae:	cb 01       	movw	r24, r22
    15b0:	64 17       	cp	r22, r20
    15b2:	75 07       	cpc	r23, r21
    15b4:	10 f0       	brcs	.+4      	; 0x15ba <prvBytesInBuffer+0x24>
    15b6:	84 1b       	sub	r24, r20
    15b8:	95 0b       	sbc	r25, r21
    15ba:	08 95       	ret

000015bc <prvWriteBytesToBuffer>:
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	6c 01       	movw	r12, r24
    15d2:	5b 01       	movw	r10, r22
    15d4:	7a 01       	movw	r14, r20
    15d6:	fc 01       	movw	r30, r24
    15d8:	c2 81       	ldd	r28, Z+2	; 0x02
    15da:	d3 81       	ldd	r29, Z+3	; 0x03
    15dc:	04 81       	ldd	r16, Z+4	; 0x04
    15de:	15 81       	ldd	r17, Z+5	; 0x05
    15e0:	0c 1b       	sub	r16, r28
    15e2:	1d 0b       	sbc	r17, r29
    15e4:	40 17       	cp	r20, r16
    15e6:	51 07       	cpc	r21, r17
    15e8:	08 f4       	brcc	.+2      	; 0x15ec <prvWriteBytesToBuffer+0x30>
    15ea:	8a 01       	movw	r16, r20
    15ec:	f6 01       	movw	r30, r12
    15ee:	84 85       	ldd	r24, Z+12	; 0x0c
    15f0:	95 85       	ldd	r25, Z+13	; 0x0d
    15f2:	a8 01       	movw	r20, r16
    15f4:	b5 01       	movw	r22, r10
    15f6:	8c 0f       	add	r24, r28
    15f8:	9d 1f       	adc	r25, r29
    15fa:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
    15fe:	0e 15       	cp	r16, r14
    1600:	1f 05       	cpc	r17, r15
    1602:	58 f4       	brcc	.+22     	; 0x161a <prvWriteBytesToBuffer+0x5e>
    1604:	a7 01       	movw	r20, r14
    1606:	40 1b       	sub	r20, r16
    1608:	51 0b       	sbc	r21, r17
    160a:	b5 01       	movw	r22, r10
    160c:	60 0f       	add	r22, r16
    160e:	71 1f       	adc	r23, r17
    1610:	f6 01       	movw	r30, r12
    1612:	84 85       	ldd	r24, Z+12	; 0x0c
    1614:	95 85       	ldd	r25, Z+13	; 0x0d
    1616:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
    161a:	ce 01       	movw	r24, r28
    161c:	8e 0d       	add	r24, r14
    161e:	9f 1d       	adc	r25, r15
    1620:	f6 01       	movw	r30, r12
    1622:	24 81       	ldd	r18, Z+4	; 0x04
    1624:	35 81       	ldd	r19, Z+5	; 0x05
    1626:	82 17       	cp	r24, r18
    1628:	93 07       	cpc	r25, r19
    162a:	10 f0       	brcs	.+4      	; 0x1630 <prvWriteBytesToBuffer+0x74>
    162c:	82 1b       	sub	r24, r18
    162e:	93 0b       	sbc	r25, r19
    1630:	f6 01       	movw	r30, r12
    1632:	93 83       	std	Z+3, r25	; 0x03
    1634:	82 83       	std	Z+2, r24	; 0x02
    1636:	c7 01       	movw	r24, r14
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	08 95       	ret

0000164e <prvWriteMessageToBuffer>:
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	1f 92       	push	r1
    1660:	1f 92       	push	r1
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	5a 83       	std	Y+2, r21	; 0x02
    1668:	49 83       	std	Y+1, r20	; 0x01
    166a:	21 15       	cp	r18, r1
    166c:	31 05       	cpc	r19, r1
    166e:	c9 f0       	breq	.+50     	; 0x16a2 <prvWriteMessageToBuffer+0x54>
    1670:	6b 01       	movw	r12, r22
    1672:	7c 01       	movw	r14, r24
    1674:	fc 01       	movw	r30, r24
    1676:	86 85       	ldd	r24, Z+14	; 0x0e
    1678:	80 fd       	sbrc	r24, 0
    167a:	08 c0       	rjmp	.+16     	; 0x168c <prvWriteMessageToBuffer+0x3e>
    167c:	ca 01       	movw	r24, r20
    167e:	24 17       	cp	r18, r20
    1680:	35 07       	cpc	r19, r21
    1682:	08 f4       	brcc	.+2      	; 0x1686 <prvWriteMessageToBuffer+0x38>
    1684:	c9 01       	movw	r24, r18
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <prvWriteMessageToBuffer+0x60>
    168c:	20 17       	cp	r18, r16
    168e:	31 07       	cpc	r19, r17
    1690:	58 f0       	brcs	.+22     	; 0x16a8 <prvWriteMessageToBuffer+0x5a>
    1692:	42 e0       	ldi	r20, 0x02	; 2
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	be 01       	movw	r22, r28
    1698:	6f 5f       	subi	r22, 0xFF	; 255
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	c7 01       	movw	r24, r14
    169e:	8e df       	rcall	.-228    	; 0x15bc <prvWriteBytesToBuffer>
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <prvWriteMessageToBuffer+0x60>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <prvWriteMessageToBuffer+0x6a>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <prvWriteMessageToBuffer+0x6a>
    16ae:	49 81       	ldd	r20, Y+1	; 0x01
    16b0:	5a 81       	ldd	r21, Y+2	; 0x02
    16b2:	b6 01       	movw	r22, r12
    16b4:	c7 01       	movw	r24, r14
    16b6:	82 df       	rcall	.-252    	; 0x15bc <prvWriteBytesToBuffer>
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	08 95       	ret

000016ce <prvReadBytesFromBuffer>:
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	7c 01       	movw	r14, r24
    16e4:	5b 01       	movw	r10, r22
    16e6:	e9 01       	movw	r28, r18
    16e8:	42 17       	cp	r20, r18
    16ea:	53 07       	cpc	r21, r19
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <prvReadBytesFromBuffer+0x22>
    16ee:	ea 01       	movw	r28, r20
    16f0:	20 97       	sbiw	r28, 0x00	; 0
    16f2:	79 f1       	breq	.+94     	; 0x1752 <prvReadBytesFromBuffer+0x84>
    16f4:	f7 01       	movw	r30, r14
    16f6:	00 81       	ld	r16, Z
    16f8:	11 81       	ldd	r17, Z+1	; 0x01
    16fa:	c4 80       	ldd	r12, Z+4	; 0x04
    16fc:	d5 80       	ldd	r13, Z+5	; 0x05
    16fe:	c0 1a       	sub	r12, r16
    1700:	d1 0a       	sbc	r13, r17
    1702:	cc 15       	cp	r28, r12
    1704:	dd 05       	cpc	r29, r13
    1706:	08 f4       	brcc	.+2      	; 0x170a <prvReadBytesFromBuffer+0x3c>
    1708:	6e 01       	movw	r12, r28
    170a:	f7 01       	movw	r30, r14
    170c:	64 85       	ldd	r22, Z+12	; 0x0c
    170e:	75 85       	ldd	r23, Z+13	; 0x0d
    1710:	60 0f       	add	r22, r16
    1712:	71 1f       	adc	r23, r17
    1714:	a6 01       	movw	r20, r12
    1716:	c5 01       	movw	r24, r10
    1718:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
    171c:	cc 16       	cp	r12, r28
    171e:	dd 06       	cpc	r13, r29
    1720:	58 f4       	brcc	.+22     	; 0x1738 <prvReadBytesFromBuffer+0x6a>
    1722:	ae 01       	movw	r20, r28
    1724:	4c 19       	sub	r20, r12
    1726:	5d 09       	sbc	r21, r13
    1728:	f7 01       	movw	r30, r14
    172a:	64 85       	ldd	r22, Z+12	; 0x0c
    172c:	75 85       	ldd	r23, Z+13	; 0x0d
    172e:	c5 01       	movw	r24, r10
    1730:	8c 0d       	add	r24, r12
    1732:	9d 1d       	adc	r25, r13
    1734:	0e 94 5d 25 	call	0x4aba	; 0x4aba <memcpy>
    1738:	0c 0f       	add	r16, r28
    173a:	1d 1f       	adc	r17, r29
    173c:	f7 01       	movw	r30, r14
    173e:	84 81       	ldd	r24, Z+4	; 0x04
    1740:	95 81       	ldd	r25, Z+5	; 0x05
    1742:	08 17       	cp	r16, r24
    1744:	19 07       	cpc	r17, r25
    1746:	10 f0       	brcs	.+4      	; 0x174c <prvReadBytesFromBuffer+0x7e>
    1748:	08 1b       	sub	r16, r24
    174a:	19 0b       	sbc	r17, r25
    174c:	f7 01       	movw	r30, r14
    174e:	11 83       	std	Z+1, r17	; 0x01
    1750:	00 83       	st	Z, r16
    1752:	ce 01       	movw	r24, r28
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	df 90       	pop	r13
    1762:	cf 90       	pop	r12
    1764:	bf 90       	pop	r11
    1766:	af 90       	pop	r10
    1768:	08 95       	ret

0000176a <xStreamBufferGenericCreate>:
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	eb 01       	movw	r28, r22
    1776:	11 e0       	ldi	r17, 0x01	; 1
    1778:	41 30       	cpi	r20, 0x01	; 1
    177a:	09 f0       	breq	.+2      	; 0x177e <xStreamBufferGenericCreate+0x14>
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	20 97       	sbiw	r28, 0x00	; 0
    1780:	11 f4       	brne	.+4      	; 0x1786 <xStreamBufferGenericCreate+0x1c>
    1782:	c1 e0       	ldi	r28, 0x01	; 1
    1784:	d0 e0       	ldi	r29, 0x00	; 0
    1786:	7c 01       	movw	r14, r24
    1788:	2f ef       	ldi	r18, 0xFF	; 255
    178a:	e2 1a       	sub	r14, r18
    178c:	f2 0a       	sbc	r15, r18
    178e:	41 96       	adiw	r24, 0x11	; 17
    1790:	59 d9       	rcall	.-3406   	; 0xa44 <pvPortMalloc>
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	81 f0       	breq	.+32     	; 0x17b6 <xStreamBufferGenericCreate+0x4c>
    1796:	20 e1       	ldi	r18, 0x10	; 16
    1798:	fc 01       	movw	r30, r24
    179a:	11 92       	st	Z+, r1
    179c:	2a 95       	dec	r18
    179e:	e9 f7       	brne	.-6      	; 0x179a <xStreamBufferGenericCreate+0x30>
    17a0:	9c 01       	movw	r18, r24
    17a2:	20 5f       	subi	r18, 0xF0	; 240
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	fc 01       	movw	r30, r24
    17a8:	35 87       	std	Z+13, r19	; 0x0d
    17aa:	24 87       	std	Z+12, r18	; 0x0c
    17ac:	f5 82       	std	Z+5, r15	; 0x05
    17ae:	e4 82       	std	Z+4, r14	; 0x04
    17b0:	d7 83       	std	Z+7, r29	; 0x07
    17b2:	c6 83       	std	Z+6, r28	; 0x06
    17b4:	16 87       	std	Z+14, r17	; 0x0e
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	08 95       	ret

000017c2 <xStreamBufferReset>:
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	fc 01       	movw	r30, r24
    17c8:	27 85       	ldd	r18, Z+15	; 0x0f
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	0f 92       	push	r0
    17d0:	80 85       	ldd	r24, Z+8	; 0x08
    17d2:	91 85       	ldd	r25, Z+9	; 0x09
    17d4:	89 2b       	or	r24, r25
    17d6:	d1 f4       	brne	.+52     	; 0x180c <xStreamBufferReset+0x4a>
    17d8:	82 85       	ldd	r24, Z+10	; 0x0a
    17da:	93 85       	ldd	r25, Z+11	; 0x0b
    17dc:	89 2b       	or	r24, r25
    17de:	c1 f4       	brne	.+48     	; 0x1810 <xStreamBufferReset+0x4e>
    17e0:	86 85       	ldd	r24, Z+14	; 0x0e
    17e2:	46 81       	ldd	r20, Z+6	; 0x06
    17e4:	57 81       	ldd	r21, Z+7	; 0x07
    17e6:	64 81       	ldd	r22, Z+4	; 0x04
    17e8:	75 81       	ldd	r23, Z+5	; 0x05
    17ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    17ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    17ee:	90 e1       	ldi	r25, 0x10	; 16
    17f0:	ef 01       	movw	r28, r30
    17f2:	19 92       	st	Y+, r1
    17f4:	9a 95       	dec	r25
    17f6:	e9 f7       	brne	.-6      	; 0x17f2 <xStreamBufferReset+0x30>
    17f8:	b5 87       	std	Z+13, r27	; 0x0d
    17fa:	a4 87       	std	Z+12, r26	; 0x0c
    17fc:	75 83       	std	Z+5, r23	; 0x05
    17fe:	64 83       	std	Z+4, r22	; 0x04
    1800:	57 83       	std	Z+7, r21	; 0x07
    1802:	46 83       	std	Z+6, r20	; 0x06
    1804:	86 87       	std	Z+14, r24	; 0x0e
    1806:	27 87       	std	Z+15, r18	; 0x0f
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <xStreamBufferReset+0x50>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <xStreamBufferReset+0x50>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <xStreamBufferSpacesAvailable>:
    181c:	fc 01       	movw	r30, r24
    181e:	24 81       	ldd	r18, Z+4	; 0x04
    1820:	35 81       	ldd	r19, Z+5	; 0x05
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	42 81       	ldd	r20, Z+2	; 0x02
    1828:	53 81       	ldd	r21, Z+3	; 0x03
    182a:	82 0f       	add	r24, r18
    182c:	93 1f       	adc	r25, r19
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	84 1b       	sub	r24, r20
    1832:	95 0b       	sbc	r25, r21
    1834:	82 17       	cp	r24, r18
    1836:	93 07       	cpc	r25, r19
    1838:	10 f0       	brcs	.+4      	; 0x183e <xStreamBufferSpacesAvailable+0x22>
    183a:	82 1b       	sub	r24, r18
    183c:	93 0b       	sbc	r25, r19
    183e:	08 95       	ret

00001840 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	5b 01       	movw	r10, r22
    1858:	6a 01       	movw	r12, r20
    185a:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    185c:	8e 85       	ldd	r24, Y+14	; 0x0e
    185e:	80 ff       	sbrs	r24, 0
    1860:	04 c0       	rjmp	.+8      	; 0x186a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1862:	8a 01       	movw	r16, r20
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	01 c0       	rjmp	.+2      	; 0x186c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    186a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    186c:	ce 01       	movw	r24, r28
    186e:	d6 df       	rcall	.-84     	; 0x181c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1870:	9c 01       	movw	r18, r24
    1872:	a6 01       	movw	r20, r12
    1874:	b5 01       	movw	r22, r10
    1876:	ce 01       	movw	r24, r28
    1878:	ea de       	rcall	.-556    	; 0x164e <prvWriteMessageToBuffer>
    187a:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    187c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    187e:	b1 f0       	breq	.+44     	; 0x18ac <xStreamBufferSendFromISR+0x6c>
    1880:	ce 01       	movw	r24, r28
    1882:	89 de       	rcall	.-750    	; 0x1596 <prvBytesInBuffer>
    1884:	2e 81       	ldd	r18, Y+6	; 0x06
    1886:	3f 81       	ldd	r19, Y+7	; 0x07
    1888:	82 17       	cp	r24, r18
    188a:	93 07       	cpc	r25, r19
    188c:	78 f0       	brcs	.+30     	; 0x18ac <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    188e:	88 85       	ldd	r24, Y+8	; 0x08
    1890:	99 85       	ldd	r25, Y+9	; 0x09
    1892:	89 2b       	or	r24, r25
    1894:	59 f0       	breq	.+22     	; 0x18ac <xStreamBufferSendFromISR+0x6c>
    1896:	88 85       	ldd	r24, Y+8	; 0x08
    1898:	99 85       	ldd	r25, Y+9	; 0x09
    189a:	00 e0       	ldi	r16, 0x00	; 0
    189c:	10 e0       	ldi	r17, 0x00	; 0
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	ba 01       	movw	r22, r20
    18a6:	2f d7       	rcall	.+3678   	; 0x2706 <xTaskGenericNotifyFromISR>
    18a8:	19 86       	std	Y+9, r1	; 0x09
    18aa:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    18ac:	c6 01       	movw	r24, r12
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	08 95       	ret

000018c4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18c4:	6f 92       	push	r6
    18c6:	7f 92       	push	r7
    18c8:	8f 92       	push	r8
    18ca:	9f 92       	push	r9
    18cc:	af 92       	push	r10
    18ce:	bf 92       	push	r11
    18d0:	cf 92       	push	r12
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	1f 92       	push	r1
    18e2:	1f 92       	push	r1
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	6c 01       	movw	r12, r24
    18ea:	3b 01       	movw	r6, r22
    18ec:	4a 01       	movw	r8, r20
    18ee:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18f0:	fc 01       	movw	r30, r24
    18f2:	86 85       	ldd	r24, Z+14	; 0x0e
    18f4:	80 fd       	sbrc	r24, 0
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18f8:	a1 2c       	mov	r10, r1
    18fa:	b1 2c       	mov	r11, r1
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18fe:	68 94       	set
    1900:	aa 24       	eor	r10, r10
    1902:	a1 f8       	bld	r10, 1
    1904:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1906:	e1 14       	cp	r14, r1
    1908:	f1 04       	cpc	r15, r1
    190a:	29 f1       	breq	.+74     	; 0x1956 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1912:	c6 01       	movw	r24, r12
    1914:	40 de       	rcall	.-896    	; 0x1596 <prvBytesInBuffer>
    1916:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1918:	a8 16       	cp	r10, r24
    191a:	b9 06       	cpc	r11, r25
    191c:	38 f0       	brcs	.+14     	; 0x192c <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1922:	81 d7       	rcall	.+3842   	; 0x2826 <xTaskNotifyStateClear>
    1924:	c8 d4       	rcall	.+2448   	; 0x22b6 <xTaskGetCurrentTaskHandle>
    1926:	f6 01       	movw	r30, r12
    1928:	91 87       	std	Z+9, r25	; 0x09
    192a:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1930:	a0 16       	cp	r10, r16
    1932:	b1 06       	cpc	r11, r17
    1934:	b0 f0       	brcs	.+44     	; 0x1962 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1936:	00 e0       	ldi	r16, 0x00	; 0
    1938:	10 e0       	ldi	r17, 0x00	; 0
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	a9 01       	movw	r20, r18
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	cb 01       	movw	r24, r22
    1946:	de d5       	rcall	.+3004   	; 0x2504 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1948:	f6 01       	movw	r30, r12
    194a:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    194c:	10 86       	std	Z+8, r1	; 0x08
    194e:	c6 01       	movw	r24, r12
    1950:	22 de       	rcall	.-956    	; 0x1596 <prvBytesInBuffer>
    1952:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1954:	03 c0       	rjmp	.+6      	; 0x195c <xStreamBufferReceive+0x98>
    1956:	c6 01       	movw	r24, r12
    1958:	1e de       	rcall	.-964    	; 0x1596 <prvBytesInBuffer>
    195a:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    195c:	a0 16       	cp	r10, r16
    195e:	b1 06       	cpc	r11, r17
    1960:	b8 f5       	brcc	.+110    	; 0x19d0 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1962:	a1 14       	cp	r10, r1
    1964:	b1 04       	cpc	r11, r1
    1966:	c1 f0       	breq	.+48     	; 0x1998 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1968:	f6 01       	movw	r30, r12
    196a:	e0 80       	ld	r14, Z
    196c:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    196e:	98 01       	movw	r18, r16
    1970:	a5 01       	movw	r20, r10
    1972:	be 01       	movw	r22, r28
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	c6 01       	movw	r24, r12
    197a:	a9 de       	rcall	.-686    	; 0x16ce <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1980:	0a 19       	sub	r16, r10
    1982:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1984:	88 16       	cp	r8, r24
    1986:	99 06       	cpc	r9, r25
    1988:	30 f4       	brcc	.+12     	; 0x1996 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    198a:	f6 01       	movw	r30, r12
    198c:	f1 82       	std	Z+1, r15	; 0x01
    198e:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1990:	81 2c       	mov	r8, r1
    1992:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1996:	4c 01       	movw	r8, r24
    1998:	98 01       	movw	r18, r16
    199a:	a4 01       	movw	r20, r8
    199c:	b3 01       	movw	r22, r6
    199e:	c6 01       	movw	r24, r12
    19a0:	96 de       	rcall	.-724    	; 0x16ce <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    19a2:	7c 01       	movw	r14, r24
    19a4:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    19a6:	b1 f0       	breq	.+44     	; 0x19d4 <xStreamBufferReceive+0x110>
    19a8:	eb d1       	rcall	.+982    	; 0x1d80 <vTaskSuspendAll>
    19aa:	f6 01       	movw	r30, r12
    19ac:	82 85       	ldd	r24, Z+10	; 0x0a
    19ae:	93 85       	ldd	r25, Z+11	; 0x0b
    19b0:	89 2b       	or	r24, r25
    19b2:	61 f0       	breq	.+24     	; 0x19cc <xStreamBufferReceive+0x108>
    19b4:	82 85       	ldd	r24, Z+10	; 0x0a
    19b6:	93 85       	ldd	r25, Z+11	; 0x0b
    19b8:	00 e0       	ldi	r16, 0x00	; 0
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	ba 01       	movw	r22, r20
    19c4:	22 d6       	rcall	.+3140   	; 0x260a <xTaskGenericNotify>
    19c6:	f6 01       	movw	r30, r12
    19c8:	13 86       	std	Z+11, r1	; 0x0b
    19ca:	12 86       	std	Z+10, r1	; 0x0a
    19cc:	a3 d2       	rcall	.+1350   	; 0x1f14 <xTaskResumeAll>
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    19d0:	e1 2c       	mov	r14, r1
    19d2:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    19d4:	c7 01       	movw	r24, r14
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	9f 90       	pop	r9
    19f0:	8f 90       	pop	r8
    19f2:	7f 90       	pop	r7
    19f4:	6f 90       	pop	r6
    19f6:	08 95       	ret

000019f8 <prvResetNextTaskUnblockTime>:
    19f8:	e0 91 5f 09 	lds	r30, 0x095F	; 0x80095f <pxDelayedTaskList>
    19fc:	f0 91 60 09 	lds	r31, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1a00:	80 81       	ld	r24, Z
    1a02:	81 11       	cpse	r24, r1
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <prvResetNextTaskUnblockTime+0x1c>
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	9f ef       	ldi	r25, 0xFF	; 255
    1a0a:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <xNextTaskUnblockTime+0x1>
    1a0e:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <xNextTaskUnblockTime>
    1a12:	08 95       	ret
    1a14:	e0 91 5f 09 	lds	r30, 0x095F	; 0x80095f <pxDelayedTaskList>
    1a18:	f0 91 60 09 	lds	r31, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1a1c:	05 80       	ldd	r0, Z+5	; 0x05
    1a1e:	f6 81       	ldd	r31, Z+6	; 0x06
    1a20:	e0 2d       	mov	r30, r0
    1a22:	06 80       	ldd	r0, Z+6	; 0x06
    1a24:	f7 81       	ldd	r31, Z+7	; 0x07
    1a26:	e0 2d       	mov	r30, r0
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <xNextTaskUnblockTime+0x1>
    1a30:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <xNextTaskUnblockTime>
    1a34:	08 95       	ret

00001a36 <prvAddCurrentTaskToDelayedList>:
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
    1a42:	f6 2e       	mov	r15, r22
    1a44:	00 91 3e 09 	lds	r16, 0x093E	; 0x80093e <xTickCount>
    1a48:	10 91 3f 09 	lds	r17, 0x093F	; 0x80093f <xTickCount+0x1>
    1a4c:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    1a50:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1a54:	02 96       	adiw	r24, 0x02	; 2
    1a56:	7c d8       	rcall	.-3848   	; 0xb50 <uxListRemove>
    1a58:	cf 3f       	cpi	r28, 0xFF	; 255
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	d8 07       	cpc	r29, r24
    1a5e:	61 f4       	brne	.+24     	; 0x1a78 <prvAddCurrentTaskToDelayedList+0x42>
    1a60:	ff 20       	and	r15, r15
    1a62:	51 f0       	breq	.+20     	; 0x1a78 <prvAddCurrentTaskToDelayedList+0x42>
    1a64:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    1a68:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1a6c:	6e 5f       	subi	r22, 0xFE	; 254
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	81 e4       	ldi	r24, 0x41	; 65
    1a72:	99 e0       	ldi	r25, 0x09	; 9
    1a74:	1b d8       	rcall	.-4042   	; 0xaac <vListInsertEnd>
    1a76:	2d c0       	rjmp	.+90     	; 0x1ad2 <prvAddCurrentTaskToDelayedList+0x9c>
    1a78:	c0 0f       	add	r28, r16
    1a7a:	d1 1f       	adc	r29, r17
    1a7c:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1a80:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1a84:	d3 83       	std	Z+3, r29	; 0x03
    1a86:	c2 83       	std	Z+2, r28	; 0x02
    1a88:	c0 17       	cp	r28, r16
    1a8a:	d1 07       	cpc	r29, r17
    1a8c:	60 f4       	brcc	.+24     	; 0x1aa6 <prvAddCurrentTaskToDelayedList+0x70>
    1a8e:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    1a92:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1a96:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <pxOverflowDelayedTaskList>
    1a9a:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <pxOverflowDelayedTaskList+0x1>
    1a9e:	6e 5f       	subi	r22, 0xFE	; 254
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	25 d8       	rcall	.-4022   	; 0xaee <vListInsert>
    1aa4:	16 c0       	rjmp	.+44     	; 0x1ad2 <prvAddCurrentTaskToDelayedList+0x9c>
    1aa6:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    1aaa:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1aae:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <pxDelayedTaskList>
    1ab2:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1ab6:	6e 5f       	subi	r22, 0xFE	; 254
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	19 d8       	rcall	.-4046   	; 0xaee <vListInsert>
    1abc:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <xNextTaskUnblockTime>
    1ac0:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <xNextTaskUnblockTime+0x1>
    1ac4:	c8 17       	cp	r28, r24
    1ac6:	d9 07       	cpc	r29, r25
    1ac8:	20 f4       	brcc	.+8      	; 0x1ad2 <prvAddCurrentTaskToDelayedList+0x9c>
    1aca:	d0 93 37 09 	sts	0x0937, r29	; 0x800937 <xNextTaskUnblockTime+0x1>
    1ace:	c0 93 36 09 	sts	0x0936, r28	; 0x800936 <xNextTaskUnblockTime>
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	08 95       	ret

00001ade <xTaskCreate>:
    1ade:	4f 92       	push	r4
    1ae0:	5f 92       	push	r5
    1ae2:	6f 92       	push	r6
    1ae4:	7f 92       	push	r7
    1ae6:	8f 92       	push	r8
    1ae8:	9f 92       	push	r9
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	4c 01       	movw	r8, r24
    1afe:	6b 01       	movw	r12, r22
    1b00:	5a 01       	movw	r10, r20
    1b02:	29 01       	movw	r4, r18
    1b04:	ca 01       	movw	r24, r20
    1b06:	0e 94 22 05 	call	0xa44	; 0xa44 <pvPortMalloc>
    1b0a:	3c 01       	movw	r6, r24
    1b0c:	89 2b       	or	r24, r25
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <xTaskCreate+0x34>
    1b10:	f3 c0       	rjmp	.+486    	; 0x1cf8 <xTaskCreate+0x21a>
    1b12:	8c e2       	ldi	r24, 0x2C	; 44
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 22 05 	call	0xa44	; 0xa44 <pvPortMalloc>
    1b1a:	ec 01       	movw	r28, r24
    1b1c:	89 2b       	or	r24, r25
    1b1e:	99 f0       	breq	.+38     	; 0x1b46 <xTaskCreate+0x68>
    1b20:	78 8e       	std	Y+24, r7	; 0x18
    1b22:	6f 8a       	std	Y+23, r6	; 0x17
    1b24:	a5 01       	movw	r20, r10
    1b26:	65 ea       	ldi	r22, 0xA5	; 165
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	c3 01       	movw	r24, r6
    1b2c:	0e 94 66 25 	call	0x4acc	; 0x4acc <memset>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	a8 1a       	sub	r10, r24
    1b34:	b1 08       	sbc	r11, r1
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	a8 0e       	add	r10, r24
    1b3c:	b9 1e       	adc	r11, r25
    1b3e:	c1 14       	cp	r12, r1
    1b40:	d1 04       	cpc	r13, r1
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <xTaskCreate+0x70>
    1b44:	20 c0       	rjmp	.+64     	; 0x1b86 <xTaskCreate+0xa8>
    1b46:	c3 01       	movw	r24, r6
    1b48:	0e 94 35 05 	call	0xa6a	; 0xa6a <vPortFree>
    1b4c:	d5 c0       	rjmp	.+426    	; 0x1cf8 <xTaskCreate+0x21a>
    1b4e:	d6 01       	movw	r26, r12
    1b50:	8c 91       	ld	r24, X
    1b52:	89 8f       	std	Y+25, r24	; 0x19
    1b54:	8c 91       	ld	r24, X
    1b56:	88 23       	and	r24, r24
    1b58:	a1 f0       	breq	.+40     	; 0x1b82 <xTaskCreate+0xa4>
    1b5a:	ae 01       	movw	r20, r28
    1b5c:	46 5e       	subi	r20, 0xE6	; 230
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	f6 01       	movw	r30, r12
    1b62:	31 96       	adiw	r30, 0x01	; 1
    1b64:	b8 e0       	ldi	r27, 0x08	; 8
    1b66:	cb 0e       	add	r12, r27
    1b68:	d1 1c       	adc	r13, r1
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	21 91       	ld	r18, Z+
    1b6e:	da 01       	movw	r26, r20
    1b70:	2d 93       	st	X+, r18
    1b72:	ad 01       	movw	r20, r26
    1b74:	dc 01       	movw	r26, r24
    1b76:	8c 91       	ld	r24, X
    1b78:	88 23       	and	r24, r24
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <xTaskCreate+0xa4>
    1b7c:	ec 15       	cp	r30, r12
    1b7e:	fd 05       	cpc	r31, r13
    1b80:	a1 f7       	brne	.-24     	; 0x1b6a <xTaskCreate+0x8c>
    1b82:	18 a2       	std	Y+32, r1	; 0x20
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <xTaskCreate+0xaa>
    1b86:	19 8e       	std	Y+25, r1	; 0x19
    1b88:	04 30       	cpi	r16, 0x04	; 4
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <xTaskCreate+0xb0>
    1b8c:	03 e0       	ldi	r16, 0x03	; 3
    1b8e:	0e 8b       	std	Y+22, r16	; 0x16
    1b90:	0b a3       	std	Y+35, r16	; 0x23
    1b92:	1c a2       	std	Y+36, r1	; 0x24
    1b94:	6e 01       	movw	r12, r28
    1b96:	b2 e0       	ldi	r27, 0x02	; 2
    1b98:	cb 0e       	add	r12, r27
    1b9a:	d1 1c       	adc	r13, r1
    1b9c:	c6 01       	movw	r24, r12
    1b9e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <vListInitialiseItem>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	0c 96       	adiw	r24, 0x0c	; 12
    1ba6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <vListInitialiseItem>
    1baa:	d9 87       	std	Y+9, r29	; 0x09
    1bac:	c8 87       	std	Y+8, r28	; 0x08
    1bae:	84 e0       	ldi	r24, 0x04	; 4
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	80 1b       	sub	r24, r16
    1bb4:	91 09       	sbc	r25, r1
    1bb6:	9d 87       	std	Y+13, r25	; 0x0d
    1bb8:	8c 87       	std	Y+12, r24	; 0x0c
    1bba:	db 8b       	std	Y+19, r29	; 0x13
    1bbc:	ca 8b       	std	Y+18, r28	; 0x12
    1bbe:	1e a2       	std	Y+38, r1	; 0x26
    1bc0:	1d a2       	std	Y+37, r1	; 0x25
    1bc2:	1f a2       	std	Y+39, r1	; 0x27
    1bc4:	18 a6       	std	Y+40, r1	; 0x28
    1bc6:	19 a6       	std	Y+41, r1	; 0x29
    1bc8:	1a a6       	std	Y+42, r1	; 0x2a
    1bca:	1b a6       	std	Y+43, r1	; 0x2b
    1bcc:	a2 01       	movw	r20, r4
    1bce:	b4 01       	movw	r22, r8
    1bd0:	c5 01       	movw	r24, r10
    1bd2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pxPortInitialiseStack>
    1bd6:	99 83       	std	Y+1, r25	; 0x01
    1bd8:	88 83       	st	Y, r24
    1bda:	e1 14       	cp	r14, r1
    1bdc:	f1 04       	cpc	r15, r1
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <xTaskCreate+0x108>
    1be0:	f7 01       	movw	r30, r14
    1be2:	d1 83       	std	Z+1, r29	; 0x01
    1be4:	c0 83       	st	Z, r28
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	0f 92       	push	r0
    1bec:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <uxCurrentNumberOfTasks>
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <uxCurrentNumberOfTasks>
    1bf6:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    1bfa:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1bfe:	89 2b       	or	r24, r25
    1c00:	d1 f5       	brne	.+116    	; 0x1c76 <xTaskCreate+0x198>
    1c02:	d0 93 98 09 	sts	0x0998, r29	; 0x800998 <pxCurrentTCB+0x1>
    1c06:	c0 93 97 09 	sts	0x0997, r28	; 0x800997 <pxCurrentTCB>
    1c0a:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <uxCurrentNumberOfTasks>
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <xTaskCreate+0x136>
    1c12:	41 c0       	rjmp	.+130    	; 0x1c96 <xTaskCreate+0x1b8>
    1c14:	83 e7       	ldi	r24, 0x73	; 115
    1c16:	99 e0       	ldi	r25, 0x09	; 9
    1c18:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c1c:	8c e7       	ldi	r24, 0x7C	; 124
    1c1e:	99 e0       	ldi	r25, 0x09	; 9
    1c20:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c24:	85 e8       	ldi	r24, 0x85	; 133
    1c26:	99 e0       	ldi	r25, 0x09	; 9
    1c28:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c2c:	8e e8       	ldi	r24, 0x8E	; 142
    1c2e:	99 e0       	ldi	r25, 0x09	; 9
    1c30:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c34:	8a e6       	ldi	r24, 0x6A	; 106
    1c36:	99 e0       	ldi	r25, 0x09	; 9
    1c38:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c3c:	81 e6       	ldi	r24, 0x61	; 97
    1c3e:	99 e0       	ldi	r25, 0x09	; 9
    1c40:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c44:	84 e5       	ldi	r24, 0x54	; 84
    1c46:	99 e0       	ldi	r25, 0x09	; 9
    1c48:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c4c:	8b e4       	ldi	r24, 0x4B	; 75
    1c4e:	99 e0       	ldi	r25, 0x09	; 9
    1c50:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c54:	81 e4       	ldi	r24, 0x41	; 65
    1c56:	99 e0       	ldi	r25, 0x09	; 9
    1c58:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
    1c5c:	8a e6       	ldi	r24, 0x6A	; 106
    1c5e:	99 e0       	ldi	r25, 0x09	; 9
    1c60:	90 93 60 09 	sts	0x0960, r25	; 0x800960 <pxDelayedTaskList+0x1>
    1c64:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <pxDelayedTaskList>
    1c68:	81 e6       	ldi	r24, 0x61	; 97
    1c6a:	99 e0       	ldi	r25, 0x09	; 9
    1c6c:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <pxOverflowDelayedTaskList+0x1>
    1c70:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <pxOverflowDelayedTaskList>
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <xTaskCreate+0x1b8>
    1c76:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <xSchedulerRunning>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	0c c0       	rjmp	.+24     	; 0x1c96 <xTaskCreate+0x1b8>
    1c7e:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1c82:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1c86:	96 89       	ldd	r25, Z+22	; 0x16
    1c88:	8e 89       	ldd	r24, Y+22	; 0x16
    1c8a:	89 17       	cp	r24, r25
    1c8c:	20 f0       	brcs	.+8      	; 0x1c96 <xTaskCreate+0x1b8>
    1c8e:	d0 93 98 09 	sts	0x0998, r29	; 0x800998 <pxCurrentTCB+0x1>
    1c92:	c0 93 97 09 	sts	0x0997, r28	; 0x800997 <pxCurrentTCB>
    1c96:	80 91 38 09 	lds	r24, 0x0938	; 0x800938 <uxTaskNumber>
    1c9a:	8f 5f       	subi	r24, 0xFF	; 255
    1c9c:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <uxTaskNumber>
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ca4:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    1ca8:	98 17       	cp	r25, r24
    1caa:	10 f4       	brcc	.+4      	; 0x1cb0 <xTaskCreate+0x1d2>
    1cac:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	22 0f       	add	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	82 0f       	add	r24, r18
    1cc2:	93 1f       	adc	r25, r19
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	8d 58       	subi	r24, 0x8D	; 141
    1cc8:	96 4f       	sbci	r25, 0xF6	; 246
    1cca:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <xSchedulerRunning>
    1cd6:	88 23       	and	r24, r24
    1cd8:	59 f0       	breq	.+22     	; 0x1cf0 <xTaskCreate+0x212>
    1cda:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1cde:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1ce2:	96 89       	ldd	r25, Z+22	; 0x16
    1ce4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ce6:	98 17       	cp	r25, r24
    1ce8:	28 f4       	brcc	.+10     	; 0x1cf4 <xTaskCreate+0x216>
    1cea:	07 d8       	rcall	.-4082   	; 0xcfa <vPortYield>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <xTaskCreate+0x21c>
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <xTaskCreate+0x21c>
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <xTaskCreate+0x21c>
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	08 95       	ret

00001d1a <vTaskStartScheduler>:
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	0f 2e       	mov	r0, r31
    1d22:	f4 e3       	ldi	r31, 0x34	; 52
    1d24:	ef 2e       	mov	r14, r31
    1d26:	f9 e0       	ldi	r31, 0x09	; 9
    1d28:	ff 2e       	mov	r15, r31
    1d2a:	f0 2d       	mov	r31, r0
    1d2c:	00 e0       	ldi	r16, 0x00	; 0
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 ec       	ldi	r20, 0xC0	; 192
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	6d e3       	ldi	r22, 0x3D	; 61
    1d38:	76 e0       	ldi	r23, 0x06	; 6
    1d3a:	8d ec       	ldi	r24, 0xCD	; 205
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	cf de       	rcall	.-610    	; 0x1ade <xTaskCreate>
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	d1 f4       	brne	.+52     	; 0x1d78 <vTaskStartScheduler+0x5e>
    1d44:	dc d5       	rcall	.+3000   	; 0x28fe <xTimerCreateTimerTask>
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	b9 f4       	brne	.+46     	; 0x1d78 <vTaskStartScheduler+0x5e>
    1d4a:	f8 94       	cli
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <xNextTaskUnblockTime+0x1>
    1d54:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <xNextTaskUnblockTime>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <xSchedulerRunning>
    1d5e:	10 92 3f 09 	sts	0x093F, r1	; 0x80093f <xTickCount+0x1>
    1d62:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <xTickCount>
    1d66:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1d6a:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1d6e:	85 a1       	ldd	r24, Z+37	; 0x25
    1d70:	0e 94 12 05 	call	0xa24	; 0xa24 <task_switch_in>
    1d74:	0e 94 41 06 	call	0xc82	; 0xc82 <xPortStartScheduler>
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	08 95       	ret

00001d80 <vTaskSuspendAll>:
    1d80:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <uxSchedulerSuspended>
    1d8a:	08 95       	ret

00001d8c <xTaskGetTickCount>:
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	0f 92       	push	r0
    1d92:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <xTickCount>
    1d96:	90 91 3f 09 	lds	r25, 0x093F	; 0x80093f <xTickCount+0x1>
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	08 95       	ret

00001da0 <xTaskIncrementTick>:
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    1db4:	81 11       	cpse	r24, r1
    1db6:	98 c0       	rjmp	.+304    	; 0x1ee8 <xTaskIncrementTick+0x148>
    1db8:	e0 90 3e 09 	lds	r14, 0x093E	; 0x80093e <xTickCount>
    1dbc:	f0 90 3f 09 	lds	r15, 0x093F	; 0x80093f <xTickCount+0x1>
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	e8 1a       	sub	r14, r24
    1dc4:	f8 0a       	sbc	r15, r24
    1dc6:	f0 92 3f 09 	sts	0x093F, r15	; 0x80093f <xTickCount+0x1>
    1dca:	e0 92 3e 09 	sts	0x093E, r14	; 0x80093e <xTickCount>
    1dce:	e1 14       	cp	r14, r1
    1dd0:	f1 04       	cpc	r15, r1
    1dd2:	b1 f4       	brne	.+44     	; 0x1e00 <xTaskIncrementTick+0x60>
    1dd4:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <pxDelayedTaskList>
    1dd8:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1ddc:	20 91 5d 09 	lds	r18, 0x095D	; 0x80095d <pxOverflowDelayedTaskList>
    1de0:	30 91 5e 09 	lds	r19, 0x095E	; 0x80095e <pxOverflowDelayedTaskList+0x1>
    1de4:	30 93 60 09 	sts	0x0960, r19	; 0x800960 <pxDelayedTaskList+0x1>
    1de8:	20 93 5f 09 	sts	0x095F, r18	; 0x80095f <pxDelayedTaskList>
    1dec:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <pxOverflowDelayedTaskList+0x1>
    1df0:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <pxOverflowDelayedTaskList>
    1df4:	80 91 39 09 	lds	r24, 0x0939	; 0x800939 <xNumOfOverflows>
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <xNumOfOverflows>
    1dfe:	fc dd       	rcall	.-1032   	; 0x19f8 <prvResetNextTaskUnblockTime>
    1e00:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <xNextTaskUnblockTime>
    1e04:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <xNextTaskUnblockTime+0x1>
    1e08:	e8 16       	cp	r14, r24
    1e0a:	f9 06       	cpc	r15, r25
    1e0c:	10 f4       	brcc	.+4      	; 0x1e12 <xTaskIncrementTick+0x72>
    1e0e:	d1 2c       	mov	r13, r1
    1e10:	53 c0       	rjmp	.+166    	; 0x1eb8 <xTaskIncrementTick+0x118>
    1e12:	d1 2c       	mov	r13, r1
    1e14:	cc 24       	eor	r12, r12
    1e16:	c3 94       	inc	r12
    1e18:	e0 91 5f 09 	lds	r30, 0x095F	; 0x80095f <pxDelayedTaskList>
    1e1c:	f0 91 60 09 	lds	r31, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1e20:	80 81       	ld	r24, Z
    1e22:	81 11       	cpse	r24, r1
    1e24:	07 c0       	rjmp	.+14     	; 0x1e34 <xTaskIncrementTick+0x94>
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	9f ef       	ldi	r25, 0xFF	; 255
    1e2a:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <xNextTaskUnblockTime+0x1>
    1e2e:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <xNextTaskUnblockTime>
    1e32:	42 c0       	rjmp	.+132    	; 0x1eb8 <xTaskIncrementTick+0x118>
    1e34:	e0 91 5f 09 	lds	r30, 0x095F	; 0x80095f <pxDelayedTaskList>
    1e38:	f0 91 60 09 	lds	r31, 0x0960	; 0x800960 <pxDelayedTaskList+0x1>
    1e3c:	05 80       	ldd	r0, Z+5	; 0x05
    1e3e:	f6 81       	ldd	r31, Z+6	; 0x06
    1e40:	e0 2d       	mov	r30, r0
    1e42:	c6 81       	ldd	r28, Z+6	; 0x06
    1e44:	d7 81       	ldd	r29, Z+7	; 0x07
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	e8 16       	cp	r14, r24
    1e4c:	f9 06       	cpc	r15, r25
    1e4e:	28 f4       	brcc	.+10     	; 0x1e5a <xTaskIncrementTick+0xba>
    1e50:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <xNextTaskUnblockTime+0x1>
    1e54:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <xNextTaskUnblockTime>
    1e58:	2f c0       	rjmp	.+94     	; 0x1eb8 <xTaskIncrementTick+0x118>
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	0e 5f       	subi	r16, 0xFE	; 254
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	c8 01       	movw	r24, r16
    1e62:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    1e66:	8c 89       	ldd	r24, Y+20	; 0x14
    1e68:	9d 89       	ldd	r25, Y+21	; 0x15
    1e6a:	89 2b       	or	r24, r25
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <xTaskIncrementTick+0xd6>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	0c 96       	adiw	r24, 0x0c	; 12
    1e72:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    1e76:	8e 89       	ldd	r24, Y+22	; 0x16
    1e78:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    1e7c:	98 17       	cp	r25, r24
    1e7e:	10 f4       	brcc	.+4      	; 0x1e84 <xTaskIncrementTick+0xe4>
    1e80:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9c 01       	movw	r18, r24
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	22 0f       	add	r18, r18
    1e8e:	33 1f       	adc	r19, r19
    1e90:	22 0f       	add	r18, r18
    1e92:	33 1f       	adc	r19, r19
    1e94:	82 0f       	add	r24, r18
    1e96:	93 1f       	adc	r25, r19
    1e98:	b8 01       	movw	r22, r16
    1e9a:	8d 58       	subi	r24, 0x8D	; 141
    1e9c:	96 4f       	sbci	r25, 0xF6	; 246
    1e9e:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    1ea2:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1ea6:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1eaa:	9e 89       	ldd	r25, Y+22	; 0x16
    1eac:	86 89       	ldd	r24, Z+22	; 0x16
    1eae:	98 17       	cp	r25, r24
    1eb0:	08 f4       	brcc	.+2      	; 0x1eb4 <xTaskIncrementTick+0x114>
    1eb2:	b2 cf       	rjmp	.-156    	; 0x1e18 <xTaskIncrementTick+0x78>
    1eb4:	dc 2c       	mov	r13, r12
    1eb6:	b0 cf       	rjmp	.-160    	; 0x1e18 <xTaskIncrementTick+0x78>
    1eb8:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1ebc:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1ec0:	86 89       	ldd	r24, Z+22	; 0x16
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	8e 0f       	add	r24, r30
    1ed4:	9f 1f       	adc	r25, r31
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ed 58       	subi	r30, 0x8D	; 141
    1eda:	f6 4f       	sbci	r31, 0xF6	; 246
    1edc:	80 81       	ld	r24, Z
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	48 f0       	brcs	.+18     	; 0x1ef4 <xTaskIncrementTick+0x154>
    1ee2:	dd 24       	eor	r13, r13
    1ee4:	d3 94       	inc	r13
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <xTaskIncrementTick+0x154>
    1ee8:	80 91 3b 09 	lds	r24, 0x093B	; 0x80093b <uxPendedTicks>
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <uxPendedTicks>
    1ef2:	d1 2c       	mov	r13, r1
    1ef4:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <xYieldPending>
    1ef8:	88 23       	and	r24, r24
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <xTaskIncrementTick+0x160>
    1efc:	dd 24       	eor	r13, r13
    1efe:	d3 94       	inc	r13
    1f00:	8d 2d       	mov	r24, r13
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	08 95       	ret

00001f14 <xTaskResumeAll>:
    1f14:	df 92       	push	r13
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	0f 92       	push	r0
    1f28:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    1f2c:	81 50       	subi	r24, 0x01	; 1
    1f2e:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <uxSchedulerSuspended>
    1f32:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    1f36:	81 11       	cpse	r24, r1
    1f38:	5d c0       	rjmp	.+186    	; 0x1ff4 <xTaskResumeAll+0xe0>
    1f3a:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <uxCurrentNumberOfTasks>
    1f3e:	81 11       	cpse	r24, r1
    1f40:	33 c0       	rjmp	.+102    	; 0x1fa8 <xTaskResumeAll+0x94>
    1f42:	5b c0       	rjmp	.+182    	; 0x1ffa <xTaskResumeAll+0xe6>
    1f44:	d7 01       	movw	r26, r14
    1f46:	15 96       	adiw	r26, 0x05	; 5
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	16 97       	sbiw	r26, 0x06	; 6
    1f4e:	c6 81       	ldd	r28, Z+6	; 0x06
    1f50:	d7 81       	ldd	r29, Z+7	; 0x07
    1f52:	ce 01       	movw	r24, r28
    1f54:	0c 96       	adiw	r24, 0x0c	; 12
    1f56:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	0e 5f       	subi	r16, 0xFE	; 254
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	c8 01       	movw	r24, r16
    1f62:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    1f66:	8e 89       	ldd	r24, Y+22	; 0x16
    1f68:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    1f6c:	98 17       	cp	r25, r24
    1f6e:	10 f4       	brcc	.+4      	; 0x1f74 <xTaskResumeAll+0x60>
    1f70:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 01       	movw	r18, r24
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	22 0f       	add	r18, r18
    1f7e:	33 1f       	adc	r19, r19
    1f80:	22 0f       	add	r18, r18
    1f82:	33 1f       	adc	r19, r19
    1f84:	82 0f       	add	r24, r18
    1f86:	93 1f       	adc	r25, r19
    1f88:	b8 01       	movw	r22, r16
    1f8a:	8d 58       	subi	r24, 0x8D	; 141
    1f8c:	96 4f       	sbci	r25, 0xF6	; 246
    1f8e:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    1f92:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    1f96:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    1f9a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f9c:	86 89       	ldd	r24, Z+22	; 0x16
    1f9e:	98 17       	cp	r25, r24
    1fa0:	68 f0       	brcs	.+26     	; 0x1fbc <xTaskResumeAll+0xa8>
    1fa2:	d0 92 3a 09 	sts	0x093A, r13	; 0x80093a <xYieldPending>
    1fa6:	0a c0       	rjmp	.+20     	; 0x1fbc <xTaskResumeAll+0xa8>
    1fa8:	c0 e0       	ldi	r28, 0x00	; 0
    1faa:	d0 e0       	ldi	r29, 0x00	; 0
    1fac:	0f 2e       	mov	r0, r31
    1fae:	f4 e5       	ldi	r31, 0x54	; 84
    1fb0:	ef 2e       	mov	r14, r31
    1fb2:	f9 e0       	ldi	r31, 0x09	; 9
    1fb4:	ff 2e       	mov	r15, r31
    1fb6:	f0 2d       	mov	r31, r0
    1fb8:	dd 24       	eor	r13, r13
    1fba:	d3 94       	inc	r13
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	80 81       	ld	r24, Z
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	c0 cf       	rjmp	.-128    	; 0x1f44 <xTaskResumeAll+0x30>
    1fc4:	cd 2b       	or	r28, r29
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <xTaskResumeAll+0xb6>
    1fc8:	17 dd       	rcall	.-1490   	; 0x19f8 <prvResetNextTaskUnblockTime>
    1fca:	c0 91 3b 09 	lds	r28, 0x093B	; 0x80093b <uxPendedTicks>
    1fce:	cc 23       	and	r28, r28
    1fd0:	49 f0       	breq	.+18     	; 0x1fe4 <xTaskResumeAll+0xd0>
    1fd2:	d1 e0       	ldi	r29, 0x01	; 1
    1fd4:	e5 de       	rcall	.-566    	; 0x1da0 <xTaskIncrementTick>
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	d0 93 3a 09 	sts	0x093A, r29	; 0x80093a <xYieldPending>
    1fdc:	c1 50       	subi	r28, 0x01	; 1
    1fde:	d1 f7       	brne	.-12     	; 0x1fd4 <xTaskResumeAll+0xc0>
    1fe0:	10 92 3b 09 	sts	0x093B, r1	; 0x80093b <uxPendedTicks>
    1fe4:	80 91 3a 09 	lds	r24, 0x093A	; 0x80093a <xYieldPending>
    1fe8:	88 23       	and	r24, r24
    1fea:	31 f0       	breq	.+12     	; 0x1ff8 <xTaskResumeAll+0xe4>
    1fec:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vPortYield>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <xTaskResumeAll+0xe6>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xTaskResumeAll+0xe6>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	08 95       	ret

0000200e <vTaskDelay>:
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	ec 01       	movw	r28, r24
    2014:	89 2b       	or	r24, r25
    2016:	39 f0       	breq	.+14     	; 0x2026 <vTaskDelay+0x18>
    2018:	b3 de       	rcall	.-666    	; 0x1d80 <vTaskSuspendAll>
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	ce 01       	movw	r24, r28
    201e:	0b dd       	rcall	.-1514   	; 0x1a36 <prvAddCurrentTaskToDelayedList>
    2020:	79 df       	rcall	.-270    	; 0x1f14 <xTaskResumeAll>
    2022:	81 11       	cpse	r24, r1
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vTaskDelay+0x1c>
    2026:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vPortYield>
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <vTaskSwitchContext>:
    2030:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    2034:	88 23       	and	r24, r24
    2036:	21 f0       	breq	.+8      	; 0x2040 <vTaskSwitchContext+0x10>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <xYieldPending>
    203e:	08 95       	ret
    2040:	10 92 3a 09 	sts	0x093A, r1	; 0x80093a <xYieldPending>
    2044:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2048:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    204c:	85 a1       	ldd	r24, Z+37	; 0x25
    204e:	0e 94 1c 05 	call	0xa38	; 0xa38 <task_switch_out>
    2052:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
    2056:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    205a:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    205e:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2062:	2d 91       	ld	r18, X+
    2064:	3c 91       	ld	r19, X
    2066:	87 89       	ldd	r24, Z+23	; 0x17
    2068:	90 8d       	ldd	r25, Z+24	; 0x18
    206a:	82 17       	cp	r24, r18
    206c:	93 07       	cpc	r25, r19
    206e:	58 f0       	brcs	.+22     	; 0x2086 <vTaskSwitchContext+0x56>
    2070:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    2074:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2078:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    207c:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2080:	67 5e       	subi	r22, 0xE7	; 231
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	55 d5       	rcall	.+2730   	; 0x2b30 <vApplicationStackOverflowHook>
    2086:	20 91 3d 09 	lds	r18, 0x093D	; 0x80093d <uxTopReadyPriority>
    208a:	82 2f       	mov	r24, r18
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	e8 0f       	add	r30, r24
    209e:	f9 1f       	adc	r31, r25
    20a0:	ed 58       	subi	r30, 0x8D	; 141
    20a2:	f6 4f       	sbci	r31, 0xF6	; 246
    20a4:	30 81       	ld	r19, Z
    20a6:	31 11       	cpse	r19, r1
    20a8:	11 c0       	rjmp	.+34     	; 0x20cc <vTaskSwitchContext+0x9c>
    20aa:	21 50       	subi	r18, 0x01	; 1
    20ac:	82 2f       	mov	r24, r18
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e8 0f       	add	r30, r24
    20c0:	f9 1f       	adc	r31, r25
    20c2:	ed 58       	subi	r30, 0x8D	; 141
    20c4:	f6 4f       	sbci	r31, 0xF6	; 246
    20c6:	30 81       	ld	r19, Z
    20c8:	33 23       	and	r19, r19
    20ca:	79 f3       	breq	.-34     	; 0x20aa <vTaskSwitchContext+0x7a>
    20cc:	ac 01       	movw	r20, r24
    20ce:	44 0f       	add	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	44 0f       	add	r20, r20
    20d4:	55 1f       	adc	r21, r21
    20d6:	44 0f       	add	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	48 0f       	add	r20, r24
    20dc:	59 1f       	adc	r21, r25
    20de:	da 01       	movw	r26, r20
    20e0:	ad 58       	subi	r26, 0x8D	; 141
    20e2:	b6 4f       	sbci	r27, 0xF6	; 246
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	ed 91       	ld	r30, X+
    20e8:	fc 91       	ld	r31, X
    20ea:	12 97       	sbiw	r26, 0x02	; 2
    20ec:	02 80       	ldd	r0, Z+2	; 0x02
    20ee:	f3 81       	ldd	r31, Z+3	; 0x03
    20f0:	e0 2d       	mov	r30, r0
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	fc 93       	st	X, r31
    20f6:	ee 93       	st	-X, r30
    20f8:	11 97       	sbiw	r26, 0x01	; 1
    20fa:	4a 58       	subi	r20, 0x8A	; 138
    20fc:	56 4f       	sbci	r21, 0xF6	; 246
    20fe:	e4 17       	cp	r30, r20
    2100:	f5 07       	cpc	r31, r21
    2102:	29 f4       	brne	.+10     	; 0x210e <vTaskSwitchContext+0xde>
    2104:	42 81       	ldd	r20, Z+2	; 0x02
    2106:	53 81       	ldd	r21, Z+3	; 0x03
    2108:	fd 01       	movw	r30, r26
    210a:	52 83       	std	Z+2, r21	; 0x02
    210c:	41 83       	std	Z+1, r20	; 0x01
    210e:	fc 01       	movw	r30, r24
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	8e 0f       	add	r24, r30
    211e:	9f 1f       	adc	r25, r31
    2120:	fc 01       	movw	r30, r24
    2122:	ed 58       	subi	r30, 0x8D	; 141
    2124:	f6 4f       	sbci	r31, 0xF6	; 246
    2126:	01 80       	ldd	r0, Z+1	; 0x01
    2128:	f2 81       	ldd	r31, Z+2	; 0x02
    212a:	e0 2d       	mov	r30, r0
    212c:	86 81       	ldd	r24, Z+6	; 0x06
    212e:	97 81       	ldd	r25, Z+7	; 0x07
    2130:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <pxCurrentTCB+0x1>
    2134:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <pxCurrentTCB>
    2138:	20 93 3d 09 	sts	0x093D, r18	; 0x80093d <uxTopReadyPriority>
    213c:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2140:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2144:	85 a1       	ldd	r24, Z+37	; 0x25
    2146:	0c 94 12 05 	jmp	0xa24	; 0xa24 <task_switch_in>
    214a:	08 95       	ret

0000214c <vTaskPlaceOnEventList>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	eb 01       	movw	r28, r22
    2152:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    2156:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    215a:	64 5f       	subi	r22, 0xF4	; 244
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	0e 94 77 05 	call	0xaee	; 0xaee <vListInsert>
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	ce 01       	movw	r24, r28
    2166:	67 dc       	rcall	.-1842   	; 0x1a36 <prvAddCurrentTaskToDelayedList>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <vTaskPlaceOnEventListRestricted>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	8b 01       	movw	r16, r22
    2176:	c4 2f       	mov	r28, r20
    2178:	60 91 97 09 	lds	r22, 0x0997	; 0x800997 <pxCurrentTCB>
    217c:	70 91 98 09 	lds	r23, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2180:	64 5f       	subi	r22, 0xF4	; 244
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    2188:	cc 23       	and	r28, r28
    218a:	11 f0       	breq	.+4      	; 0x2190 <vTaskPlaceOnEventListRestricted+0x22>
    218c:	0f ef       	ldi	r16, 0xFF	; 255
    218e:	1f ef       	ldi	r17, 0xFF	; 255
    2190:	6c 2f       	mov	r22, r28
    2192:	c8 01       	movw	r24, r16
    2194:	50 dc       	rcall	.-1888   	; 0x1a36 <prvAddCurrentTaskToDelayedList>
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <xTaskRemoveFromEventList>:
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	dc 01       	movw	r26, r24
    21a8:	15 96       	adiw	r26, 0x05	; 5
    21aa:	ed 91       	ld	r30, X+
    21ac:	fc 91       	ld	r31, X
    21ae:	16 97       	sbiw	r26, 0x06	; 6
    21b0:	c6 81       	ldd	r28, Z+6	; 0x06
    21b2:	d7 81       	ldd	r29, Z+7	; 0x07
    21b4:	8e 01       	movw	r16, r28
    21b6:	04 5f       	subi	r16, 0xF4	; 244
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	c8 01       	movw	r24, r16
    21bc:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    21c0:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    21c4:	81 11       	cpse	r24, r1
    21c6:	1c c0       	rjmp	.+56     	; 0x2200 <__stack+0x1>
    21c8:	0a 50       	subi	r16, 0x0A	; 10
    21ca:	11 09       	sbc	r17, r1
    21cc:	c8 01       	movw	r24, r16
    21ce:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    21d2:	8e 89       	ldd	r24, Y+22	; 0x16
    21d4:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    21d8:	98 17       	cp	r25, r24
    21da:	10 f4       	brcc	.+4      	; 0x21e0 <xTaskRemoveFromEventList+0x42>
    21dc:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 01       	movw	r18, r24
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	22 0f       	add	r18, r18
    21ea:	33 1f       	adc	r19, r19
    21ec:	22 0f       	add	r18, r18
    21ee:	33 1f       	adc	r19, r19
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	b8 01       	movw	r22, r16
    21f6:	8d 58       	subi	r24, 0x8D	; 141
    21f8:	96 4f       	sbci	r25, 0xF6	; 246
    21fa:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <__stack+0xb>
    2200:	b8 01       	movw	r22, r16
    2202:	84 e5       	ldi	r24, 0x54	; 84
    2204:	99 e0       	ldi	r25, 0x09	; 9
    2206:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    220a:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    220e:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2212:	9e 89       	ldd	r25, Y+22	; 0x16
    2214:	86 89       	ldd	r24, Z+22	; 0x16
    2216:	89 17       	cp	r24, r25
    2218:	20 f4       	brcc	.+8      	; 0x2222 <__stack+0x23>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <xYieldPending>
    2220:	01 c0       	rjmp	.+2      	; 0x2224 <__stack+0x25>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <vTaskInternalSetTimeOutState>:
    222e:	20 91 39 09 	lds	r18, 0x0939	; 0x800939 <xNumOfOverflows>
    2232:	fc 01       	movw	r30, r24
    2234:	20 83       	st	Z, r18
    2236:	20 91 3e 09 	lds	r18, 0x093E	; 0x80093e <xTickCount>
    223a:	30 91 3f 09 	lds	r19, 0x093F	; 0x80093f <xTickCount+0x1>
    223e:	32 83       	std	Z+2, r19	; 0x02
    2240:	21 83       	std	Z+1, r18	; 0x01
    2242:	08 95       	ret

00002244 <xTaskCheckForTimeOut>:
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	0f 92       	push	r0
    224e:	20 91 3e 09 	lds	r18, 0x093E	; 0x80093e <xTickCount>
    2252:	30 91 3f 09 	lds	r19, 0x093F	; 0x80093f <xTickCount+0x1>
    2256:	db 01       	movw	r26, r22
    2258:	4d 91       	ld	r20, X+
    225a:	5c 91       	ld	r21, X
    225c:	4f 3f       	cpi	r20, 0xFF	; 255
    225e:	bf ef       	ldi	r27, 0xFF	; 255
    2260:	5b 07       	cpc	r21, r27
    2262:	e9 f0       	breq	.+58     	; 0x229e <xTaskCheckForTimeOut+0x5a>
    2264:	ec 01       	movw	r28, r24
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	a0 91 39 09 	lds	r26, 0x0939	; 0x800939 <xNumOfOverflows>
    226e:	b8 81       	ld	r27, Y
    2270:	ba 17       	cp	r27, r26
    2272:	19 f0       	breq	.+6      	; 0x227a <xTaskCheckForTimeOut+0x36>
    2274:	2e 17       	cp	r18, r30
    2276:	3f 07       	cpc	r19, r31
    2278:	a0 f4       	brcc	.+40     	; 0x22a2 <xTaskCheckForTimeOut+0x5e>
    227a:	2e 1b       	sub	r18, r30
    227c:	3f 0b       	sbc	r19, r31
    227e:	24 17       	cp	r18, r20
    2280:	35 07       	cpc	r19, r21
    2282:	40 f4       	brcc	.+16     	; 0x2294 <xTaskCheckForTimeOut+0x50>
    2284:	fb 01       	movw	r30, r22
    2286:	42 1b       	sub	r20, r18
    2288:	53 0b       	sbc	r21, r19
    228a:	51 83       	std	Z+1, r21	; 0x01
    228c:	40 83       	st	Z, r20
    228e:	cf df       	rcall	.-98     	; 0x222e <vTaskInternalSetTimeOutState>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <xTaskCheckForTimeOut+0x60>
    2294:	fb 01       	movw	r30, r22
    2296:	11 82       	std	Z+1, r1	; 0x01
    2298:	10 82       	st	Z, r1
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <xTaskCheckForTimeOut+0x60>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <xTaskCheckForTimeOut+0x60>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <vTaskMissedYield>:
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <xYieldPending>
    22b4:	08 95       	ret

000022b6 <xTaskGetCurrentTaskHandle>:
    22b6:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    22ba:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    22be:	08 95       	ret

000022c0 <xTaskGetSchedulerState>:
    22c0:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <xSchedulerRunning>
    22c4:	88 23       	and	r24, r24
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <xTaskGetSchedulerState+0x14>
    22c8:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    22cc:	88 23       	and	r24, r24
    22ce:	21 f0       	breq	.+8      	; 0x22d8 <xTaskGetSchedulerState+0x18>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	08 95       	ret
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	08 95       	ret
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	08 95       	ret

000022dc <xTaskPriorityInherit>:
    22dc:	0f 93       	push	r16
    22de:	1f 93       	push	r17
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	fc 01       	movw	r30, r24
    22e6:	89 2b       	or	r24, r25
    22e8:	09 f4       	brne	.+2      	; 0x22ec <xTaskPriorityInherit+0x10>
    22ea:	64 c0       	rjmp	.+200    	; 0x23b4 <xTaskPriorityInherit+0xd8>
    22ec:	26 89       	ldd	r18, Z+22	; 0x16
    22ee:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
    22f2:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    22f6:	56 96       	adiw	r26, 0x16	; 22
    22f8:	8c 91       	ld	r24, X
    22fa:	28 17       	cp	r18, r24
    22fc:	08 f0       	brcs	.+2      	; 0x2300 <xTaskPriorityInherit+0x24>
    22fe:	4e c0       	rjmp	.+156    	; 0x239c <xTaskPriorityInherit+0xc0>
    2300:	84 85       	ldd	r24, Z+12	; 0x0c
    2302:	95 85       	ldd	r25, Z+13	; 0x0d
    2304:	99 23       	and	r25, r25
    2306:	64 f0       	brlt	.+24     	; 0x2320 <xTaskPriorityInherit+0x44>
    2308:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
    230c:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2310:	56 96       	adiw	r26, 0x16	; 22
    2312:	3c 91       	ld	r19, X
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	83 1b       	sub	r24, r19
    231a:	91 09       	sbc	r25, r1
    231c:	95 87       	std	Z+13, r25	; 0x0d
    231e:	84 87       	std	Z+12, r24	; 0x0c
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	c9 01       	movw	r24, r18
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	2d 58       	subi	r18, 0x8D	; 141
    2336:	36 4f       	sbci	r19, 0xF6	; 246
    2338:	82 85       	ldd	r24, Z+10	; 0x0a
    233a:	93 85       	ldd	r25, Z+11	; 0x0b
    233c:	82 17       	cp	r24, r18
    233e:	93 07       	cpc	r25, r19
    2340:	21 f5       	brne	.+72     	; 0x238a <xTaskPriorityInherit+0xae>
    2342:	8f 01       	movw	r16, r30
    2344:	ef 01       	movw	r28, r30
    2346:	22 96       	adiw	r28, 0x02	; 2
    2348:	ce 01       	movw	r24, r28
    234a:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    234e:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2352:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2356:	86 89       	ldd	r24, Z+22	; 0x16
    2358:	f8 01       	movw	r30, r16
    235a:	86 8b       	std	Z+22, r24	; 0x16
    235c:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    2360:	98 17       	cp	r25, r24
    2362:	10 f4       	brcc	.+4      	; 0x2368 <xTaskPriorityInherit+0x8c>
    2364:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9c 01       	movw	r18, r24
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	be 01       	movw	r22, r28
    237e:	8d 58       	subi	r24, 0x8D	; 141
    2380:	96 4f       	sbci	r25, 0xF6	; 246
    2382:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	16 c0       	rjmp	.+44     	; 0x23b6 <xTaskPriorityInherit+0xda>
    238a:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
    238e:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2392:	56 96       	adiw	r26, 0x16	; 22
    2394:	8c 91       	ld	r24, X
    2396:	86 8b       	std	Z+22, r24	; 0x16
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	0d c0       	rjmp	.+26     	; 0x23b6 <xTaskPriorityInherit+0xda>
    239c:	a0 91 97 09 	lds	r26, 0x0997	; 0x800997 <pxCurrentTCB>
    23a0:	b0 91 98 09 	lds	r27, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	23 a1       	ldd	r18, Z+35	; 0x23
    23a8:	56 96       	adiw	r26, 0x16	; 22
    23aa:	9c 91       	ld	r25, X
    23ac:	29 17       	cp	r18, r25
    23ae:	18 f0       	brcs	.+6      	; 0x23b6 <xTaskPriorityInherit+0xda>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <xTaskPriorityInherit+0xda>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	08 95       	ret

000023c0 <xTaskPriorityDisinherit>:
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	fc 01       	movw	r30, r24
    23ca:	89 2b       	or	r24, r25
    23cc:	79 f1       	breq	.+94     	; 0x242c <xTaskPriorityDisinherit+0x6c>
    23ce:	84 a1       	ldd	r24, Z+36	; 0x24
    23d0:	81 50       	subi	r24, 0x01	; 1
    23d2:	84 a3       	std	Z+36, r24	; 0x24
    23d4:	26 89       	ldd	r18, Z+22	; 0x16
    23d6:	93 a1       	ldd	r25, Z+35	; 0x23
    23d8:	29 17       	cp	r18, r25
    23da:	51 f1       	breq	.+84     	; 0x2430 <xTaskPriorityDisinherit+0x70>
    23dc:	81 11       	cpse	r24, r1
    23de:	2a c0       	rjmp	.+84     	; 0x2434 <xTaskPriorityDisinherit+0x74>
    23e0:	ef 01       	movw	r28, r30
    23e2:	8f 01       	movw	r16, r30
    23e4:	0e 5f       	subi	r16, 0xFE	; 254
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	c8 01       	movw	r24, r16
    23ea:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    23ee:	8b a1       	ldd	r24, Y+35	; 0x23
    23f0:	8e 8b       	std	Y+22, r24	; 0x16
    23f2:	24 e0       	ldi	r18, 0x04	; 4
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	28 1b       	sub	r18, r24
    23f8:	31 09       	sbc	r19, r1
    23fa:	3d 87       	std	Y+13, r19	; 0x0d
    23fc:	2c 87       	std	Y+12, r18	; 0x0c
    23fe:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    2402:	98 17       	cp	r25, r24
    2404:	10 f4       	brcc	.+4      	; 0x240a <xTaskPriorityDisinherit+0x4a>
    2406:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 01       	movw	r18, r24
    240e:	22 0f       	add	r18, r18
    2410:	33 1f       	adc	r19, r19
    2412:	22 0f       	add	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	82 0f       	add	r24, r18
    241c:	93 1f       	adc	r25, r19
    241e:	b8 01       	movw	r22, r16
    2420:	8d 58       	subi	r24, 0x8D	; 141
    2422:	96 4f       	sbci	r25, 0xF6	; 246
    2424:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <xTaskPriorityDisinherit+0x76>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	03 c0       	rjmp	.+6      	; 0x2436 <xTaskPriorityDisinherit+0x76>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <xTaskPriorityDisinherit+0x76>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	1f 91       	pop	r17
    243c:	0f 91       	pop	r16
    243e:	08 95       	ret

00002440 <vTaskPriorityDisinheritAfterTimeout>:
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	fc 01       	movw	r30, r24
    244a:	89 2b       	or	r24, r25
    244c:	09 f4       	brne	.+2      	; 0x2450 <vTaskPriorityDisinheritAfterTimeout+0x10>
    244e:	43 c0       	rjmp	.+134    	; 0x24d6 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2450:	93 a1       	ldd	r25, Z+35	; 0x23
    2452:	96 17       	cp	r25, r22
    2454:	08 f4       	brcc	.+2      	; 0x2458 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2456:	96 2f       	mov	r25, r22
    2458:	86 89       	ldd	r24, Z+22	; 0x16
    245a:	89 17       	cp	r24, r25
    245c:	e1 f1       	breq	.+120    	; 0x24d6 <vTaskPriorityDisinheritAfterTimeout+0x96>
    245e:	24 a1       	ldd	r18, Z+36	; 0x24
    2460:	21 30       	cpi	r18, 0x01	; 1
    2462:	c9 f5       	brne	.+114    	; 0x24d6 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2464:	96 8b       	std	Z+22, r25	; 0x16
    2466:	24 85       	ldd	r18, Z+12	; 0x0c
    2468:	35 85       	ldd	r19, Z+13	; 0x0d
    246a:	33 23       	and	r19, r19
    246c:	34 f0       	brlt	.+12     	; 0x247a <vTaskPriorityDisinheritAfterTimeout+0x3a>
    246e:	24 e0       	ldi	r18, 0x04	; 4
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	29 1b       	sub	r18, r25
    2474:	31 09       	sbc	r19, r1
    2476:	35 87       	std	Z+13, r19	; 0x0d
    2478:	24 87       	std	Z+12, r18	; 0x0c
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9c 01       	movw	r18, r24
    247e:	22 0f       	add	r18, r18
    2480:	33 1f       	adc	r19, r19
    2482:	22 0f       	add	r18, r18
    2484:	33 1f       	adc	r19, r19
    2486:	22 0f       	add	r18, r18
    2488:	33 1f       	adc	r19, r19
    248a:	82 0f       	add	r24, r18
    248c:	93 1f       	adc	r25, r19
    248e:	8d 58       	subi	r24, 0x8D	; 141
    2490:	96 4f       	sbci	r25, 0xF6	; 246
    2492:	22 85       	ldd	r18, Z+10	; 0x0a
    2494:	33 85       	ldd	r19, Z+11	; 0x0b
    2496:	28 17       	cp	r18, r24
    2498:	39 07       	cpc	r19, r25
    249a:	e9 f4       	brne	.+58     	; 0x24d6 <vTaskPriorityDisinheritAfterTimeout+0x96>
    249c:	ef 01       	movw	r28, r30
    249e:	8f 01       	movw	r16, r30
    24a0:	0e 5f       	subi	r16, 0xFE	; 254
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	c8 01       	movw	r24, r16
    24a6:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    24aa:	8e 89       	ldd	r24, Y+22	; 0x16
    24ac:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    24b0:	98 17       	cp	r25, r24
    24b2:	10 f4       	brcc	.+4      	; 0x24b8 <vTaskPriorityDisinheritAfterTimeout+0x78>
    24b4:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9c 01       	movw	r18, r24
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	b8 01       	movw	r22, r16
    24ce:	8d 58       	subi	r24, 0x8D	; 141
    24d0:	96 4f       	sbci	r25, 0xF6	; 246
    24d2:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <pvTaskIncrementMutexHeldCount>:
    24e0:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    24e4:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    24e8:	89 2b       	or	r24, r25
    24ea:	39 f0       	breq	.+14     	; 0x24fa <pvTaskIncrementMutexHeldCount+0x1a>
    24ec:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    24f0:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    24f4:	84 a1       	ldd	r24, Z+36	; 0x24
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	84 a3       	std	Z+36, r24	; 0x24
    24fa:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    24fe:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2502:	08 95       	ret

00002504 <xTaskNotifyWait>:
    2504:	4f 92       	push	r4
    2506:	5f 92       	push	r5
    2508:	6f 92       	push	r6
    250a:	7f 92       	push	r7
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	ef 92       	push	r14
    2516:	ff 92       	push	r15
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	49 01       	movw	r8, r18
    251e:	5a 01       	movw	r10, r20
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	0f 92       	push	r0
    2526:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    252a:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    252e:	23 a5       	ldd	r18, Z+43	; 0x2b
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	21 f1       	breq	.+72     	; 0x257c <xTaskNotifyWait+0x78>
    2534:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2538:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    253c:	47 a0       	ldd	r4, Z+39	; 0x27
    253e:	50 a4       	ldd	r5, Z+40	; 0x28
    2540:	61 a4       	ldd	r6, Z+41	; 0x29
    2542:	72 a4       	ldd	r7, Z+42	; 0x2a
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	80 95       	com	r24
    254a:	90 95       	com	r25
    254c:	a0 95       	com	r26
    254e:	b0 95       	com	r27
    2550:	84 21       	and	r24, r4
    2552:	95 21       	and	r25, r5
    2554:	a6 21       	and	r26, r6
    2556:	b7 21       	and	r27, r7
    2558:	87 a3       	std	Z+39, r24	; 0x27
    255a:	90 a7       	std	Z+40, r25	; 0x28
    255c:	a1 a7       	std	Z+41, r26	; 0x29
    255e:	b2 a7       	std	Z+42, r27	; 0x2a
    2560:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2564:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	83 a7       	std	Z+43, r24	; 0x2b
    256c:	e1 14       	cp	r14, r1
    256e:	f1 04       	cpc	r15, r1
    2570:	29 f0       	breq	.+10     	; 0x257c <xTaskNotifyWait+0x78>
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	c7 01       	movw	r24, r14
    2576:	5f da       	rcall	.-2882   	; 0x1a36 <prvAddCurrentTaskToDelayedList>
    2578:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vPortYield>
    257c:	0f 90       	pop	r0
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	0f 92       	push	r0
    2586:	01 15       	cp	r16, r1
    2588:	11 05       	cpc	r17, r1
    258a:	69 f0       	breq	.+26     	; 0x25a6 <xTaskNotifyWait+0xa2>
    258c:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    2590:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    2594:	87 a1       	ldd	r24, Z+39	; 0x27
    2596:	90 a5       	ldd	r25, Z+40	; 0x28
    2598:	a1 a5       	ldd	r26, Z+41	; 0x29
    259a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    259c:	f8 01       	movw	r30, r16
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
    25a6:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    25aa:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    25ae:	83 a5       	ldd	r24, Z+43	; 0x2b
    25b0:	82 30       	cpi	r24, 0x02	; 2
    25b2:	b1 f4       	brne	.+44     	; 0x25e0 <xTaskNotifyWait+0xdc>
    25b4:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    25b8:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    25bc:	87 a1       	ldd	r24, Z+39	; 0x27
    25be:	90 a5       	ldd	r25, Z+40	; 0x28
    25c0:	a1 a5       	ldd	r26, Z+41	; 0x29
    25c2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25c4:	80 94       	com	r8
    25c6:	90 94       	com	r9
    25c8:	a0 94       	com	r10
    25ca:	b0 94       	com	r11
    25cc:	88 22       	and	r8, r24
    25ce:	99 22       	and	r9, r25
    25d0:	aa 22       	and	r10, r26
    25d2:	bb 22       	and	r11, r27
    25d4:	87 a2       	std	Z+39, r8	; 0x27
    25d6:	90 a6       	std	Z+40, r9	; 0x28
    25d8:	a1 a6       	std	Z+41, r10	; 0x29
    25da:	b2 a6       	std	Z+42, r11	; 0x2a
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <xTaskNotifyWait+0xde>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    25e6:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    25ea:	13 a6       	std	Z+43, r1	; 0x2b
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	7f 90       	pop	r7
    2602:	6f 90       	pop	r6
    2604:	5f 90       	pop	r5
    2606:	4f 90       	pop	r4
    2608:	08 95       	ret

0000260a <xTaskGenericNotify>:
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	fc 01       	movw	r30, r24
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	0f 92       	push	r0
    261a:	01 15       	cp	r16, r1
    261c:	11 05       	cpc	r17, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <xTaskGenericNotify+0x28>
    2620:	87 a1       	ldd	r24, Z+39	; 0x27
    2622:	90 a5       	ldd	r25, Z+40	; 0x28
    2624:	a1 a5       	ldd	r26, Z+41	; 0x29
    2626:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2628:	e8 01       	movw	r28, r16
    262a:	88 83       	st	Y, r24
    262c:	99 83       	std	Y+1, r25	; 0x01
    262e:	aa 83       	std	Y+2, r26	; 0x02
    2630:	bb 83       	std	Y+3, r27	; 0x03
    2632:	83 a5       	ldd	r24, Z+43	; 0x2b
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	93 a7       	std	Z+43, r25	; 0x2b
    2638:	22 30       	cpi	r18, 0x02	; 2
    263a:	b1 f0       	breq	.+44     	; 0x2668 <xTaskGenericNotify+0x5e>
    263c:	18 f4       	brcc	.+6      	; 0x2644 <xTaskGenericNotify+0x3a>
    263e:	21 30       	cpi	r18, 0x01	; 1
    2640:	31 f0       	breq	.+12     	; 0x264e <xTaskGenericNotify+0x44>
    2642:	2a c0       	rjmp	.+84     	; 0x2698 <xTaskGenericNotify+0x8e>
    2644:	23 30       	cpi	r18, 0x03	; 3
    2646:	e9 f0       	breq	.+58     	; 0x2682 <xTaskGenericNotify+0x78>
    2648:	24 30       	cpi	r18, 0x04	; 4
    264a:	01 f1       	breq	.+64     	; 0x268c <xTaskGenericNotify+0x82>
    264c:	25 c0       	rjmp	.+74     	; 0x2698 <xTaskGenericNotify+0x8e>
    264e:	07 a1       	ldd	r16, Z+39	; 0x27
    2650:	10 a5       	ldd	r17, Z+40	; 0x28
    2652:	21 a5       	ldd	r18, Z+41	; 0x29
    2654:	32 a5       	ldd	r19, Z+42	; 0x2a
    2656:	40 2b       	or	r20, r16
    2658:	51 2b       	or	r21, r17
    265a:	62 2b       	or	r22, r18
    265c:	73 2b       	or	r23, r19
    265e:	47 a3       	std	Z+39, r20	; 0x27
    2660:	50 a7       	std	Z+40, r21	; 0x28
    2662:	61 a7       	std	Z+41, r22	; 0x29
    2664:	72 a7       	std	Z+42, r23	; 0x2a
    2666:	18 c0       	rjmp	.+48     	; 0x2698 <xTaskGenericNotify+0x8e>
    2668:	47 a1       	ldd	r20, Z+39	; 0x27
    266a:	50 a5       	ldd	r21, Z+40	; 0x28
    266c:	61 a5       	ldd	r22, Z+41	; 0x29
    266e:	72 a5       	ldd	r23, Z+42	; 0x2a
    2670:	4f 5f       	subi	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	6f 4f       	sbci	r22, 0xFF	; 255
    2676:	7f 4f       	sbci	r23, 0xFF	; 255
    2678:	47 a3       	std	Z+39, r20	; 0x27
    267a:	50 a7       	std	Z+40, r21	; 0x28
    267c:	61 a7       	std	Z+41, r22	; 0x29
    267e:	72 a7       	std	Z+42, r23	; 0x2a
    2680:	0b c0       	rjmp	.+22     	; 0x2698 <xTaskGenericNotify+0x8e>
    2682:	47 a3       	std	Z+39, r20	; 0x27
    2684:	50 a7       	std	Z+40, r21	; 0x28
    2686:	61 a7       	std	Z+41, r22	; 0x29
    2688:	72 a7       	std	Z+42, r23	; 0x2a
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <xTaskGenericNotify+0x8e>
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	79 f1       	breq	.+94     	; 0x26ee <xTaskGenericNotify+0xe4>
    2690:	47 a3       	std	Z+39, r20	; 0x27
    2692:	50 a7       	std	Z+40, r21	; 0x28
    2694:	61 a7       	std	Z+41, r22	; 0x29
    2696:	72 a7       	std	Z+42, r23	; 0x2a
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	59 f5       	brne	.+86     	; 0x26f2 <xTaskGenericNotify+0xe8>
    269c:	ef 01       	movw	r28, r30
    269e:	8f 01       	movw	r16, r30
    26a0:	0e 5f       	subi	r16, 0xFE	; 254
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    26aa:	8e 89       	ldd	r24, Y+22	; 0x16
    26ac:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    26b0:	98 17       	cp	r25, r24
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <xTaskGenericNotify+0xae>
    26b4:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c 01       	movw	r18, r24
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	22 0f       	add	r18, r18
    26c2:	33 1f       	adc	r19, r19
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	82 0f       	add	r24, r18
    26ca:	93 1f       	adc	r25, r19
    26cc:	b8 01       	movw	r22, r16
    26ce:	8d 58       	subi	r24, 0x8D	; 141
    26d0:	96 4f       	sbci	r25, 0xF6	; 246
    26d2:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    26d6:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    26da:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    26de:	9e 89       	ldd	r25, Y+22	; 0x16
    26e0:	86 89       	ldd	r24, Z+22	; 0x16
    26e2:	89 17       	cp	r24, r25
    26e4:	40 f4       	brcc	.+16     	; 0x26f6 <xTaskGenericNotify+0xec>
    26e6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vPortYield>
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <xTaskGenericNotify+0xee>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	03 c0       	rjmp	.+6      	; 0x26f8 <xTaskGenericNotify+0xee>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	01 c0       	rjmp	.+2      	; 0x26f8 <xTaskGenericNotify+0xee>
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	08 95       	ret

00002706 <xTaskGenericNotifyFromISR>:
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	fc 01       	movw	r30, r24
    2714:	01 15       	cp	r16, r1
    2716:	11 05       	cpc	r17, r1
    2718:	49 f0       	breq	.+18     	; 0x272c <xTaskGenericNotifyFromISR+0x26>
    271a:	87 a1       	ldd	r24, Z+39	; 0x27
    271c:	90 a5       	ldd	r25, Z+40	; 0x28
    271e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2720:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2722:	e8 01       	movw	r28, r16
    2724:	88 83       	st	Y, r24
    2726:	99 83       	std	Y+1, r25	; 0x01
    2728:	aa 83       	std	Y+2, r26	; 0x02
    272a:	bb 83       	std	Y+3, r27	; 0x03
    272c:	83 a5       	ldd	r24, Z+43	; 0x2b
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	93 a7       	std	Z+43, r25	; 0x2b
    2732:	22 30       	cpi	r18, 0x02	; 2
    2734:	b1 f0       	breq	.+44     	; 0x2762 <xTaskGenericNotifyFromISR+0x5c>
    2736:	18 f4       	brcc	.+6      	; 0x273e <xTaskGenericNotifyFromISR+0x38>
    2738:	21 30       	cpi	r18, 0x01	; 1
    273a:	31 f0       	breq	.+12     	; 0x2748 <xTaskGenericNotifyFromISR+0x42>
    273c:	2b c0       	rjmp	.+86     	; 0x2794 <xTaskGenericNotifyFromISR+0x8e>
    273e:	23 30       	cpi	r18, 0x03	; 3
    2740:	e9 f0       	breq	.+58     	; 0x277c <xTaskGenericNotifyFromISR+0x76>
    2742:	24 30       	cpi	r18, 0x04	; 4
    2744:	01 f1       	breq	.+64     	; 0x2786 <xTaskGenericNotifyFromISR+0x80>
    2746:	26 c0       	rjmp	.+76     	; 0x2794 <xTaskGenericNotifyFromISR+0x8e>
    2748:	07 a1       	ldd	r16, Z+39	; 0x27
    274a:	10 a5       	ldd	r17, Z+40	; 0x28
    274c:	21 a5       	ldd	r18, Z+41	; 0x29
    274e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2750:	40 2b       	or	r20, r16
    2752:	51 2b       	or	r21, r17
    2754:	62 2b       	or	r22, r18
    2756:	73 2b       	or	r23, r19
    2758:	47 a3       	std	Z+39, r20	; 0x27
    275a:	50 a7       	std	Z+40, r21	; 0x28
    275c:	61 a7       	std	Z+41, r22	; 0x29
    275e:	72 a7       	std	Z+42, r23	; 0x2a
    2760:	19 c0       	rjmp	.+50     	; 0x2794 <xTaskGenericNotifyFromISR+0x8e>
    2762:	47 a1       	ldd	r20, Z+39	; 0x27
    2764:	50 a5       	ldd	r21, Z+40	; 0x28
    2766:	61 a5       	ldd	r22, Z+41	; 0x29
    2768:	72 a5       	ldd	r23, Z+42	; 0x2a
    276a:	4f 5f       	subi	r20, 0xFF	; 255
    276c:	5f 4f       	sbci	r21, 0xFF	; 255
    276e:	6f 4f       	sbci	r22, 0xFF	; 255
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	47 a3       	std	Z+39, r20	; 0x27
    2774:	50 a7       	std	Z+40, r21	; 0x28
    2776:	61 a7       	std	Z+41, r22	; 0x29
    2778:	72 a7       	std	Z+42, r23	; 0x2a
    277a:	0c c0       	rjmp	.+24     	; 0x2794 <xTaskGenericNotifyFromISR+0x8e>
    277c:	47 a3       	std	Z+39, r20	; 0x27
    277e:	50 a7       	std	Z+40, r21	; 0x28
    2780:	61 a7       	std	Z+41, r22	; 0x29
    2782:	72 a7       	std	Z+42, r23	; 0x2a
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <xTaskGenericNotifyFromISR+0x8e>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	09 f4       	brne	.+2      	; 0x278c <xTaskGenericNotifyFromISR+0x86>
    278a:	41 c0       	rjmp	.+130    	; 0x280e <xTaskGenericNotifyFromISR+0x108>
    278c:	47 a3       	std	Z+39, r20	; 0x27
    278e:	50 a7       	std	Z+40, r21	; 0x28
    2790:	61 a7       	std	Z+41, r22	; 0x29
    2792:	72 a7       	std	Z+42, r23	; 0x2a
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	e9 f5       	brne	.+122    	; 0x2812 <xTaskGenericNotifyFromISR+0x10c>
    2798:	ef 01       	movw	r28, r30
    279a:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <uxSchedulerSuspended>
    279e:	81 11       	cpse	r24, r1
    27a0:	1d c0       	rjmp	.+58     	; 0x27dc <xTaskGenericNotifyFromISR+0xd6>
    27a2:	8f 01       	movw	r16, r30
    27a4:	0e 5f       	subi	r16, 0xFE	; 254
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	c8 01       	movw	r24, r16
    27aa:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
    27ae:	8e 89       	ldd	r24, Y+22	; 0x16
    27b0:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <uxTopReadyPriority>
    27b4:	98 17       	cp	r25, r24
    27b6:	10 f4       	brcc	.+4      	; 0x27bc <xTaskGenericNotifyFromISR+0xb6>
    27b8:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <uxTopReadyPriority>
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 01       	movw	r18, r24
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	22 0f       	add	r18, r18
    27c6:	33 1f       	adc	r19, r19
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	b8 01       	movw	r22, r16
    27d2:	8d 58       	subi	r24, 0x8D	; 141
    27d4:	96 4f       	sbci	r25, 0xF6	; 246
    27d6:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <xTaskGenericNotifyFromISR+0xe4>
    27dc:	bf 01       	movw	r22, r30
    27de:	64 5f       	subi	r22, 0xF4	; 244
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	84 e5       	ldi	r24, 0x54	; 84
    27e4:	99 e0       	ldi	r25, 0x09	; 9
    27e6:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsertEnd>
    27ea:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <pxCurrentTCB>
    27ee:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <pxCurrentTCB+0x1>
    27f2:	9e 89       	ldd	r25, Y+22	; 0x16
    27f4:	86 89       	ldd	r24, Z+22	; 0x16
    27f6:	89 17       	cp	r24, r25
    27f8:	70 f4       	brcc	.+28     	; 0x2816 <xTaskGenericNotifyFromISR+0x110>
    27fa:	e1 14       	cp	r14, r1
    27fc:	f1 04       	cpc	r15, r1
    27fe:	19 f0       	breq	.+6      	; 0x2806 <xTaskGenericNotifyFromISR+0x100>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	f7 01       	movw	r30, r14
    2804:	80 83       	st	Z, r24
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <xYieldPending>
    280c:	05 c0       	rjmp	.+10     	; 0x2818 <xTaskGenericNotifyFromISR+0x112>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <xTaskGenericNotifyFromISR+0x112>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <xTaskGenericNotifyFromISR+0x112>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	08 95       	ret

00002826 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	21 f4       	brne	.+8      	; 0x2832 <xTaskNotifyStateClear+0xc>
    282a:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <pxCurrentTCB>
    282e:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2838:	fc 01       	movw	r30, r24
    283a:	23 a5       	ldd	r18, Z+43	; 0x2b
    283c:	22 30       	cpi	r18, 0x02	; 2
    283e:	19 f4       	brne	.+6      	; 0x2846 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2840:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2846:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2848:	0f 90       	pop	r0
    284a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    284c:	08 95       	ret

0000284e <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    284e:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2850:	73 83       	std	Z+3, r23	; 0x03
    2852:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2854:	91 87       	std	Z+9, r25	; 0x09
    2856:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    2858:	46 17       	cp	r20, r22
    285a:	57 07       	cpc	r21, r23
    285c:	90 f0       	brcs	.+36     	; 0x2882 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    285e:	42 1b       	sub	r20, r18
    2860:	53 0b       	sbc	r21, r19
    2862:	84 85       	ldd	r24, Z+12	; 0x0c
    2864:	95 85       	ldd	r25, Z+13	; 0x0d
    2866:	48 17       	cp	r20, r24
    2868:	59 07       	cpc	r21, r25
    286a:	e0 f4       	brcc	.+56     	; 0x28a4 <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    286c:	bf 01       	movw	r22, r30
    286e:	6e 5f       	subi	r22, 0xFE	; 254
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	80 91 9f 09 	lds	r24, 0x099F	; 0x80099f <pxOverflowTimerList>
    2876:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <pxOverflowTimerList+0x1>
    287a:	0e 94 77 05 	call	0xaee	; 0xaee <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2882:	42 17       	cp	r20, r18
    2884:	53 07       	cpc	r21, r19
    2886:	18 f4       	brcc	.+6      	; 0x288e <prvInsertTimerInActiveList+0x40>
    2888:	62 17       	cp	r22, r18
    288a:	73 07       	cpc	r23, r19
    288c:	68 f4       	brcc	.+26     	; 0x28a8 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    288e:	bf 01       	movw	r22, r30
    2890:	6e 5f       	subi	r22, 0xFE	; 254
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTimerList>
    2898:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTimerList+0x1>
    289c:	0e 94 77 05 	call	0xaee	; 0xaee <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    28aa:	08 95       	ret

000028ac <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    28b2:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
    28b6:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
    28ba:	89 2b       	or	r24, r25
    28bc:	e9 f4       	brne	.+58     	; 0x28f8 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    28be:	8c ea       	ldi	r24, 0xAC	; 172
    28c0:	99 e0       	ldi	r25, 0x09	; 9
    28c2:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    28c6:	83 ea       	ldi	r24, 0xA3	; 163
    28c8:	99 e0       	ldi	r25, 0x09	; 9
    28ca:	0e 94 44 05 	call	0xa88	; 0xa88 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    28ce:	8c ea       	ldi	r24, 0xAC	; 172
    28d0:	99 e0       	ldi	r25, 0x09	; 9
    28d2:	90 93 a2 09 	sts	0x09A2, r25	; 0x8009a2 <pxCurrentTimerList+0x1>
    28d6:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    28da:	83 ea       	ldi	r24, 0xA3	; 163
    28dc:	99 e0       	ldi	r25, 0x09	; 9
    28de:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <pxOverflowTimerList+0x1>
    28e2:	80 93 9f 09 	sts	0x099F, r24	; 0x80099f <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	65 e0       	ldi	r22, 0x05	; 5
    28ea:	8a e0       	ldi	r24, 0x0A	; 10
    28ec:	0e 94 58 08 	call	0x10b0	; 0x10b0 <xQueueGenericCreate>
    28f0:	90 93 9e 09 	sts	0x099E, r25	; 0x80099e <xTimerQueue+0x1>
    28f4:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	08 95       	ret

000028fe <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    2904:	d3 df       	rcall	.-90     	; 0x28ac <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    2906:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
    290a:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
    290e:	89 2b       	or	r24, r25
    2910:	89 f0       	breq	.+34     	; 0x2934 <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    2912:	0f 2e       	mov	r0, r31
    2914:	fb e9       	ldi	r31, 0x9B	; 155
    2916:	ef 2e       	mov	r14, r31
    2918:	f9 e0       	ldi	r31, 0x09	; 9
    291a:	ff 2e       	mov	r15, r31
    291c:	f0 2d       	mov	r31, r0
    291e:	03 e0       	ldi	r16, 0x03	; 3
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	45 e5       	ldi	r20, 0x55	; 85
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	62 e4       	ldi	r22, 0x42	; 66
    292a:	76 e0       	ldi	r23, 0x06	; 6
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	d6 d8       	rcall	.-3668   	; 0x1ade <xTaskCreate>
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    2934:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	ef 90       	pop	r14
    293c:	08 95       	ret

0000293e <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	4c 01       	movw	r8, r24
    2956:	5b 01       	movw	r10, r22
    2958:	f4 2e       	mov	r15, r20
    295a:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    295c:	84 e1       	ldi	r24, 0x14	; 20
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 22 05 	call	0xa44	; 0xa44 <pvPortMalloc>
    2964:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    2966:	89 2b       	or	r24, r25
    2968:	99 f0       	breq	.+38     	; 0x2990 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    296a:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    296c:	9f df       	rcall	.-194    	; 0x28ac <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    296e:	99 82       	std	Y+1, r9	; 0x01
    2970:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2972:	bd 86       	std	Y+13, r11	; 0x0d
    2974:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    2976:	df 86       	std	Y+15, r13	; 0x0f
    2978:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    297a:	19 8b       	std	Y+17, r17	; 0x11
    297c:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    297e:	ce 01       	movw	r24, r28
    2980:	02 96       	adiw	r24, 0x02	; 2
    2982:	0e 94 52 05 	call	0xaa4	; 0xaa4 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    2986:	ff 20       	and	r15, r15
    2988:	19 f0       	breq	.+6      	; 0x2990 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	84 60       	ori	r24, 0x04	; 4
    298e:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2990:	ce 01       	movw	r24, r28
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	bf 90       	pop	r11
    29a2:	af 90       	pop	r10
    29a4:	9f 90       	pop	r9
    29a6:	8f 90       	pop	r8
    29a8:	08 95       	ret

000029aa <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <xTimerGenericCommand+0xa>
    29b4:	1f 92       	push	r1
    29b6:	1f 92       	push	r1
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    29bc:	e0 91 9d 09 	lds	r30, 0x099D	; 0x80099d <xTimerQueue>
    29c0:	f0 91 9e 09 	lds	r31, 0x099E	; 0x80099e <xTimerQueue+0x1>
    29c4:	30 97       	sbiw	r30, 0x00	; 0
    29c6:	69 f1       	breq	.+90     	; 0x2a22 <xTimerGenericCommand+0x78>
    29c8:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    29ca:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    29cc:	5b 83       	std	Y+3, r21	; 0x03
    29ce:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    29d0:	9d 83       	std	Y+5, r25	; 0x05
    29d2:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    29d4:	66 30       	cpi	r22, 0x06	; 6
    29d6:	e4 f4       	brge	.+56     	; 0x2a10 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    29d8:	73 dc       	rcall	.-1818   	; 0x22c0 <xTaskGetSchedulerState>
    29da:	82 30       	cpi	r24, 0x02	; 2
    29dc:	61 f4       	brne	.+24     	; 0x29f6 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	a8 01       	movw	r20, r16
    29e2:	be 01       	movw	r22, r28
    29e4:	6f 5f       	subi	r22, 0xFF	; 255
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
    29ec:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
    29f0:	0e 94 86 08 	call	0x110c	; 0x110c <xQueueGenericSend>
    29f4:	17 c0       	rjmp	.+46     	; 0x2a24 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	be 01       	movw	r22, r28
    29fe:	6f 5f       	subi	r22, 0xFF	; 255
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xTimerQueue>
    2a06:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <xTimerQueue+0x1>
    2a0a:	0e 94 86 08 	call	0x110c	; 0x110c <xQueueGenericSend>
    2a0e:	0a c0       	rjmp	.+20     	; 0x2a24 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	ad 01       	movw	r20, r26
    2a14:	be 01       	movw	r22, r28
    2a16:	6f 5f       	subi	r22, 0xFF	; 255
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	cf 01       	movw	r24, r30
    2a1c:	0e 94 33 09 	call	0x1266	; 0x1266 <xQueueGenericSendFromISR>
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2a38:	af 92       	push	r10
    2a3a:	bf 92       	push	r11
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2a4e:	9e d9       	rcall	.-3268   	; 0x1d8c <xTaskGetTickCount>
    2a50:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2a52:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <xLastTime.2432>
    2a56:	90 91 9a 09 	lds	r25, 0x099A	; 0x80099a <xLastTime.2432+0x1>
    2a5a:	e8 16       	cp	r14, r24
    2a5c:	f9 06       	cpc	r15, r25
    2a5e:	08 f0       	brcs	.+2      	; 0x2a62 <prvSampleTimeNow+0x2a>
    2a60:	47 c0       	rjmp	.+142    	; 0x2af0 <prvSampleTimeNow+0xb8>
    2a62:	2f c0       	rjmp	.+94     	; 0x2ac2 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a64:	05 80       	ldd	r0, Z+5	; 0x05
    2a66:	f6 81       	ldd	r31, Z+6	; 0x06
    2a68:	e0 2d       	mov	r30, r0
    2a6a:	a0 80       	ld	r10, Z
    2a6c:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a6e:	c6 81       	ldd	r28, Z+6	; 0x06
    2a70:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a72:	8e 01       	movw	r16, r28
    2a74:	0e 5f       	subi	r16, 0xFE	; 254
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	c8 01       	movw	r24, r16
    2a7a:	0e 94 a8 05 	call	0xb50	; 0xb50 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a7e:	e8 89       	ldd	r30, Y+16	; 0x10
    2a80:	f9 89       	ldd	r31, Y+17	; 0x11
    2a82:	ce 01       	movw	r24, r28
    2a84:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a86:	8b 89       	ldd	r24, Y+19	; 0x13
    2a88:	82 ff       	sbrs	r24, 2
    2a8a:	1b c0       	rjmp	.+54     	; 0x2ac2 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a90:	8a 0d       	add	r24, r10
    2a92:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2a94:	a8 16       	cp	r10, r24
    2a96:	b9 06       	cpc	r11, r25
    2a98:	60 f4       	brcc	.+24     	; 0x2ab2 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a9a:	9b 83       	std	Y+3, r25	; 0x03
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a9e:	d9 87       	std	Y+9, r29	; 0x09
    2aa0:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2aa2:	b8 01       	movw	r22, r16
    2aa4:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <pxCurrentTimerList>
    2aa8:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <pxCurrentTimerList+0x1>
    2aac:	0e 94 77 05 	call	0xaee	; 0xaee <vListInsert>
    2ab0:	08 c0       	rjmp	.+16     	; 0x2ac2 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ab2:	00 e0       	ldi	r16, 0x00	; 0
    2ab4:	10 e0       	ldi	r17, 0x00	; 0
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	a5 01       	movw	r20, r10
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	ce 01       	movw	r24, r28
    2ac0:	74 df       	rcall	.-280    	; 0x29aa <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2ac2:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <pxCurrentTimerList>
    2ac6:	f0 91 a2 09 	lds	r31, 0x09A2	; 0x8009a2 <pxCurrentTimerList+0x1>
    2aca:	80 81       	ld	r24, Z
    2acc:	81 11       	cpse	r24, r1
    2ace:	ca cf       	rjmp	.-108    	; 0x2a64 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2ad0:	80 91 9f 09 	lds	r24, 0x099F	; 0x80099f <pxOverflowTimerList>
    2ad4:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <pxOverflowTimerList+0x1>
    2ad8:	90 93 a2 09 	sts	0x09A2, r25	; 0x8009a2 <pxCurrentTimerList+0x1>
    2adc:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2ae0:	f0 93 a0 09 	sts	0x09A0, r31	; 0x8009a0 <pxOverflowTimerList+0x1>
    2ae4:	e0 93 9f 09 	sts	0x099F, r30	; 0x80099f <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	f6 01       	movw	r30, r12
    2aec:	80 83       	st	Z, r24
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2af0:	f6 01       	movw	r30, r12
    2af2:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2af4:	f0 92 9a 09 	sts	0x099A, r15	; 0x80099a <xLastTime.2432+0x1>
    2af8:	e0 92 99 09 	sts	0x0999, r14	; 0x800999 <xLastTime.2432>

    return xTimeNow;
}
    2afc:	c7 01       	movw	r24, r14
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	af 90       	pop	r10
    2b12:	08 95       	ret

00002b14 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2b14:	08 95       	ret

00002b16 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2b16:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2b18:	2f 9a       	sbi	0x05, 7	; 5
    2b1a:	2f ef       	ldi	r18, 0xFF	; 255
    2b1c:	80 e7       	ldi	r24, 0x70	; 112
    2b1e:	92 e0       	ldi	r25, 0x02	; 2
    2b20:	21 50       	subi	r18, 0x01	; 1
    2b22:	80 40       	sbci	r24, 0x00	; 0
    2b24:	90 40       	sbci	r25, 0x00	; 0
    2b26:	e1 f7       	brne	.-8      	; 0x2b20 <vApplicationMallocFailedHook+0xa>
    2b28:	00 c0       	rjmp	.+0      	; 0x2b2a <vApplicationMallocFailedHook+0x14>
    2b2a:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2b2c:	1f 9a       	sbi	0x03, 7	; 3
    2b2e:	f5 cf       	rjmp	.-22     	; 0x2b1a <vApplicationMallocFailedHook+0x4>

00002b30 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2b30:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2b32:	2f 9a       	sbi	0x05, 7	; 5
    2b34:	2f ef       	ldi	r18, 0xFF	; 255
    2b36:	87 ea       	ldi	r24, 0xA7	; 167
    2b38:	91 e6       	ldi	r25, 0x61	; 97
    2b3a:	21 50       	subi	r18, 0x01	; 1
    2b3c:	80 40       	sbci	r24, 0x00	; 0
    2b3e:	90 40       	sbci	r25, 0x00	; 0
    2b40:	e1 f7       	brne	.-8      	; 0x2b3a <vApplicationStackOverflowHook+0xa>
    2b42:	00 c0       	rjmp	.+0      	; 0x2b44 <vApplicationStackOverflowHook+0x14>
    2b44:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2b46:	1f 9a       	sbi	0x03, 7	; 3
    2b48:	f5 cf       	rjmp	.-22     	; 0x2b34 <vApplicationStackOverflowHook+0x4>

00002b4a <hal_create>:
    2b4a:	e9 e2       	ldi	r30, 0x29	; 41
    2b4c:	fb e0       	ldi	r31, 0x0B	; 11
    2b4e:	20 e8       	ldi	r18, 0x80	; 128
    2b50:	3b e1       	ldi	r19, 0x1B	; 27
    2b52:	31 83       	std	Z+1, r19	; 0x01
    2b54:	20 83       	st	Z, r18
    2b56:	23 e8       	ldi	r18, 0x83	; 131
    2b58:	3b e1       	ldi	r19, 0x1B	; 27
    2b5a:	33 83       	std	Z+3, r19	; 0x03
    2b5c:	22 83       	std	Z+2, r18	; 0x02
    2b5e:	2e e8       	ldi	r18, 0x8E	; 142
    2b60:	3b e1       	ldi	r19, 0x1B	; 27
    2b62:	35 83       	std	Z+5, r19	; 0x05
    2b64:	24 83       	std	Z+4, r18	; 0x04
    2b66:	22 e9       	ldi	r18, 0x92	; 146
    2b68:	3b e1       	ldi	r19, 0x1B	; 27
    2b6a:	37 83       	std	Z+7, r19	; 0x07
    2b6c:	26 83       	std	Z+6, r18	; 0x06
    2b6e:	28 e9       	ldi	r18, 0x98	; 152
    2b70:	3b e1       	ldi	r19, 0x1B	; 27
    2b72:	31 87       	std	Z+9, r19	; 0x09
    2b74:	20 87       	std	Z+8, r18	; 0x08
    2b76:	24 ea       	ldi	r18, 0xA4	; 164
    2b78:	3b e1       	ldi	r19, 0x1B	; 27
    2b7a:	33 87       	std	Z+11, r19	; 0x0b
    2b7c:	22 87       	std	Z+10, r18	; 0x0a
    2b7e:	29 ea       	ldi	r18, 0xA9	; 169
    2b80:	3b e1       	ldi	r19, 0x1B	; 27
    2b82:	35 87       	std	Z+13, r19	; 0x0d
    2b84:	24 87       	std	Z+12, r18	; 0x0c
    2b86:	25 eb       	ldi	r18, 0xB5	; 181
    2b88:	3b e1       	ldi	r19, 0x1B	; 27
    2b8a:	37 87       	std	Z+15, r19	; 0x0f
    2b8c:	26 87       	std	Z+14, r18	; 0x0e
    2b8e:	25 e9       	ldi	r18, 0x95	; 149
    2b90:	3b e1       	ldi	r19, 0x1B	; 27
    2b92:	31 8b       	std	Z+17, r19	; 0x11
    2b94:	20 8b       	std	Z+16, r18	; 0x10
    2b96:	2a eb       	ldi	r18, 0xBA	; 186
    2b98:	3b e1       	ldi	r19, 0x1B	; 27
    2b9a:	33 8b       	std	Z+19, r19	; 0x13
    2b9c:	22 8b       	std	Z+18, r18	; 0x12
    2b9e:	27 ec       	ldi	r18, 0xC7	; 199
    2ba0:	3b e1       	ldi	r19, 0x1B	; 27
    2ba2:	35 8b       	std	Z+21, r19	; 0x15
    2ba4:	24 8b       	std	Z+20, r18	; 0x14
    2ba6:	68 2f       	mov	r22, r24
    2ba8:	cf 01       	movw	r24, r30
    2baa:	51 c1       	rjmp	.+674    	; 0x2e4e <led_create>
    2bac:	08 95       	ret

00002bae <_hihTwiCallback>:
    2bae:	65 30       	cpi	r22, 0x05	; 5
    2bb0:	f1 f4       	brne	.+60     	; 0x2bee <_hihTwiCallback+0x40>
    2bb2:	fa 01       	movw	r30, r20
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8f 73       	andi	r24, 0x3F	; 63
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	98 2f       	mov	r25, r24
    2bbc:	88 27       	eor	r24, r24
    2bbe:	21 81       	ldd	r18, Z+1	; 0x01
    2bc0:	82 2b       	or	r24, r18
    2bc2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2bc6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	f0 e4       	ldi	r31, 0x40	; 64
    2bce:	8f 9f       	mul	r24, r31
    2bd0:	c0 01       	movw	r24, r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	fa 01       	movw	r30, r20
    2bd6:	23 81       	ldd	r18, Z+3	; 0x03
    2bd8:	26 95       	lsr	r18
    2bda:	26 95       	lsr	r18
    2bdc:	82 2b       	or	r24, r18
    2bde:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2be2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <_measuringIsReady>
    2bec:	08 95       	ret
    2bee:	64 30       	cpi	r22, 0x04	; 4
    2bf0:	51 f0       	breq	.+20     	; 0x2c06 <_hihTwiCallback+0x58>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e4       	ldi	r25, 0x40	; 64
    2bf6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2bfa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2bfe:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2c02:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2c06:	08 95       	ret

00002c08 <hih8120Create>:
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	07 ed       	ldi	r16, 0xD7	; 215
    2c0e:	15 e1       	ldi	r17, 0x15	; 21
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	34 e2       	ldi	r19, 0x24	; 36
    2c14:	44 ef       	ldi	r20, 0xF4	; 244
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	87 e2       	ldi	r24, 0x27	; 39
    2c1c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <twiCreate>
    2c20:	90 93 b7 09 	sts	0x09B7, r25	; 0x8009b7 <_hih8120Handler+0x1>
    2c24:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <_hih8120Handler>
    2c28:	21 e0       	ldi	r18, 0x01	; 1
    2c2a:	89 2b       	or	r24, r25
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <hih8120Create+0x28>
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	82 2f       	mov	r24, r18
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	08 95       	ret

00002c38 <hih8120Wakeup>:
    2c38:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_hih8120Handler>
    2c3c:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_hih8120Handler+0x1>
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	59 f0       	breq	.+22     	; 0x2c5a <hih8120Wakeup+0x22>
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	60 e0       	ldi	r22, 0x00	; 0
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	0e 94 ad 20 	call	0x415a	; 0x415a <twiTransmit>
    2c4e:	84 30       	cpi	r24, 0x04	; 4
    2c50:	31 f4       	brne	.+12     	; 0x2c5e <hih8120Wakeup+0x26>
    2c52:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <_measuringIsReady>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	08 95       	ret
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	08 95       	ret
    2c5e:	83 e0       	ldi	r24, 0x03	; 3
    2c60:	08 95       	ret

00002c62 <hih8120Meassure>:
    2c62:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_hih8120Handler>
    2c66:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_hih8120Handler+0x1>
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	39 f0       	breq	.+14     	; 0x2c7c <hih8120Meassure+0x1a>
    2c6e:	64 e0       	ldi	r22, 0x04	; 4
    2c70:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <twiReceive>
    2c74:	85 30       	cpi	r24, 0x05	; 5
    2c76:	21 f0       	breq	.+8      	; 0x2c80 <hih8120Meassure+0x1e>
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	08 95       	ret
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	08 95       	ret
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	08 95       	ret

00002c84 <hih8120GetHumidity>:
    2c84:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2c88:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 03 23 	call	0x4606	; 0x4606 <__floatunsisf>
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	48 ec       	ldi	r20, 0xC8	; 200
    2c9a:	52 e4       	ldi	r21, 0x42	; 66
    2c9c:	0e 94 91 23 	call	0x4722	; 0x4722 <__mulsf3>
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	38 ef       	ldi	r19, 0xF8	; 248
    2ca4:	4f e7       	ldi	r20, 0x7F	; 127
    2ca6:	56 e4       	ldi	r21, 0x46	; 70
    2ca8:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__divsf3>
    2cac:	08 95       	ret

00002cae <hih8120GetHumidityPercent_x10>:
    2cae:	ea df       	rcall	.-44     	; 0x2c84 <hih8120GetHumidity>
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 91 23 	call	0x4722	; 0x4722 <__mulsf3>
    2cbc:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__fixunssfsi>
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	08 95       	ret

00002cc4 <hih8120GetTemperature>:
    2cc4:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2cc8:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 03 23 	call	0x4606	; 0x4606 <__floatunsisf>
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	45 e2       	ldi	r20, 0x25	; 37
    2cda:	53 e4       	ldi	r21, 0x43	; 67
    2cdc:	0e 94 91 23 	call	0x4722	; 0x4722 <__mulsf3>
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	38 ef       	ldi	r19, 0xF8	; 248
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	56 e4       	ldi	r21, 0x46	; 70
    2ce8:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__divsf3>
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	52 e4       	ldi	r21, 0x42	; 66
    2cf4:	0c 94 05 22 	jmp	0x440a	; 0x440a <__subsf3>
    2cf8:	08 95       	ret

00002cfa <hih8120GetTemperature_x10>:
    2cfa:	e4 df       	rcall	.-56     	; 0x2cc4 <hih8120GetTemperature>
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 91 23 	call	0x4722	; 0x4722 <__mulsf3>
    2d08:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <__fixsfsi>
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	08 95       	ret

00002d10 <_turn_off>:
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	fc 01       	movw	r30, r24
    2d18:	ee 0f       	add	r30, r30
    2d1a:	ff 1f       	adc	r31, r31
    2d1c:	e8 0f       	add	r30, r24
    2d1e:	f9 1f       	adc	r31, r25
    2d20:	ee 0f       	add	r30, r30
    2d22:	ff 1f       	adc	r31, r31
    2d24:	e8 54       	subi	r30, 0x48	; 72
    2d26:	f6 4f       	sbci	r31, 0xF6	; 246
    2d28:	23 81       	ldd	r18, Z+3	; 0x03
    2d2a:	21 11       	cpse	r18, r1
    2d2c:	0a c0       	rjmp	.+20     	; 0x2d42 <_turn_off+0x32>
    2d2e:	ef 01       	movw	r28, r30
    2d30:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <register_access+0x8>
    2d34:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <register_access+0x9>
    2d38:	6a 81       	ldd	r22, Y+2	; 0x02
    2d3a:	88 81       	ld	r24, Y
    2d3c:	99 81       	ldd	r25, Y+1	; 0x01
    2d3e:	19 95       	eicall
    2d40:	12 c0       	rjmp	.+36     	; 0x2d66 <_turn_off+0x56>
    2d42:	dc 01       	movw	r26, r24
    2d44:	aa 0f       	add	r26, r26
    2d46:	bb 1f       	adc	r27, r27
    2d48:	ed 01       	movw	r28, r26
    2d4a:	c8 0f       	add	r28, r24
    2d4c:	d9 1f       	adc	r29, r25
    2d4e:	cc 0f       	add	r28, r28
    2d50:	dd 1f       	adc	r29, r29
    2d52:	c8 54       	subi	r28, 0x48	; 72
    2d54:	d6 4f       	sbci	r29, 0xF6	; 246
    2d56:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <register_access+0x12>
    2d5a:	f0 91 3c 0b 	lds	r31, 0x0B3C	; 0x800b3c <register_access+0x13>
    2d5e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d60:	88 81       	ld	r24, Y
    2d62:	99 81       	ldd	r25, Y+1	; 0x01
    2d64:	19 95       	eicall
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	08 95       	ret

00002d6c <_turn_on>:
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	fc 01       	movw	r30, r24
    2d74:	ee 0f       	add	r30, r30
    2d76:	ff 1f       	adc	r31, r31
    2d78:	e8 0f       	add	r30, r24
    2d7a:	f9 1f       	adc	r31, r25
    2d7c:	ee 0f       	add	r30, r30
    2d7e:	ff 1f       	adc	r31, r31
    2d80:	e8 54       	subi	r30, 0x48	; 72
    2d82:	f6 4f       	sbci	r31, 0xF6	; 246
    2d84:	23 81       	ldd	r18, Z+3	; 0x03
    2d86:	21 11       	cpse	r18, r1
    2d88:	0a c0       	rjmp	.+20     	; 0x2d9e <_turn_on+0x32>
    2d8a:	ef 01       	movw	r28, r30
    2d8c:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <register_access+0x12>
    2d90:	f0 91 3c 0b 	lds	r31, 0x0B3C	; 0x800b3c <register_access+0x13>
    2d94:	6a 81       	ldd	r22, Y+2	; 0x02
    2d96:	88 81       	ld	r24, Y
    2d98:	99 81       	ldd	r25, Y+1	; 0x01
    2d9a:	19 95       	eicall
    2d9c:	12 c0       	rjmp	.+36     	; 0x2dc2 <_turn_on+0x56>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	aa 0f       	add	r26, r26
    2da2:	bb 1f       	adc	r27, r27
    2da4:	ed 01       	movw	r28, r26
    2da6:	c8 0f       	add	r28, r24
    2da8:	d9 1f       	adc	r29, r25
    2daa:	cc 0f       	add	r28, r28
    2dac:	dd 1f       	adc	r29, r29
    2dae:	c8 54       	subi	r28, 0x48	; 72
    2db0:	d6 4f       	sbci	r29, 0xF6	; 246
    2db2:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <register_access+0x8>
    2db6:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <register_access+0x9>
    2dba:	6a 81       	ldd	r22, Y+2	; 0x02
    2dbc:	88 81       	ld	r24, Y
    2dbe:	99 81       	ldd	r25, Y+1	; 0x01
    2dc0:	19 95       	eicall
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <_hal_led_task>:
    2dc8:	8a e4       	ldi	r24, 0x4A	; 74
    2dca:	96 e0       	ldi	r25, 0x06	; 6
    2dcc:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <puts>
    2dd0:	0f 2e       	mov	r0, r31
    2dd2:	f9 e2       	ldi	r31, 0x29	; 41
    2dd4:	cf 2e       	mov	r12, r31
    2dd6:	fb e0       	ldi	r31, 0x0B	; 11
    2dd8:	df 2e       	mov	r13, r31
    2dda:	f0 2d       	mov	r31, r0
    2ddc:	04 e0       	ldi	r16, 0x04	; 4
    2dde:	c8 eb       	ldi	r28, 0xB8	; 184
    2de0:	d9 e0       	ldi	r29, 0x09	; 9
    2de2:	10 e0       	ldi	r17, 0x00	; 0
    2de4:	8c 81       	ldd	r24, Y+4	; 0x04
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	69 f0       	breq	.+26     	; 0x2e04 <_hal_led_task+0x3c>
    2dea:	e8 f0       	brcs	.+58     	; 0x2e26 <_hal_led_task+0x5e>
    2dec:	82 30       	cpi	r24, 0x02	; 2
    2dee:	39 f5       	brne	.+78     	; 0x2e3e <_hal_led_task+0x76>
    2df0:	d6 01       	movw	r26, r12
    2df2:	1c 96       	adiw	r26, 0x0c	; 12
    2df4:	ed 91       	ld	r30, X+
    2df6:	fc 91       	ld	r31, X
    2df8:	1d 97       	sbiw	r26, 0x0d	; 13
    2dfa:	6a 81       	ldd	r22, Y+2	; 0x02
    2dfc:	88 81       	ld	r24, Y
    2dfe:	99 81       	ldd	r25, Y+1	; 0x01
    2e00:	19 95       	eicall
    2e02:	1d c0       	rjmp	.+58     	; 0x2e3e <_hal_led_task+0x76>
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	8f 5f       	subi	r24, 0xFF	; 255
    2e08:	8a 30       	cpi	r24, 0x0A	; 10
    2e0a:	10 f4       	brcc	.+4      	; 0x2e10 <_hal_led_task+0x48>
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	17 c0       	rjmp	.+46     	; 0x2e3e <_hal_led_task+0x76>
    2e10:	1d 82       	std	Y+5, r1	; 0x05
    2e12:	d6 01       	movw	r26, r12
    2e14:	1c 96       	adiw	r26, 0x0c	; 12
    2e16:	ed 91       	ld	r30, X+
    2e18:	fc 91       	ld	r31, X
    2e1a:	1d 97       	sbiw	r26, 0x0d	; 13
    2e1c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e1e:	88 81       	ld	r24, Y
    2e20:	99 81       	ldd	r25, Y+1	; 0x01
    2e22:	19 95       	eicall
    2e24:	0c c0       	rjmp	.+24     	; 0x2e3e <_hal_led_task+0x76>
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	88 23       	and	r24, r24
    2e2a:	31 f0       	breq	.+12     	; 0x2e38 <_hal_led_task+0x70>
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	9e df       	rcall	.-196    	; 0x2d6c <_turn_on>
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	81 50       	subi	r24, 0x01	; 1
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <_hal_led_task+0x76>
    2e38:	0c 83       	std	Y+4, r16	; 0x04
    2e3a:	81 2f       	mov	r24, r17
    2e3c:	69 df       	rcall	.-302    	; 0x2d10 <_turn_off>
    2e3e:	1f 5f       	subi	r17, 0xFF	; 255
    2e40:	26 96       	adiw	r28, 0x06	; 6
    2e42:	14 30       	cpi	r17, 0x04	; 4
    2e44:	79 f6       	brne	.-98     	; 0x2de4 <_hal_led_task+0x1c>
    2e46:	85 e0       	ldi	r24, 0x05	; 5
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	e1 d8       	rcall	.-3646   	; 0x200e <vTaskDelay>
    2e4c:	c8 cf       	rjmp	.-112    	; 0x2dde <_hal_led_task+0x16>

00002e4e <led_create>:
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	06 2f       	mov	r16, r22
    2e60:	0f 2e       	mov	r0, r31
    2e62:	f9 e2       	ldi	r31, 0x29	; 41
    2e64:	ef 2e       	mov	r14, r31
    2e66:	fb e0       	ldi	r31, 0x0B	; 11
    2e68:	ff 2e       	mov	r15, r31
    2e6a:	f0 2d       	mov	r31, r0
    2e6c:	d7 01       	movw	r26, r14
    2e6e:	18 96       	adiw	r26, 0x08	; 8
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	19 97       	sbiw	r26, 0x09	; 9
    2e76:	66 e0       	ldi	r22, 0x06	; 6
    2e78:	87 e2       	ldi	r24, 0x27	; 39
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	19 95       	eicall
    2e7e:	c8 eb       	ldi	r28, 0xB8	; 184
    2e80:	d9 e0       	ldi	r29, 0x09	; 9
    2e82:	0f 2e       	mov	r0, r31
    2e84:	f8 e2       	ldi	r31, 0x28	; 40
    2e86:	cf 2e       	mov	r12, r31
    2e88:	d1 2c       	mov	r13, r1
    2e8a:	f0 2d       	mov	r31, r0
    2e8c:	d9 82       	std	Y+1, r13	; 0x01
    2e8e:	c8 82       	st	Y, r12
    2e90:	86 e0       	ldi	r24, 0x06	; 6
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	1b 82       	std	Y+3, r1	; 0x03
    2e96:	14 e0       	ldi	r17, 0x04	; 4
    2e98:	1c 83       	std	Y+4, r17	; 0x04
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	39 df       	rcall	.-398    	; 0x2d10 <_turn_off>
    2e9e:	d7 01       	movw	r26, r14
    2ea0:	18 96       	adiw	r26, 0x08	; 8
    2ea2:	ed 91       	ld	r30, X+
    2ea4:	fc 91       	ld	r31, X
    2ea6:	19 97       	sbiw	r26, 0x09	; 9
    2ea8:	67 e0       	ldi	r22, 0x07	; 7
    2eaa:	87 e2       	ldi	r24, 0x27	; 39
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	19 95       	eicall
    2eb0:	df 82       	std	Y+7, r13	; 0x07
    2eb2:	ce 82       	std	Y+6, r12	; 0x06
    2eb4:	87 e0       	ldi	r24, 0x07	; 7
    2eb6:	88 87       	std	Y+8, r24	; 0x08
    2eb8:	19 86       	std	Y+9, r1	; 0x09
    2eba:	1a 87       	std	Y+10, r17	; 0x0a
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	28 df       	rcall	.-432    	; 0x2d10 <_turn_off>
    2ec0:	d7 01       	movw	r26, r14
    2ec2:	18 96       	adiw	r26, 0x08	; 8
    2ec4:	ed 91       	ld	r30, X+
    2ec6:	fc 91       	ld	r31, X
    2ec8:	19 97       	sbiw	r26, 0x09	; 9
    2eca:	65 e0       	ldi	r22, 0x05	; 5
    2ecc:	83 e3       	ldi	r24, 0x33	; 51
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	19 95       	eicall
    2ed2:	d7 01       	movw	r26, r14
    2ed4:	18 96       	adiw	r26, 0x08	; 8
    2ed6:	ed 91       	ld	r30, X+
    2ed8:	fc 91       	ld	r31, X
    2eda:	19 97       	sbiw	r26, 0x09	; 9
    2edc:	61 e0       	ldi	r22, 0x01	; 1
    2ede:	84 e3       	ldi	r24, 0x34	; 52
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	19 95       	eicall
    2ee4:	84 e3       	ldi	r24, 0x34	; 52
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9d 87       	std	Y+13, r25	; 0x0d
    2eea:	8c 87       	std	Y+12, r24	; 0x0c
    2eec:	85 e0       	ldi	r24, 0x05	; 5
    2eee:	8e 87       	std	Y+14, r24	; 0x0e
    2ef0:	1f 86       	std	Y+15, r1	; 0x0f
    2ef2:	18 8b       	std	Y+16, r17	; 0x10
    2ef4:	82 e0       	ldi	r24, 0x02	; 2
    2ef6:	0c df       	rcall	.-488    	; 0x2d10 <_turn_off>
    2ef8:	d7 01       	movw	r26, r14
    2efa:	18 96       	adiw	r26, 0x08	; 8
    2efc:	ed 91       	ld	r30, X+
    2efe:	fc 91       	ld	r31, X
    2f00:	19 97       	sbiw	r26, 0x09	; 9
    2f02:	64 e0       	ldi	r22, 0x04	; 4
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	19 95       	eicall
    2f0a:	d7 01       	movw	r26, r14
    2f0c:	18 96       	adiw	r26, 0x08	; 8
    2f0e:	ed 91       	ld	r30, X+
    2f10:	fc 91       	ld	r31, X
    2f12:	19 97       	sbiw	r26, 0x09	; 9
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	19 95       	eicall
    2f1c:	82 e0       	ldi	r24, 0x02	; 2
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	9b 8b       	std	Y+19, r25	; 0x13
    2f22:	8a 8b       	std	Y+18, r24	; 0x12
    2f24:	1c 8b       	std	Y+20, r17	; 0x14
    2f26:	1d 8a       	std	Y+21, r1	; 0x15
    2f28:	1e 8b       	std	Y+22, r17	; 0x16
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	f1 de       	rcall	.-542    	; 0x2d10 <_turn_off>
    2f2e:	e1 2c       	mov	r14, r1
    2f30:	f1 2c       	mov	r15, r1
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 ec       	ldi	r20, 0xC0	; 192
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	61 e6       	ldi	r22, 0x61	; 97
    2f3c:	76 e0       	ldi	r23, 0x06	; 6
    2f3e:	84 ee       	ldi	r24, 0xE4	; 228
    2f40:	96 e1       	ldi	r25, 0x16	; 22
    2f42:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <xTaskCreate>
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	ff 90       	pop	r15
    2f50:	ef 90       	pop	r14
    2f52:	df 90       	pop	r13
    2f54:	cf 90       	pop	r12
    2f56:	08 95       	ret

00002f58 <_serial_call_back>:
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	1f 92       	push	r1
    2f62:	1f 92       	push	r1
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8c 01       	movw	r16, r24
    2f6a:	19 82       	std	Y+1, r1	; 0x01
    2f6c:	2d c0       	rjmp	.+90     	; 0x2fc8 <_serial_call_back+0x70>
    2f6e:	e0 91 34 0a 	lds	r30, 0x0A34	; 0x800a34 <rec_buf_inp.2926>
    2f72:	ec 32       	cpi	r30, 0x2C	; 44
    2f74:	50 f4       	brcc	.+20     	; 0x2f8a <_serial_call_back+0x32>
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	8e 0f       	add	r24, r30
    2f7a:	80 93 34 0a 	sts	0x0A34, r24	; 0x800a34 <rec_buf_inp.2926>
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	ec 59       	subi	r30, 0x9C	; 156
    2f82:	f5 4f       	sbci	r31, 0xF5	; 245
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	80 83       	st	Z, r24
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <_serial_call_back+0x36>
    2f8a:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <rec_buf_inp.2926>
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	8a 30       	cpi	r24, 0x0A	; 10
    2f92:	d1 f4       	brne	.+52     	; 0x2fc8 <_serial_call_back+0x70>
    2f94:	40 91 34 0a 	lds	r20, 0x0A34	; 0x800a34 <rec_buf_inp.2926>
    2f98:	50 e0       	ldi	r21, 0x00	; 0
    2f9a:	fa 01       	movw	r30, r20
    2f9c:	ee 59       	subi	r30, 0x9E	; 158
    2f9e:	f5 4f       	sbci	r31, 0xF5	; 245
    2fa0:	10 82       	st	Z, r1
    2fa2:	41 50       	subi	r20, 0x01	; 1
    2fa4:	51 09       	sbc	r21, r1
    2fa6:	9e 01       	movw	r18, r28
    2fa8:	2f 5f       	subi	r18, 0xFF	; 255
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	64 e6       	ldi	r22, 0x64	; 100
    2fae:	7a e0       	ldi	r23, 0x0A	; 10
    2fb0:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <_reply_buffer_handle>
    2fb4:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <_reply_buffer_handle+0x1>
    2fb8:	0e 94 20 0c 	call	0x1840	; 0x1840 <xStreamBufferSendFromISR>
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vPortYield>
    2fc4:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <rec_buf_inp.2926>
    2fc8:	be 01       	movw	r22, r28
    2fca:	6e 5f       	subi	r22, 0xFE	; 254
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	c8 01       	movw	r24, r16
    2fd0:	a7 d5       	rcall	.+2894   	; 0x3b20 <serial_get_byte>
    2fd2:	88 23       	and	r24, r24
    2fd4:	61 f2       	breq	.-104    	; 0x2f6e <_serial_call_back+0x16>
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <_upload_message>:
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	8c 01       	movw	r16, r24
    2fee:	eb 01       	movw	r28, r22
    2ff0:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <_reply_buffer_handle>
    2ff4:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <_reply_buffer_handle+0x1>
    2ff8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xStreamBufferReset>
    2ffc:	b8 01       	movw	r22, r16
    2ffe:	80 ed       	ldi	r24, 0xD0	; 208
    3000:	99 e0       	ldi	r25, 0x09	; 9
    3002:	0e 94 78 25 	call	0x4af0	; 0x4af0 <strcpy>
    3006:	20 97       	sbiw	r28, 0x00	; 0
    3008:	79 f0       	breq	.+30     	; 0x3028 <_upload_message+0x44>
    300a:	e0 ed       	ldi	r30, 0xD0	; 208
    300c:	f9 e0       	ldi	r31, 0x09	; 9
    300e:	01 90       	ld	r0, Z+
    3010:	00 20       	and	r0, r0
    3012:	e9 f7       	brne	.-6      	; 0x300e <_upload_message+0x2a>
    3014:	31 97       	sbiw	r30, 0x01	; 1
    3016:	80 e2       	ldi	r24, 0x20	; 32
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	80 83       	st	Z, r24
    301e:	be 01       	movw	r22, r28
    3020:	80 ed       	ldi	r24, 0xD0	; 208
    3022:	99 e0       	ldi	r25, 0x09	; 9
    3024:	0e 94 6d 25 	call	0x4ada	; 0x4ada <strcat>
    3028:	e0 ed       	ldi	r30, 0xD0	; 208
    302a:	f9 e0       	ldi	r31, 0x09	; 9
    302c:	df 01       	movw	r26, r30
    302e:	0d 90       	ld	r0, X+
    3030:	00 20       	and	r0, r0
    3032:	e9 f7       	brne	.-6      	; 0x302e <_upload_message+0x4a>
    3034:	11 97       	sbiw	r26, 0x01	; 1
    3036:	8d e0       	ldi	r24, 0x0D	; 13
    3038:	9a e0       	ldi	r25, 0x0A	; 10
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	9c 93       	st	X, r25
    303e:	8e 93       	st	-X, r24
    3040:	12 96       	adiw	r26, 0x02	; 2
    3042:	1c 92       	st	X, r1
    3044:	01 90       	ld	r0, Z+
    3046:	00 20       	and	r0, r0
    3048:	e9 f7       	brne	.-6      	; 0x3044 <_upload_message+0x60>
    304a:	31 97       	sbiw	r30, 0x01	; 1
    304c:	e0 5d       	subi	r30, 0xD0	; 208
    304e:	f9 40       	sbci	r31, 0x09	; 9
    3050:	ae 2f       	mov	r26, r30
    3052:	80 ed       	ldi	r24, 0xD0	; 208
    3054:	99 e0       	ldi	r25, 0x09	; 9
    3056:	ac 01       	movw	r20, r24
    3058:	6a 2f       	mov	r22, r26
    305a:	80 91 37 0a 	lds	r24, 0x0A37	; 0x800a37 <_rn2483_serial>
    305e:	90 91 38 0a 	lds	r25, 0x0A38	; 0x800a38 <_rn2483_serial+0x1>
    3062:	0e d5       	rcall	.+2588   	; 0x3a80 <serial_send_bytes>
    3064:	81 11       	cpse	r24, r1
    3066:	0f c0       	rjmp	.+30     	; 0x3086 <_upload_message+0xa2>
    3068:	28 e2       	ldi	r18, 0x28	; 40
    306a:	35 e0       	ldi	r19, 0x05	; 5
    306c:	4d e2       	ldi	r20, 0x2D	; 45
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	6e eb       	ldi	r22, 0xBE	; 190
    3072:	7a e0       	ldi	r23, 0x0A	; 10
    3074:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <_reply_buffer_handle>
    3078:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <_reply_buffer_handle+0x1>
    307c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <xStreamBufferReceive>
    3080:	8e eb       	ldi	r24, 0xBE	; 190
    3082:	9a e0       	ldi	r25, 0x0A	; 10
    3084:	02 c0       	rjmp	.+4      	; 0x308a <_upload_message+0xa6>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	08 95       	ret

00003094 <_reply2return_code>:
    3094:	af 92       	push	r10
    3096:	bf 92       	push	r11
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	6c 01       	movw	r12, r24
    30aa:	fc 01       	movw	r30, r24
    30ac:	01 90       	ld	r0, Z+
    30ae:	00 20       	and	r0, r0
    30b0:	e9 f7       	brne	.-6      	; 0x30ac <_reply2return_code+0x18>
    30b2:	31 97       	sbiw	r30, 0x01	; 1
    30b4:	7f 01       	movw	r14, r30
    30b6:	e8 1a       	sub	r14, r24
    30b8:	f9 0a       	sbc	r15, r25
    30ba:	0d ee       	ldi	r16, 0xED	; 237
    30bc:	18 e0       	ldi	r17, 0x08	; 8
    30be:	c0 e0       	ldi	r28, 0x00	; 0
    30c0:	d0 e0       	ldi	r29, 0x00	; 0
    30c2:	f8 01       	movw	r30, r16
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	a7 01       	movw	r20, r14
    30ca:	c6 01       	movw	r24, r12
    30cc:	0e 94 7f 25 	call	0x4afe	; 0x4afe <strncasecmp>
    30d0:	89 2b       	or	r24, r25
    30d2:	49 f4       	brne	.+18     	; 0x30e6 <_reply2return_code+0x52>
    30d4:	fe 01       	movw	r30, r28
    30d6:	ee 0f       	add	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	ec 0f       	add	r30, r28
    30dc:	fd 1f       	adc	r31, r29
    30de:	e4 51       	subi	r30, 0x14	; 20
    30e0:	f7 4f       	sbci	r31, 0xF7	; 247
    30e2:	80 81       	ld	r24, Z
    30e4:	07 c0       	rjmp	.+14     	; 0x30f4 <_reply2return_code+0x60>
    30e6:	21 96       	adiw	r28, 0x01	; 1
    30e8:	0d 5f       	subi	r16, 0xFD	; 253
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	c1 31       	cpi	r28, 0x11	; 17
    30ee:	d1 05       	cpc	r29, r1
    30f0:	41 f7       	brne	.-48     	; 0x30c2 <_reply2return_code+0x2e>
    30f2:	80 e1       	ldi	r24, 0x10	; 16
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	bf 90       	pop	r11
    3106:	af 90       	pop	r10
    3108:	08 95       	ret

0000310a <_upload_message_rc>:
    310a:	6c df       	rcall	.-296    	; 0x2fe4 <_upload_message>
    310c:	c3 cf       	rjmp	.-122    	; 0x3094 <_reply2return_code>
    310e:	08 95       	ret

00003110 <lora_driver_flush_buffers>:
    3110:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <_reply_buffer_handle>
    3114:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <_reply_buffer_handle+0x1>
    3118:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <xStreamBufferReset>
    311c:	08 95       	ret

0000311e <lora_driver_create>:
    311e:	8f 92       	push	r8
    3120:	9f 92       	push	r9
    3122:	af 92       	push	r10
    3124:	cf 92       	push	r12
    3126:	ef 92       	push	r14
    3128:	0f 93       	push	r16
    312a:	cf 93       	push	r28
    312c:	c8 2f       	mov	r28, r24
    312e:	41 e0       	ldi	r20, 0x01	; 1
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	88 ec       	ldi	r24, 0xC8	; 200
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 b5 0b 	call	0x176a	; 0x176a <xStreamBufferGenericCreate>
    313c:	90 93 36 0a 	sts	0x0A36, r25	; 0x800a36 <_reply_buffer_handle+0x1>
    3140:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <_reply_buffer_handle>
    3144:	0f 2e       	mov	r0, r31
    3146:	fc ea       	ldi	r31, 0xAC	; 172
    3148:	8f 2e       	mov	r8, r31
    314a:	f7 e1       	ldi	r31, 0x17	; 23
    314c:	9f 2e       	mov	r9, r31
    314e:	f0 2d       	mov	r31, r0
    3150:	68 94       	set
    3152:	aa 24       	eor	r10, r10
    3154:	a6 f8       	bld	r10, 6
    3156:	68 94       	set
    3158:	cc 24       	eor	r12, r12
    315a:	c6 f8       	bld	r12, 6
    315c:	e1 2c       	mov	r14, r1
    315e:	00 e0       	ldi	r16, 0x00	; 0
    3160:	23 e0       	ldi	r18, 0x03	; 3
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	51 ee       	ldi	r21, 0xE1	; 225
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	8c 2f       	mov	r24, r28
    316c:	ce d3       	rcall	.+1948   	; 0x390a <serial_new_instance>
    316e:	90 93 38 0a 	sts	0x0A38, r25	; 0x800a38 <_rn2483_serial+0x1>
    3172:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <_rn2483_serial>
    3176:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <register_access+0x8>
    317a:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <register_access+0x9>
    317e:	64 e0       	ldi	r22, 0x04	; 4
    3180:	87 e0       	ldi	r24, 0x07	; 7
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	19 95       	eicall
    3186:	cf 91       	pop	r28
    3188:	0f 91       	pop	r16
    318a:	ef 90       	pop	r14
    318c:	cf 90       	pop	r12
    318e:	af 90       	pop	r10
    3190:	9f 90       	pop	r9
    3192:	8f 90       	pop	r8
    3194:	08 95       	ret

00003196 <lora_driver_reset_rn2483>:
    3196:	88 23       	and	r24, r24
    3198:	49 f0       	breq	.+18     	; 0x31ac <lora_driver_reset_rn2483+0x16>
    319a:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <register_access+0x12>
    319e:	f0 91 3c 0b 	lds	r31, 0x0B3C	; 0x800b3c <register_access+0x13>
    31a2:	64 e0       	ldi	r22, 0x04	; 4
    31a4:	88 e0       	ldi	r24, 0x08	; 8
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	19 95       	eicall
    31aa:	08 95       	ret
    31ac:	e0 91 31 0b 	lds	r30, 0x0B31	; 0x800b31 <register_access+0x8>
    31b0:	f0 91 32 0b 	lds	r31, 0x0B32	; 0x800b32 <register_access+0x9>
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	88 e0       	ldi	r24, 0x08	; 8
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	19 95       	eicall
    31bc:	08 95       	ret

000031be <lora_driver_rn2483_factory_reset>:
    31be:	60 e0       	ldi	r22, 0x00	; 0
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	88 e8       	ldi	r24, 0x88	; 136
    31c4:	96 e0       	ldi	r25, 0x06	; 6
    31c6:	0e df       	rcall	.-484    	; 0x2fe4 <_upload_message>
    31c8:	ee eb       	ldi	r30, 0xBE	; 190
    31ca:	fa e0       	ldi	r31, 0x0A	; 10
    31cc:	01 90       	ld	r0, Z+
    31ce:	00 20       	and	r0, r0
    31d0:	e9 f7       	brne	.-6      	; 0x31cc <lora_driver_rn2483_factory_reset+0xe>
    31d2:	31 97       	sbiw	r30, 0x01	; 1
    31d4:	ee 5b       	subi	r30, 0xBE	; 190
    31d6:	fa 40       	sbci	r31, 0x0A	; 10
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	75 97       	sbiw	r30, 0x15	; 21
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <lora_driver_rn2483_factory_reset+0x22>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	08 95       	ret

000031e2 <lora_driver_get_rn2483_hweui>:
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	ec 01       	movw	r28, r24
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	89 e9       	ldi	r24, 0x99	; 153
    31ee:	96 e0       	ldi	r25, 0x06	; 6
    31f0:	f9 de       	rcall	.-526    	; 0x2fe4 <_upload_message>
    31f2:	ee eb       	ldi	r30, 0xBE	; 190
    31f4:	fa e0       	ldi	r31, 0x0A	; 10
    31f6:	01 90       	ld	r0, Z+
    31f8:	00 20       	and	r0, r0
    31fa:	e9 f7       	brne	.-6      	; 0x31f6 <lora_driver_get_rn2483_hweui+0x14>
    31fc:	ef 5c       	subi	r30, 0xCF	; 207
    31fe:	fa 40       	sbci	r31, 0x0A	; 10
    3200:	39 f4       	brne	.+14     	; 0x3210 <lora_driver_get_rn2483_hweui+0x2e>
    3202:	6e eb       	ldi	r22, 0xBE	; 190
    3204:	7a e0       	ldi	r23, 0x0A	; 10
    3206:	ce 01       	movw	r24, r28
    3208:	0e 94 78 25 	call	0x4af0	; 0x4af0 <strcpy>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <lora_driver_get_rn2483_hweui+0x32>
    3210:	18 82       	st	Y, r1
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	08 95       	ret

0000321a <lora_driver_set_device_identifier>:
    321a:	fc 01       	movw	r30, r24
    321c:	01 90       	ld	r0, Z+
    321e:	00 20       	and	r0, r0
    3220:	e9 f7       	brne	.-6      	; 0x321c <lora_driver_set_device_identifier+0x2>
    3222:	9f 01       	movw	r18, r30
    3224:	21 51       	subi	r18, 0x11	; 17
    3226:	31 09       	sbc	r19, r1
    3228:	28 17       	cp	r18, r24
    322a:	39 07       	cpc	r19, r25
    322c:	29 f4       	brne	.+10     	; 0x3238 <lora_driver_set_device_identifier+0x1e>
    322e:	bc 01       	movw	r22, r24
    3230:	87 ec       	ldi	r24, 0xC7	; 199
    3232:	96 e0       	ldi	r25, 0x06	; 6
    3234:	6a cf       	rjmp	.-300    	; 0x310a <_upload_message_rc>
    3236:	08 95       	ret
    3238:	89 e0       	ldi	r24, 0x09	; 9
    323a:	08 95       	ret

0000323c <lora_driver_set_application_identifier>:
    323c:	fc 01       	movw	r30, r24
    323e:	01 90       	ld	r0, Z+
    3240:	00 20       	and	r0, r0
    3242:	e9 f7       	brne	.-6      	; 0x323e <lora_driver_set_application_identifier+0x2>
    3244:	9f 01       	movw	r18, r30
    3246:	21 51       	subi	r18, 0x11	; 17
    3248:	31 09       	sbc	r19, r1
    324a:	28 17       	cp	r18, r24
    324c:	39 07       	cpc	r19, r25
    324e:	29 f4       	brne	.+10     	; 0x325a <lora_driver_set_application_identifier+0x1e>
    3250:	bc 01       	movw	r22, r24
    3252:	86 ed       	ldi	r24, 0xD6	; 214
    3254:	96 e0       	ldi	r25, 0x06	; 6
    3256:	59 cf       	rjmp	.-334    	; 0x310a <_upload_message_rc>
    3258:	08 95       	ret
    325a:	89 e0       	ldi	r24, 0x09	; 9
    325c:	08 95       	ret

0000325e <lora_driver_set_application_key>:
    325e:	fc 01       	movw	r30, r24
    3260:	01 90       	ld	r0, Z+
    3262:	00 20       	and	r0, r0
    3264:	e9 f7       	brne	.-6      	; 0x3260 <lora_driver_set_application_key+0x2>
    3266:	9f 01       	movw	r18, r30
    3268:	21 52       	subi	r18, 0x21	; 33
    326a:	31 09       	sbc	r19, r1
    326c:	28 17       	cp	r18, r24
    326e:	39 07       	cpc	r19, r25
    3270:	29 f4       	brne	.+10     	; 0x327c <lora_driver_set_application_key+0x1e>
    3272:	bc 01       	movw	r22, r24
    3274:	85 ee       	ldi	r24, 0xE5	; 229
    3276:	96 e0       	ldi	r25, 0x06	; 6
    3278:	48 cf       	rjmp	.-368    	; 0x310a <_upload_message_rc>
    327a:	08 95       	ret
    327c:	89 e0       	ldi	r24, 0x09	; 9
    327e:	08 95       	ret

00003280 <lora_driver_save_mac>:
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	84 e2       	ldi	r24, 0x24	; 36
    3286:	97 e0       	ldi	r25, 0x07	; 7
    3288:	40 cf       	rjmp	.-384    	; 0x310a <_upload_message_rc>
    328a:	08 95       	ret

0000328c <lora_driver_join>:
    328c:	e8 2f       	mov	r30, r24
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	ee 0f       	add	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	e8 51       	subi	r30, 0x18	; 24
    3296:	f7 4f       	sbci	r31, 0xF7	; 247
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	8d e2       	ldi	r24, 0x2D	; 45
    329e:	97 e0       	ldi	r25, 0x07	; 7
    32a0:	34 df       	rcall	.-408    	; 0x310a <_upload_message_rc>
    32a2:	81 11       	cpse	r24, r1
    32a4:	12 c0       	rjmp	.+36     	; 0x32ca <lora_driver_join+0x3e>
    32a6:	28 e2       	ldi	r18, 0x28	; 40
    32a8:	35 e0       	ldi	r19, 0x05	; 5
    32aa:	4d e2       	ldi	r20, 0x2D	; 45
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	6e eb       	ldi	r22, 0xBE	; 190
    32b0:	7a e0       	ldi	r23, 0x0A	; 10
    32b2:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <_reply_buffer_handle>
    32b6:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <_reply_buffer_handle+0x1>
    32ba:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <xStreamBufferReceive>
    32be:	88 23       	and	r24, r24
    32c0:	21 f0       	breq	.+8      	; 0x32ca <lora_driver_join+0x3e>
    32c2:	8e eb       	ldi	r24, 0xBE	; 190
    32c4:	9a e0       	ldi	r25, 0x0A	; 10
    32c6:	e6 ce       	rjmp	.-564    	; 0x3094 <_reply2return_code>
    32c8:	08 95       	ret
    32ca:	8e eb       	ldi	r24, 0xBE	; 190
    32cc:	9a e0       	ldi	r25, 0x0A	; 10
    32ce:	e2 ce       	rjmp	.-572    	; 0x3094 <_reply2return_code>
    32d0:	08 95       	ret

000032d2 <lora_driver_sent_upload_message>:
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	1f 92       	push	r1
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	db 01       	movw	r26, r22
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 91       	ld	r25, X
    32e2:	11 97       	sbiw	r26, 0x01	; 1
    32e4:	95 31       	cpi	r25, 0x15	; 21
    32e6:	08 f0       	brcs	.+2      	; 0x32ea <lora_driver_sent_upload_message+0x18>
    32e8:	87 c0       	rjmp	.+270    	; 0x33f8 <lora_driver_sent_upload_message+0x126>
    32ea:	99 23       	and	r25, r25
    32ec:	81 f1       	breq	.+96     	; 0x334e <lora_driver_sent_upload_message+0x7c>
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	70 e0       	ldi	r23, 0x00	; 0
    32f2:	27 2f       	mov	r18, r23
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	46 2f       	mov	r20, r22
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	fd 01       	movw	r30, r26
    32fc:	e4 0f       	add	r30, r20
    32fe:	f5 1f       	adc	r31, r21
    3300:	92 81       	ldd	r25, Z+2	; 0x02
    3302:	92 95       	swap	r25
    3304:	9f 70       	andi	r25, 0x0F	; 15
    3306:	9a 30       	cpi	r25, 0x0A	; 10
    3308:	10 f0       	brcs	.+4      	; 0x330e <lora_driver_sent_upload_message+0x3c>
    330a:	99 5c       	subi	r25, 0xC9	; 201
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <lora_driver_sent_upload_message+0x3e>
    330e:	90 5d       	subi	r25, 0xD0	; 208
    3310:	f9 01       	movw	r30, r18
    3312:	e1 5b       	subi	r30, 0xB1	; 177
    3314:	f5 4f       	sbci	r31, 0xF5	; 245
    3316:	90 83       	st	Z, r25
    3318:	2f 5f       	subi	r18, 0xFF	; 255
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	fd 01       	movw	r30, r26
    331e:	e4 0f       	add	r30, r20
    3320:	f5 1f       	adc	r31, r21
    3322:	92 81       	ldd	r25, Z+2	; 0x02
    3324:	9f 70       	andi	r25, 0x0F	; 15
    3326:	49 2f       	mov	r20, r25
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	4a 30       	cpi	r20, 0x0A	; 10
    332c:	51 05       	cpc	r21, r1
    332e:	14 f0       	brlt	.+4      	; 0x3334 <lora_driver_sent_upload_message+0x62>
    3330:	99 5c       	subi	r25, 0xC9	; 201
    3332:	01 c0       	rjmp	.+2      	; 0x3336 <lora_driver_sent_upload_message+0x64>
    3334:	90 5d       	subi	r25, 0xD0	; 208
    3336:	f9 01       	movw	r30, r18
    3338:	e1 5b       	subi	r30, 0xB1	; 177
    333a:	f5 4f       	sbci	r31, 0xF5	; 245
    333c:	90 83       	st	Z, r25
    333e:	7e 5f       	subi	r23, 0xFE	; 254
    3340:	6f 5f       	subi	r22, 0xFF	; 255
    3342:	11 96       	adiw	r26, 0x01	; 1
    3344:	9c 91       	ld	r25, X
    3346:	11 97       	sbiw	r26, 0x01	; 1
    3348:	69 17       	cp	r22, r25
    334a:	98 f2       	brcs	.-90     	; 0x32f2 <lora_driver_sent_upload_message+0x20>
    334c:	01 c0       	rjmp	.+2      	; 0x3350 <lora_driver_sent_upload_message+0x7e>
    334e:	70 e0       	ldi	r23, 0x00	; 0
    3350:	e7 2f       	mov	r30, r23
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	e1 5b       	subi	r30, 0xB1	; 177
    3356:	f5 4f       	sbci	r31, 0xF5	; 245
    3358:	10 82       	st	Z, r1
    335a:	4c 91       	ld	r20, X
    335c:	81 11       	cpse	r24, r1
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <lora_driver_sent_upload_message+0x94>
    3360:	86 e3       	ldi	r24, 0x36	; 54
    3362:	97 e0       	ldi	r25, 0x07	; 7
    3364:	02 c0       	rjmp	.+4      	; 0x336a <lora_driver_sent_upload_message+0x98>
    3366:	88 e3       	ldi	r24, 0x38	; 56
    3368:	97 e0       	ldi	r25, 0x07	; 7
    336a:	2f e4       	ldi	r18, 0x4F	; 79
    336c:	3a e0       	ldi	r19, 0x0A	; 10
    336e:	3f 93       	push	r19
    3370:	2f 93       	push	r18
    3372:	1f 92       	push	r1
    3374:	4f 93       	push	r20
    3376:	9f 93       	push	r25
    3378:	8f 93       	push	r24
    337a:	8c e3       	ldi	r24, 0x3C	; 60
    337c:	97 e0       	ldi	r25, 0x07	; 7
    337e:	9f 93       	push	r25
    3380:	8f 93       	push	r24
    3382:	81 e9       	ldi	r24, 0x91	; 145
    3384:	9a e0       	ldi	r25, 0x0A	; 10
    3386:	9f 93       	push	r25
    3388:	8f 93       	push	r24
    338a:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <sprintf>
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	81 e9       	ldi	r24, 0x91	; 145
    3394:	9a e0       	ldi	r25, 0x0A	; 10
    3396:	b9 de       	rcall	.-654    	; 0x310a <_upload_message_rc>
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	8e 30       	cpi	r24, 0x0E	; 14
    33a4:	51 f5       	brne	.+84     	; 0x33fa <lora_driver_sent_upload_message+0x128>
    33a6:	87 e0       	ldi	r24, 0x07	; 7
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	be 01       	movw	r22, r28
    33ac:	6f 5f       	subi	r22, 0xFF	; 255
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255
    33b0:	8e eb       	ldi	r24, 0xBE	; 190
    33b2:	9a e0       	ldi	r25, 0x0A	; 10
    33b4:	30 d1       	rcall	.+608    	; 0x3616 <decode_port_no>
    33b6:	80 93 39 0a 	sts	0x0A39, r24	; 0x800a39 <_downlink_payload>
    33ba:	e9 81       	ldd	r30, Y+1	; 0x01
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	e2 54       	subi	r30, 0x42	; 66
    33c0:	f5 4f       	sbci	r31, 0xF5	; 245
    33c2:	df 01       	movw	r26, r30
    33c4:	0d 90       	ld	r0, X+
    33c6:	00 20       	and	r0, r0
    33c8:	e9 f7       	brne	.-6      	; 0x33c4 <lora_driver_sent_upload_message+0xf2>
    33ca:	11 97       	sbiw	r26, 0x01	; 1
    33cc:	ae 1b       	sub	r26, r30
    33ce:	bf 0b       	sbc	r27, r31
    33d0:	aa 23       	and	r26, r26
    33d2:	81 f0       	breq	.+32     	; 0x33f4 <lora_driver_sent_upload_message+0x122>
    33d4:	bb 27       	eor	r27, r27
    33d6:	11 97       	sbiw	r26, 0x01	; 1
    33d8:	cd 01       	movw	r24, r26
    33da:	0a f4       	brpl	.+2      	; 0x33de <lora_driver_sent_upload_message+0x10c>
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	95 95       	asr	r25
    33e0:	87 95       	ror	r24
    33e2:	80 93 3a 0a 	sts	0x0A3A, r24	; 0x800a3a <_downlink_payload+0x1>
    33e6:	af 01       	movw	r20, r30
    33e8:	4f 5f       	subi	r20, 0xFF	; 255
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	64 e1       	ldi	r22, 0x14	; 20
    33ee:	8b e3       	ldi	r24, 0x3B	; 59
    33f0:	9a e0       	ldi	r25, 0x0A	; 10
    33f2:	3d d1       	rcall	.+634    	; 0x366e <decode_hexadecimal_string_bytes>
    33f4:	8e e0       	ldi	r24, 0x0E	; 14
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <lora_driver_sent_upload_message+0x128>
    33f8:	84 e1       	ldi	r24, 0x14	; 20
    33fa:	0f 90       	pop	r0
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	08 95       	ret

00003402 <lora_driver_set_adaptive_data_rate>:
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	19 f0       	breq	.+6      	; 0x340c <lora_driver_set_adaptive_data_rate+0xa>
    3406:	6c e4       	ldi	r22, 0x4C	; 76
    3408:	77 e0       	ldi	r23, 0x07	; 7
    340a:	02 c0       	rjmp	.+4      	; 0x3410 <lora_driver_set_adaptive_data_rate+0xe>
    340c:	6c e0       	ldi	r22, 0x0C	; 12
    340e:	78 e0       	ldi	r23, 0x08	; 8
    3410:	80 e5       	ldi	r24, 0x50	; 80
    3412:	97 e0       	ldi	r25, 0x07	; 7
    3414:	7a ce       	rjmp	.-780    	; 0x310a <_upload_message_rc>
    3416:	08 95       	ret

00003418 <lora_driver_configure_to_eu868>:
    3418:	2f 92       	push	r2
    341a:	3f 92       	push	r3
    341c:	4f 92       	push	r4
    341e:	5f 92       	push	r5
    3420:	6f 92       	push	r6
    3422:	7f 92       	push	r7
    3424:	8f 92       	push	r8
    3426:	9f 92       	push	r9
    3428:	af 92       	push	r10
    342a:	bf 92       	push	r11
    342c:	cf 92       	push	r12
    342e:	df 92       	push	r13
    3430:	ef 92       	push	r14
    3432:	ff 92       	push	r15
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	a0 97       	sbiw	r28, 0x20	; 32
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
    344c:	65 e9       	ldi	r22, 0x95	; 149
    344e:	77 e0       	ldi	r23, 0x07	; 7
    3450:	81 ea       	ldi	r24, 0xA1	; 161
    3452:	97 e0       	ldi	r25, 0x07	; 7
    3454:	c7 dd       	rcall	.-1138   	; 0x2fe4 <_upload_message>
    3456:	1e de       	rcall	.-964    	; 0x3094 <_reply2return_code>
    3458:	81 11       	cpse	r24, r1
    345a:	a3 c0       	rjmp	.+326    	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    345c:	80 e2       	ldi	r24, 0x20	; 32
    345e:	e1 e2       	ldi	r30, 0x21	; 33
    3460:	f2 e0       	ldi	r31, 0x02	; 2
    3462:	de 01       	movw	r26, r28
    3464:	11 96       	adiw	r26, 0x01	; 1
    3466:	01 90       	ld	r0, Z+
    3468:	0d 92       	st	X+, r0
    346a:	8a 95       	dec	r24
    346c:	e1 f7       	brne	.-8      	; 0x3466 <lora_driver_configure_to_eu868+0x4e>
    346e:	9e 01       	movw	r18, r28
    3470:	2f 5f       	subi	r18, 0xFF	; 255
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	69 01       	movw	r12, r18
    3476:	e1 2c       	mov	r14, r1
    3478:	f1 2c       	mov	r15, r1
    347a:	0f 2e       	mov	r0, r31
    347c:	fd ea       	ldi	r31, 0xAD	; 173
    347e:	af 2e       	mov	r10, r31
    3480:	f7 e0       	ldi	r31, 0x07	; 7
    3482:	bf 2e       	mov	r11, r31
    3484:	f0 2d       	mov	r31, r0
    3486:	01 e9       	ldi	r16, 0x91	; 145
    3488:	1a e0       	ldi	r17, 0x0A	; 10
    348a:	0f 2e       	mov	r0, r31
    348c:	f6 ec       	ldi	r31, 0xC6	; 198
    348e:	4f 2e       	mov	r4, r31
    3490:	f7 e0       	ldi	r31, 0x07	; 7
    3492:	5f 2e       	mov	r5, r31
    3494:	f0 2d       	mov	r31, r0
    3496:	0f 2e       	mov	r0, r31
    3498:	fd ed       	ldi	r31, 0xDD	; 221
    349a:	8f 2e       	mov	r8, r31
    349c:	f7 e0       	ldi	r31, 0x07	; 7
    349e:	9f 2e       	mov	r9, r31
    34a0:	f0 2d       	mov	r31, r0
    34a2:	0f 2e       	mov	r0, r31
    34a4:	f7 ef       	ldi	r31, 0xF7	; 247
    34a6:	6f 2e       	mov	r6, r31
    34a8:	f7 e0       	ldi	r31, 0x07	; 7
    34aa:	7f 2e       	mov	r7, r31
    34ac:	f0 2d       	mov	r31, r0
    34ae:	3e 2c       	mov	r3, r14
    34b0:	2f 2c       	mov	r2, r15
    34b2:	ff 92       	push	r15
    34b4:	ef 92       	push	r14
    34b6:	bf 92       	push	r11
    34b8:	af 92       	push	r10
    34ba:	1f 93       	push	r17
    34bc:	0f 93       	push	r16
    34be:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <sprintf>
    34c2:	60 e0       	ldi	r22, 0x00	; 0
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	c8 01       	movw	r24, r16
    34c8:	8d dd       	rcall	.-1254   	; 0x2fe4 <_upload_message>
    34ca:	e4 dd       	rcall	.-1080   	; 0x3094 <_reply2return_code>
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	81 11       	cpse	r24, r1
    34da:	63 c0       	rjmp	.+198    	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    34dc:	32 e0       	ldi	r19, 0x02	; 2
    34de:	3e 15       	cp	r19, r14
    34e0:	e8 f4       	brcc	.+58     	; 0x351c <lora_driver_configure_to_eu868+0x104>
    34e2:	f6 01       	movw	r30, r12
    34e4:	83 81       	ldd	r24, Z+3	; 0x03
    34e6:	8f 93       	push	r24
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	8f 93       	push	r24
    34ec:	81 81       	ldd	r24, Z+1	; 0x01
    34ee:	8f 93       	push	r24
    34f0:	80 81       	ld	r24, Z
    34f2:	8f 93       	push	r24
    34f4:	ff 92       	push	r15
    34f6:	ef 92       	push	r14
    34f8:	5f 92       	push	r5
    34fa:	4f 92       	push	r4
    34fc:	1f 93       	push	r17
    34fe:	0f 93       	push	r16
    3500:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <sprintf>
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	c8 01       	movw	r24, r16
    350a:	6c dd       	rcall	.-1320   	; 0x2fe4 <_upload_message>
    350c:	c3 dd       	rcall	.-1146   	; 0x3094 <_reply2return_code>
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	81 11       	cpse	r24, r1
    351a:	43 c0       	rjmp	.+134    	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    351c:	2f 92       	push	r2
    351e:	3f 92       	push	r3
    3520:	9f 92       	push	r9
    3522:	8f 92       	push	r8
    3524:	1f 93       	push	r17
    3526:	0f 93       	push	r16
    3528:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <sprintf>
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	c8 01       	movw	r24, r16
    3532:	58 dd       	rcall	.-1360   	; 0x2fe4 <_upload_message>
    3534:	af dd       	rcall	.-1186   	; 0x3094 <_reply2return_code>
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	81 11       	cpse	r24, r1
    3544:	2e c0       	rjmp	.+92     	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    3546:	2f 92       	push	r2
    3548:	3f 92       	push	r3
    354a:	7f 92       	push	r7
    354c:	6f 92       	push	r6
    354e:	1f 93       	push	r17
    3550:	0f 93       	push	r16
    3552:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <sprintf>
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	c8 01       	movw	r24, r16
    355c:	43 dd       	rcall	.-1402   	; 0x2fe4 <_upload_message>
    355e:	9a dd       	rcall	.-1228   	; 0x3094 <_reply2return_code>
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	81 11       	cpse	r24, r1
    356e:	19 c0       	rjmp	.+50     	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	e3 1a       	sub	r14, r19
    3574:	f3 0a       	sbc	r15, r19
    3576:	84 e0       	ldi	r24, 0x04	; 4
    3578:	c8 0e       	add	r12, r24
    357a:	d1 1c       	adc	r13, r1
    357c:	98 e0       	ldi	r25, 0x08	; 8
    357e:	e9 16       	cp	r14, r25
    3580:	f1 04       	cpc	r15, r1
    3582:	09 f0       	breq	.+2      	; 0x3586 <lora_driver_configure_to_eu868+0x16e>
    3584:	94 cf       	rjmp	.-216    	; 0x34ae <lora_driver_configure_to_eu868+0x96>
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	8f e0       	ldi	r24, 0x0F	; 15
    358c:	98 e0       	ldi	r25, 0x08	; 8
    358e:	2a dd       	rcall	.-1452   	; 0x2fe4 <_upload_message>
    3590:	81 dd       	rcall	.-1278   	; 0x3094 <_reply2return_code>
    3592:	81 11       	cpse	r24, r1
    3594:	06 c0       	rjmp	.+12     	; 0x35a2 <lora_driver_configure_to_eu868+0x18a>
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	80 e2       	ldi	r24, 0x20	; 32
    359c:	98 e0       	ldi	r25, 0x08	; 8
    359e:	22 dd       	rcall	.-1468   	; 0x2fe4 <_upload_message>
    35a0:	79 dd       	rcall	.-1294   	; 0x3094 <_reply2return_code>
    35a2:	a0 96       	adiw	r28, 0x20	; 32
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	df 91       	pop	r29
    35b0:	cf 91       	pop	r28
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	df 90       	pop	r13
    35bc:	cf 90       	pop	r12
    35be:	bf 90       	pop	r11
    35c0:	af 90       	pop	r10
    35c2:	9f 90       	pop	r9
    35c4:	8f 90       	pop	r8
    35c6:	7f 90       	pop	r7
    35c8:	6f 90       	pop	r6
    35ca:	5f 90       	pop	r5
    35cc:	4f 90       	pop	r4
    35ce:	3f 90       	pop	r3
    35d0:	2f 90       	pop	r2
    35d2:	08 95       	ret

000035d4 <lora_driver_set_otaa_identity>:
    35d4:	ef 92       	push	r14
    35d6:	ff 92       	push	r15
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	ec 01       	movw	r28, r24
    35e2:	8b 01       	movw	r16, r22
    35e4:	7a 01       	movw	r14, r20
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	0c df       	rcall	.-488    	; 0x3402 <lora_driver_set_adaptive_data_rate>
    35ea:	81 11       	cpse	r24, r1
    35ec:	0d c0       	rjmp	.+26     	; 0x3608 <lora_driver_set_otaa_identity+0x34>
    35ee:	ce 01       	movw	r24, r28
    35f0:	25 de       	rcall	.-950    	; 0x323c <lora_driver_set_application_identifier>
    35f2:	81 11       	cpse	r24, r1
    35f4:	09 c0       	rjmp	.+18     	; 0x3608 <lora_driver_set_otaa_identity+0x34>
    35f6:	c8 01       	movw	r24, r16
    35f8:	32 de       	rcall	.-924    	; 0x325e <lora_driver_set_application_key>
    35fa:	81 11       	cpse	r24, r1
    35fc:	05 c0       	rjmp	.+10     	; 0x3608 <lora_driver_set_otaa_identity+0x34>
    35fe:	c7 01       	movw	r24, r14
    3600:	0c de       	rcall	.-1000   	; 0x321a <lora_driver_set_device_identifier>
    3602:	81 11       	cpse	r24, r1
    3604:	01 c0       	rjmp	.+2      	; 0x3608 <lora_driver_set_otaa_identity+0x34>
    3606:	3c de       	rcall	.-904    	; 0x3280 <lora_driver_save_mac>
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	08 95       	ret

00003616 <decode_port_no>:
    3616:	dc 01       	movw	r26, r24
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	29 f1       	breq	.+74     	; 0x3666 <decode_port_no+0x50>
    361c:	fb 01       	movw	r30, r22
    361e:	20 81       	ld	r18, Z
    3620:	fc 01       	movw	r30, r24
    3622:	01 90       	ld	r0, Z+
    3624:	00 20       	and	r0, r0
    3626:	e9 f7       	brne	.-6      	; 0x3622 <decode_port_no+0xc>
    3628:	31 97       	sbiw	r30, 0x01	; 1
    362a:	e8 1b       	sub	r30, r24
    362c:	f9 0b       	sbc	r31, r25
    362e:	82 2f       	mov	r24, r18
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	e8 17       	cp	r30, r24
    3634:	f9 07       	cpc	r31, r25
    3636:	c8 f0       	brcs	.+50     	; 0x366a <decode_port_no+0x54>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	08 c0       	rjmp	.+16     	; 0x364c <decode_port_no+0x36>
    363c:	88 0f       	add	r24, r24
    363e:	38 2f       	mov	r19, r24
    3640:	33 0f       	add	r19, r19
    3642:	33 0f       	add	r19, r19
    3644:	83 0f       	add	r24, r19
    3646:	80 53       	subi	r24, 0x30	; 48
    3648:	89 0f       	add	r24, r25
    364a:	2f 5f       	subi	r18, 0xFF	; 255
    364c:	fd 01       	movw	r30, r26
    364e:	e2 0f       	add	r30, r18
    3650:	f1 1d       	adc	r31, r1
    3652:	90 81       	ld	r25, Z
    3654:	30 ed       	ldi	r19, 0xD0	; 208
    3656:	39 0f       	add	r19, r25
    3658:	3a 30       	cpi	r19, 0x0A	; 10
    365a:	10 f4       	brcc	.+4      	; 0x3660 <decode_port_no+0x4a>
    365c:	91 11       	cpse	r25, r1
    365e:	ee cf       	rjmp	.-36     	; 0x363c <decode_port_no+0x26>
    3660:	fb 01       	movw	r30, r22
    3662:	20 83       	st	Z, r18
    3664:	08 95       	ret
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	08 95       	ret
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	08 95       	ret

0000366e <decode_hexadecimal_string_bytes>:
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	dc 01       	movw	r26, r24
    3678:	ea 01       	movw	r28, r20
    367a:	20 97       	sbiw	r28, 0x00	; 0
    367c:	e1 f1       	breq	.+120    	; 0x36f6 <decode_hexadecimal_string_bytes+0x88>
    367e:	fa 01       	movw	r30, r20
    3680:	01 90       	ld	r0, Z+
    3682:	00 20       	and	r0, r0
    3684:	e9 f7       	brne	.-6      	; 0x3680 <decode_hexadecimal_string_bytes+0x12>
    3686:	31 97       	sbiw	r30, 0x01	; 1
    3688:	e4 1b       	sub	r30, r20
    368a:	f5 0b       	sbc	r31, r21
    368c:	32 97       	sbiw	r30, 0x02	; 2
    368e:	10 f5       	brcc	.+68     	; 0x36d4 <decode_hexadecimal_string_bytes+0x66>
    3690:	32 c0       	rjmp	.+100    	; 0x36f6 <decode_hexadecimal_string_bytes+0x88>
    3692:	8d 01       	movw	r16, r26
    3694:	04 0f       	add	r16, r20
    3696:	15 1f       	adc	r17, r21
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	ae 01       	movw	r20, r28
    369c:	42 0f       	add	r20, r18
    369e:	53 1f       	adc	r21, r19
    36a0:	fa 01       	movw	r30, r20
    36a2:	90 81       	ld	r25, Z
    36a4:	91 34       	cpi	r25, 0x41	; 65
    36a6:	28 f0       	brcs	.+10     	; 0x36b2 <decode_hexadecimal_string_bytes+0x44>
    36a8:	97 53       	subi	r25, 0x37	; 55
    36aa:	59 2f       	mov	r21, r25
    36ac:	52 95       	swap	r21
    36ae:	50 7f       	andi	r21, 0xF0	; 240
    36b0:	03 c0       	rjmp	.+6      	; 0x36b8 <decode_hexadecimal_string_bytes+0x4a>
    36b2:	59 2f       	mov	r21, r25
    36b4:	52 95       	swap	r21
    36b6:	50 7f       	andi	r21, 0xF0	; 240
    36b8:	2c 0f       	add	r18, r28
    36ba:	3d 1f       	adc	r19, r29
    36bc:	f9 01       	movw	r30, r18
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	91 34       	cpi	r25, 0x41	; 65
    36c2:	10 f0       	brcs	.+4      	; 0x36c8 <decode_hexadecimal_string_bytes+0x5a>
    36c4:	97 53       	subi	r25, 0x37	; 55
    36c6:	01 c0       	rjmp	.+2      	; 0x36ca <decode_hexadecimal_string_bytes+0x5c>
    36c8:	90 53       	subi	r25, 0x30	; 48
    36ca:	95 0f       	add	r25, r21
    36cc:	f8 01       	movw	r30, r16
    36ce:	90 83       	st	Z, r25
    36d0:	8f 5f       	subi	r24, 0xFF	; 255
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <decode_hexadecimal_string_bytes+0x68>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	28 2f       	mov	r18, r24
    36d8:	22 0f       	add	r18, r18
    36da:	48 2f       	mov	r20, r24
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	fe 01       	movw	r30, r28
    36e0:	01 90       	ld	r0, Z+
    36e2:	00 20       	and	r0, r0
    36e4:	e9 f7       	brne	.-6      	; 0x36e0 <decode_hexadecimal_string_bytes+0x72>
    36e6:	31 97       	sbiw	r30, 0x01	; 1
    36e8:	ec 1b       	sub	r30, r28
    36ea:	fd 0b       	sbc	r31, r29
    36ec:	4e 17       	cp	r20, r30
    36ee:	5f 07       	cpc	r21, r31
    36f0:	10 f4       	brcc	.+4      	; 0x36f6 <decode_hexadecimal_string_bytes+0x88>
    36f2:	86 13       	cpse	r24, r22
    36f4:	ce cf       	rjmp	.-100    	; 0x3692 <decode_hexadecimal_string_bytes+0x24>
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

00003700 <reg_read_register>:
    3700:	fc 01       	movw	r30, r24
    3702:	80 81       	ld	r24, Z
    3704:	08 95       	ret

00003706 <reg_read_bit>:
    3706:	fc 01       	movw	r30, r24
    3708:	20 81       	ld	r18, Z
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <reg_read_bit+0xe>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	6a 95       	dec	r22
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <reg_read_bit+0xa>
    3718:	82 23       	and	r24, r18
    371a:	08 95       	ret

0000371c <reg_read_bits>:
    371c:	fc 01       	movw	r30, r24
    371e:	80 81       	ld	r24, Z
    3720:	86 23       	and	r24, r22
    3722:	08 95       	ret

00003724 <reg_set_register>:
    3724:	fc 01       	movw	r30, r24
    3726:	60 83       	st	Z, r22
    3728:	08 95       	ret

0000372a <reg_clear_register>:
    372a:	fc 01       	movw	r30, r24
    372c:	10 82       	st	Z, r1
    372e:	08 95       	ret

00003730 <reg_set_bit>:
    3730:	fc 01       	movw	r30, r24
    3732:	40 81       	ld	r20, Z
    3734:	21 e0       	ldi	r18, 0x01	; 1
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	02 c0       	rjmp	.+4      	; 0x373e <reg_set_bit+0xe>
    373a:	22 0f       	add	r18, r18
    373c:	33 1f       	adc	r19, r19
    373e:	6a 95       	dec	r22
    3740:	e2 f7       	brpl	.-8      	; 0x373a <reg_set_bit+0xa>
    3742:	24 2b       	or	r18, r20
    3744:	20 83       	st	Z, r18
    3746:	08 95       	ret

00003748 <reg_set_bits>:
    3748:	fc 01       	movw	r30, r24
    374a:	20 81       	ld	r18, Z
    374c:	62 2b       	or	r22, r18
    374e:	60 83       	st	Z, r22
    3750:	08 95       	ret

00003752 <reg_toggle_bit>:
    3752:	fc 01       	movw	r30, r24
    3754:	40 81       	ld	r20, Z
    3756:	21 e0       	ldi	r18, 0x01	; 1
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <reg_toggle_bit+0xe>
    375c:	22 0f       	add	r18, r18
    375e:	33 1f       	adc	r19, r19
    3760:	6a 95       	dec	r22
    3762:	e2 f7       	brpl	.-8      	; 0x375c <reg_toggle_bit+0xa>
    3764:	24 27       	eor	r18, r20
    3766:	20 83       	st	Z, r18
    3768:	08 95       	ret

0000376a <reg_toggle_bits>:
    376a:	fc 01       	movw	r30, r24
    376c:	20 81       	ld	r18, Z
    376e:	62 27       	eor	r22, r18
    3770:	60 83       	st	Z, r22
    3772:	08 95       	ret

00003774 <reg_clear_bit>:
    3774:	fc 01       	movw	r30, r24
    3776:	90 81       	ld	r25, Z
    3778:	21 e0       	ldi	r18, 0x01	; 1
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <reg_clear_bit+0xe>
    377e:	22 0f       	add	r18, r18
    3780:	33 1f       	adc	r19, r19
    3782:	6a 95       	dec	r22
    3784:	e2 f7       	brpl	.-8      	; 0x377e <reg_clear_bit+0xa>
    3786:	20 95       	com	r18
    3788:	29 23       	and	r18, r25
    378a:	20 83       	st	Z, r18
    378c:	08 95       	ret

0000378e <reg_clear_bits>:
    378e:	fc 01       	movw	r30, r24
    3790:	90 81       	ld	r25, Z
    3792:	60 95       	com	r22
    3794:	69 23       	and	r22, r25
    3796:	60 83       	st	Z, r22
    3798:	08 95       	ret

0000379a <_serial_call_back>:
    379a:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <crc_sum.1941>
    379e:	86 0f       	add	r24, r22
    37a0:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <crc_sum.1941>
    37a4:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <_mh_state>
    37a8:	91 30       	cpi	r25, 0x01	; 1
    37aa:	79 f0       	breq	.+30     	; 0x37ca <_serial_call_back+0x30>
    37ac:	28 f0       	brcs	.+10     	; 0x37b8 <_serial_call_back+0x1e>
    37ae:	92 30       	cpi	r25, 0x02	; 2
    37b0:	a9 f0       	breq	.+42     	; 0x37dc <_serial_call_back+0x42>
    37b2:	93 30       	cpi	r25, 0x03	; 3
    37b4:	19 f1       	breq	.+70     	; 0x37fc <_serial_call_back+0x62>
    37b6:	08 95       	ret
    37b8:	6f 3f       	cpi	r22, 0xFF	; 255
    37ba:	09 f0       	breq	.+2      	; 0x37be <_serial_call_back+0x24>
    37bc:	48 c0       	rjmp	.+144    	; 0x384e <_serial_call_back+0xb4>
    37be:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <crc_sum.1941>
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <_mh_state>
    37c8:	08 95       	ret
    37ca:	66 38       	cpi	r22, 0x86	; 134
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <_serial_call_back+0x36>
    37ce:	3f c0       	rjmp	.+126    	; 0x384e <_serial_call_back+0xb4>
    37d0:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <inDex.1939>
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <_mh_state>
    37da:	08 95       	ret
    37dc:	e0 91 ed 0a 	lds	r30, 0x0AED	; 0x800aed <inDex.1939>
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	8e 0f       	add	r24, r30
    37e4:	80 93 ed 0a 	sts	0x0AED, r24	; 0x800aed <inDex.1939>
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	e5 51       	subi	r30, 0x15	; 21
    37ec:	f5 4f       	sbci	r31, 0xF5	; 245
    37ee:	60 83       	st	Z, r22
    37f0:	82 30       	cpi	r24, 0x02	; 2
    37f2:	69 f5       	brne	.+90     	; 0x384e <_serial_call_back+0xb4>
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <_mh_state>
    37fa:	08 95       	ret
    37fc:	90 91 ed 0a 	lds	r25, 0x0AED	; 0x800aed <inDex.1939>
    3800:	21 e0       	ldi	r18, 0x01	; 1
    3802:	29 0f       	add	r18, r25
    3804:	20 93 ed 0a 	sts	0x0AED, r18	; 0x800aed <inDex.1939>
    3808:	96 30       	cpi	r25, 0x06	; 6
    380a:	09 f5       	brne	.+66     	; 0x384e <_serial_call_back+0xb4>
    380c:	81 11       	cpse	r24, r1
    380e:	0e c0       	rjmp	.+28     	; 0x382c <_serial_call_back+0x92>
    3810:	eb ee       	ldi	r30, 0xEB	; 235
    3812:	fa e0       	ldi	r31, 0x0A	; 10
    3814:	80 81       	ld	r24, Z
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	98 2f       	mov	r25, r24
    381a:	88 27       	eor	r24, r24
    381c:	21 81       	ldd	r18, Z+1	; 0x01
    381e:	82 0f       	add	r24, r18
    3820:	91 1d       	adc	r25, r1
    3822:	90 93 f3 0a 	sts	0x0AF3, r25	; 0x800af3 <_ppm+0x1>
    3826:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <_ppm>
    382a:	04 c0       	rjmp	.+8      	; 0x3834 <_serial_call_back+0x9a>
    382c:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <_ppm+0x1>
    3830:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <_ppm>
    3834:	10 92 f1 0a 	sts	0x0AF1, r1	; 0x800af1 <_mh_state>
    3838:	e0 91 ef 0a 	lds	r30, 0x0AEF	; 0x800aef <_app_call_back>
    383c:	f0 91 f0 0a 	lds	r31, 0x0AF0	; 0x800af0 <_app_call_back+0x1>
    3840:	30 97       	sbiw	r30, 0x00	; 0
    3842:	29 f0       	breq	.+10     	; 0x384e <_serial_call_back+0xb4>
    3844:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <_ppm>
    3848:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <_ppm+0x1>
    384c:	19 95       	eicall
    384e:	08 95       	ret

00003850 <mh_z19_create>:
    3850:	8f 92       	push	r8
    3852:	9f 92       	push	r9
    3854:	af 92       	push	r10
    3856:	cf 92       	push	r12
    3858:	ef 92       	push	r14
    385a:	0f 93       	push	r16
    385c:	cf 93       	push	r28
    385e:	df 93       	push	r29
    3860:	eb 01       	movw	r28, r22
    3862:	0f 2e       	mov	r0, r31
    3864:	fd ec       	ldi	r31, 0xCD	; 205
    3866:	8f 2e       	mov	r8, r31
    3868:	fb e1       	ldi	r31, 0x1B	; 27
    386a:	9f 2e       	mov	r9, r31
    386c:	f0 2d       	mov	r31, r0
    386e:	68 94       	set
    3870:	aa 24       	eor	r10, r10
    3872:	a4 f8       	bld	r10, 4
    3874:	68 94       	set
    3876:	cc 24       	eor	r12, r12
    3878:	c4 f8       	bld	r12, 4
    387a:	e1 2c       	mov	r14, r1
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	23 e0       	ldi	r18, 0x03	; 3
    3880:	40 e8       	ldi	r20, 0x80	; 128
    3882:	55 e2       	ldi	r21, 0x25	; 37
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	40 d0       	rcall	.+128    	; 0x390a <serial_new_instance>
    388a:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <_serial+0x1>
    388e:	80 93 f4 0a 	sts	0x0AF4, r24	; 0x800af4 <_serial>
    3892:	d0 93 f0 0a 	sts	0x0AF0, r29	; 0x800af0 <_app_call_back+0x1>
    3896:	c0 93 ef 0a 	sts	0x0AEF, r28	; 0x800aef <_app_call_back>
    389a:	df 91       	pop	r29
    389c:	cf 91       	pop	r28
    389e:	0f 91       	pop	r16
    38a0:	ef 90       	pop	r14
    38a2:	cf 90       	pop	r12
    38a4:	af 90       	pop	r10
    38a6:	9f 90       	pop	r9
    38a8:	8f 90       	pop	r8
    38aa:	08 95       	ret

000038ac <mh_z19_take_meassuring>:
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	29 97       	sbiw	r28, 0x09	; 9
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	89 e0       	ldi	r24, 0x09	; 9
    38c2:	e1 e4       	ldi	r30, 0x41	; 65
    38c4:	f2 e0       	ldi	r31, 0x02	; 2
    38c6:	9e 01       	movw	r18, r28
    38c8:	2f 5f       	subi	r18, 0xFF	; 255
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	d9 01       	movw	r26, r18
    38ce:	01 90       	ld	r0, Z+
    38d0:	0d 92       	st	X+, r0
    38d2:	8a 95       	dec	r24
    38d4:	e1 f7       	brne	.-8      	; 0x38ce <mh_z19_take_meassuring+0x22>
    38d6:	10 92 f3 0a 	sts	0x0AF3, r1	; 0x800af3 <_ppm+0x1>
    38da:	10 92 f2 0a 	sts	0x0AF2, r1	; 0x800af2 <_ppm>
    38de:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <_serial>
    38e2:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <_serial+0x1>
    38e6:	00 97       	sbiw	r24, 0x00	; 0
    38e8:	31 f0       	breq	.+12     	; 0x38f6 <mh_z19_take_meassuring+0x4a>
    38ea:	42 2f       	mov	r20, r18
    38ec:	53 2f       	mov	r21, r19
    38ee:	69 e0       	ldi	r22, 0x09	; 9
    38f0:	c7 d0       	rcall	.+398    	; 0x3a80 <serial_send_bytes>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	01 c0       	rjmp	.+2      	; 0x38f8 <mh_z19_take_meassuring+0x4c>
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	29 96       	adiw	r28, 0x09	; 9
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	08 95       	ret

0000390a <serial_new_instance>:
    390a:	2f 92       	push	r2
    390c:	3f 92       	push	r3
    390e:	4f 92       	push	r4
    3910:	5f 92       	push	r5
    3912:	6f 92       	push	r6
    3914:	7f 92       	push	r7
    3916:	8f 92       	push	r8
    3918:	9f 92       	push	r9
    391a:	af 92       	push	r10
    391c:	cf 92       	push	r12
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	f8 2e       	mov	r15, r24
    3930:	2a 01       	movw	r4, r20
    3932:	3b 01       	movw	r6, r22
    3934:	88 e0       	ldi	r24, 0x08	; 8
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9b d7       	rcall	.+3894   	; 0x4870 <malloc>
    393a:	8c 01       	movw	r16, r24
    393c:	8f 2d       	mov	r24, r15
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	fc 01       	movw	r30, r24
    3946:	ea 50       	subi	r30, 0x0A	; 10
    3948:	f5 4f       	sbci	r31, 0xF5	; 245
    394a:	11 83       	std	Z+1, r17	; 0x01
    394c:	00 83       	st	Z, r16
    394e:	fc 01       	movw	r30, r24
    3950:	e6 5f       	subi	r30, 0xF6	; 246
    3952:	fd 4f       	sbci	r31, 0xFD	; 253
    3954:	80 81       	ld	r24, Z
    3956:	91 81       	ldd	r25, Z+1	; 0x01
    3958:	d8 01       	movw	r26, r16
    395a:	8d 93       	st	X+, r24
    395c:	9c 93       	st	X, r25
    395e:	6c 2d       	mov	r22, r12
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	84 e0       	ldi	r24, 0x04	; 4
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	6a d7       	rcall	.+3796   	; 0x483c <calloc>
    3968:	1c 01       	movw	r2, r24
    396a:	61 e0       	ldi	r22, 0x01	; 1
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	86 e0       	ldi	r24, 0x06	; 6
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	64 d7       	rcall	.+3784   	; 0x483c <calloc>
    3974:	7c 01       	movw	r14, r24
    3976:	4c 2d       	mov	r20, r12
    3978:	b1 01       	movw	r22, r2
    397a:	2b d5       	rcall	.+2646   	; 0x43d2 <fifo_init>
    397c:	f8 01       	movw	r30, r16
    397e:	f5 82       	std	Z+5, r15	; 0x05
    3980:	e4 82       	std	Z+4, r14	; 0x04
    3982:	6a 2d       	mov	r22, r10
    3984:	70 e0       	ldi	r23, 0x00	; 0
    3986:	84 e0       	ldi	r24, 0x04	; 4
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	58 d7       	rcall	.+3760   	; 0x483c <calloc>
    398c:	1c 01       	movw	r2, r24
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	86 e0       	ldi	r24, 0x06	; 6
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	52 d7       	rcall	.+3748   	; 0x483c <calloc>
    3998:	7c 01       	movw	r14, r24
    399a:	4a 2d       	mov	r20, r10
    399c:	b1 01       	movw	r22, r2
    399e:	19 d5       	rcall	.+2610   	; 0x43d2 <fifo_init>
    39a0:	d8 01       	movw	r26, r16
    39a2:	13 96       	adiw	r26, 0x03	; 3
    39a4:	fc 92       	st	X, r15
    39a6:	ee 92       	st	-X, r14
    39a8:	12 97       	sbiw	r26, 0x02	; 2
    39aa:	17 96       	adiw	r26, 0x07	; 7
    39ac:	9c 92       	st	X, r9
    39ae:	8e 92       	st	-X, r8
    39b0:	16 97       	sbiw	r26, 0x06	; 6
    39b2:	ff b6       	in	r15, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	ed 91       	ld	r30, X+
    39b8:	fc 91       	ld	r31, X
    39ba:	11 97       	sbiw	r26, 0x01	; 1
    39bc:	36 97       	sbiw	r30, 0x06	; 6
    39be:	80 81       	ld	r24, Z
    39c0:	82 60       	ori	r24, 0x02	; 2
    39c2:	80 83       	st	Z, r24
    39c4:	8d 90       	ld	r8, X+
    39c6:	9c 90       	ld	r9, X
    39c8:	c3 01       	movw	r24, r6
    39ca:	b2 01       	movw	r22, r4
    39cc:	1c d6       	rcall	.+3128   	; 0x4606 <__floatunsisf>
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e0       	ldi	r20, 0x00	; 0
    39d4:	51 e4       	ldi	r21, 0x41	; 65
    39d6:	a5 d6       	rcall	.+3402   	; 0x4722 <__mulsf3>
    39d8:	9b 01       	movw	r18, r22
    39da:	ac 01       	movw	r20, r24
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	74 e2       	ldi	r23, 0x24	; 36
    39e0:	84 e7       	ldi	r24, 0x74	; 116
    39e2:	9b e4       	ldi	r25, 0x4B	; 75
    39e4:	77 d5       	rcall	.+2798   	; 0x44d4 <__divsf3>
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e8       	ldi	r20, 0x80	; 128
    39ec:	5f e3       	ldi	r21, 0x3F	; 63
    39ee:	0d d5       	rcall	.+2586   	; 0x440a <__subsf3>
    39f0:	de d5       	rcall	.+3004   	; 0x45ae <__fixunssfsi>
    39f2:	f4 01       	movw	r30, r8
    39f4:	32 97       	sbiw	r30, 0x02	; 2
    39f6:	60 83       	st	Z, r22
    39f8:	d8 01       	movw	r26, r16
    39fa:	ed 91       	ld	r30, X+
    39fc:	fc 91       	ld	r31, X
    39fe:	11 97       	sbiw	r26, 0x01	; 1
    3a00:	35 97       	sbiw	r30, 0x05	; 5
    3a02:	88 e9       	ldi	r24, 0x98	; 152
    3a04:	80 83       	st	Z, r24
    3a06:	ed 91       	ld	r30, X+
    3a08:	fc 91       	ld	r31, X
    3a0a:	34 97       	sbiw	r30, 0x04	; 4
    3a0c:	86 e0       	ldi	r24, 0x06	; 6
    3a0e:	80 83       	st	Z, r24
    3a10:	ff be       	out	0x3f, r15	; 63
    3a12:	c8 01       	movw	r24, r16
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	1f 91       	pop	r17
    3a1a:	0f 91       	pop	r16
    3a1c:	ff 90       	pop	r15
    3a1e:	ef 90       	pop	r14
    3a20:	cf 90       	pop	r12
    3a22:	af 90       	pop	r10
    3a24:	9f 90       	pop	r9
    3a26:	8f 90       	pop	r8
    3a28:	7f 90       	pop	r7
    3a2a:	6f 90       	pop	r6
    3a2c:	5f 90       	pop	r5
    3a2e:	4f 90       	pop	r4
    3a30:	3f 90       	pop	r3
    3a32:	2f 90       	pop	r2
    3a34:	08 95       	ret

00003a36 <serial_send_byte>:
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	ec 01       	movw	r28, r24
    3a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a40:	93 81       	ldd	r25, Z+3	; 0x03
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	25 81       	ldd	r18, Z+5	; 0x05
    3a46:	98 1b       	sub	r25, r24
    3a48:	92 23       	and	r25, r18
    3a4a:	84 81       	ldd	r24, Z+4	; 0x04
    3a4c:	98 17       	cp	r25, r24
    3a4e:	a1 f0       	breq	.+40     	; 0x3a78 <serial_send_byte+0x42>
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	26 95       	lsr	r18
    3a54:	29 23       	and	r18, r25
    3a56:	a0 81       	ld	r26, Z
    3a58:	b1 81       	ldd	r27, Z+1	; 0x01
    3a5a:	a2 0f       	add	r26, r18
    3a5c:	b1 1d       	adc	r27, r1
    3a5e:	6c 93       	st	X, r22
    3a60:	9f 5f       	subi	r25, 0xFF	; 255
    3a62:	25 81       	ldd	r18, Z+5	; 0x05
    3a64:	92 23       	and	r25, r18
    3a66:	93 83       	std	Z+3, r25	; 0x03
    3a68:	e8 81       	ld	r30, Y
    3a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a6c:	35 97       	sbiw	r30, 0x05	; 5
    3a6e:	80 81       	ld	r24, Z
    3a70:	80 62       	ori	r24, 0x20	; 32
    3a72:	80 83       	st	Z, r24
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <serial_send_byte+0x44>
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	df 91       	pop	r29
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <serial_send_bytes>:
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	7c 01       	movw	r14, r24
    3a8e:	dc 01       	movw	r26, r24
    3a90:	12 96       	adiw	r26, 0x02	; 2
    3a92:	ed 91       	ld	r30, X+
    3a94:	fc 91       	ld	r31, X
    3a96:	13 97       	sbiw	r26, 0x03	; 3
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	82 81       	ldd	r24, Z+2	; 0x02
    3a9c:	98 1b       	sub	r25, r24
    3a9e:	85 81       	ldd	r24, Z+5	; 0x05
    3aa0:	98 23       	and	r25, r24
    3aa2:	84 81       	ldd	r24, Z+4	; 0x04
    3aa4:	89 1b       	sub	r24, r25
    3aa6:	86 17       	cp	r24, r22
    3aa8:	98 f1       	brcs	.+102    	; 0x3b10 <serial_send_bytes+0x90>
    3aaa:	66 23       	and	r22, r22
    3aac:	41 f1       	breq	.+80     	; 0x3afe <serial_send_bytes+0x7e>
    3aae:	84 2f       	mov	r24, r20
    3ab0:	95 2f       	mov	r25, r21
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	61 50       	subi	r22, 0x01	; 1
    3ab6:	46 2f       	mov	r20, r22
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	4f 5f       	subi	r20, 0xFF	; 255
    3abc:	5f 4f       	sbci	r21, 0xFF	; 255
    3abe:	48 0f       	add	r20, r24
    3ac0:	59 1f       	adc	r21, r25
    3ac2:	e7 01       	movw	r28, r14
    3ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ac8:	93 81       	ldd	r25, Z+3	; 0x03
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	25 81       	ldd	r18, Z+5	; 0x05
    3ace:	98 1b       	sub	r25, r24
    3ad0:	92 23       	and	r25, r18
    3ad2:	84 81       	ldd	r24, Z+4	; 0x04
    3ad4:	98 17       	cp	r25, r24
    3ad6:	79 f0       	breq	.+30     	; 0x3af6 <serial_send_bytes+0x76>
    3ad8:	8c 91       	ld	r24, X
    3ada:	93 81       	ldd	r25, Z+3	; 0x03
    3adc:	26 95       	lsr	r18
    3ade:	29 23       	and	r18, r25
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	8b 01       	movw	r16, r22
    3ae6:	02 0f       	add	r16, r18
    3ae8:	11 1d       	adc	r17, r1
    3aea:	e8 01       	movw	r28, r16
    3aec:	88 83       	st	Y, r24
    3aee:	9f 5f       	subi	r25, 0xFF	; 255
    3af0:	85 81       	ldd	r24, Z+5	; 0x05
    3af2:	98 23       	and	r25, r24
    3af4:	93 83       	std	Z+3, r25	; 0x03
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	a4 17       	cp	r26, r20
    3afa:	b5 07       	cpc	r27, r21
    3afc:	11 f7       	brne	.-60     	; 0x3ac2 <serial_send_bytes+0x42>
    3afe:	d7 01       	movw	r26, r14
    3b00:	ed 91       	ld	r30, X+
    3b02:	fc 91       	ld	r31, X
    3b04:	35 97       	sbiw	r30, 0x05	; 5
    3b06:	80 81       	ld	r24, Z
    3b08:	80 62       	ori	r24, 0x20	; 32
    3b0a:	80 83       	st	Z, r24
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	01 c0       	rjmp	.+2      	; 0x3b12 <serial_send_bytes+0x92>
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	08 95       	ret

00003b20 <serial_get_byte>:
    3b20:	dc 01       	movw	r26, r24
    3b22:	14 96       	adiw	r26, 0x04	; 4
    3b24:	ed 91       	ld	r30, X+
    3b26:	fc 91       	ld	r31, X
    3b28:	15 97       	sbiw	r26, 0x05	; 5
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	98 17       	cp	r25, r24
    3b30:	89 f0       	breq	.+34     	; 0x3b54 <serial_get_byte+0x34>
    3b32:	92 81       	ldd	r25, Z+2	; 0x02
    3b34:	85 81       	ldd	r24, Z+5	; 0x05
    3b36:	86 95       	lsr	r24
    3b38:	89 23       	and	r24, r25
    3b3a:	a0 81       	ld	r26, Z
    3b3c:	b1 81       	ldd	r27, Z+1	; 0x01
    3b3e:	a8 0f       	add	r26, r24
    3b40:	b1 1d       	adc	r27, r1
    3b42:	8c 91       	ld	r24, X
    3b44:	db 01       	movw	r26, r22
    3b46:	8c 93       	st	X, r24
    3b48:	9f 5f       	subi	r25, 0xFF	; 255
    3b4a:	85 81       	ldd	r24, Z+5	; 0x05
    3b4c:	98 23       	and	r25, r24
    3b4e:	92 83       	std	Z+2, r25	; 0x02
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	08 95       	ret
    3b54:	83 e0       	ldi	r24, 0x03	; 3
    3b56:	08 95       	ret

00003b58 <__vector_25>:
    3b58:	1f 92       	push	r1
    3b5a:	0f 92       	push	r0
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	0f 92       	push	r0
    3b60:	11 24       	eor	r1, r1
    3b62:	0b b6       	in	r0, 0x3b	; 59
    3b64:	0f 92       	push	r0
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	ef 93       	push	r30
    3b80:	ff 93       	push	r31
    3b82:	a0 91 f6 0a 	lds	r26, 0x0AF6	; 0x800af6 <_ser_handle>
    3b86:	b0 91 f7 0a 	lds	r27, 0x0AF7	; 0x800af7 <_ser_handle+0x1>
    3b8a:	10 97       	sbiw	r26, 0x00	; 0
    3b8c:	11 f1       	breq	.+68     	; 0x3bd2 <__vector_25+0x7a>
    3b8e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3b92:	14 96       	adiw	r26, 0x04	; 4
    3b94:	ed 91       	ld	r30, X+
    3b96:	fc 91       	ld	r31, X
    3b98:	15 97       	sbiw	r26, 0x05	; 5
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	25 81       	ldd	r18, Z+5	; 0x05
    3ba0:	98 1b       	sub	r25, r24
    3ba2:	92 23       	and	r25, r18
    3ba4:	84 81       	ldd	r24, Z+4	; 0x04
    3ba6:	98 17       	cp	r25, r24
    3ba8:	61 f0       	breq	.+24     	; 0x3bc2 <__vector_25+0x6a>
    3baa:	83 81       	ldd	r24, Z+3	; 0x03
    3bac:	26 95       	lsr	r18
    3bae:	28 23       	and	r18, r24
    3bb0:	c0 81       	ld	r28, Z
    3bb2:	d1 81       	ldd	r29, Z+1	; 0x01
    3bb4:	c2 0f       	add	r28, r18
    3bb6:	d1 1d       	adc	r29, r1
    3bb8:	68 83       	st	Y, r22
    3bba:	8f 5f       	subi	r24, 0xFF	; 255
    3bbc:	95 81       	ldd	r25, Z+5	; 0x05
    3bbe:	89 23       	and	r24, r25
    3bc0:	83 83       	std	Z+3, r24	; 0x03
    3bc2:	16 96       	adiw	r26, 0x06	; 6
    3bc4:	ed 91       	ld	r30, X+
    3bc6:	fc 91       	ld	r31, X
    3bc8:	17 97       	sbiw	r26, 0x07	; 7
    3bca:	30 97       	sbiw	r30, 0x00	; 0
    3bcc:	11 f0       	breq	.+4      	; 0x3bd2 <__vector_25+0x7a>
    3bce:	cd 01       	movw	r24, r26
    3bd0:	19 95       	eicall
    3bd2:	ff 91       	pop	r31
    3bd4:	ef 91       	pop	r30
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	bf 91       	pop	r27
    3bdc:	af 91       	pop	r26
    3bde:	9f 91       	pop	r25
    3be0:	8f 91       	pop	r24
    3be2:	7f 91       	pop	r23
    3be4:	6f 91       	pop	r22
    3be6:	5f 91       	pop	r21
    3be8:	4f 91       	pop	r20
    3bea:	3f 91       	pop	r19
    3bec:	2f 91       	pop	r18
    3bee:	0f 90       	pop	r0
    3bf0:	0b be       	out	0x3b, r0	; 59
    3bf2:	0f 90       	pop	r0
    3bf4:	0f be       	out	0x3f, r0	; 63
    3bf6:	0f 90       	pop	r0
    3bf8:	1f 90       	pop	r1
    3bfa:	18 95       	reti

00003bfc <__vector_26>:
    3bfc:	1f 92       	push	r1
    3bfe:	0f 92       	push	r0
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	0f 92       	push	r0
    3c04:	11 24       	eor	r1, r1
    3c06:	0b b6       	in	r0, 0x3b	; 59
    3c08:	0f 92       	push	r0
    3c0a:	2f 93       	push	r18
    3c0c:	8f 93       	push	r24
    3c0e:	9f 93       	push	r25
    3c10:	af 93       	push	r26
    3c12:	bf 93       	push	r27
    3c14:	ef 93       	push	r30
    3c16:	ff 93       	push	r31
    3c18:	e0 91 f6 0a 	lds	r30, 0x0AF6	; 0x800af6 <_ser_handle>
    3c1c:	f0 91 f7 0a 	lds	r31, 0x0AF7	; 0x800af7 <_ser_handle+0x1>
    3c20:	30 97       	sbiw	r30, 0x00	; 0
    3c22:	b9 f0       	breq	.+46     	; 0x3c52 <__vector_26+0x56>
    3c24:	02 80       	ldd	r0, Z+2	; 0x02
    3c26:	f3 81       	ldd	r31, Z+3	; 0x03
    3c28:	e0 2d       	mov	r30, r0
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	98 17       	cp	r25, r24
    3c30:	b1 f0       	breq	.+44     	; 0x3c5e <__vector_26+0x62>
    3c32:	92 81       	ldd	r25, Z+2	; 0x02
    3c34:	85 81       	ldd	r24, Z+5	; 0x05
    3c36:	28 2f       	mov	r18, r24
    3c38:	26 95       	lsr	r18
    3c3a:	29 23       	and	r18, r25
    3c3c:	a0 81       	ld	r26, Z
    3c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c40:	a2 0f       	add	r26, r18
    3c42:	b1 1d       	adc	r27, r1
    3c44:	2c 91       	ld	r18, X
    3c46:	9f 5f       	subi	r25, 0xFF	; 255
    3c48:	89 23       	and	r24, r25
    3c4a:	82 83       	std	Z+2, r24	; 0x02
    3c4c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c50:	0b c0       	rjmp	.+22     	; 0x3c68 <__vector_26+0x6c>
    3c52:	e1 ec       	ldi	r30, 0xC1	; 193
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	80 81       	ld	r24, Z
    3c58:	8f 7d       	andi	r24, 0xDF	; 223
    3c5a:	80 83       	st	Z, r24
    3c5c:	05 c0       	rjmp	.+10     	; 0x3c68 <__vector_26+0x6c>
    3c5e:	e1 ec       	ldi	r30, 0xC1	; 193
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	80 81       	ld	r24, Z
    3c64:	8f 7d       	andi	r24, 0xDF	; 223
    3c66:	80 83       	st	Z, r24
    3c68:	ff 91       	pop	r31
    3c6a:	ef 91       	pop	r30
    3c6c:	bf 91       	pop	r27
    3c6e:	af 91       	pop	r26
    3c70:	9f 91       	pop	r25
    3c72:	8f 91       	pop	r24
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0b be       	out	0x3b, r0	; 59
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__vector_36>:
    3c84:	1f 92       	push	r1
    3c86:	0f 92       	push	r0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	0f 92       	push	r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	0b b6       	in	r0, 0x3b	; 59
    3c90:	0f 92       	push	r0
    3c92:	2f 93       	push	r18
    3c94:	3f 93       	push	r19
    3c96:	4f 93       	push	r20
    3c98:	5f 93       	push	r21
    3c9a:	6f 93       	push	r22
    3c9c:	7f 93       	push	r23
    3c9e:	8f 93       	push	r24
    3ca0:	9f 93       	push	r25
    3ca2:	af 93       	push	r26
    3ca4:	bf 93       	push	r27
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	ef 93       	push	r30
    3cac:	ff 93       	push	r31
    3cae:	a0 91 f8 0a 	lds	r26, 0x0AF8	; 0x800af8 <_ser_handle+0x2>
    3cb2:	b0 91 f9 0a 	lds	r27, 0x0AF9	; 0x800af9 <_ser_handle+0x3>
    3cb6:	10 97       	sbiw	r26, 0x00	; 0
    3cb8:	11 f1       	breq	.+68     	; 0x3cfe <__vector_36+0x7a>
    3cba:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3cbe:	14 96       	adiw	r26, 0x04	; 4
    3cc0:	ed 91       	ld	r30, X+
    3cc2:	fc 91       	ld	r31, X
    3cc4:	15 97       	sbiw	r26, 0x05	; 5
    3cc6:	93 81       	ldd	r25, Z+3	; 0x03
    3cc8:	82 81       	ldd	r24, Z+2	; 0x02
    3cca:	25 81       	ldd	r18, Z+5	; 0x05
    3ccc:	98 1b       	sub	r25, r24
    3cce:	92 23       	and	r25, r18
    3cd0:	84 81       	ldd	r24, Z+4	; 0x04
    3cd2:	98 17       	cp	r25, r24
    3cd4:	61 f0       	breq	.+24     	; 0x3cee <__vector_36+0x6a>
    3cd6:	83 81       	ldd	r24, Z+3	; 0x03
    3cd8:	26 95       	lsr	r18
    3cda:	28 23       	and	r18, r24
    3cdc:	c0 81       	ld	r28, Z
    3cde:	d1 81       	ldd	r29, Z+1	; 0x01
    3ce0:	c2 0f       	add	r28, r18
    3ce2:	d1 1d       	adc	r29, r1
    3ce4:	68 83       	st	Y, r22
    3ce6:	8f 5f       	subi	r24, 0xFF	; 255
    3ce8:	95 81       	ldd	r25, Z+5	; 0x05
    3cea:	89 23       	and	r24, r25
    3cec:	83 83       	std	Z+3, r24	; 0x03
    3cee:	16 96       	adiw	r26, 0x06	; 6
    3cf0:	ed 91       	ld	r30, X+
    3cf2:	fc 91       	ld	r31, X
    3cf4:	17 97       	sbiw	r26, 0x07	; 7
    3cf6:	30 97       	sbiw	r30, 0x00	; 0
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <__vector_36+0x7a>
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	19 95       	eicall
    3cfe:	ff 91       	pop	r31
    3d00:	ef 91       	pop	r30
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	bf 91       	pop	r27
    3d08:	af 91       	pop	r26
    3d0a:	9f 91       	pop	r25
    3d0c:	8f 91       	pop	r24
    3d0e:	7f 91       	pop	r23
    3d10:	6f 91       	pop	r22
    3d12:	5f 91       	pop	r21
    3d14:	4f 91       	pop	r20
    3d16:	3f 91       	pop	r19
    3d18:	2f 91       	pop	r18
    3d1a:	0f 90       	pop	r0
    3d1c:	0b be       	out	0x3b, r0	; 59
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	0f 90       	pop	r0
    3d24:	1f 90       	pop	r1
    3d26:	18 95       	reti

00003d28 <__vector_37>:
    3d28:	1f 92       	push	r1
    3d2a:	0f 92       	push	r0
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	0f 92       	push	r0
    3d30:	11 24       	eor	r1, r1
    3d32:	0b b6       	in	r0, 0x3b	; 59
    3d34:	0f 92       	push	r0
    3d36:	2f 93       	push	r18
    3d38:	8f 93       	push	r24
    3d3a:	9f 93       	push	r25
    3d3c:	af 93       	push	r26
    3d3e:	bf 93       	push	r27
    3d40:	ef 93       	push	r30
    3d42:	ff 93       	push	r31
    3d44:	e0 91 f8 0a 	lds	r30, 0x0AF8	; 0x800af8 <_ser_handle+0x2>
    3d48:	f0 91 f9 0a 	lds	r31, 0x0AF9	; 0x800af9 <_ser_handle+0x3>
    3d4c:	30 97       	sbiw	r30, 0x00	; 0
    3d4e:	b9 f0       	breq	.+46     	; 0x3d7e <__vector_37+0x56>
    3d50:	02 80       	ldd	r0, Z+2	; 0x02
    3d52:	f3 81       	ldd	r31, Z+3	; 0x03
    3d54:	e0 2d       	mov	r30, r0
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	98 17       	cp	r25, r24
    3d5c:	b1 f0       	breq	.+44     	; 0x3d8a <__vector_37+0x62>
    3d5e:	92 81       	ldd	r25, Z+2	; 0x02
    3d60:	85 81       	ldd	r24, Z+5	; 0x05
    3d62:	28 2f       	mov	r18, r24
    3d64:	26 95       	lsr	r18
    3d66:	29 23       	and	r18, r25
    3d68:	a0 81       	ld	r26, Z
    3d6a:	b1 81       	ldd	r27, Z+1	; 0x01
    3d6c:	a2 0f       	add	r26, r18
    3d6e:	b1 1d       	adc	r27, r1
    3d70:	2c 91       	ld	r18, X
    3d72:	9f 5f       	subi	r25, 0xFF	; 255
    3d74:	89 23       	and	r24, r25
    3d76:	82 83       	std	Z+2, r24	; 0x02
    3d78:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3d7c:	0b c0       	rjmp	.+22     	; 0x3d94 <__vector_37+0x6c>
    3d7e:	e9 ec       	ldi	r30, 0xC9	; 201
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	8f 7d       	andi	r24, 0xDF	; 223
    3d86:	80 83       	st	Z, r24
    3d88:	05 c0       	rjmp	.+10     	; 0x3d94 <__vector_37+0x6c>
    3d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	8f 7d       	andi	r24, 0xDF	; 223
    3d92:	80 83       	st	Z, r24
    3d94:	ff 91       	pop	r31
    3d96:	ef 91       	pop	r30
    3d98:	bf 91       	pop	r27
    3d9a:	af 91       	pop	r26
    3d9c:	9f 91       	pop	r25
    3d9e:	8f 91       	pop	r24
    3da0:	2f 91       	pop	r18
    3da2:	0f 90       	pop	r0
    3da4:	0b be       	out	0x3b, r0	; 59
    3da6:	0f 90       	pop	r0
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	0f 90       	pop	r0
    3dac:	1f 90       	pop	r1
    3dae:	18 95       	reti

00003db0 <__vector_51>:
    3db0:	1f 92       	push	r1
    3db2:	0f 92       	push	r0
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	0f 92       	push	r0
    3db8:	11 24       	eor	r1, r1
    3dba:	0b b6       	in	r0, 0x3b	; 59
    3dbc:	0f 92       	push	r0
    3dbe:	2f 93       	push	r18
    3dc0:	3f 93       	push	r19
    3dc2:	4f 93       	push	r20
    3dc4:	5f 93       	push	r21
    3dc6:	6f 93       	push	r22
    3dc8:	7f 93       	push	r23
    3dca:	8f 93       	push	r24
    3dcc:	9f 93       	push	r25
    3dce:	af 93       	push	r26
    3dd0:	bf 93       	push	r27
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	ef 93       	push	r30
    3dd8:	ff 93       	push	r31
    3dda:	a0 91 fa 0a 	lds	r26, 0x0AFA	; 0x800afa <_ser_handle+0x4>
    3dde:	b0 91 fb 0a 	lds	r27, 0x0AFB	; 0x800afb <_ser_handle+0x5>
    3de2:	10 97       	sbiw	r26, 0x00	; 0
    3de4:	11 f1       	breq	.+68     	; 0x3e2a <__vector_51+0x7a>
    3de6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3dea:	14 96       	adiw	r26, 0x04	; 4
    3dec:	ed 91       	ld	r30, X+
    3dee:	fc 91       	ld	r31, X
    3df0:	15 97       	sbiw	r26, 0x05	; 5
    3df2:	93 81       	ldd	r25, Z+3	; 0x03
    3df4:	82 81       	ldd	r24, Z+2	; 0x02
    3df6:	25 81       	ldd	r18, Z+5	; 0x05
    3df8:	98 1b       	sub	r25, r24
    3dfa:	92 23       	and	r25, r18
    3dfc:	84 81       	ldd	r24, Z+4	; 0x04
    3dfe:	98 17       	cp	r25, r24
    3e00:	61 f0       	breq	.+24     	; 0x3e1a <__vector_51+0x6a>
    3e02:	83 81       	ldd	r24, Z+3	; 0x03
    3e04:	26 95       	lsr	r18
    3e06:	28 23       	and	r18, r24
    3e08:	c0 81       	ld	r28, Z
    3e0a:	d1 81       	ldd	r29, Z+1	; 0x01
    3e0c:	c2 0f       	add	r28, r18
    3e0e:	d1 1d       	adc	r29, r1
    3e10:	68 83       	st	Y, r22
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	95 81       	ldd	r25, Z+5	; 0x05
    3e16:	89 23       	and	r24, r25
    3e18:	83 83       	std	Z+3, r24	; 0x03
    3e1a:	16 96       	adiw	r26, 0x06	; 6
    3e1c:	ed 91       	ld	r30, X+
    3e1e:	fc 91       	ld	r31, X
    3e20:	17 97       	sbiw	r26, 0x07	; 7
    3e22:	30 97       	sbiw	r30, 0x00	; 0
    3e24:	11 f0       	breq	.+4      	; 0x3e2a <__vector_51+0x7a>
    3e26:	cd 01       	movw	r24, r26
    3e28:	19 95       	eicall
    3e2a:	ff 91       	pop	r31
    3e2c:	ef 91       	pop	r30
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	bf 91       	pop	r27
    3e34:	af 91       	pop	r26
    3e36:	9f 91       	pop	r25
    3e38:	8f 91       	pop	r24
    3e3a:	7f 91       	pop	r23
    3e3c:	6f 91       	pop	r22
    3e3e:	5f 91       	pop	r21
    3e40:	4f 91       	pop	r20
    3e42:	3f 91       	pop	r19
    3e44:	2f 91       	pop	r18
    3e46:	0f 90       	pop	r0
    3e48:	0b be       	out	0x3b, r0	; 59
    3e4a:	0f 90       	pop	r0
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	0f 90       	pop	r0
    3e50:	1f 90       	pop	r1
    3e52:	18 95       	reti

00003e54 <__vector_52>:
    3e54:	1f 92       	push	r1
    3e56:	0f 92       	push	r0
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	0f 92       	push	r0
    3e5c:	11 24       	eor	r1, r1
    3e5e:	0b b6       	in	r0, 0x3b	; 59
    3e60:	0f 92       	push	r0
    3e62:	2f 93       	push	r18
    3e64:	8f 93       	push	r24
    3e66:	9f 93       	push	r25
    3e68:	af 93       	push	r26
    3e6a:	bf 93       	push	r27
    3e6c:	ef 93       	push	r30
    3e6e:	ff 93       	push	r31
    3e70:	e0 91 fa 0a 	lds	r30, 0x0AFA	; 0x800afa <_ser_handle+0x4>
    3e74:	f0 91 fb 0a 	lds	r31, 0x0AFB	; 0x800afb <_ser_handle+0x5>
    3e78:	30 97       	sbiw	r30, 0x00	; 0
    3e7a:	b9 f0       	breq	.+46     	; 0x3eaa <__vector_52+0x56>
    3e7c:	02 80       	ldd	r0, Z+2	; 0x02
    3e7e:	f3 81       	ldd	r31, Z+3	; 0x03
    3e80:	e0 2d       	mov	r30, r0
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	82 81       	ldd	r24, Z+2	; 0x02
    3e86:	98 17       	cp	r25, r24
    3e88:	b1 f0       	breq	.+44     	; 0x3eb6 <__vector_52+0x62>
    3e8a:	92 81       	ldd	r25, Z+2	; 0x02
    3e8c:	85 81       	ldd	r24, Z+5	; 0x05
    3e8e:	28 2f       	mov	r18, r24
    3e90:	26 95       	lsr	r18
    3e92:	29 23       	and	r18, r25
    3e94:	a0 81       	ld	r26, Z
    3e96:	b1 81       	ldd	r27, Z+1	; 0x01
    3e98:	a2 0f       	add	r26, r18
    3e9a:	b1 1d       	adc	r27, r1
    3e9c:	2c 91       	ld	r18, X
    3e9e:	9f 5f       	subi	r25, 0xFF	; 255
    3ea0:	89 23       	and	r24, r25
    3ea2:	82 83       	std	Z+2, r24	; 0x02
    3ea4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ea8:	0b c0       	rjmp	.+22     	; 0x3ec0 <__vector_52+0x6c>
    3eaa:	e1 ed       	ldi	r30, 0xD1	; 209
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	8f 7d       	andi	r24, 0xDF	; 223
    3eb2:	80 83       	st	Z, r24
    3eb4:	05 c0       	rjmp	.+10     	; 0x3ec0 <__vector_52+0x6c>
    3eb6:	e1 ed       	ldi	r30, 0xD1	; 209
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	80 81       	ld	r24, Z
    3ebc:	8f 7d       	andi	r24, 0xDF	; 223
    3ebe:	80 83       	st	Z, r24
    3ec0:	ff 91       	pop	r31
    3ec2:	ef 91       	pop	r30
    3ec4:	bf 91       	pop	r27
    3ec6:	af 91       	pop	r26
    3ec8:	9f 91       	pop	r25
    3eca:	8f 91       	pop	r24
    3ecc:	2f 91       	pop	r18
    3ece:	0f 90       	pop	r0
    3ed0:	0b be       	out	0x3b, r0	; 59
    3ed2:	0f 90       	pop	r0
    3ed4:	0f be       	out	0x3f, r0	; 63
    3ed6:	0f 90       	pop	r0
    3ed8:	1f 90       	pop	r1
    3eda:	18 95       	reti

00003edc <__vector_54>:
    3edc:	1f 92       	push	r1
    3ede:	0f 92       	push	r0
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	0f 92       	push	r0
    3ee4:	11 24       	eor	r1, r1
    3ee6:	0b b6       	in	r0, 0x3b	; 59
    3ee8:	0f 92       	push	r0
    3eea:	2f 93       	push	r18
    3eec:	3f 93       	push	r19
    3eee:	4f 93       	push	r20
    3ef0:	5f 93       	push	r21
    3ef2:	6f 93       	push	r22
    3ef4:	7f 93       	push	r23
    3ef6:	8f 93       	push	r24
    3ef8:	9f 93       	push	r25
    3efa:	af 93       	push	r26
    3efc:	bf 93       	push	r27
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	ef 93       	push	r30
    3f04:	ff 93       	push	r31
    3f06:	a0 91 fc 0a 	lds	r26, 0x0AFC	; 0x800afc <_ser_handle+0x6>
    3f0a:	b0 91 fd 0a 	lds	r27, 0x0AFD	; 0x800afd <_ser_handle+0x7>
    3f0e:	10 97       	sbiw	r26, 0x00	; 0
    3f10:	11 f1       	breq	.+68     	; 0x3f56 <__vector_54+0x7a>
    3f12:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3f16:	14 96       	adiw	r26, 0x04	; 4
    3f18:	ed 91       	ld	r30, X+
    3f1a:	fc 91       	ld	r31, X
    3f1c:	15 97       	sbiw	r26, 0x05	; 5
    3f1e:	93 81       	ldd	r25, Z+3	; 0x03
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	25 81       	ldd	r18, Z+5	; 0x05
    3f24:	98 1b       	sub	r25, r24
    3f26:	92 23       	and	r25, r18
    3f28:	84 81       	ldd	r24, Z+4	; 0x04
    3f2a:	98 17       	cp	r25, r24
    3f2c:	61 f0       	breq	.+24     	; 0x3f46 <__vector_54+0x6a>
    3f2e:	83 81       	ldd	r24, Z+3	; 0x03
    3f30:	26 95       	lsr	r18
    3f32:	28 23       	and	r18, r24
    3f34:	c0 81       	ld	r28, Z
    3f36:	d1 81       	ldd	r29, Z+1	; 0x01
    3f38:	c2 0f       	add	r28, r18
    3f3a:	d1 1d       	adc	r29, r1
    3f3c:	68 83       	st	Y, r22
    3f3e:	8f 5f       	subi	r24, 0xFF	; 255
    3f40:	95 81       	ldd	r25, Z+5	; 0x05
    3f42:	89 23       	and	r24, r25
    3f44:	83 83       	std	Z+3, r24	; 0x03
    3f46:	16 96       	adiw	r26, 0x06	; 6
    3f48:	ed 91       	ld	r30, X+
    3f4a:	fc 91       	ld	r31, X
    3f4c:	17 97       	sbiw	r26, 0x07	; 7
    3f4e:	30 97       	sbiw	r30, 0x00	; 0
    3f50:	11 f0       	breq	.+4      	; 0x3f56 <__vector_54+0x7a>
    3f52:	cd 01       	movw	r24, r26
    3f54:	19 95       	eicall
    3f56:	ff 91       	pop	r31
    3f58:	ef 91       	pop	r30
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	bf 91       	pop	r27
    3f60:	af 91       	pop	r26
    3f62:	9f 91       	pop	r25
    3f64:	8f 91       	pop	r24
    3f66:	7f 91       	pop	r23
    3f68:	6f 91       	pop	r22
    3f6a:	5f 91       	pop	r21
    3f6c:	4f 91       	pop	r20
    3f6e:	3f 91       	pop	r19
    3f70:	2f 91       	pop	r18
    3f72:	0f 90       	pop	r0
    3f74:	0b be       	out	0x3b, r0	; 59
    3f76:	0f 90       	pop	r0
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	0f 90       	pop	r0
    3f7c:	1f 90       	pop	r1
    3f7e:	18 95       	reti

00003f80 <__vector_55>:
    3f80:	1f 92       	push	r1
    3f82:	0f 92       	push	r0
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	0f 92       	push	r0
    3f88:	11 24       	eor	r1, r1
    3f8a:	0b b6       	in	r0, 0x3b	; 59
    3f8c:	0f 92       	push	r0
    3f8e:	2f 93       	push	r18
    3f90:	8f 93       	push	r24
    3f92:	9f 93       	push	r25
    3f94:	af 93       	push	r26
    3f96:	bf 93       	push	r27
    3f98:	ef 93       	push	r30
    3f9a:	ff 93       	push	r31
    3f9c:	e0 91 fc 0a 	lds	r30, 0x0AFC	; 0x800afc <_ser_handle+0x6>
    3fa0:	f0 91 fd 0a 	lds	r31, 0x0AFD	; 0x800afd <_ser_handle+0x7>
    3fa4:	30 97       	sbiw	r30, 0x00	; 0
    3fa6:	b9 f0       	breq	.+46     	; 0x3fd6 <__vector_55+0x56>
    3fa8:	02 80       	ldd	r0, Z+2	; 0x02
    3faa:	f3 81       	ldd	r31, Z+3	; 0x03
    3fac:	e0 2d       	mov	r30, r0
    3fae:	93 81       	ldd	r25, Z+3	; 0x03
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	98 17       	cp	r25, r24
    3fb4:	b1 f0       	breq	.+44     	; 0x3fe2 <__vector_55+0x62>
    3fb6:	92 81       	ldd	r25, Z+2	; 0x02
    3fb8:	85 81       	ldd	r24, Z+5	; 0x05
    3fba:	28 2f       	mov	r18, r24
    3fbc:	26 95       	lsr	r18
    3fbe:	29 23       	and	r18, r25
    3fc0:	a0 81       	ld	r26, Z
    3fc2:	b1 81       	ldd	r27, Z+1	; 0x01
    3fc4:	a2 0f       	add	r26, r18
    3fc6:	b1 1d       	adc	r27, r1
    3fc8:	2c 91       	ld	r18, X
    3fca:	9f 5f       	subi	r25, 0xFF	; 255
    3fcc:	89 23       	and	r24, r25
    3fce:	82 83       	std	Z+2, r24	; 0x02
    3fd0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3fd4:	0b c0       	rjmp	.+22     	; 0x3fec <__vector_55+0x6c>
    3fd6:	e1 e3       	ldi	r30, 0x31	; 49
    3fd8:	f1 e0       	ldi	r31, 0x01	; 1
    3fda:	80 81       	ld	r24, Z
    3fdc:	8f 7d       	andi	r24, 0xDF	; 223
    3fde:	80 83       	st	Z, r24
    3fe0:	05 c0       	rjmp	.+10     	; 0x3fec <__vector_55+0x6c>
    3fe2:	e1 e3       	ldi	r30, 0x31	; 49
    3fe4:	f1 e0       	ldi	r31, 0x01	; 1
    3fe6:	80 81       	ld	r24, Z
    3fe8:	8f 7d       	andi	r24, 0xDF	; 223
    3fea:	80 83       	st	Z, r24
    3fec:	ff 91       	pop	r31
    3fee:	ef 91       	pop	r30
    3ff0:	bf 91       	pop	r27
    3ff2:	af 91       	pop	r26
    3ff4:	9f 91       	pop	r25
    3ff6:	8f 91       	pop	r24
    3ff8:	2f 91       	pop	r18
    3ffa:	0f 90       	pop	r0
    3ffc:	0b be       	out	0x3b, r0	; 59
    3ffe:	0f 90       	pop	r0
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	0f 90       	pop	r0
    4004:	1f 90       	pop	r1
    4006:	18 95       	reti

00004008 <usart_getchar>:
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	1f 92       	push	r1
    400e:	cd b7       	in	r28, 0x3d	; 61
    4010:	de b7       	in	r29, 0x3e	; 62
    4012:	be 01       	movw	r22, r28
    4014:	6f 5f       	subi	r22, 0xFF	; 255
    4016:	7f 4f       	sbci	r23, 0xFF	; 255
    4018:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <_com_serial_instance>
    401c:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <_com_serial_instance+0x1>
    4020:	7f dd       	rcall	.-1282   	; 0x3b20 <serial_get_byte>
    4022:	81 11       	cpse	r24, r1
    4024:	f6 cf       	rjmp	.-20     	; 0x4012 <usart_getchar+0xa>
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0f 90       	pop	r0
    402c:	df 91       	pop	r29
    402e:	cf 91       	pop	r28
    4030:	08 95       	ret

00004032 <usart_putchar>:
    4032:	68 2f       	mov	r22, r24
    4034:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <_com_serial_instance>
    4038:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <_com_serial_instance+0x1>
    403c:	fc dc       	rcall	.-1544   	; 0x3a36 <serial_send_byte>
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	08 95       	ret

00004044 <stdioCreate>:
    4044:	8f 92       	push	r8
    4046:	9f 92       	push	r9
    4048:	af 92       	push	r10
    404a:	cf 92       	push	r12
    404c:	ef 92       	push	r14
    404e:	0f 93       	push	r16
    4050:	81 2c       	mov	r8, r1
    4052:	91 2c       	mov	r9, r1
    4054:	68 94       	set
    4056:	aa 24       	eor	r10, r10
    4058:	a7 f8       	bld	r10, 7
    405a:	68 94       	set
    405c:	cc 24       	eor	r12, r12
    405e:	c7 f8       	bld	r12, 7
    4060:	e1 2c       	mov	r14, r1
    4062:	00 e0       	ldi	r16, 0x00	; 0
    4064:	23 e0       	ldi	r18, 0x03	; 3
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	51 ee       	ldi	r21, 0xE1	; 225
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	4d dc       	rcall	.-1894   	; 0x390a <serial_new_instance>
    4070:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <_com_serial_instance+0x1>
    4074:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <_com_serial_instance>
    4078:	e3 e4       	ldi	r30, 0x43	; 67
    407a:	fb e0       	ldi	r31, 0x0B	; 11
    407c:	82 e1       	ldi	r24, 0x12	; 18
    407e:	92 e0       	ldi	r25, 0x02	; 2
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	80 83       	st	Z, r24
    4084:	93 83       	std	Z+3, r25	; 0x03
    4086:	82 83       	std	Z+2, r24	; 0x02
    4088:	0f 91       	pop	r16
    408a:	ef 90       	pop	r14
    408c:	cf 90       	pop	r12
    408e:	af 90       	pop	r10
    4090:	9f 90       	pop	r9
    4092:	8f 90       	pop	r8
    4094:	08 95       	ret

00004096 <_initTwiInterface>:
    4096:	80 91 0e 0b 	lds	r24, 0x0B0E	; 0x800b0e <_twiIsInitiated>
    409a:	81 11       	cpse	r24, r1
    409c:	0c c0       	rjmp	.+24     	; 0x40b6 <_initTwiInterface+0x20>
    409e:	8c e0       	ldi	r24, 0x0C	; 12
    40a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    40a4:	8f ef       	ldi	r24, 0xFF	; 255
    40a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    40aa:	84 e0       	ldi	r24, 0x04	; 4
    40ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	80 93 0e 0b 	sts	0x0B0E, r24	; 0x800b0e <_twiIsInitiated>
    40b6:	08 95       	ret

000040b8 <twiCreate>:
    40b8:	af 92       	push	r10
    40ba:	bf 92       	push	r11
    40bc:	cf 92       	push	r12
    40be:	df 92       	push	r13
    40c0:	ef 92       	push	r14
    40c2:	ff 92       	push	r15
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	a8 2e       	mov	r10, r24
    40ce:	b6 2e       	mov	r11, r22
    40d0:	69 01       	movw	r12, r18
    40d2:	7a 01       	movw	r14, r20
    40d4:	84 e0       	ldi	r24, 0x04	; 4
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	cb d3       	rcall	.+1942   	; 0x4870 <malloc>
    40da:	ec 01       	movw	r28, r24
    40dc:	89 2b       	or	r24, r25
    40de:	61 f1       	breq	.+88     	; 0x4138 <twiCreate+0x80>
    40e0:	a8 82       	st	Y, r10
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	b8 12       	cpse	r11, r24
    40e6:	12 c0       	rjmp	.+36     	; 0x410c <twiCreate+0x54>
    40e8:	c7 01       	movw	r24, r14
    40ea:	b6 01       	movw	r22, r12
    40ec:	20 ea       	ldi	r18, 0xA0	; 160
    40ee:	36 e8       	ldi	r19, 0x86	; 134
    40f0:	41 e0       	ldi	r20, 0x01	; 1
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	79 d3       	rcall	.+1778   	; 0x47e8 <__udivmodsi4>
    40f6:	da 01       	movw	r26, r20
    40f8:	c9 01       	movw	r24, r18
    40fa:	40 97       	sbiw	r24, 0x10	; 16
    40fc:	a1 09       	sbc	r26, r1
    40fe:	b1 09       	sbc	r27, r1
    4100:	b6 95       	lsr	r27
    4102:	a7 95       	ror	r26
    4104:	97 95       	ror	r25
    4106:	87 95       	ror	r24
    4108:	89 83       	std	Y+1, r24	; 0x01
    410a:	11 c0       	rjmp	.+34     	; 0x412e <twiCreate+0x76>
    410c:	c7 01       	movw	r24, r14
    410e:	b6 01       	movw	r22, r12
    4110:	20 e8       	ldi	r18, 0x80	; 128
    4112:	3a e1       	ldi	r19, 0x1A	; 26
    4114:	46 e0       	ldi	r20, 0x06	; 6
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	67 d3       	rcall	.+1742   	; 0x47e8 <__udivmodsi4>
    411a:	da 01       	movw	r26, r20
    411c:	c9 01       	movw	r24, r18
    411e:	40 97       	sbiw	r24, 0x10	; 16
    4120:	a1 09       	sbc	r26, r1
    4122:	b1 09       	sbc	r27, r1
    4124:	b6 95       	lsr	r27
    4126:	a7 95       	ror	r26
    4128:	97 95       	ror	r25
    412a:	87 95       	ror	r24
    412c:	89 83       	std	Y+1, r24	; 0x01
    412e:	1b 83       	std	Y+3, r17	; 0x03
    4130:	0a 83       	std	Y+2, r16	; 0x02
    4132:	8c 2f       	mov	r24, r28
    4134:	9d 2f       	mov	r25, r29
    4136:	02 c0       	rjmp	.+4      	; 0x413c <twiCreate+0x84>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	ff 90       	pop	r15
    4146:	ef 90       	pop	r14
    4148:	df 90       	pop	r13
    414a:	cf 90       	pop	r12
    414c:	bf 90       	pop	r11
    414e:	af 90       	pop	r10
    4150:	08 95       	ret

00004152 <twiIsBusy>:
    4152:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4156:	81 70       	andi	r24, 0x01	; 1
    4158:	08 95       	ret

0000415a <twiTransmit>:
    415a:	ff 92       	push	r15
    415c:	0f 93       	push	r16
    415e:	1f 93       	push	r17
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	d1 f1       	breq	.+116    	; 0x41dc <twiTransmit+0x82>
    4168:	4a 30       	cpi	r20, 0x0A	; 10
    416a:	d0 f5       	brcc	.+116    	; 0x41e0 <twiTransmit+0x86>
    416c:	f4 2e       	mov	r15, r20
    416e:	8b 01       	movw	r16, r22
    4170:	ec 01       	movw	r28, r24
    4172:	ef df       	rcall	.-34     	; 0x4152 <twiIsBusy>
    4174:	81 11       	cpse	r24, r1
    4176:	36 c0       	rjmp	.+108    	; 0x41e4 <twiTransmit+0x8a>
    4178:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_twiCurrentHandler>
    417c:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <_twiCurrentHandler+0x1>
    4180:	c8 17       	cp	r28, r24
    4182:	d9 07       	cpc	r29, r25
    4184:	41 f0       	breq	.+16     	; 0x4196 <twiTransmit+0x3c>
    4186:	87 df       	rcall	.-242    	; 0x4096 <_initTwiInterface>
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    418e:	d0 93 02 0b 	sts	0x0B02, r29	; 0x800b02 <_twiCurrentHandler+0x1>
    4192:	c0 93 01 0b 	sts	0x0B01, r28	; 0x800b01 <_twiCurrentHandler>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	8f 0d       	add	r24, r15
    419a:	80 93 03 0b 	sts	0x0B03, r24	; 0x800b03 <_twiMessageLen>
    419e:	88 81       	ld	r24, Y
    41a0:	88 0f       	add	r24, r24
    41a2:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <_twiMessageBuffer>
    41a6:	ff 20       	and	r15, r15
    41a8:	89 f0       	breq	.+34     	; 0x41cc <twiTransmit+0x72>
    41aa:	f8 01       	movw	r30, r16
    41ac:	a5 e0       	ldi	r26, 0x05	; 5
    41ae:	bb e0       	ldi	r27, 0x0B	; 11
    41b0:	4f ef       	ldi	r20, 0xFF	; 255
    41b2:	4f 0d       	add	r20, r15
    41b4:	64 2f       	mov	r22, r20
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	cb 01       	movw	r24, r22
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	b8 01       	movw	r22, r16
    41be:	68 0f       	add	r22, r24
    41c0:	79 1f       	adc	r23, r25
    41c2:	81 91       	ld	r24, Z+
    41c4:	8d 93       	st	X+, r24
    41c6:	e6 17       	cp	r30, r22
    41c8:	f7 07       	cpc	r31, r23
    41ca:	d9 f7       	brne	.-10     	; 0x41c2 <twiTransmit+0x68>
    41cc:	88 ef       	ldi	r24, 0xF8	; 248
    41ce:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    41d2:	85 ea       	ldi	r24, 0xA5	; 165
    41d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    41d8:	84 e0       	ldi	r24, 0x04	; 4
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <twiTransmit+0x8c>
    41dc:	86 e0       	ldi	r24, 0x06	; 6
    41de:	03 c0       	rjmp	.+6      	; 0x41e6 <twiTransmit+0x8c>
    41e0:	87 e0       	ldi	r24, 0x07	; 7
    41e2:	01 c0       	rjmp	.+2      	; 0x41e6 <twiTransmit+0x8c>
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	08 95       	ret

000041f2 <twiReceive>:
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	00 97       	sbiw	r24, 0x00	; 0
    41fa:	29 f1       	breq	.+74     	; 0x4246 <twiReceive+0x54>
    41fc:	6b 30       	cpi	r22, 0x0B	; 11
    41fe:	28 f5       	brcc	.+74     	; 0x424a <twiReceive+0x58>
    4200:	16 2f       	mov	r17, r22
    4202:	ec 01       	movw	r28, r24
    4204:	a6 df       	rcall	.-180    	; 0x4152 <twiIsBusy>
    4206:	81 11       	cpse	r24, r1
    4208:	22 c0       	rjmp	.+68     	; 0x424e <twiReceive+0x5c>
    420a:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_twiCurrentHandler>
    420e:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <_twiCurrentHandler+0x1>
    4212:	c8 17       	cp	r28, r24
    4214:	d9 07       	cpc	r29, r25
    4216:	41 f0       	breq	.+16     	; 0x4228 <twiReceive+0x36>
    4218:	3e df       	rcall	.-388    	; 0x4096 <_initTwiInterface>
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4220:	d0 93 02 0b 	sts	0x0B02, r29	; 0x800b02 <_twiCurrentHandler+0x1>
    4224:	c0 93 01 0b 	sts	0x0B01, r28	; 0x800b01 <_twiCurrentHandler>
    4228:	10 93 03 0b 	sts	0x0B03, r17	; 0x800b03 <_twiMessageLen>
    422c:	88 81       	ld	r24, Y
    422e:	88 0f       	add	r24, r24
    4230:	81 60       	ori	r24, 0x01	; 1
    4232:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <_twiMessageBuffer>
    4236:	88 ef       	ldi	r24, 0xF8	; 248
    4238:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    423c:	85 ea       	ldi	r24, 0xA5	; 165
    423e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4242:	85 e0       	ldi	r24, 0x05	; 5
    4244:	05 c0       	rjmp	.+10     	; 0x4250 <twiReceive+0x5e>
    4246:	86 e0       	ldi	r24, 0x06	; 6
    4248:	03 c0       	rjmp	.+6      	; 0x4250 <twiReceive+0x5e>
    424a:	87 e0       	ldi	r24, 0x07	; 7
    424c:	01 c0       	rjmp	.+2      	; 0x4250 <twiReceive+0x5e>
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	df 91       	pop	r29
    4252:	cf 91       	pop	r28
    4254:	1f 91       	pop	r17
    4256:	08 95       	ret

00004258 <__vector_39>:
    4258:	1f 92       	push	r1
    425a:	0f 92       	push	r0
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	0f 92       	push	r0
    4260:	11 24       	eor	r1, r1
    4262:	0b b6       	in	r0, 0x3b	; 59
    4264:	0f 92       	push	r0
    4266:	2f 93       	push	r18
    4268:	3f 93       	push	r19
    426a:	4f 93       	push	r20
    426c:	5f 93       	push	r21
    426e:	6f 93       	push	r22
    4270:	7f 93       	push	r23
    4272:	8f 93       	push	r24
    4274:	9f 93       	push	r25
    4276:	af 93       	push	r26
    4278:	bf 93       	push	r27
    427a:	ef 93       	push	r30
    427c:	ff 93       	push	r31
    427e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4282:	8e 2f       	mov	r24, r30
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	fc 01       	movw	r30, r24
    4288:	38 97       	sbiw	r30, 0x08	; 8
    428a:	e1 35       	cpi	r30, 0x51	; 81
    428c:	f1 05       	cpc	r31, r1
    428e:	08 f0       	brcs	.+2      	; 0x4292 <__vector_39+0x3a>
    4290:	75 c0       	rjmp	.+234    	; 0x437c <__vector_39+0x124>
    4292:	88 27       	eor	r24, r24
    4294:	e4 58       	subi	r30, 0x84	; 132
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	8f 4f       	sbci	r24, 0xFF	; 255
    429a:	c8 c2       	rjmp	.+1424   	; 0x482c <__tablejump2__>
    429c:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <_index.1885>
    42a0:	e0 91 00 0b 	lds	r30, 0x0B00	; 0x800b00 <_index.1885>
    42a4:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <_twiMessageLen>
    42a8:	e8 17       	cp	r30, r24
    42aa:	70 f4       	brcc	.+28     	; 0x42c8 <__vector_39+0x70>
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	8e 0f       	add	r24, r30
    42b0:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <_index.1885>
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	ec 5f       	subi	r30, 0xFC	; 252
    42b8:	f4 4f       	sbci	r31, 0xF4	; 244
    42ba:	80 81       	ld	r24, Z
    42bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    42c0:	85 e8       	ldi	r24, 0x85	; 133
    42c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42c6:	72 c0       	rjmp	.+228    	; 0x43ac <__vector_39+0x154>
    42c8:	84 e9       	ldi	r24, 0x94	; 148
    42ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42ce:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_twiCurrentHandler>
    42d2:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <_twiCurrentHandler+0x1>
    42d6:	dc 01       	movw	r26, r24
    42d8:	12 96       	adiw	r26, 0x02	; 2
    42da:	ed 91       	ld	r30, X+
    42dc:	fc 91       	ld	r31, X
    42de:	13 97       	sbiw	r26, 0x03	; 3
    42e0:	30 97       	sbiw	r30, 0x00	; 0
    42e2:	09 f4       	brne	.+2      	; 0x42e6 <__vector_39+0x8e>
    42e4:	63 c0       	rjmp	.+198    	; 0x43ac <__vector_39+0x154>
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	64 e0       	ldi	r22, 0x04	; 4
    42ee:	19 95       	eicall
    42f0:	5d c0       	rjmp	.+186    	; 0x43ac <__vector_39+0x154>
    42f2:	e0 91 00 0b 	lds	r30, 0x0B00	; 0x800b00 <_index.1885>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	8e 0f       	add	r24, r30
    42fa:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <_index.1885>
    42fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	ec 5f       	subi	r30, 0xFC	; 252
    4306:	f4 4f       	sbci	r31, 0xF4	; 244
    4308:	80 83       	st	Z, r24
    430a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    430e:	80 34       	cpi	r24, 0x40	; 64
    4310:	11 f4       	brne	.+4      	; 0x4316 <__vector_39+0xbe>
    4312:	10 92 00 0b 	sts	0x0B00, r1	; 0x800b00 <_index.1885>
    4316:	20 91 00 0b 	lds	r18, 0x0B00	; 0x800b00 <_index.1885>
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <_twiMessageLen>
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	01 97       	sbiw	r24, 0x01	; 1
    4324:	28 17       	cp	r18, r24
    4326:	39 07       	cpc	r19, r25
    4328:	24 f4       	brge	.+8      	; 0x4332 <__vector_39+0xda>
    432a:	85 ec       	ldi	r24, 0xC5	; 197
    432c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4330:	3d c0       	rjmp	.+122    	; 0x43ac <__vector_39+0x154>
    4332:	85 e8       	ldi	r24, 0x85	; 133
    4334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4338:	39 c0       	rjmp	.+114    	; 0x43ac <__vector_39+0x154>
    433a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    433e:	e0 91 00 0b 	lds	r30, 0x0B00	; 0x800b00 <_index.1885>
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	ec 5f       	subi	r30, 0xFC	; 252
    4346:	f4 4f       	sbci	r31, 0xF4	; 244
    4348:	80 83       	st	Z, r24
    434a:	84 e9       	ldi	r24, 0x94	; 148
    434c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4350:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_twiCurrentHandler>
    4354:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <_twiCurrentHandler+0x1>
    4358:	dc 01       	movw	r26, r24
    435a:	12 96       	adiw	r26, 0x02	; 2
    435c:	ed 91       	ld	r30, X+
    435e:	fc 91       	ld	r31, X
    4360:	13 97       	sbiw	r26, 0x03	; 3
    4362:	30 97       	sbiw	r30, 0x00	; 0
    4364:	19 f1       	breq	.+70     	; 0x43ac <__vector_39+0x154>
    4366:	20 91 03 0b 	lds	r18, 0x0B03	; 0x800b03 <_twiMessageLen>
    436a:	44 e0       	ldi	r20, 0x04	; 4
    436c:	5b e0       	ldi	r21, 0x0B	; 11
    436e:	65 e0       	ldi	r22, 0x05	; 5
    4370:	19 95       	eicall
    4372:	1c c0       	rjmp	.+56     	; 0x43ac <__vector_39+0x154>
    4374:	85 ea       	ldi	r24, 0xA5	; 165
    4376:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    437a:	18 c0       	rjmp	.+48     	; 0x43ac <__vector_39+0x154>
    437c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4380:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4384:	84 e0       	ldi	r24, 0x04	; 4
    4386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    438a:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <_twiCurrentHandler>
    438e:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <_twiCurrentHandler+0x1>
    4392:	dc 01       	movw	r26, r24
    4394:	12 96       	adiw	r26, 0x02	; 2
    4396:	ed 91       	ld	r30, X+
    4398:	fc 91       	ld	r31, X
    439a:	13 97       	sbiw	r26, 0x03	; 3
    439c:	30 97       	sbiw	r30, 0x00	; 0
    439e:	31 f0       	breq	.+12     	; 0x43ac <__vector_39+0x154>
    43a0:	20 e0       	ldi	r18, 0x00	; 0
    43a2:	40 e0       	ldi	r20, 0x00	; 0
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    43aa:	19 95       	eicall
    43ac:	ff 91       	pop	r31
    43ae:	ef 91       	pop	r30
    43b0:	bf 91       	pop	r27
    43b2:	af 91       	pop	r26
    43b4:	9f 91       	pop	r25
    43b6:	8f 91       	pop	r24
    43b8:	7f 91       	pop	r23
    43ba:	6f 91       	pop	r22
    43bc:	5f 91       	pop	r21
    43be:	4f 91       	pop	r20
    43c0:	3f 91       	pop	r19
    43c2:	2f 91       	pop	r18
    43c4:	0f 90       	pop	r0
    43c6:	0b be       	out	0x3b, r0	; 59
    43c8:	0f 90       	pop	r0
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	0f 90       	pop	r0
    43ce:	1f 90       	pop	r1
    43d0:	18 95       	reti

000043d2 <fifo_init>:
    43d2:	fc 01       	movw	r30, r24
    43d4:	41 11       	cpse	r20, r1
    43d6:	01 c0       	rjmp	.+2      	; 0x43da <fifo_init+0x8>
    43d8:	6c d3       	rcall	.+1752   	; 0x4ab2 <abort>
    43da:	84 2f       	mov	r24, r20
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	9c 01       	movw	r18, r24
    43e0:	21 50       	subi	r18, 0x01	; 1
    43e2:	31 09       	sbc	r19, r1
    43e4:	82 23       	and	r24, r18
    43e6:	93 23       	and	r25, r19
    43e8:	89 2b       	or	r24, r25
    43ea:	09 f0       	breq	.+2      	; 0x43ee <fifo_init+0x1c>
    43ec:	62 d3       	rcall	.+1732   	; 0x4ab2 <abort>
    43ee:	41 38       	cpi	r20, 0x81	; 129
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <fifo_init+0x22>
    43f2:	5f d3       	rcall	.+1726   	; 0x4ab2 <abort>
    43f4:	12 82       	std	Z+2, r1	; 0x02
    43f6:	13 82       	std	Z+3, r1	; 0x03
    43f8:	44 83       	std	Z+4, r20	; 0x04
    43fa:	44 0f       	add	r20, r20
    43fc:	41 50       	subi	r20, 0x01	; 1
    43fe:	45 83       	std	Z+5, r20	; 0x05
    4400:	71 83       	std	Z+1, r23	; 0x01
    4402:	60 83       	st	Z, r22
    4404:	80 e0       	ldi	r24, 0x00	; 0
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	08 95       	ret

0000440a <__subsf3>:
    440a:	50 58       	subi	r21, 0x80	; 128

0000440c <__addsf3>:
    440c:	bb 27       	eor	r27, r27
    440e:	aa 27       	eor	r26, r26
    4410:	0e d0       	rcall	.+28     	; 0x442e <__addsf3x>
    4412:	4d c1       	rjmp	.+666    	; 0x46ae <__fp_round>
    4414:	3e d1       	rcall	.+636    	; 0x4692 <__fp_pscA>
    4416:	30 f0       	brcs	.+12     	; 0x4424 <__addsf3+0x18>
    4418:	43 d1       	rcall	.+646    	; 0x46a0 <__fp_pscB>
    441a:	20 f0       	brcs	.+8      	; 0x4424 <__addsf3+0x18>
    441c:	31 f4       	brne	.+12     	; 0x442a <__addsf3+0x1e>
    441e:	9f 3f       	cpi	r25, 0xFF	; 255
    4420:	11 f4       	brne	.+4      	; 0x4426 <__addsf3+0x1a>
    4422:	1e f4       	brtc	.+6      	; 0x442a <__addsf3+0x1e>
    4424:	33 c1       	rjmp	.+614    	; 0x468c <__fp_nan>
    4426:	0e f4       	brtc	.+2      	; 0x442a <__addsf3+0x1e>
    4428:	e0 95       	com	r30
    442a:	e7 fb       	bst	r30, 7
    442c:	29 c1       	rjmp	.+594    	; 0x4680 <__fp_inf>

0000442e <__addsf3x>:
    442e:	e9 2f       	mov	r30, r25
    4430:	4f d1       	rcall	.+670    	; 0x46d0 <__fp_split3>
    4432:	80 f3       	brcs	.-32     	; 0x4414 <__addsf3+0x8>
    4434:	ba 17       	cp	r27, r26
    4436:	62 07       	cpc	r22, r18
    4438:	73 07       	cpc	r23, r19
    443a:	84 07       	cpc	r24, r20
    443c:	95 07       	cpc	r25, r21
    443e:	18 f0       	brcs	.+6      	; 0x4446 <__addsf3x+0x18>
    4440:	71 f4       	brne	.+28     	; 0x445e <__addsf3x+0x30>
    4442:	9e f5       	brtc	.+102    	; 0x44aa <__addsf3x+0x7c>
    4444:	67 c1       	rjmp	.+718    	; 0x4714 <__fp_zero>
    4446:	0e f4       	brtc	.+2      	; 0x444a <__addsf3x+0x1c>
    4448:	e0 95       	com	r30
    444a:	0b 2e       	mov	r0, r27
    444c:	ba 2f       	mov	r27, r26
    444e:	a0 2d       	mov	r26, r0
    4450:	0b 01       	movw	r0, r22
    4452:	b9 01       	movw	r22, r18
    4454:	90 01       	movw	r18, r0
    4456:	0c 01       	movw	r0, r24
    4458:	ca 01       	movw	r24, r20
    445a:	a0 01       	movw	r20, r0
    445c:	11 24       	eor	r1, r1
    445e:	ff 27       	eor	r31, r31
    4460:	59 1b       	sub	r21, r25
    4462:	99 f0       	breq	.+38     	; 0x448a <__addsf3x+0x5c>
    4464:	59 3f       	cpi	r21, 0xF9	; 249
    4466:	50 f4       	brcc	.+20     	; 0x447c <__addsf3x+0x4e>
    4468:	50 3e       	cpi	r21, 0xE0	; 224
    446a:	68 f1       	brcs	.+90     	; 0x44c6 <__addsf3x+0x98>
    446c:	1a 16       	cp	r1, r26
    446e:	f0 40       	sbci	r31, 0x00	; 0
    4470:	a2 2f       	mov	r26, r18
    4472:	23 2f       	mov	r18, r19
    4474:	34 2f       	mov	r19, r20
    4476:	44 27       	eor	r20, r20
    4478:	58 5f       	subi	r21, 0xF8	; 248
    447a:	f3 cf       	rjmp	.-26     	; 0x4462 <__addsf3x+0x34>
    447c:	46 95       	lsr	r20
    447e:	37 95       	ror	r19
    4480:	27 95       	ror	r18
    4482:	a7 95       	ror	r26
    4484:	f0 40       	sbci	r31, 0x00	; 0
    4486:	53 95       	inc	r21
    4488:	c9 f7       	brne	.-14     	; 0x447c <__addsf3x+0x4e>
    448a:	7e f4       	brtc	.+30     	; 0x44aa <__addsf3x+0x7c>
    448c:	1f 16       	cp	r1, r31
    448e:	ba 0b       	sbc	r27, r26
    4490:	62 0b       	sbc	r22, r18
    4492:	73 0b       	sbc	r23, r19
    4494:	84 0b       	sbc	r24, r20
    4496:	ba f0       	brmi	.+46     	; 0x44c6 <__addsf3x+0x98>
    4498:	91 50       	subi	r25, 0x01	; 1
    449a:	a1 f0       	breq	.+40     	; 0x44c4 <__addsf3x+0x96>
    449c:	ff 0f       	add	r31, r31
    449e:	bb 1f       	adc	r27, r27
    44a0:	66 1f       	adc	r22, r22
    44a2:	77 1f       	adc	r23, r23
    44a4:	88 1f       	adc	r24, r24
    44a6:	c2 f7       	brpl	.-16     	; 0x4498 <__addsf3x+0x6a>
    44a8:	0e c0       	rjmp	.+28     	; 0x44c6 <__addsf3x+0x98>
    44aa:	ba 0f       	add	r27, r26
    44ac:	62 1f       	adc	r22, r18
    44ae:	73 1f       	adc	r23, r19
    44b0:	84 1f       	adc	r24, r20
    44b2:	48 f4       	brcc	.+18     	; 0x44c6 <__addsf3x+0x98>
    44b4:	87 95       	ror	r24
    44b6:	77 95       	ror	r23
    44b8:	67 95       	ror	r22
    44ba:	b7 95       	ror	r27
    44bc:	f7 95       	ror	r31
    44be:	9e 3f       	cpi	r25, 0xFE	; 254
    44c0:	08 f0       	brcs	.+2      	; 0x44c4 <__addsf3x+0x96>
    44c2:	b3 cf       	rjmp	.-154    	; 0x442a <__addsf3+0x1e>
    44c4:	93 95       	inc	r25
    44c6:	88 0f       	add	r24, r24
    44c8:	08 f0       	brcs	.+2      	; 0x44cc <__addsf3x+0x9e>
    44ca:	99 27       	eor	r25, r25
    44cc:	ee 0f       	add	r30, r30
    44ce:	97 95       	ror	r25
    44d0:	87 95       	ror	r24
    44d2:	08 95       	ret

000044d4 <__divsf3>:
    44d4:	0c d0       	rcall	.+24     	; 0x44ee <__divsf3x>
    44d6:	eb c0       	rjmp	.+470    	; 0x46ae <__fp_round>
    44d8:	e3 d0       	rcall	.+454    	; 0x46a0 <__fp_pscB>
    44da:	40 f0       	brcs	.+16     	; 0x44ec <__divsf3+0x18>
    44dc:	da d0       	rcall	.+436    	; 0x4692 <__fp_pscA>
    44de:	30 f0       	brcs	.+12     	; 0x44ec <__divsf3+0x18>
    44e0:	21 f4       	brne	.+8      	; 0x44ea <__divsf3+0x16>
    44e2:	5f 3f       	cpi	r21, 0xFF	; 255
    44e4:	19 f0       	breq	.+6      	; 0x44ec <__divsf3+0x18>
    44e6:	cc c0       	rjmp	.+408    	; 0x4680 <__fp_inf>
    44e8:	51 11       	cpse	r21, r1
    44ea:	15 c1       	rjmp	.+554    	; 0x4716 <__fp_szero>
    44ec:	cf c0       	rjmp	.+414    	; 0x468c <__fp_nan>

000044ee <__divsf3x>:
    44ee:	f0 d0       	rcall	.+480    	; 0x46d0 <__fp_split3>
    44f0:	98 f3       	brcs	.-26     	; 0x44d8 <__divsf3+0x4>

000044f2 <__divsf3_pse>:
    44f2:	99 23       	and	r25, r25
    44f4:	c9 f3       	breq	.-14     	; 0x44e8 <__divsf3+0x14>
    44f6:	55 23       	and	r21, r21
    44f8:	b1 f3       	breq	.-20     	; 0x44e6 <__divsf3+0x12>
    44fa:	95 1b       	sub	r25, r21
    44fc:	55 0b       	sbc	r21, r21
    44fe:	bb 27       	eor	r27, r27
    4500:	aa 27       	eor	r26, r26
    4502:	62 17       	cp	r22, r18
    4504:	73 07       	cpc	r23, r19
    4506:	84 07       	cpc	r24, r20
    4508:	38 f0       	brcs	.+14     	; 0x4518 <__divsf3_pse+0x26>
    450a:	9f 5f       	subi	r25, 0xFF	; 255
    450c:	5f 4f       	sbci	r21, 0xFF	; 255
    450e:	22 0f       	add	r18, r18
    4510:	33 1f       	adc	r19, r19
    4512:	44 1f       	adc	r20, r20
    4514:	aa 1f       	adc	r26, r26
    4516:	a9 f3       	breq	.-22     	; 0x4502 <__divsf3_pse+0x10>
    4518:	33 d0       	rcall	.+102    	; 0x4580 <__divsf3_pse+0x8e>
    451a:	0e 2e       	mov	r0, r30
    451c:	3a f0       	brmi	.+14     	; 0x452c <__divsf3_pse+0x3a>
    451e:	e0 e8       	ldi	r30, 0x80	; 128
    4520:	30 d0       	rcall	.+96     	; 0x4582 <__divsf3_pse+0x90>
    4522:	91 50       	subi	r25, 0x01	; 1
    4524:	50 40       	sbci	r21, 0x00	; 0
    4526:	e6 95       	lsr	r30
    4528:	00 1c       	adc	r0, r0
    452a:	ca f7       	brpl	.-14     	; 0x451e <__divsf3_pse+0x2c>
    452c:	29 d0       	rcall	.+82     	; 0x4580 <__divsf3_pse+0x8e>
    452e:	fe 2f       	mov	r31, r30
    4530:	27 d0       	rcall	.+78     	; 0x4580 <__divsf3_pse+0x8e>
    4532:	66 0f       	add	r22, r22
    4534:	77 1f       	adc	r23, r23
    4536:	88 1f       	adc	r24, r24
    4538:	bb 1f       	adc	r27, r27
    453a:	26 17       	cp	r18, r22
    453c:	37 07       	cpc	r19, r23
    453e:	48 07       	cpc	r20, r24
    4540:	ab 07       	cpc	r26, r27
    4542:	b0 e8       	ldi	r27, 0x80	; 128
    4544:	09 f0       	breq	.+2      	; 0x4548 <__divsf3_pse+0x56>
    4546:	bb 0b       	sbc	r27, r27
    4548:	80 2d       	mov	r24, r0
    454a:	bf 01       	movw	r22, r30
    454c:	ff 27       	eor	r31, r31
    454e:	93 58       	subi	r25, 0x83	; 131
    4550:	5f 4f       	sbci	r21, 0xFF	; 255
    4552:	2a f0       	brmi	.+10     	; 0x455e <__divsf3_pse+0x6c>
    4554:	9e 3f       	cpi	r25, 0xFE	; 254
    4556:	51 05       	cpc	r21, r1
    4558:	68 f0       	brcs	.+26     	; 0x4574 <__divsf3_pse+0x82>
    455a:	92 c0       	rjmp	.+292    	; 0x4680 <__fp_inf>
    455c:	dc c0       	rjmp	.+440    	; 0x4716 <__fp_szero>
    455e:	5f 3f       	cpi	r21, 0xFF	; 255
    4560:	ec f3       	brlt	.-6      	; 0x455c <__divsf3_pse+0x6a>
    4562:	98 3e       	cpi	r25, 0xE8	; 232
    4564:	dc f3       	brlt	.-10     	; 0x455c <__divsf3_pse+0x6a>
    4566:	86 95       	lsr	r24
    4568:	77 95       	ror	r23
    456a:	67 95       	ror	r22
    456c:	b7 95       	ror	r27
    456e:	f7 95       	ror	r31
    4570:	9f 5f       	subi	r25, 0xFF	; 255
    4572:	c9 f7       	brne	.-14     	; 0x4566 <__divsf3_pse+0x74>
    4574:	88 0f       	add	r24, r24
    4576:	91 1d       	adc	r25, r1
    4578:	96 95       	lsr	r25
    457a:	87 95       	ror	r24
    457c:	97 f9       	bld	r25, 7
    457e:	08 95       	ret
    4580:	e1 e0       	ldi	r30, 0x01	; 1
    4582:	66 0f       	add	r22, r22
    4584:	77 1f       	adc	r23, r23
    4586:	88 1f       	adc	r24, r24
    4588:	bb 1f       	adc	r27, r27
    458a:	62 17       	cp	r22, r18
    458c:	73 07       	cpc	r23, r19
    458e:	84 07       	cpc	r24, r20
    4590:	ba 07       	cpc	r27, r26
    4592:	20 f0       	brcs	.+8      	; 0x459c <__divsf3_pse+0xaa>
    4594:	62 1b       	sub	r22, r18
    4596:	73 0b       	sbc	r23, r19
    4598:	84 0b       	sbc	r24, r20
    459a:	ba 0b       	sbc	r27, r26
    459c:	ee 1f       	adc	r30, r30
    459e:	88 f7       	brcc	.-30     	; 0x4582 <__divsf3_pse+0x90>
    45a0:	e0 95       	com	r30
    45a2:	08 95       	ret

000045a4 <__fixsfsi>:
    45a4:	04 d0       	rcall	.+8      	; 0x45ae <__fixunssfsi>
    45a6:	68 94       	set
    45a8:	b1 11       	cpse	r27, r1
    45aa:	b5 c0       	rjmp	.+362    	; 0x4716 <__fp_szero>
    45ac:	08 95       	ret

000045ae <__fixunssfsi>:
    45ae:	98 d0       	rcall	.+304    	; 0x46e0 <__fp_splitA>
    45b0:	88 f0       	brcs	.+34     	; 0x45d4 <__fixunssfsi+0x26>
    45b2:	9f 57       	subi	r25, 0x7F	; 127
    45b4:	90 f0       	brcs	.+36     	; 0x45da <__fixunssfsi+0x2c>
    45b6:	b9 2f       	mov	r27, r25
    45b8:	99 27       	eor	r25, r25
    45ba:	b7 51       	subi	r27, 0x17	; 23
    45bc:	a0 f0       	brcs	.+40     	; 0x45e6 <__fixunssfsi+0x38>
    45be:	d1 f0       	breq	.+52     	; 0x45f4 <__fixunssfsi+0x46>
    45c0:	66 0f       	add	r22, r22
    45c2:	77 1f       	adc	r23, r23
    45c4:	88 1f       	adc	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	1a f0       	brmi	.+6      	; 0x45d0 <__fixunssfsi+0x22>
    45ca:	ba 95       	dec	r27
    45cc:	c9 f7       	brne	.-14     	; 0x45c0 <__fixunssfsi+0x12>
    45ce:	12 c0       	rjmp	.+36     	; 0x45f4 <__fixunssfsi+0x46>
    45d0:	b1 30       	cpi	r27, 0x01	; 1
    45d2:	81 f0       	breq	.+32     	; 0x45f4 <__fixunssfsi+0x46>
    45d4:	9f d0       	rcall	.+318    	; 0x4714 <__fp_zero>
    45d6:	b1 e0       	ldi	r27, 0x01	; 1
    45d8:	08 95       	ret
    45da:	9c c0       	rjmp	.+312    	; 0x4714 <__fp_zero>
    45dc:	67 2f       	mov	r22, r23
    45de:	78 2f       	mov	r23, r24
    45e0:	88 27       	eor	r24, r24
    45e2:	b8 5f       	subi	r27, 0xF8	; 248
    45e4:	39 f0       	breq	.+14     	; 0x45f4 <__fixunssfsi+0x46>
    45e6:	b9 3f       	cpi	r27, 0xF9	; 249
    45e8:	cc f3       	brlt	.-14     	; 0x45dc <__fixunssfsi+0x2e>
    45ea:	86 95       	lsr	r24
    45ec:	77 95       	ror	r23
    45ee:	67 95       	ror	r22
    45f0:	b3 95       	inc	r27
    45f2:	d9 f7       	brne	.-10     	; 0x45ea <__fixunssfsi+0x3c>
    45f4:	3e f4       	brtc	.+14     	; 0x4604 <__fixunssfsi+0x56>
    45f6:	90 95       	com	r25
    45f8:	80 95       	com	r24
    45fa:	70 95       	com	r23
    45fc:	61 95       	neg	r22
    45fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4600:	8f 4f       	sbci	r24, 0xFF	; 255
    4602:	9f 4f       	sbci	r25, 0xFF	; 255
    4604:	08 95       	ret

00004606 <__floatunsisf>:
    4606:	e8 94       	clt
    4608:	09 c0       	rjmp	.+18     	; 0x461c <__floatsisf+0x12>

0000460a <__floatsisf>:
    460a:	97 fb       	bst	r25, 7
    460c:	3e f4       	brtc	.+14     	; 0x461c <__floatsisf+0x12>
    460e:	90 95       	com	r25
    4610:	80 95       	com	r24
    4612:	70 95       	com	r23
    4614:	61 95       	neg	r22
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	8f 4f       	sbci	r24, 0xFF	; 255
    461a:	9f 4f       	sbci	r25, 0xFF	; 255
    461c:	99 23       	and	r25, r25
    461e:	a9 f0       	breq	.+42     	; 0x464a <__floatsisf+0x40>
    4620:	f9 2f       	mov	r31, r25
    4622:	96 e9       	ldi	r25, 0x96	; 150
    4624:	bb 27       	eor	r27, r27
    4626:	93 95       	inc	r25
    4628:	f6 95       	lsr	r31
    462a:	87 95       	ror	r24
    462c:	77 95       	ror	r23
    462e:	67 95       	ror	r22
    4630:	b7 95       	ror	r27
    4632:	f1 11       	cpse	r31, r1
    4634:	f8 cf       	rjmp	.-16     	; 0x4626 <__floatsisf+0x1c>
    4636:	fa f4       	brpl	.+62     	; 0x4676 <__floatsisf+0x6c>
    4638:	bb 0f       	add	r27, r27
    463a:	11 f4       	brne	.+4      	; 0x4640 <__floatsisf+0x36>
    463c:	60 ff       	sbrs	r22, 0
    463e:	1b c0       	rjmp	.+54     	; 0x4676 <__floatsisf+0x6c>
    4640:	6f 5f       	subi	r22, 0xFF	; 255
    4642:	7f 4f       	sbci	r23, 0xFF	; 255
    4644:	8f 4f       	sbci	r24, 0xFF	; 255
    4646:	9f 4f       	sbci	r25, 0xFF	; 255
    4648:	16 c0       	rjmp	.+44     	; 0x4676 <__floatsisf+0x6c>
    464a:	88 23       	and	r24, r24
    464c:	11 f0       	breq	.+4      	; 0x4652 <__floatsisf+0x48>
    464e:	96 e9       	ldi	r25, 0x96	; 150
    4650:	11 c0       	rjmp	.+34     	; 0x4674 <__floatsisf+0x6a>
    4652:	77 23       	and	r23, r23
    4654:	21 f0       	breq	.+8      	; 0x465e <__floatsisf+0x54>
    4656:	9e e8       	ldi	r25, 0x8E	; 142
    4658:	87 2f       	mov	r24, r23
    465a:	76 2f       	mov	r23, r22
    465c:	05 c0       	rjmp	.+10     	; 0x4668 <__floatsisf+0x5e>
    465e:	66 23       	and	r22, r22
    4660:	71 f0       	breq	.+28     	; 0x467e <__floatsisf+0x74>
    4662:	96 e8       	ldi	r25, 0x86	; 134
    4664:	86 2f       	mov	r24, r22
    4666:	70 e0       	ldi	r23, 0x00	; 0
    4668:	60 e0       	ldi	r22, 0x00	; 0
    466a:	2a f0       	brmi	.+10     	; 0x4676 <__floatsisf+0x6c>
    466c:	9a 95       	dec	r25
    466e:	66 0f       	add	r22, r22
    4670:	77 1f       	adc	r23, r23
    4672:	88 1f       	adc	r24, r24
    4674:	da f7       	brpl	.-10     	; 0x466c <__floatsisf+0x62>
    4676:	88 0f       	add	r24, r24
    4678:	96 95       	lsr	r25
    467a:	87 95       	ror	r24
    467c:	97 f9       	bld	r25, 7
    467e:	08 95       	ret

00004680 <__fp_inf>:
    4680:	97 f9       	bld	r25, 7
    4682:	9f 67       	ori	r25, 0x7F	; 127
    4684:	80 e8       	ldi	r24, 0x80	; 128
    4686:	70 e0       	ldi	r23, 0x00	; 0
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	08 95       	ret

0000468c <__fp_nan>:
    468c:	9f ef       	ldi	r25, 0xFF	; 255
    468e:	80 ec       	ldi	r24, 0xC0	; 192
    4690:	08 95       	ret

00004692 <__fp_pscA>:
    4692:	00 24       	eor	r0, r0
    4694:	0a 94       	dec	r0
    4696:	16 16       	cp	r1, r22
    4698:	17 06       	cpc	r1, r23
    469a:	18 06       	cpc	r1, r24
    469c:	09 06       	cpc	r0, r25
    469e:	08 95       	ret

000046a0 <__fp_pscB>:
    46a0:	00 24       	eor	r0, r0
    46a2:	0a 94       	dec	r0
    46a4:	12 16       	cp	r1, r18
    46a6:	13 06       	cpc	r1, r19
    46a8:	14 06       	cpc	r1, r20
    46aa:	05 06       	cpc	r0, r21
    46ac:	08 95       	ret

000046ae <__fp_round>:
    46ae:	09 2e       	mov	r0, r25
    46b0:	03 94       	inc	r0
    46b2:	00 0c       	add	r0, r0
    46b4:	11 f4       	brne	.+4      	; 0x46ba <__fp_round+0xc>
    46b6:	88 23       	and	r24, r24
    46b8:	52 f0       	brmi	.+20     	; 0x46ce <__fp_round+0x20>
    46ba:	bb 0f       	add	r27, r27
    46bc:	40 f4       	brcc	.+16     	; 0x46ce <__fp_round+0x20>
    46be:	bf 2b       	or	r27, r31
    46c0:	11 f4       	brne	.+4      	; 0x46c6 <__fp_round+0x18>
    46c2:	60 ff       	sbrs	r22, 0
    46c4:	04 c0       	rjmp	.+8      	; 0x46ce <__fp_round+0x20>
    46c6:	6f 5f       	subi	r22, 0xFF	; 255
    46c8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ca:	8f 4f       	sbci	r24, 0xFF	; 255
    46cc:	9f 4f       	sbci	r25, 0xFF	; 255
    46ce:	08 95       	ret

000046d0 <__fp_split3>:
    46d0:	57 fd       	sbrc	r21, 7
    46d2:	90 58       	subi	r25, 0x80	; 128
    46d4:	44 0f       	add	r20, r20
    46d6:	55 1f       	adc	r21, r21
    46d8:	59 f0       	breq	.+22     	; 0x46f0 <__fp_splitA+0x10>
    46da:	5f 3f       	cpi	r21, 0xFF	; 255
    46dc:	71 f0       	breq	.+28     	; 0x46fa <__fp_splitA+0x1a>
    46de:	47 95       	ror	r20

000046e0 <__fp_splitA>:
    46e0:	88 0f       	add	r24, r24
    46e2:	97 fb       	bst	r25, 7
    46e4:	99 1f       	adc	r25, r25
    46e6:	61 f0       	breq	.+24     	; 0x4700 <__fp_splitA+0x20>
    46e8:	9f 3f       	cpi	r25, 0xFF	; 255
    46ea:	79 f0       	breq	.+30     	; 0x470a <__fp_splitA+0x2a>
    46ec:	87 95       	ror	r24
    46ee:	08 95       	ret
    46f0:	12 16       	cp	r1, r18
    46f2:	13 06       	cpc	r1, r19
    46f4:	14 06       	cpc	r1, r20
    46f6:	55 1f       	adc	r21, r21
    46f8:	f2 cf       	rjmp	.-28     	; 0x46de <__fp_split3+0xe>
    46fa:	46 95       	lsr	r20
    46fc:	f1 df       	rcall	.-30     	; 0x46e0 <__fp_splitA>
    46fe:	08 c0       	rjmp	.+16     	; 0x4710 <__fp_splitA+0x30>
    4700:	16 16       	cp	r1, r22
    4702:	17 06       	cpc	r1, r23
    4704:	18 06       	cpc	r1, r24
    4706:	99 1f       	adc	r25, r25
    4708:	f1 cf       	rjmp	.-30     	; 0x46ec <__fp_splitA+0xc>
    470a:	86 95       	lsr	r24
    470c:	71 05       	cpc	r23, r1
    470e:	61 05       	cpc	r22, r1
    4710:	08 94       	sec
    4712:	08 95       	ret

00004714 <__fp_zero>:
    4714:	e8 94       	clt

00004716 <__fp_szero>:
    4716:	bb 27       	eor	r27, r27
    4718:	66 27       	eor	r22, r22
    471a:	77 27       	eor	r23, r23
    471c:	cb 01       	movw	r24, r22
    471e:	97 f9       	bld	r25, 7
    4720:	08 95       	ret

00004722 <__mulsf3>:
    4722:	0b d0       	rcall	.+22     	; 0x473a <__mulsf3x>
    4724:	c4 cf       	rjmp	.-120    	; 0x46ae <__fp_round>
    4726:	b5 df       	rcall	.-150    	; 0x4692 <__fp_pscA>
    4728:	28 f0       	brcs	.+10     	; 0x4734 <__mulsf3+0x12>
    472a:	ba df       	rcall	.-140    	; 0x46a0 <__fp_pscB>
    472c:	18 f0       	brcs	.+6      	; 0x4734 <__mulsf3+0x12>
    472e:	95 23       	and	r25, r21
    4730:	09 f0       	breq	.+2      	; 0x4734 <__mulsf3+0x12>
    4732:	a6 cf       	rjmp	.-180    	; 0x4680 <__fp_inf>
    4734:	ab cf       	rjmp	.-170    	; 0x468c <__fp_nan>
    4736:	11 24       	eor	r1, r1
    4738:	ee cf       	rjmp	.-36     	; 0x4716 <__fp_szero>

0000473a <__mulsf3x>:
    473a:	ca df       	rcall	.-108    	; 0x46d0 <__fp_split3>
    473c:	a0 f3       	brcs	.-24     	; 0x4726 <__mulsf3+0x4>

0000473e <__mulsf3_pse>:
    473e:	95 9f       	mul	r25, r21
    4740:	d1 f3       	breq	.-12     	; 0x4736 <__mulsf3+0x14>
    4742:	95 0f       	add	r25, r21
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	55 1f       	adc	r21, r21
    4748:	62 9f       	mul	r22, r18
    474a:	f0 01       	movw	r30, r0
    474c:	72 9f       	mul	r23, r18
    474e:	bb 27       	eor	r27, r27
    4750:	f0 0d       	add	r31, r0
    4752:	b1 1d       	adc	r27, r1
    4754:	63 9f       	mul	r22, r19
    4756:	aa 27       	eor	r26, r26
    4758:	f0 0d       	add	r31, r0
    475a:	b1 1d       	adc	r27, r1
    475c:	aa 1f       	adc	r26, r26
    475e:	64 9f       	mul	r22, r20
    4760:	66 27       	eor	r22, r22
    4762:	b0 0d       	add	r27, r0
    4764:	a1 1d       	adc	r26, r1
    4766:	66 1f       	adc	r22, r22
    4768:	82 9f       	mul	r24, r18
    476a:	22 27       	eor	r18, r18
    476c:	b0 0d       	add	r27, r0
    476e:	a1 1d       	adc	r26, r1
    4770:	62 1f       	adc	r22, r18
    4772:	73 9f       	mul	r23, r19
    4774:	b0 0d       	add	r27, r0
    4776:	a1 1d       	adc	r26, r1
    4778:	62 1f       	adc	r22, r18
    477a:	83 9f       	mul	r24, r19
    477c:	a0 0d       	add	r26, r0
    477e:	61 1d       	adc	r22, r1
    4780:	22 1f       	adc	r18, r18
    4782:	74 9f       	mul	r23, r20
    4784:	33 27       	eor	r19, r19
    4786:	a0 0d       	add	r26, r0
    4788:	61 1d       	adc	r22, r1
    478a:	23 1f       	adc	r18, r19
    478c:	84 9f       	mul	r24, r20
    478e:	60 0d       	add	r22, r0
    4790:	21 1d       	adc	r18, r1
    4792:	82 2f       	mov	r24, r18
    4794:	76 2f       	mov	r23, r22
    4796:	6a 2f       	mov	r22, r26
    4798:	11 24       	eor	r1, r1
    479a:	9f 57       	subi	r25, 0x7F	; 127
    479c:	50 40       	sbci	r21, 0x00	; 0
    479e:	8a f0       	brmi	.+34     	; 0x47c2 <__mulsf3_pse+0x84>
    47a0:	e1 f0       	breq	.+56     	; 0x47da <__mulsf3_pse+0x9c>
    47a2:	88 23       	and	r24, r24
    47a4:	4a f0       	brmi	.+18     	; 0x47b8 <__mulsf3_pse+0x7a>
    47a6:	ee 0f       	add	r30, r30
    47a8:	ff 1f       	adc	r31, r31
    47aa:	bb 1f       	adc	r27, r27
    47ac:	66 1f       	adc	r22, r22
    47ae:	77 1f       	adc	r23, r23
    47b0:	88 1f       	adc	r24, r24
    47b2:	91 50       	subi	r25, 0x01	; 1
    47b4:	50 40       	sbci	r21, 0x00	; 0
    47b6:	a9 f7       	brne	.-22     	; 0x47a2 <__mulsf3_pse+0x64>
    47b8:	9e 3f       	cpi	r25, 0xFE	; 254
    47ba:	51 05       	cpc	r21, r1
    47bc:	70 f0       	brcs	.+28     	; 0x47da <__mulsf3_pse+0x9c>
    47be:	60 cf       	rjmp	.-320    	; 0x4680 <__fp_inf>
    47c0:	aa cf       	rjmp	.-172    	; 0x4716 <__fp_szero>
    47c2:	5f 3f       	cpi	r21, 0xFF	; 255
    47c4:	ec f3       	brlt	.-6      	; 0x47c0 <__mulsf3_pse+0x82>
    47c6:	98 3e       	cpi	r25, 0xE8	; 232
    47c8:	dc f3       	brlt	.-10     	; 0x47c0 <__mulsf3_pse+0x82>
    47ca:	86 95       	lsr	r24
    47cc:	77 95       	ror	r23
    47ce:	67 95       	ror	r22
    47d0:	b7 95       	ror	r27
    47d2:	f7 95       	ror	r31
    47d4:	e7 95       	ror	r30
    47d6:	9f 5f       	subi	r25, 0xFF	; 255
    47d8:	c1 f7       	brne	.-16     	; 0x47ca <__mulsf3_pse+0x8c>
    47da:	fe 2b       	or	r31, r30
    47dc:	88 0f       	add	r24, r24
    47de:	91 1d       	adc	r25, r1
    47e0:	96 95       	lsr	r25
    47e2:	87 95       	ror	r24
    47e4:	97 f9       	bld	r25, 7
    47e6:	08 95       	ret

000047e8 <__udivmodsi4>:
    47e8:	a1 e2       	ldi	r26, 0x21	; 33
    47ea:	1a 2e       	mov	r1, r26
    47ec:	aa 1b       	sub	r26, r26
    47ee:	bb 1b       	sub	r27, r27
    47f0:	fd 01       	movw	r30, r26
    47f2:	0d c0       	rjmp	.+26     	; 0x480e <__udivmodsi4_ep>

000047f4 <__udivmodsi4_loop>:
    47f4:	aa 1f       	adc	r26, r26
    47f6:	bb 1f       	adc	r27, r27
    47f8:	ee 1f       	adc	r30, r30
    47fa:	ff 1f       	adc	r31, r31
    47fc:	a2 17       	cp	r26, r18
    47fe:	b3 07       	cpc	r27, r19
    4800:	e4 07       	cpc	r30, r20
    4802:	f5 07       	cpc	r31, r21
    4804:	20 f0       	brcs	.+8      	; 0x480e <__udivmodsi4_ep>
    4806:	a2 1b       	sub	r26, r18
    4808:	b3 0b       	sbc	r27, r19
    480a:	e4 0b       	sbc	r30, r20
    480c:	f5 0b       	sbc	r31, r21

0000480e <__udivmodsi4_ep>:
    480e:	66 1f       	adc	r22, r22
    4810:	77 1f       	adc	r23, r23
    4812:	88 1f       	adc	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	1a 94       	dec	r1
    4818:	69 f7       	brne	.-38     	; 0x47f4 <__udivmodsi4_loop>
    481a:	60 95       	com	r22
    481c:	70 95       	com	r23
    481e:	80 95       	com	r24
    4820:	90 95       	com	r25
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	bd 01       	movw	r22, r26
    4828:	cf 01       	movw	r24, r30
    482a:	08 95       	ret

0000482c <__tablejump2__>:
    482c:	ee 0f       	add	r30, r30
    482e:	ff 1f       	adc	r31, r31
    4830:	88 1f       	adc	r24, r24
    4832:	8b bf       	out	0x3b, r24	; 59
    4834:	07 90       	elpm	r0, Z+
    4836:	f6 91       	elpm	r31, Z
    4838:	e0 2d       	mov	r30, r0
    483a:	19 94       	eijmp

0000483c <calloc>:
    483c:	0f 93       	push	r16
    483e:	1f 93       	push	r17
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	86 9f       	mul	r24, r22
    4846:	80 01       	movw	r16, r0
    4848:	87 9f       	mul	r24, r23
    484a:	10 0d       	add	r17, r0
    484c:	96 9f       	mul	r25, r22
    484e:	10 0d       	add	r17, r0
    4850:	11 24       	eor	r1, r1
    4852:	c8 01       	movw	r24, r16
    4854:	0d d0       	rcall	.+26     	; 0x4870 <malloc>
    4856:	ec 01       	movw	r28, r24
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	21 f0       	breq	.+8      	; 0x4864 <calloc+0x28>
    485c:	a8 01       	movw	r20, r16
    485e:	60 e0       	ldi	r22, 0x00	; 0
    4860:	70 e0       	ldi	r23, 0x00	; 0
    4862:	34 d1       	rcall	.+616    	; 0x4acc <memset>
    4864:	ce 01       	movw	r24, r28
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	1f 91       	pop	r17
    486c:	0f 91       	pop	r16
    486e:	08 95       	ret

00004870 <malloc>:
    4870:	0f 93       	push	r16
    4872:	1f 93       	push	r17
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	82 30       	cpi	r24, 0x02	; 2
    487a:	91 05       	cpc	r25, r1
    487c:	10 f4       	brcc	.+4      	; 0x4882 <malloc+0x12>
    487e:	82 e0       	ldi	r24, 0x02	; 2
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	e0 91 41 0b 	lds	r30, 0x0B41	; 0x800b41 <__flp>
    4886:	f0 91 42 0b 	lds	r31, 0x0B42	; 0x800b42 <__flp+0x1>
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	a0 e0       	ldi	r26, 0x00	; 0
    4890:	b0 e0       	ldi	r27, 0x00	; 0
    4892:	30 97       	sbiw	r30, 0x00	; 0
    4894:	19 f1       	breq	.+70     	; 0x48dc <malloc+0x6c>
    4896:	40 81       	ld	r20, Z
    4898:	51 81       	ldd	r21, Z+1	; 0x01
    489a:	02 81       	ldd	r16, Z+2	; 0x02
    489c:	13 81       	ldd	r17, Z+3	; 0x03
    489e:	48 17       	cp	r20, r24
    48a0:	59 07       	cpc	r21, r25
    48a2:	c8 f0       	brcs	.+50     	; 0x48d6 <malloc+0x66>
    48a4:	84 17       	cp	r24, r20
    48a6:	95 07       	cpc	r25, r21
    48a8:	69 f4       	brne	.+26     	; 0x48c4 <malloc+0x54>
    48aa:	10 97       	sbiw	r26, 0x00	; 0
    48ac:	31 f0       	breq	.+12     	; 0x48ba <malloc+0x4a>
    48ae:	12 96       	adiw	r26, 0x02	; 2
    48b0:	0c 93       	st	X, r16
    48b2:	12 97       	sbiw	r26, 0x02	; 2
    48b4:	13 96       	adiw	r26, 0x03	; 3
    48b6:	1c 93       	st	X, r17
    48b8:	27 c0       	rjmp	.+78     	; 0x4908 <malloc+0x98>
    48ba:	00 93 41 0b 	sts	0x0B41, r16	; 0x800b41 <__flp>
    48be:	10 93 42 0b 	sts	0x0B42, r17	; 0x800b42 <__flp+0x1>
    48c2:	22 c0       	rjmp	.+68     	; 0x4908 <malloc+0x98>
    48c4:	21 15       	cp	r18, r1
    48c6:	31 05       	cpc	r19, r1
    48c8:	19 f0       	breq	.+6      	; 0x48d0 <malloc+0x60>
    48ca:	42 17       	cp	r20, r18
    48cc:	53 07       	cpc	r21, r19
    48ce:	18 f4       	brcc	.+6      	; 0x48d6 <malloc+0x66>
    48d0:	9a 01       	movw	r18, r20
    48d2:	bd 01       	movw	r22, r26
    48d4:	ef 01       	movw	r28, r30
    48d6:	df 01       	movw	r26, r30
    48d8:	f8 01       	movw	r30, r16
    48da:	db cf       	rjmp	.-74     	; 0x4892 <malloc+0x22>
    48dc:	21 15       	cp	r18, r1
    48de:	31 05       	cpc	r19, r1
    48e0:	f9 f0       	breq	.+62     	; 0x4920 <malloc+0xb0>
    48e2:	28 1b       	sub	r18, r24
    48e4:	39 0b       	sbc	r19, r25
    48e6:	24 30       	cpi	r18, 0x04	; 4
    48e8:	31 05       	cpc	r19, r1
    48ea:	80 f4       	brcc	.+32     	; 0x490c <malloc+0x9c>
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	9b 81       	ldd	r25, Y+3	; 0x03
    48f0:	61 15       	cp	r22, r1
    48f2:	71 05       	cpc	r23, r1
    48f4:	21 f0       	breq	.+8      	; 0x48fe <malloc+0x8e>
    48f6:	fb 01       	movw	r30, r22
    48f8:	93 83       	std	Z+3, r25	; 0x03
    48fa:	82 83       	std	Z+2, r24	; 0x02
    48fc:	04 c0       	rjmp	.+8      	; 0x4906 <malloc+0x96>
    48fe:	90 93 42 0b 	sts	0x0B42, r25	; 0x800b42 <__flp+0x1>
    4902:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <__flp>
    4906:	fe 01       	movw	r30, r28
    4908:	32 96       	adiw	r30, 0x02	; 2
    490a:	44 c0       	rjmp	.+136    	; 0x4994 <malloc+0x124>
    490c:	fe 01       	movw	r30, r28
    490e:	e2 0f       	add	r30, r18
    4910:	f3 1f       	adc	r31, r19
    4912:	81 93       	st	Z+, r24
    4914:	91 93       	st	Z+, r25
    4916:	22 50       	subi	r18, 0x02	; 2
    4918:	31 09       	sbc	r19, r1
    491a:	39 83       	std	Y+1, r19	; 0x01
    491c:	28 83       	st	Y, r18
    491e:	3a c0       	rjmp	.+116    	; 0x4994 <malloc+0x124>
    4920:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <__brkval>
    4924:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <__brkval+0x1>
    4928:	23 2b       	or	r18, r19
    492a:	41 f4       	brne	.+16     	; 0x493c <malloc+0xcc>
    492c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4930:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4934:	30 93 40 0b 	sts	0x0B40, r19	; 0x800b40 <__brkval+0x1>
    4938:	20 93 3f 0b 	sts	0x0B3F, r18	; 0x800b3f <__brkval>
    493c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4940:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4944:	21 15       	cp	r18, r1
    4946:	31 05       	cpc	r19, r1
    4948:	41 f4       	brne	.+16     	; 0x495a <malloc+0xea>
    494a:	2d b7       	in	r18, 0x3d	; 61
    494c:	3e b7       	in	r19, 0x3e	; 62
    494e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4952:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4956:	24 1b       	sub	r18, r20
    4958:	35 0b       	sbc	r19, r21
    495a:	e0 91 3f 0b 	lds	r30, 0x0B3F	; 0x800b3f <__brkval>
    495e:	f0 91 40 0b 	lds	r31, 0x0B40	; 0x800b40 <__brkval+0x1>
    4962:	e2 17       	cp	r30, r18
    4964:	f3 07       	cpc	r31, r19
    4966:	a0 f4       	brcc	.+40     	; 0x4990 <malloc+0x120>
    4968:	2e 1b       	sub	r18, r30
    496a:	3f 0b       	sbc	r19, r31
    496c:	28 17       	cp	r18, r24
    496e:	39 07       	cpc	r19, r25
    4970:	78 f0       	brcs	.+30     	; 0x4990 <malloc+0x120>
    4972:	ac 01       	movw	r20, r24
    4974:	4e 5f       	subi	r20, 0xFE	; 254
    4976:	5f 4f       	sbci	r21, 0xFF	; 255
    4978:	24 17       	cp	r18, r20
    497a:	35 07       	cpc	r19, r21
    497c:	48 f0       	brcs	.+18     	; 0x4990 <malloc+0x120>
    497e:	4e 0f       	add	r20, r30
    4980:	5f 1f       	adc	r21, r31
    4982:	50 93 40 0b 	sts	0x0B40, r21	; 0x800b40 <__brkval+0x1>
    4986:	40 93 3f 0b 	sts	0x0B3F, r20	; 0x800b3f <__brkval>
    498a:	81 93       	st	Z+, r24
    498c:	91 93       	st	Z+, r25
    498e:	02 c0       	rjmp	.+4      	; 0x4994 <malloc+0x124>
    4990:	e0 e0       	ldi	r30, 0x00	; 0
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	cf 01       	movw	r24, r30
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	08 95       	ret

000049a0 <free>:
    49a0:	cf 93       	push	r28
    49a2:	df 93       	push	r29
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	09 f4       	brne	.+2      	; 0x49aa <free+0xa>
    49a8:	81 c0       	rjmp	.+258    	; 0x4aac <free+0x10c>
    49aa:	fc 01       	movw	r30, r24
    49ac:	32 97       	sbiw	r30, 0x02	; 2
    49ae:	13 82       	std	Z+3, r1	; 0x03
    49b0:	12 82       	std	Z+2, r1	; 0x02
    49b2:	a0 91 41 0b 	lds	r26, 0x0B41	; 0x800b41 <__flp>
    49b6:	b0 91 42 0b 	lds	r27, 0x0B42	; 0x800b42 <__flp+0x1>
    49ba:	10 97       	sbiw	r26, 0x00	; 0
    49bc:	81 f4       	brne	.+32     	; 0x49de <free+0x3e>
    49be:	20 81       	ld	r18, Z
    49c0:	31 81       	ldd	r19, Z+1	; 0x01
    49c2:	82 0f       	add	r24, r18
    49c4:	93 1f       	adc	r25, r19
    49c6:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <__brkval>
    49ca:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <__brkval+0x1>
    49ce:	28 17       	cp	r18, r24
    49d0:	39 07       	cpc	r19, r25
    49d2:	51 f5       	brne	.+84     	; 0x4a28 <free+0x88>
    49d4:	f0 93 40 0b 	sts	0x0B40, r31	; 0x800b40 <__brkval+0x1>
    49d8:	e0 93 3f 0b 	sts	0x0B3F, r30	; 0x800b3f <__brkval>
    49dc:	67 c0       	rjmp	.+206    	; 0x4aac <free+0x10c>
    49de:	ed 01       	movw	r28, r26
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	ce 17       	cp	r28, r30
    49e6:	df 07       	cpc	r29, r31
    49e8:	40 f4       	brcc	.+16     	; 0x49fa <free+0x5a>
    49ea:	4a 81       	ldd	r20, Y+2	; 0x02
    49ec:	5b 81       	ldd	r21, Y+3	; 0x03
    49ee:	9e 01       	movw	r18, r28
    49f0:	41 15       	cp	r20, r1
    49f2:	51 05       	cpc	r21, r1
    49f4:	f1 f0       	breq	.+60     	; 0x4a32 <free+0x92>
    49f6:	ea 01       	movw	r28, r20
    49f8:	f5 cf       	rjmp	.-22     	; 0x49e4 <free+0x44>
    49fa:	d3 83       	std	Z+3, r29	; 0x03
    49fc:	c2 83       	std	Z+2, r28	; 0x02
    49fe:	40 81       	ld	r20, Z
    4a00:	51 81       	ldd	r21, Z+1	; 0x01
    4a02:	84 0f       	add	r24, r20
    4a04:	95 1f       	adc	r25, r21
    4a06:	c8 17       	cp	r28, r24
    4a08:	d9 07       	cpc	r29, r25
    4a0a:	59 f4       	brne	.+22     	; 0x4a22 <free+0x82>
    4a0c:	88 81       	ld	r24, Y
    4a0e:	99 81       	ldd	r25, Y+1	; 0x01
    4a10:	84 0f       	add	r24, r20
    4a12:	95 1f       	adc	r25, r21
    4a14:	02 96       	adiw	r24, 0x02	; 2
    4a16:	91 83       	std	Z+1, r25	; 0x01
    4a18:	80 83       	st	Z, r24
    4a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1e:	93 83       	std	Z+3, r25	; 0x03
    4a20:	82 83       	std	Z+2, r24	; 0x02
    4a22:	21 15       	cp	r18, r1
    4a24:	31 05       	cpc	r19, r1
    4a26:	29 f4       	brne	.+10     	; 0x4a32 <free+0x92>
    4a28:	f0 93 42 0b 	sts	0x0B42, r31	; 0x800b42 <__flp+0x1>
    4a2c:	e0 93 41 0b 	sts	0x0B41, r30	; 0x800b41 <__flp>
    4a30:	3d c0       	rjmp	.+122    	; 0x4aac <free+0x10c>
    4a32:	e9 01       	movw	r28, r18
    4a34:	fb 83       	std	Y+3, r31	; 0x03
    4a36:	ea 83       	std	Y+2, r30	; 0x02
    4a38:	49 91       	ld	r20, Y+
    4a3a:	59 91       	ld	r21, Y+
    4a3c:	c4 0f       	add	r28, r20
    4a3e:	d5 1f       	adc	r29, r21
    4a40:	ec 17       	cp	r30, r28
    4a42:	fd 07       	cpc	r31, r29
    4a44:	61 f4       	brne	.+24     	; 0x4a5e <free+0xbe>
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	84 0f       	add	r24, r20
    4a4c:	95 1f       	adc	r25, r21
    4a4e:	02 96       	adiw	r24, 0x02	; 2
    4a50:	e9 01       	movw	r28, r18
    4a52:	99 83       	std	Y+1, r25	; 0x01
    4a54:	88 83       	st	Y, r24
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	9b 83       	std	Y+3, r25	; 0x03
    4a5c:	8a 83       	std	Y+2, r24	; 0x02
    4a5e:	e0 e0       	ldi	r30, 0x00	; 0
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	12 96       	adiw	r26, 0x02	; 2
    4a64:	8d 91       	ld	r24, X+
    4a66:	9c 91       	ld	r25, X
    4a68:	13 97       	sbiw	r26, 0x03	; 3
    4a6a:	00 97       	sbiw	r24, 0x00	; 0
    4a6c:	19 f0       	breq	.+6      	; 0x4a74 <free+0xd4>
    4a6e:	fd 01       	movw	r30, r26
    4a70:	dc 01       	movw	r26, r24
    4a72:	f7 cf       	rjmp	.-18     	; 0x4a62 <free+0xc2>
    4a74:	8d 91       	ld	r24, X+
    4a76:	9c 91       	ld	r25, X
    4a78:	11 97       	sbiw	r26, 0x01	; 1
    4a7a:	9d 01       	movw	r18, r26
    4a7c:	2e 5f       	subi	r18, 0xFE	; 254
    4a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a80:	82 0f       	add	r24, r18
    4a82:	93 1f       	adc	r25, r19
    4a84:	20 91 3f 0b 	lds	r18, 0x0B3F	; 0x800b3f <__brkval>
    4a88:	30 91 40 0b 	lds	r19, 0x0B40	; 0x800b40 <__brkval+0x1>
    4a8c:	28 17       	cp	r18, r24
    4a8e:	39 07       	cpc	r19, r25
    4a90:	69 f4       	brne	.+26     	; 0x4aac <free+0x10c>
    4a92:	30 97       	sbiw	r30, 0x00	; 0
    4a94:	29 f4       	brne	.+10     	; 0x4aa0 <free+0x100>
    4a96:	10 92 42 0b 	sts	0x0B42, r1	; 0x800b42 <__flp+0x1>
    4a9a:	10 92 41 0b 	sts	0x0B41, r1	; 0x800b41 <__flp>
    4a9e:	02 c0       	rjmp	.+4      	; 0x4aa4 <free+0x104>
    4aa0:	13 82       	std	Z+3, r1	; 0x03
    4aa2:	12 82       	std	Z+2, r1	; 0x02
    4aa4:	b0 93 40 0b 	sts	0x0B40, r27	; 0x800b40 <__brkval+0x1>
    4aa8:	a0 93 3f 0b 	sts	0x0B3F, r26	; 0x800b3f <__brkval>
    4aac:	df 91       	pop	r29
    4aae:	cf 91       	pop	r28
    4ab0:	08 95       	ret

00004ab2 <abort>:
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	f8 94       	cli
    4ab8:	58 c3       	rjmp	.+1712   	; 0x516a <_exit>

00004aba <memcpy>:
    4aba:	fb 01       	movw	r30, r22
    4abc:	dc 01       	movw	r26, r24
    4abe:	02 c0       	rjmp	.+4      	; 0x4ac4 <memcpy+0xa>
    4ac0:	01 90       	ld	r0, Z+
    4ac2:	0d 92       	st	X+, r0
    4ac4:	41 50       	subi	r20, 0x01	; 1
    4ac6:	50 40       	sbci	r21, 0x00	; 0
    4ac8:	d8 f7       	brcc	.-10     	; 0x4ac0 <memcpy+0x6>
    4aca:	08 95       	ret

00004acc <memset>:
    4acc:	dc 01       	movw	r26, r24
    4ace:	01 c0       	rjmp	.+2      	; 0x4ad2 <memset+0x6>
    4ad0:	6d 93       	st	X+, r22
    4ad2:	41 50       	subi	r20, 0x01	; 1
    4ad4:	50 40       	sbci	r21, 0x00	; 0
    4ad6:	e0 f7       	brcc	.-8      	; 0x4ad0 <memset+0x4>
    4ad8:	08 95       	ret

00004ada <strcat>:
    4ada:	fb 01       	movw	r30, r22
    4adc:	dc 01       	movw	r26, r24
    4ade:	0d 90       	ld	r0, X+
    4ae0:	00 20       	and	r0, r0
    4ae2:	e9 f7       	brne	.-6      	; 0x4ade <strcat+0x4>
    4ae4:	11 97       	sbiw	r26, 0x01	; 1
    4ae6:	01 90       	ld	r0, Z+
    4ae8:	0d 92       	st	X+, r0
    4aea:	00 20       	and	r0, r0
    4aec:	e1 f7       	brne	.-8      	; 0x4ae6 <strcat+0xc>
    4aee:	08 95       	ret

00004af0 <strcpy>:
    4af0:	fb 01       	movw	r30, r22
    4af2:	dc 01       	movw	r26, r24
    4af4:	01 90       	ld	r0, Z+
    4af6:	0d 92       	st	X+, r0
    4af8:	00 20       	and	r0, r0
    4afa:	e1 f7       	brne	.-8      	; 0x4af4 <strcpy+0x4>
    4afc:	08 95       	ret

00004afe <strncasecmp>:
    4afe:	fb 01       	movw	r30, r22
    4b00:	dc 01       	movw	r26, r24
    4b02:	41 50       	subi	r20, 0x01	; 1
    4b04:	50 40       	sbci	r21, 0x00	; 0
    4b06:	88 f0       	brcs	.+34     	; 0x4b2a <strncasecmp+0x2c>
    4b08:	8d 91       	ld	r24, X+
    4b0a:	81 34       	cpi	r24, 0x41	; 65
    4b0c:	1c f0       	brlt	.+6      	; 0x4b14 <strncasecmp+0x16>
    4b0e:	8b 35       	cpi	r24, 0x5B	; 91
    4b10:	0c f4       	brge	.+2      	; 0x4b14 <strncasecmp+0x16>
    4b12:	80 5e       	subi	r24, 0xE0	; 224
    4b14:	61 91       	ld	r22, Z+
    4b16:	61 34       	cpi	r22, 0x41	; 65
    4b18:	1c f0       	brlt	.+6      	; 0x4b20 <strncasecmp+0x22>
    4b1a:	6b 35       	cpi	r22, 0x5B	; 91
    4b1c:	0c f4       	brge	.+2      	; 0x4b20 <strncasecmp+0x22>
    4b1e:	60 5e       	subi	r22, 0xE0	; 224
    4b20:	86 1b       	sub	r24, r22
    4b22:	61 11       	cpse	r22, r1
    4b24:	71 f3       	breq	.-36     	; 0x4b02 <strncasecmp+0x4>
    4b26:	99 0b       	sbc	r25, r25
    4b28:	08 95       	ret
    4b2a:	88 1b       	sub	r24, r24
    4b2c:	fc cf       	rjmp	.-8      	; 0x4b26 <strncasecmp+0x28>

00004b2e <printf>:
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    4b36:	ae 01       	movw	r20, r28
    4b38:	4a 5f       	subi	r20, 0xFA	; 250
    4b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b3c:	fa 01       	movw	r30, r20
    4b3e:	61 91       	ld	r22, Z+
    4b40:	71 91       	ld	r23, Z+
    4b42:	af 01       	movw	r20, r30
    4b44:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <__iob+0x2>
    4b48:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <__iob+0x3>
    4b4c:	61 d0       	rcall	.+194    	; 0x4c10 <vfprintf>
    4b4e:	df 91       	pop	r29
    4b50:	cf 91       	pop	r28
    4b52:	08 95       	ret

00004b54 <puts>:
    4b54:	0f 93       	push	r16
    4b56:	1f 93       	push	r17
    4b58:	cf 93       	push	r28
    4b5a:	df 93       	push	r29
    4b5c:	e0 91 45 0b 	lds	r30, 0x0B45	; 0x800b45 <__iob+0x2>
    4b60:	f0 91 46 0b 	lds	r31, 0x0B46	; 0x800b46 <__iob+0x3>
    4b64:	23 81       	ldd	r18, Z+3	; 0x03
    4b66:	21 ff       	sbrs	r18, 1
    4b68:	1b c0       	rjmp	.+54     	; 0x4ba0 <puts+0x4c>
    4b6a:	8c 01       	movw	r16, r24
    4b6c:	d0 e0       	ldi	r29, 0x00	; 0
    4b6e:	c0 e0       	ldi	r28, 0x00	; 0
    4b70:	f8 01       	movw	r30, r16
    4b72:	81 91       	ld	r24, Z+
    4b74:	8f 01       	movw	r16, r30
    4b76:	60 91 45 0b 	lds	r22, 0x0B45	; 0x800b45 <__iob+0x2>
    4b7a:	70 91 46 0b 	lds	r23, 0x0B46	; 0x800b46 <__iob+0x3>
    4b7e:	db 01       	movw	r26, r22
    4b80:	18 96       	adiw	r26, 0x08	; 8
    4b82:	ed 91       	ld	r30, X+
    4b84:	fc 91       	ld	r31, X
    4b86:	19 97       	sbiw	r26, 0x09	; 9
    4b88:	88 23       	and	r24, r24
    4b8a:	31 f0       	breq	.+12     	; 0x4b98 <puts+0x44>
    4b8c:	19 95       	eicall
    4b8e:	89 2b       	or	r24, r25
    4b90:	79 f3       	breq	.-34     	; 0x4b70 <puts+0x1c>
    4b92:	df ef       	ldi	r29, 0xFF	; 255
    4b94:	cf ef       	ldi	r28, 0xFF	; 255
    4b96:	ec cf       	rjmp	.-40     	; 0x4b70 <puts+0x1c>
    4b98:	8a e0       	ldi	r24, 0x0A	; 10
    4b9a:	19 95       	eicall
    4b9c:	89 2b       	or	r24, r25
    4b9e:	19 f0       	breq	.+6      	; 0x4ba6 <puts+0x52>
    4ba0:	8f ef       	ldi	r24, 0xFF	; 255
    4ba2:	9f ef       	ldi	r25, 0xFF	; 255
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <puts+0x56>
    4ba6:	8d 2f       	mov	r24, r29
    4ba8:	9c 2f       	mov	r25, r28
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	1f 91       	pop	r17
    4bb0:	0f 91       	pop	r16
    4bb2:	08 95       	ret

00004bb4 <sprintf>:
    4bb4:	0f 93       	push	r16
    4bb6:	1f 93       	push	r17
    4bb8:	cf 93       	push	r28
    4bba:	df 93       	push	r29
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	2e 97       	sbiw	r28, 0x0e	; 14
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	0e 89       	ldd	r16, Y+22	; 0x16
    4bce:	1f 89       	ldd	r17, Y+23	; 0x17
    4bd0:	86 e0       	ldi	r24, 0x06	; 6
    4bd2:	8c 83       	std	Y+4, r24	; 0x04
    4bd4:	1a 83       	std	Y+2, r17	; 0x02
    4bd6:	09 83       	std	Y+1, r16	; 0x01
    4bd8:	8f ef       	ldi	r24, 0xFF	; 255
    4bda:	9f e7       	ldi	r25, 0x7F	; 127
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	8d 83       	std	Y+5, r24	; 0x05
    4be0:	ae 01       	movw	r20, r28
    4be2:	46 5e       	subi	r20, 0xE6	; 230
    4be4:	5f 4f       	sbci	r21, 0xFF	; 255
    4be6:	68 8d       	ldd	r22, Y+24	; 0x18
    4be8:	79 8d       	ldd	r23, Y+25	; 0x19
    4bea:	ce 01       	movw	r24, r28
    4bec:	01 96       	adiw	r24, 0x01	; 1
    4bee:	10 d0       	rcall	.+32     	; 0x4c10 <vfprintf>
    4bf0:	ef 81       	ldd	r30, Y+7	; 0x07
    4bf2:	f8 85       	ldd	r31, Y+8	; 0x08
    4bf4:	e0 0f       	add	r30, r16
    4bf6:	f1 1f       	adc	r31, r17
    4bf8:	10 82       	st	Z, r1
    4bfa:	2e 96       	adiw	r28, 0x0e	; 14
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	de bf       	out	0x3e, r29	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	08 95       	ret

00004c10 <vfprintf>:
    4c10:	2f 92       	push	r2
    4c12:	3f 92       	push	r3
    4c14:	4f 92       	push	r4
    4c16:	5f 92       	push	r5
    4c18:	6f 92       	push	r6
    4c1a:	7f 92       	push	r7
    4c1c:	8f 92       	push	r8
    4c1e:	9f 92       	push	r9
    4c20:	af 92       	push	r10
    4c22:	bf 92       	push	r11
    4c24:	cf 92       	push	r12
    4c26:	df 92       	push	r13
    4c28:	ef 92       	push	r14
    4c2a:	ff 92       	push	r15
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	2b 97       	sbiw	r28, 0x0b	; 11
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	f8 94       	cli
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	cd bf       	out	0x3d, r28	; 61
    4c44:	6c 01       	movw	r12, r24
    4c46:	7b 01       	movw	r14, r22
    4c48:	8a 01       	movw	r16, r20
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	17 82       	std	Z+7, r1	; 0x07
    4c4e:	16 82       	std	Z+6, r1	; 0x06
    4c50:	83 81       	ldd	r24, Z+3	; 0x03
    4c52:	81 ff       	sbrs	r24, 1
    4c54:	bf c1       	rjmp	.+894    	; 0x4fd4 <vfprintf+0x3c4>
    4c56:	ce 01       	movw	r24, r28
    4c58:	01 96       	adiw	r24, 0x01	; 1
    4c5a:	3c 01       	movw	r6, r24
    4c5c:	f6 01       	movw	r30, r12
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	f7 01       	movw	r30, r14
    4c62:	93 fd       	sbrc	r25, 3
    4c64:	85 91       	lpm	r24, Z+
    4c66:	93 ff       	sbrs	r25, 3
    4c68:	81 91       	ld	r24, Z+
    4c6a:	7f 01       	movw	r14, r30
    4c6c:	88 23       	and	r24, r24
    4c6e:	09 f4       	brne	.+2      	; 0x4c72 <vfprintf+0x62>
    4c70:	ad c1       	rjmp	.+858    	; 0x4fcc <vfprintf+0x3bc>
    4c72:	85 32       	cpi	r24, 0x25	; 37
    4c74:	39 f4       	brne	.+14     	; 0x4c84 <vfprintf+0x74>
    4c76:	93 fd       	sbrc	r25, 3
    4c78:	85 91       	lpm	r24, Z+
    4c7a:	93 ff       	sbrs	r25, 3
    4c7c:	81 91       	ld	r24, Z+
    4c7e:	7f 01       	movw	r14, r30
    4c80:	85 32       	cpi	r24, 0x25	; 37
    4c82:	21 f4       	brne	.+8      	; 0x4c8c <vfprintf+0x7c>
    4c84:	b6 01       	movw	r22, r12
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	d6 d1       	rcall	.+940    	; 0x5036 <fputc>
    4c8a:	e8 cf       	rjmp	.-48     	; 0x4c5c <vfprintf+0x4c>
    4c8c:	91 2c       	mov	r9, r1
    4c8e:	21 2c       	mov	r2, r1
    4c90:	31 2c       	mov	r3, r1
    4c92:	ff e1       	ldi	r31, 0x1F	; 31
    4c94:	f3 15       	cp	r31, r3
    4c96:	d8 f0       	brcs	.+54     	; 0x4cce <vfprintf+0xbe>
    4c98:	8b 32       	cpi	r24, 0x2B	; 43
    4c9a:	79 f0       	breq	.+30     	; 0x4cba <vfprintf+0xaa>
    4c9c:	38 f4       	brcc	.+14     	; 0x4cac <vfprintf+0x9c>
    4c9e:	80 32       	cpi	r24, 0x20	; 32
    4ca0:	79 f0       	breq	.+30     	; 0x4cc0 <vfprintf+0xb0>
    4ca2:	83 32       	cpi	r24, 0x23	; 35
    4ca4:	a1 f4       	brne	.+40     	; 0x4cce <vfprintf+0xbe>
    4ca6:	23 2d       	mov	r18, r3
    4ca8:	20 61       	ori	r18, 0x10	; 16
    4caa:	1d c0       	rjmp	.+58     	; 0x4ce6 <vfprintf+0xd6>
    4cac:	8d 32       	cpi	r24, 0x2D	; 45
    4cae:	61 f0       	breq	.+24     	; 0x4cc8 <vfprintf+0xb8>
    4cb0:	80 33       	cpi	r24, 0x30	; 48
    4cb2:	69 f4       	brne	.+26     	; 0x4cce <vfprintf+0xbe>
    4cb4:	23 2d       	mov	r18, r3
    4cb6:	21 60       	ori	r18, 0x01	; 1
    4cb8:	16 c0       	rjmp	.+44     	; 0x4ce6 <vfprintf+0xd6>
    4cba:	83 2d       	mov	r24, r3
    4cbc:	82 60       	ori	r24, 0x02	; 2
    4cbe:	38 2e       	mov	r3, r24
    4cc0:	e3 2d       	mov	r30, r3
    4cc2:	e4 60       	ori	r30, 0x04	; 4
    4cc4:	3e 2e       	mov	r3, r30
    4cc6:	2a c0       	rjmp	.+84     	; 0x4d1c <vfprintf+0x10c>
    4cc8:	f3 2d       	mov	r31, r3
    4cca:	f8 60       	ori	r31, 0x08	; 8
    4ccc:	1d c0       	rjmp	.+58     	; 0x4d08 <vfprintf+0xf8>
    4cce:	37 fc       	sbrc	r3, 7
    4cd0:	2d c0       	rjmp	.+90     	; 0x4d2c <vfprintf+0x11c>
    4cd2:	20 ed       	ldi	r18, 0xD0	; 208
    4cd4:	28 0f       	add	r18, r24
    4cd6:	2a 30       	cpi	r18, 0x0A	; 10
    4cd8:	40 f0       	brcs	.+16     	; 0x4cea <vfprintf+0xda>
    4cda:	8e 32       	cpi	r24, 0x2E	; 46
    4cdc:	b9 f4       	brne	.+46     	; 0x4d0c <vfprintf+0xfc>
    4cde:	36 fc       	sbrc	r3, 6
    4ce0:	75 c1       	rjmp	.+746    	; 0x4fcc <vfprintf+0x3bc>
    4ce2:	23 2d       	mov	r18, r3
    4ce4:	20 64       	ori	r18, 0x40	; 64
    4ce6:	32 2e       	mov	r3, r18
    4ce8:	19 c0       	rjmp	.+50     	; 0x4d1c <vfprintf+0x10c>
    4cea:	36 fe       	sbrs	r3, 6
    4cec:	06 c0       	rjmp	.+12     	; 0x4cfa <vfprintf+0xea>
    4cee:	8a e0       	ldi	r24, 0x0A	; 10
    4cf0:	98 9e       	mul	r9, r24
    4cf2:	20 0d       	add	r18, r0
    4cf4:	11 24       	eor	r1, r1
    4cf6:	92 2e       	mov	r9, r18
    4cf8:	11 c0       	rjmp	.+34     	; 0x4d1c <vfprintf+0x10c>
    4cfa:	ea e0       	ldi	r30, 0x0A	; 10
    4cfc:	2e 9e       	mul	r2, r30
    4cfe:	20 0d       	add	r18, r0
    4d00:	11 24       	eor	r1, r1
    4d02:	22 2e       	mov	r2, r18
    4d04:	f3 2d       	mov	r31, r3
    4d06:	f0 62       	ori	r31, 0x20	; 32
    4d08:	3f 2e       	mov	r3, r31
    4d0a:	08 c0       	rjmp	.+16     	; 0x4d1c <vfprintf+0x10c>
    4d0c:	8c 36       	cpi	r24, 0x6C	; 108
    4d0e:	21 f4       	brne	.+8      	; 0x4d18 <vfprintf+0x108>
    4d10:	83 2d       	mov	r24, r3
    4d12:	80 68       	ori	r24, 0x80	; 128
    4d14:	38 2e       	mov	r3, r24
    4d16:	02 c0       	rjmp	.+4      	; 0x4d1c <vfprintf+0x10c>
    4d18:	88 36       	cpi	r24, 0x68	; 104
    4d1a:	41 f4       	brne	.+16     	; 0x4d2c <vfprintf+0x11c>
    4d1c:	f7 01       	movw	r30, r14
    4d1e:	93 fd       	sbrc	r25, 3
    4d20:	85 91       	lpm	r24, Z+
    4d22:	93 ff       	sbrs	r25, 3
    4d24:	81 91       	ld	r24, Z+
    4d26:	7f 01       	movw	r14, r30
    4d28:	81 11       	cpse	r24, r1
    4d2a:	b3 cf       	rjmp	.-154    	; 0x4c92 <vfprintf+0x82>
    4d2c:	98 2f       	mov	r25, r24
    4d2e:	9f 7d       	andi	r25, 0xDF	; 223
    4d30:	95 54       	subi	r25, 0x45	; 69
    4d32:	93 30       	cpi	r25, 0x03	; 3
    4d34:	28 f4       	brcc	.+10     	; 0x4d40 <vfprintf+0x130>
    4d36:	0c 5f       	subi	r16, 0xFC	; 252
    4d38:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3a:	9f e3       	ldi	r25, 0x3F	; 63
    4d3c:	99 83       	std	Y+1, r25	; 0x01
    4d3e:	0d c0       	rjmp	.+26     	; 0x4d5a <vfprintf+0x14a>
    4d40:	83 36       	cpi	r24, 0x63	; 99
    4d42:	31 f0       	breq	.+12     	; 0x4d50 <vfprintf+0x140>
    4d44:	83 37       	cpi	r24, 0x73	; 115
    4d46:	71 f0       	breq	.+28     	; 0x4d64 <vfprintf+0x154>
    4d48:	83 35       	cpi	r24, 0x53	; 83
    4d4a:	09 f0       	breq	.+2      	; 0x4d4e <vfprintf+0x13e>
    4d4c:	55 c0       	rjmp	.+170    	; 0x4df8 <vfprintf+0x1e8>
    4d4e:	20 c0       	rjmp	.+64     	; 0x4d90 <vfprintf+0x180>
    4d50:	f8 01       	movw	r30, r16
    4d52:	80 81       	ld	r24, Z
    4d54:	89 83       	std	Y+1, r24	; 0x01
    4d56:	0e 5f       	subi	r16, 0xFE	; 254
    4d58:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5a:	88 24       	eor	r8, r8
    4d5c:	83 94       	inc	r8
    4d5e:	91 2c       	mov	r9, r1
    4d60:	53 01       	movw	r10, r6
    4d62:	12 c0       	rjmp	.+36     	; 0x4d88 <vfprintf+0x178>
    4d64:	28 01       	movw	r4, r16
    4d66:	f2 e0       	ldi	r31, 0x02	; 2
    4d68:	4f 0e       	add	r4, r31
    4d6a:	51 1c       	adc	r5, r1
    4d6c:	f8 01       	movw	r30, r16
    4d6e:	a0 80       	ld	r10, Z
    4d70:	b1 80       	ldd	r11, Z+1	; 0x01
    4d72:	36 fe       	sbrs	r3, 6
    4d74:	03 c0       	rjmp	.+6      	; 0x4d7c <vfprintf+0x16c>
    4d76:	69 2d       	mov	r22, r9
    4d78:	70 e0       	ldi	r23, 0x00	; 0
    4d7a:	02 c0       	rjmp	.+4      	; 0x4d80 <vfprintf+0x170>
    4d7c:	6f ef       	ldi	r22, 0xFF	; 255
    4d7e:	7f ef       	ldi	r23, 0xFF	; 255
    4d80:	c5 01       	movw	r24, r10
    4d82:	4e d1       	rcall	.+668    	; 0x5020 <strnlen>
    4d84:	4c 01       	movw	r8, r24
    4d86:	82 01       	movw	r16, r4
    4d88:	f3 2d       	mov	r31, r3
    4d8a:	ff 77       	andi	r31, 0x7F	; 127
    4d8c:	3f 2e       	mov	r3, r31
    4d8e:	15 c0       	rjmp	.+42     	; 0x4dba <vfprintf+0x1aa>
    4d90:	28 01       	movw	r4, r16
    4d92:	22 e0       	ldi	r18, 0x02	; 2
    4d94:	42 0e       	add	r4, r18
    4d96:	51 1c       	adc	r5, r1
    4d98:	f8 01       	movw	r30, r16
    4d9a:	a0 80       	ld	r10, Z
    4d9c:	b1 80       	ldd	r11, Z+1	; 0x01
    4d9e:	36 fe       	sbrs	r3, 6
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <vfprintf+0x198>
    4da2:	69 2d       	mov	r22, r9
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <vfprintf+0x19c>
    4da8:	6f ef       	ldi	r22, 0xFF	; 255
    4daa:	7f ef       	ldi	r23, 0xFF	; 255
    4dac:	c5 01       	movw	r24, r10
    4dae:	2d d1       	rcall	.+602    	; 0x500a <strnlen_P>
    4db0:	4c 01       	movw	r8, r24
    4db2:	f3 2d       	mov	r31, r3
    4db4:	f0 68       	ori	r31, 0x80	; 128
    4db6:	3f 2e       	mov	r3, r31
    4db8:	82 01       	movw	r16, r4
    4dba:	33 fc       	sbrc	r3, 3
    4dbc:	19 c0       	rjmp	.+50     	; 0x4df0 <vfprintf+0x1e0>
    4dbe:	82 2d       	mov	r24, r2
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	88 16       	cp	r8, r24
    4dc4:	99 06       	cpc	r9, r25
    4dc6:	a0 f4       	brcc	.+40     	; 0x4df0 <vfprintf+0x1e0>
    4dc8:	b6 01       	movw	r22, r12
    4dca:	80 e2       	ldi	r24, 0x20	; 32
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	33 d1       	rcall	.+614    	; 0x5036 <fputc>
    4dd0:	2a 94       	dec	r2
    4dd2:	f5 cf       	rjmp	.-22     	; 0x4dbe <vfprintf+0x1ae>
    4dd4:	f5 01       	movw	r30, r10
    4dd6:	37 fc       	sbrc	r3, 7
    4dd8:	85 91       	lpm	r24, Z+
    4dda:	37 fe       	sbrs	r3, 7
    4ddc:	81 91       	ld	r24, Z+
    4dde:	5f 01       	movw	r10, r30
    4de0:	b6 01       	movw	r22, r12
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	28 d1       	rcall	.+592    	; 0x5036 <fputc>
    4de6:	21 10       	cpse	r2, r1
    4de8:	2a 94       	dec	r2
    4dea:	21 e0       	ldi	r18, 0x01	; 1
    4dec:	82 1a       	sub	r8, r18
    4dee:	91 08       	sbc	r9, r1
    4df0:	81 14       	cp	r8, r1
    4df2:	91 04       	cpc	r9, r1
    4df4:	79 f7       	brne	.-34     	; 0x4dd4 <vfprintf+0x1c4>
    4df6:	e1 c0       	rjmp	.+450    	; 0x4fba <vfprintf+0x3aa>
    4df8:	84 36       	cpi	r24, 0x64	; 100
    4dfa:	11 f0       	breq	.+4      	; 0x4e00 <vfprintf+0x1f0>
    4dfc:	89 36       	cpi	r24, 0x69	; 105
    4dfe:	39 f5       	brne	.+78     	; 0x4e4e <vfprintf+0x23e>
    4e00:	f8 01       	movw	r30, r16
    4e02:	37 fe       	sbrs	r3, 7
    4e04:	07 c0       	rjmp	.+14     	; 0x4e14 <vfprintf+0x204>
    4e06:	60 81       	ld	r22, Z
    4e08:	71 81       	ldd	r23, Z+1	; 0x01
    4e0a:	82 81       	ldd	r24, Z+2	; 0x02
    4e0c:	93 81       	ldd	r25, Z+3	; 0x03
    4e0e:	0c 5f       	subi	r16, 0xFC	; 252
    4e10:	1f 4f       	sbci	r17, 0xFF	; 255
    4e12:	08 c0       	rjmp	.+16     	; 0x4e24 <vfprintf+0x214>
    4e14:	60 81       	ld	r22, Z
    4e16:	71 81       	ldd	r23, Z+1	; 0x01
    4e18:	07 2e       	mov	r0, r23
    4e1a:	00 0c       	add	r0, r0
    4e1c:	88 0b       	sbc	r24, r24
    4e1e:	99 0b       	sbc	r25, r25
    4e20:	0e 5f       	subi	r16, 0xFE	; 254
    4e22:	1f 4f       	sbci	r17, 0xFF	; 255
    4e24:	f3 2d       	mov	r31, r3
    4e26:	ff 76       	andi	r31, 0x6F	; 111
    4e28:	3f 2e       	mov	r3, r31
    4e2a:	97 ff       	sbrs	r25, 7
    4e2c:	09 c0       	rjmp	.+18     	; 0x4e40 <vfprintf+0x230>
    4e2e:	90 95       	com	r25
    4e30:	80 95       	com	r24
    4e32:	70 95       	com	r23
    4e34:	61 95       	neg	r22
    4e36:	7f 4f       	sbci	r23, 0xFF	; 255
    4e38:	8f 4f       	sbci	r24, 0xFF	; 255
    4e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e3c:	f0 68       	ori	r31, 0x80	; 128
    4e3e:	3f 2e       	mov	r3, r31
    4e40:	2a e0       	ldi	r18, 0x0A	; 10
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	a3 01       	movw	r20, r6
    4e46:	33 d1       	rcall	.+614    	; 0x50ae <__ultoa_invert>
    4e48:	88 2e       	mov	r8, r24
    4e4a:	86 18       	sub	r8, r6
    4e4c:	44 c0       	rjmp	.+136    	; 0x4ed6 <vfprintf+0x2c6>
    4e4e:	85 37       	cpi	r24, 0x75	; 117
    4e50:	31 f4       	brne	.+12     	; 0x4e5e <vfprintf+0x24e>
    4e52:	23 2d       	mov	r18, r3
    4e54:	2f 7e       	andi	r18, 0xEF	; 239
    4e56:	b2 2e       	mov	r11, r18
    4e58:	2a e0       	ldi	r18, 0x0A	; 10
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	25 c0       	rjmp	.+74     	; 0x4ea8 <vfprintf+0x298>
    4e5e:	93 2d       	mov	r25, r3
    4e60:	99 7f       	andi	r25, 0xF9	; 249
    4e62:	b9 2e       	mov	r11, r25
    4e64:	8f 36       	cpi	r24, 0x6F	; 111
    4e66:	c1 f0       	breq	.+48     	; 0x4e98 <vfprintf+0x288>
    4e68:	18 f4       	brcc	.+6      	; 0x4e70 <vfprintf+0x260>
    4e6a:	88 35       	cpi	r24, 0x58	; 88
    4e6c:	79 f0       	breq	.+30     	; 0x4e8c <vfprintf+0x27c>
    4e6e:	ae c0       	rjmp	.+348    	; 0x4fcc <vfprintf+0x3bc>
    4e70:	80 37       	cpi	r24, 0x70	; 112
    4e72:	19 f0       	breq	.+6      	; 0x4e7a <vfprintf+0x26a>
    4e74:	88 37       	cpi	r24, 0x78	; 120
    4e76:	21 f0       	breq	.+8      	; 0x4e80 <vfprintf+0x270>
    4e78:	a9 c0       	rjmp	.+338    	; 0x4fcc <vfprintf+0x3bc>
    4e7a:	e9 2f       	mov	r30, r25
    4e7c:	e0 61       	ori	r30, 0x10	; 16
    4e7e:	be 2e       	mov	r11, r30
    4e80:	b4 fe       	sbrs	r11, 4
    4e82:	0d c0       	rjmp	.+26     	; 0x4e9e <vfprintf+0x28e>
    4e84:	fb 2d       	mov	r31, r11
    4e86:	f4 60       	ori	r31, 0x04	; 4
    4e88:	bf 2e       	mov	r11, r31
    4e8a:	09 c0       	rjmp	.+18     	; 0x4e9e <vfprintf+0x28e>
    4e8c:	34 fe       	sbrs	r3, 4
    4e8e:	0a c0       	rjmp	.+20     	; 0x4ea4 <vfprintf+0x294>
    4e90:	29 2f       	mov	r18, r25
    4e92:	26 60       	ori	r18, 0x06	; 6
    4e94:	b2 2e       	mov	r11, r18
    4e96:	06 c0       	rjmp	.+12     	; 0x4ea4 <vfprintf+0x294>
    4e98:	28 e0       	ldi	r18, 0x08	; 8
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	05 c0       	rjmp	.+10     	; 0x4ea8 <vfprintf+0x298>
    4e9e:	20 e1       	ldi	r18, 0x10	; 16
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	02 c0       	rjmp	.+4      	; 0x4ea8 <vfprintf+0x298>
    4ea4:	20 e1       	ldi	r18, 0x10	; 16
    4ea6:	32 e0       	ldi	r19, 0x02	; 2
    4ea8:	f8 01       	movw	r30, r16
    4eaa:	b7 fe       	sbrs	r11, 7
    4eac:	07 c0       	rjmp	.+14     	; 0x4ebc <vfprintf+0x2ac>
    4eae:	60 81       	ld	r22, Z
    4eb0:	71 81       	ldd	r23, Z+1	; 0x01
    4eb2:	82 81       	ldd	r24, Z+2	; 0x02
    4eb4:	93 81       	ldd	r25, Z+3	; 0x03
    4eb6:	0c 5f       	subi	r16, 0xFC	; 252
    4eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eba:	06 c0       	rjmp	.+12     	; 0x4ec8 <vfprintf+0x2b8>
    4ebc:	60 81       	ld	r22, Z
    4ebe:	71 81       	ldd	r23, Z+1	; 0x01
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	0e 5f       	subi	r16, 0xFE	; 254
    4ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec8:	a3 01       	movw	r20, r6
    4eca:	f1 d0       	rcall	.+482    	; 0x50ae <__ultoa_invert>
    4ecc:	88 2e       	mov	r8, r24
    4ece:	86 18       	sub	r8, r6
    4ed0:	fb 2d       	mov	r31, r11
    4ed2:	ff 77       	andi	r31, 0x7F	; 127
    4ed4:	3f 2e       	mov	r3, r31
    4ed6:	36 fe       	sbrs	r3, 6
    4ed8:	0d c0       	rjmp	.+26     	; 0x4ef4 <vfprintf+0x2e4>
    4eda:	23 2d       	mov	r18, r3
    4edc:	2e 7f       	andi	r18, 0xFE	; 254
    4ede:	a2 2e       	mov	r10, r18
    4ee0:	89 14       	cp	r8, r9
    4ee2:	58 f4       	brcc	.+22     	; 0x4efa <vfprintf+0x2ea>
    4ee4:	34 fe       	sbrs	r3, 4
    4ee6:	0b c0       	rjmp	.+22     	; 0x4efe <vfprintf+0x2ee>
    4ee8:	32 fc       	sbrc	r3, 2
    4eea:	09 c0       	rjmp	.+18     	; 0x4efe <vfprintf+0x2ee>
    4eec:	83 2d       	mov	r24, r3
    4eee:	8e 7e       	andi	r24, 0xEE	; 238
    4ef0:	a8 2e       	mov	r10, r24
    4ef2:	05 c0       	rjmp	.+10     	; 0x4efe <vfprintf+0x2ee>
    4ef4:	b8 2c       	mov	r11, r8
    4ef6:	a3 2c       	mov	r10, r3
    4ef8:	03 c0       	rjmp	.+6      	; 0x4f00 <vfprintf+0x2f0>
    4efa:	b8 2c       	mov	r11, r8
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <vfprintf+0x2f0>
    4efe:	b9 2c       	mov	r11, r9
    4f00:	a4 fe       	sbrs	r10, 4
    4f02:	0f c0       	rjmp	.+30     	; 0x4f22 <vfprintf+0x312>
    4f04:	fe 01       	movw	r30, r28
    4f06:	e8 0d       	add	r30, r8
    4f08:	f1 1d       	adc	r31, r1
    4f0a:	80 81       	ld	r24, Z
    4f0c:	80 33       	cpi	r24, 0x30	; 48
    4f0e:	21 f4       	brne	.+8      	; 0x4f18 <vfprintf+0x308>
    4f10:	9a 2d       	mov	r25, r10
    4f12:	99 7e       	andi	r25, 0xE9	; 233
    4f14:	a9 2e       	mov	r10, r25
    4f16:	09 c0       	rjmp	.+18     	; 0x4f2a <vfprintf+0x31a>
    4f18:	a2 fe       	sbrs	r10, 2
    4f1a:	06 c0       	rjmp	.+12     	; 0x4f28 <vfprintf+0x318>
    4f1c:	b3 94       	inc	r11
    4f1e:	b3 94       	inc	r11
    4f20:	04 c0       	rjmp	.+8      	; 0x4f2a <vfprintf+0x31a>
    4f22:	8a 2d       	mov	r24, r10
    4f24:	86 78       	andi	r24, 0x86	; 134
    4f26:	09 f0       	breq	.+2      	; 0x4f2a <vfprintf+0x31a>
    4f28:	b3 94       	inc	r11
    4f2a:	a3 fc       	sbrc	r10, 3
    4f2c:	10 c0       	rjmp	.+32     	; 0x4f4e <vfprintf+0x33e>
    4f2e:	a0 fe       	sbrs	r10, 0
    4f30:	06 c0       	rjmp	.+12     	; 0x4f3e <vfprintf+0x32e>
    4f32:	b2 14       	cp	r11, r2
    4f34:	80 f4       	brcc	.+32     	; 0x4f56 <vfprintf+0x346>
    4f36:	28 0c       	add	r2, r8
    4f38:	92 2c       	mov	r9, r2
    4f3a:	9b 18       	sub	r9, r11
    4f3c:	0d c0       	rjmp	.+26     	; 0x4f58 <vfprintf+0x348>
    4f3e:	b2 14       	cp	r11, r2
    4f40:	58 f4       	brcc	.+22     	; 0x4f58 <vfprintf+0x348>
    4f42:	b6 01       	movw	r22, r12
    4f44:	80 e2       	ldi	r24, 0x20	; 32
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	76 d0       	rcall	.+236    	; 0x5036 <fputc>
    4f4a:	b3 94       	inc	r11
    4f4c:	f8 cf       	rjmp	.-16     	; 0x4f3e <vfprintf+0x32e>
    4f4e:	b2 14       	cp	r11, r2
    4f50:	18 f4       	brcc	.+6      	; 0x4f58 <vfprintf+0x348>
    4f52:	2b 18       	sub	r2, r11
    4f54:	02 c0       	rjmp	.+4      	; 0x4f5a <vfprintf+0x34a>
    4f56:	98 2c       	mov	r9, r8
    4f58:	21 2c       	mov	r2, r1
    4f5a:	a4 fe       	sbrs	r10, 4
    4f5c:	0f c0       	rjmp	.+30     	; 0x4f7c <vfprintf+0x36c>
    4f5e:	b6 01       	movw	r22, r12
    4f60:	80 e3       	ldi	r24, 0x30	; 48
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	68 d0       	rcall	.+208    	; 0x5036 <fputc>
    4f66:	a2 fe       	sbrs	r10, 2
    4f68:	16 c0       	rjmp	.+44     	; 0x4f96 <vfprintf+0x386>
    4f6a:	a1 fc       	sbrc	r10, 1
    4f6c:	03 c0       	rjmp	.+6      	; 0x4f74 <vfprintf+0x364>
    4f6e:	88 e7       	ldi	r24, 0x78	; 120
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	02 c0       	rjmp	.+4      	; 0x4f78 <vfprintf+0x368>
    4f74:	88 e5       	ldi	r24, 0x58	; 88
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	b6 01       	movw	r22, r12
    4f7a:	0c c0       	rjmp	.+24     	; 0x4f94 <vfprintf+0x384>
    4f7c:	8a 2d       	mov	r24, r10
    4f7e:	86 78       	andi	r24, 0x86	; 134
    4f80:	51 f0       	breq	.+20     	; 0x4f96 <vfprintf+0x386>
    4f82:	a1 fe       	sbrs	r10, 1
    4f84:	02 c0       	rjmp	.+4      	; 0x4f8a <vfprintf+0x37a>
    4f86:	8b e2       	ldi	r24, 0x2B	; 43
    4f88:	01 c0       	rjmp	.+2      	; 0x4f8c <vfprintf+0x37c>
    4f8a:	80 e2       	ldi	r24, 0x20	; 32
    4f8c:	a7 fc       	sbrc	r10, 7
    4f8e:	8d e2       	ldi	r24, 0x2D	; 45
    4f90:	b6 01       	movw	r22, r12
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	50 d0       	rcall	.+160    	; 0x5036 <fputc>
    4f96:	89 14       	cp	r8, r9
    4f98:	30 f4       	brcc	.+12     	; 0x4fa6 <vfprintf+0x396>
    4f9a:	b6 01       	movw	r22, r12
    4f9c:	80 e3       	ldi	r24, 0x30	; 48
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	4a d0       	rcall	.+148    	; 0x5036 <fputc>
    4fa2:	9a 94       	dec	r9
    4fa4:	f8 cf       	rjmp	.-16     	; 0x4f96 <vfprintf+0x386>
    4fa6:	8a 94       	dec	r8
    4fa8:	f3 01       	movw	r30, r6
    4faa:	e8 0d       	add	r30, r8
    4fac:	f1 1d       	adc	r31, r1
    4fae:	80 81       	ld	r24, Z
    4fb0:	b6 01       	movw	r22, r12
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	40 d0       	rcall	.+128    	; 0x5036 <fputc>
    4fb6:	81 10       	cpse	r8, r1
    4fb8:	f6 cf       	rjmp	.-20     	; 0x4fa6 <vfprintf+0x396>
    4fba:	22 20       	and	r2, r2
    4fbc:	09 f4       	brne	.+2      	; 0x4fc0 <vfprintf+0x3b0>
    4fbe:	4e ce       	rjmp	.-868    	; 0x4c5c <vfprintf+0x4c>
    4fc0:	b6 01       	movw	r22, r12
    4fc2:	80 e2       	ldi	r24, 0x20	; 32
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	37 d0       	rcall	.+110    	; 0x5036 <fputc>
    4fc8:	2a 94       	dec	r2
    4fca:	f7 cf       	rjmp	.-18     	; 0x4fba <vfprintf+0x3aa>
    4fcc:	f6 01       	movw	r30, r12
    4fce:	86 81       	ldd	r24, Z+6	; 0x06
    4fd0:	97 81       	ldd	r25, Z+7	; 0x07
    4fd2:	02 c0       	rjmp	.+4      	; 0x4fd8 <vfprintf+0x3c8>
    4fd4:	8f ef       	ldi	r24, 0xFF	; 255
    4fd6:	9f ef       	ldi	r25, 0xFF	; 255
    4fd8:	2b 96       	adiw	r28, 0x0b	; 11
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	f8 94       	cli
    4fde:	de bf       	out	0x3e, r29	; 62
    4fe0:	0f be       	out	0x3f, r0	; 63
    4fe2:	cd bf       	out	0x3d, r28	; 61
    4fe4:	df 91       	pop	r29
    4fe6:	cf 91       	pop	r28
    4fe8:	1f 91       	pop	r17
    4fea:	0f 91       	pop	r16
    4fec:	ff 90       	pop	r15
    4fee:	ef 90       	pop	r14
    4ff0:	df 90       	pop	r13
    4ff2:	cf 90       	pop	r12
    4ff4:	bf 90       	pop	r11
    4ff6:	af 90       	pop	r10
    4ff8:	9f 90       	pop	r9
    4ffa:	8f 90       	pop	r8
    4ffc:	7f 90       	pop	r7
    4ffe:	6f 90       	pop	r6
    5000:	5f 90       	pop	r5
    5002:	4f 90       	pop	r4
    5004:	3f 90       	pop	r3
    5006:	2f 90       	pop	r2
    5008:	08 95       	ret

0000500a <strnlen_P>:
    500a:	fc 01       	movw	r30, r24
    500c:	05 90       	lpm	r0, Z+
    500e:	61 50       	subi	r22, 0x01	; 1
    5010:	70 40       	sbci	r23, 0x00	; 0
    5012:	01 10       	cpse	r0, r1
    5014:	d8 f7       	brcc	.-10     	; 0x500c <strnlen_P+0x2>
    5016:	80 95       	com	r24
    5018:	90 95       	com	r25
    501a:	8e 0f       	add	r24, r30
    501c:	9f 1f       	adc	r25, r31
    501e:	08 95       	ret

00005020 <strnlen>:
    5020:	fc 01       	movw	r30, r24
    5022:	61 50       	subi	r22, 0x01	; 1
    5024:	70 40       	sbci	r23, 0x00	; 0
    5026:	01 90       	ld	r0, Z+
    5028:	01 10       	cpse	r0, r1
    502a:	d8 f7       	brcc	.-10     	; 0x5022 <strnlen+0x2>
    502c:	80 95       	com	r24
    502e:	90 95       	com	r25
    5030:	8e 0f       	add	r24, r30
    5032:	9f 1f       	adc	r25, r31
    5034:	08 95       	ret

00005036 <fputc>:
    5036:	0f 93       	push	r16
    5038:	1f 93       	push	r17
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	fb 01       	movw	r30, r22
    5040:	23 81       	ldd	r18, Z+3	; 0x03
    5042:	21 fd       	sbrc	r18, 1
    5044:	03 c0       	rjmp	.+6      	; 0x504c <fputc+0x16>
    5046:	8f ef       	ldi	r24, 0xFF	; 255
    5048:	9f ef       	ldi	r25, 0xFF	; 255
    504a:	2c c0       	rjmp	.+88     	; 0x50a4 <fputc+0x6e>
    504c:	22 ff       	sbrs	r18, 2
    504e:	16 c0       	rjmp	.+44     	; 0x507c <fputc+0x46>
    5050:	46 81       	ldd	r20, Z+6	; 0x06
    5052:	57 81       	ldd	r21, Z+7	; 0x07
    5054:	24 81       	ldd	r18, Z+4	; 0x04
    5056:	35 81       	ldd	r19, Z+5	; 0x05
    5058:	42 17       	cp	r20, r18
    505a:	53 07       	cpc	r21, r19
    505c:	44 f4       	brge	.+16     	; 0x506e <fputc+0x38>
    505e:	a0 81       	ld	r26, Z
    5060:	b1 81       	ldd	r27, Z+1	; 0x01
    5062:	9d 01       	movw	r18, r26
    5064:	2f 5f       	subi	r18, 0xFF	; 255
    5066:	3f 4f       	sbci	r19, 0xFF	; 255
    5068:	31 83       	std	Z+1, r19	; 0x01
    506a:	20 83       	st	Z, r18
    506c:	8c 93       	st	X, r24
    506e:	26 81       	ldd	r18, Z+6	; 0x06
    5070:	37 81       	ldd	r19, Z+7	; 0x07
    5072:	2f 5f       	subi	r18, 0xFF	; 255
    5074:	3f 4f       	sbci	r19, 0xFF	; 255
    5076:	37 83       	std	Z+7, r19	; 0x07
    5078:	26 83       	std	Z+6, r18	; 0x06
    507a:	14 c0       	rjmp	.+40     	; 0x50a4 <fputc+0x6e>
    507c:	8b 01       	movw	r16, r22
    507e:	ec 01       	movw	r28, r24
    5080:	fb 01       	movw	r30, r22
    5082:	00 84       	ldd	r0, Z+8	; 0x08
    5084:	f1 85       	ldd	r31, Z+9	; 0x09
    5086:	e0 2d       	mov	r30, r0
    5088:	19 95       	eicall
    508a:	89 2b       	or	r24, r25
    508c:	e1 f6       	brne	.-72     	; 0x5046 <fputc+0x10>
    508e:	d8 01       	movw	r26, r16
    5090:	16 96       	adiw	r26, 0x06	; 6
    5092:	8d 91       	ld	r24, X+
    5094:	9c 91       	ld	r25, X
    5096:	17 97       	sbiw	r26, 0x07	; 7
    5098:	01 96       	adiw	r24, 0x01	; 1
    509a:	17 96       	adiw	r26, 0x07	; 7
    509c:	9c 93       	st	X, r25
    509e:	8e 93       	st	-X, r24
    50a0:	16 97       	sbiw	r26, 0x06	; 6
    50a2:	ce 01       	movw	r24, r28
    50a4:	df 91       	pop	r29
    50a6:	cf 91       	pop	r28
    50a8:	1f 91       	pop	r17
    50aa:	0f 91       	pop	r16
    50ac:	08 95       	ret

000050ae <__ultoa_invert>:
    50ae:	fa 01       	movw	r30, r20
    50b0:	aa 27       	eor	r26, r26
    50b2:	28 30       	cpi	r18, 0x08	; 8
    50b4:	51 f1       	breq	.+84     	; 0x510a <__ultoa_invert+0x5c>
    50b6:	20 31       	cpi	r18, 0x10	; 16
    50b8:	81 f1       	breq	.+96     	; 0x511a <__ultoa_invert+0x6c>
    50ba:	e8 94       	clt
    50bc:	6f 93       	push	r22
    50be:	6e 7f       	andi	r22, 0xFE	; 254
    50c0:	6e 5f       	subi	r22, 0xFE	; 254
    50c2:	7f 4f       	sbci	r23, 0xFF	; 255
    50c4:	8f 4f       	sbci	r24, 0xFF	; 255
    50c6:	9f 4f       	sbci	r25, 0xFF	; 255
    50c8:	af 4f       	sbci	r26, 0xFF	; 255
    50ca:	b1 e0       	ldi	r27, 0x01	; 1
    50cc:	3e d0       	rcall	.+124    	; 0x514a <__ultoa_invert+0x9c>
    50ce:	b4 e0       	ldi	r27, 0x04	; 4
    50d0:	3c d0       	rcall	.+120    	; 0x514a <__ultoa_invert+0x9c>
    50d2:	67 0f       	add	r22, r23
    50d4:	78 1f       	adc	r23, r24
    50d6:	89 1f       	adc	r24, r25
    50d8:	9a 1f       	adc	r25, r26
    50da:	a1 1d       	adc	r26, r1
    50dc:	68 0f       	add	r22, r24
    50de:	79 1f       	adc	r23, r25
    50e0:	8a 1f       	adc	r24, r26
    50e2:	91 1d       	adc	r25, r1
    50e4:	a1 1d       	adc	r26, r1
    50e6:	6a 0f       	add	r22, r26
    50e8:	71 1d       	adc	r23, r1
    50ea:	81 1d       	adc	r24, r1
    50ec:	91 1d       	adc	r25, r1
    50ee:	a1 1d       	adc	r26, r1
    50f0:	20 d0       	rcall	.+64     	; 0x5132 <__ultoa_invert+0x84>
    50f2:	09 f4       	brne	.+2      	; 0x50f6 <__ultoa_invert+0x48>
    50f4:	68 94       	set
    50f6:	3f 91       	pop	r19
    50f8:	2a e0       	ldi	r18, 0x0A	; 10
    50fa:	26 9f       	mul	r18, r22
    50fc:	11 24       	eor	r1, r1
    50fe:	30 19       	sub	r19, r0
    5100:	30 5d       	subi	r19, 0xD0	; 208
    5102:	31 93       	st	Z+, r19
    5104:	de f6       	brtc	.-74     	; 0x50bc <__ultoa_invert+0xe>
    5106:	cf 01       	movw	r24, r30
    5108:	08 95       	ret
    510a:	46 2f       	mov	r20, r22
    510c:	47 70       	andi	r20, 0x07	; 7
    510e:	40 5d       	subi	r20, 0xD0	; 208
    5110:	41 93       	st	Z+, r20
    5112:	b3 e0       	ldi	r27, 0x03	; 3
    5114:	0f d0       	rcall	.+30     	; 0x5134 <__ultoa_invert+0x86>
    5116:	c9 f7       	brne	.-14     	; 0x510a <__ultoa_invert+0x5c>
    5118:	f6 cf       	rjmp	.-20     	; 0x5106 <__ultoa_invert+0x58>
    511a:	46 2f       	mov	r20, r22
    511c:	4f 70       	andi	r20, 0x0F	; 15
    511e:	40 5d       	subi	r20, 0xD0	; 208
    5120:	4a 33       	cpi	r20, 0x3A	; 58
    5122:	18 f0       	brcs	.+6      	; 0x512a <__ultoa_invert+0x7c>
    5124:	49 5d       	subi	r20, 0xD9	; 217
    5126:	31 fd       	sbrc	r19, 1
    5128:	40 52       	subi	r20, 0x20	; 32
    512a:	41 93       	st	Z+, r20
    512c:	02 d0       	rcall	.+4      	; 0x5132 <__ultoa_invert+0x84>
    512e:	a9 f7       	brne	.-22     	; 0x511a <__ultoa_invert+0x6c>
    5130:	ea cf       	rjmp	.-44     	; 0x5106 <__ultoa_invert+0x58>
    5132:	b4 e0       	ldi	r27, 0x04	; 4
    5134:	a6 95       	lsr	r26
    5136:	97 95       	ror	r25
    5138:	87 95       	ror	r24
    513a:	77 95       	ror	r23
    513c:	67 95       	ror	r22
    513e:	ba 95       	dec	r27
    5140:	c9 f7       	brne	.-14     	; 0x5134 <__ultoa_invert+0x86>
    5142:	00 97       	sbiw	r24, 0x00	; 0
    5144:	61 05       	cpc	r22, r1
    5146:	71 05       	cpc	r23, r1
    5148:	08 95       	ret
    514a:	9b 01       	movw	r18, r22
    514c:	ac 01       	movw	r20, r24
    514e:	0a 2e       	mov	r0, r26
    5150:	06 94       	lsr	r0
    5152:	57 95       	ror	r21
    5154:	47 95       	ror	r20
    5156:	37 95       	ror	r19
    5158:	27 95       	ror	r18
    515a:	ba 95       	dec	r27
    515c:	c9 f7       	brne	.-14     	; 0x5150 <__ultoa_invert+0xa2>
    515e:	62 0f       	add	r22, r18
    5160:	73 1f       	adc	r23, r19
    5162:	84 1f       	adc	r24, r20
    5164:	95 1f       	adc	r25, r21
    5166:	a0 1d       	adc	r26, r0
    5168:	08 95       	ret

0000516a <_exit>:
    516a:	f8 94       	cli

0000516c <__stop_program>:
    516c:	ff cf       	rjmp	.-2      	; 0x516c <__stop_program>
